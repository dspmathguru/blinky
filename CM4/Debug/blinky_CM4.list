
blinky_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa20  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0810fcc0  0810fcc0  0001fcc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810fdfc  0810fdfc  0001fdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810fe04  0810fe04  0001fe04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810fe08  0810fe08  0001fe08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  10000000  0810fe0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  10000088  0810fe94  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  100000e8  0810fef4  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005694  10000148  0810ff54  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  100057dc  0810ff54  000257dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048b69  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008850  00000000  00000000  00068ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003390  00000000  00000000  00071538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003030  00000000  00000000  000748c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00051473  00000000  00000000  000778f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00048933  00000000  00000000  000c8d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001eb9cc  00000000  00000000  0011169e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002fd06a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ddf8  00000000  00000000  002fd0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000148 	.word	0x10000148
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810fca8 	.word	0x0810fca8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000014c 	.word	0x1000014c
 81002dc:	0810fca8 	.word	0x0810fca8

081002e0 <__aeabi_uldivmod>:
 81002e0:	b953      	cbnz	r3, 81002f8 <__aeabi_uldivmod+0x18>
 81002e2:	b94a      	cbnz	r2, 81002f8 <__aeabi_uldivmod+0x18>
 81002e4:	2900      	cmp	r1, #0
 81002e6:	bf08      	it	eq
 81002e8:	2800      	cmpeq	r0, #0
 81002ea:	bf1c      	itt	ne
 81002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 81002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 81002f4:	f000 b974 	b.w	81005e0 <__aeabi_idiv0>
 81002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 81002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100300:	f000 f806 	bl	8100310 <__udivmoddi4>
 8100304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810030c:	b004      	add	sp, #16
 810030e:	4770      	bx	lr

08100310 <__udivmoddi4>:
 8100310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100314:	9d08      	ldr	r5, [sp, #32]
 8100316:	4604      	mov	r4, r0
 8100318:	468e      	mov	lr, r1
 810031a:	2b00      	cmp	r3, #0
 810031c:	d14d      	bne.n	81003ba <__udivmoddi4+0xaa>
 810031e:	428a      	cmp	r2, r1
 8100320:	4694      	mov	ip, r2
 8100322:	d969      	bls.n	81003f8 <__udivmoddi4+0xe8>
 8100324:	fab2 f282 	clz	r2, r2
 8100328:	b152      	cbz	r2, 8100340 <__udivmoddi4+0x30>
 810032a:	fa01 f302 	lsl.w	r3, r1, r2
 810032e:	f1c2 0120 	rsb	r1, r2, #32
 8100332:	fa20 f101 	lsr.w	r1, r0, r1
 8100336:	fa0c fc02 	lsl.w	ip, ip, r2
 810033a:	ea41 0e03 	orr.w	lr, r1, r3
 810033e:	4094      	lsls	r4, r2
 8100340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100344:	0c21      	lsrs	r1, r4, #16
 8100346:	fbbe f6f8 	udiv	r6, lr, r8
 810034a:	fa1f f78c 	uxth.w	r7, ip
 810034e:	fb08 e316 	mls	r3, r8, r6, lr
 8100352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100356:	fb06 f107 	mul.w	r1, r6, r7
 810035a:	4299      	cmp	r1, r3
 810035c:	d90a      	bls.n	8100374 <__udivmoddi4+0x64>
 810035e:	eb1c 0303 	adds.w	r3, ip, r3
 8100362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8100366:	f080 811f 	bcs.w	81005a8 <__udivmoddi4+0x298>
 810036a:	4299      	cmp	r1, r3
 810036c:	f240 811c 	bls.w	81005a8 <__udivmoddi4+0x298>
 8100370:	3e02      	subs	r6, #2
 8100372:	4463      	add	r3, ip
 8100374:	1a5b      	subs	r3, r3, r1
 8100376:	b2a4      	uxth	r4, r4
 8100378:	fbb3 f0f8 	udiv	r0, r3, r8
 810037c:	fb08 3310 	mls	r3, r8, r0, r3
 8100380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100384:	fb00 f707 	mul.w	r7, r0, r7
 8100388:	42a7      	cmp	r7, r4
 810038a:	d90a      	bls.n	81003a2 <__udivmoddi4+0x92>
 810038c:	eb1c 0404 	adds.w	r4, ip, r4
 8100390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8100394:	f080 810a 	bcs.w	81005ac <__udivmoddi4+0x29c>
 8100398:	42a7      	cmp	r7, r4
 810039a:	f240 8107 	bls.w	81005ac <__udivmoddi4+0x29c>
 810039e:	4464      	add	r4, ip
 81003a0:	3802      	subs	r0, #2
 81003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 81003a6:	1be4      	subs	r4, r4, r7
 81003a8:	2600      	movs	r6, #0
 81003aa:	b11d      	cbz	r5, 81003b4 <__udivmoddi4+0xa4>
 81003ac:	40d4      	lsrs	r4, r2
 81003ae:	2300      	movs	r3, #0
 81003b0:	e9c5 4300 	strd	r4, r3, [r5]
 81003b4:	4631      	mov	r1, r6
 81003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ba:	428b      	cmp	r3, r1
 81003bc:	d909      	bls.n	81003d2 <__udivmoddi4+0xc2>
 81003be:	2d00      	cmp	r5, #0
 81003c0:	f000 80ef 	beq.w	81005a2 <__udivmoddi4+0x292>
 81003c4:	2600      	movs	r6, #0
 81003c6:	e9c5 0100 	strd	r0, r1, [r5]
 81003ca:	4630      	mov	r0, r6
 81003cc:	4631      	mov	r1, r6
 81003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003d2:	fab3 f683 	clz	r6, r3
 81003d6:	2e00      	cmp	r6, #0
 81003d8:	d14a      	bne.n	8100470 <__udivmoddi4+0x160>
 81003da:	428b      	cmp	r3, r1
 81003dc:	d302      	bcc.n	81003e4 <__udivmoddi4+0xd4>
 81003de:	4282      	cmp	r2, r0
 81003e0:	f200 80f9 	bhi.w	81005d6 <__udivmoddi4+0x2c6>
 81003e4:	1a84      	subs	r4, r0, r2
 81003e6:	eb61 0303 	sbc.w	r3, r1, r3
 81003ea:	2001      	movs	r0, #1
 81003ec:	469e      	mov	lr, r3
 81003ee:	2d00      	cmp	r5, #0
 81003f0:	d0e0      	beq.n	81003b4 <__udivmoddi4+0xa4>
 81003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 81003f6:	e7dd      	b.n	81003b4 <__udivmoddi4+0xa4>
 81003f8:	b902      	cbnz	r2, 81003fc <__udivmoddi4+0xec>
 81003fa:	deff      	udf	#255	; 0xff
 81003fc:	fab2 f282 	clz	r2, r2
 8100400:	2a00      	cmp	r2, #0
 8100402:	f040 8092 	bne.w	810052a <__udivmoddi4+0x21a>
 8100406:	eba1 010c 	sub.w	r1, r1, ip
 810040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810040e:	fa1f fe8c 	uxth.w	lr, ip
 8100412:	2601      	movs	r6, #1
 8100414:	0c20      	lsrs	r0, r4, #16
 8100416:	fbb1 f3f7 	udiv	r3, r1, r7
 810041a:	fb07 1113 	mls	r1, r7, r3, r1
 810041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100422:	fb0e f003 	mul.w	r0, lr, r3
 8100426:	4288      	cmp	r0, r1
 8100428:	d908      	bls.n	810043c <__udivmoddi4+0x12c>
 810042a:	eb1c 0101 	adds.w	r1, ip, r1
 810042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8100432:	d202      	bcs.n	810043a <__udivmoddi4+0x12a>
 8100434:	4288      	cmp	r0, r1
 8100436:	f200 80cb 	bhi.w	81005d0 <__udivmoddi4+0x2c0>
 810043a:	4643      	mov	r3, r8
 810043c:	1a09      	subs	r1, r1, r0
 810043e:	b2a4      	uxth	r4, r4
 8100440:	fbb1 f0f7 	udiv	r0, r1, r7
 8100444:	fb07 1110 	mls	r1, r7, r0, r1
 8100448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 810044c:	fb0e fe00 	mul.w	lr, lr, r0
 8100450:	45a6      	cmp	lr, r4
 8100452:	d908      	bls.n	8100466 <__udivmoddi4+0x156>
 8100454:	eb1c 0404 	adds.w	r4, ip, r4
 8100458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 810045c:	d202      	bcs.n	8100464 <__udivmoddi4+0x154>
 810045e:	45a6      	cmp	lr, r4
 8100460:	f200 80bb 	bhi.w	81005da <__udivmoddi4+0x2ca>
 8100464:	4608      	mov	r0, r1
 8100466:	eba4 040e 	sub.w	r4, r4, lr
 810046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810046e:	e79c      	b.n	81003aa <__udivmoddi4+0x9a>
 8100470:	f1c6 0720 	rsb	r7, r6, #32
 8100474:	40b3      	lsls	r3, r6
 8100476:	fa22 fc07 	lsr.w	ip, r2, r7
 810047a:	ea4c 0c03 	orr.w	ip, ip, r3
 810047e:	fa20 f407 	lsr.w	r4, r0, r7
 8100482:	fa01 f306 	lsl.w	r3, r1, r6
 8100486:	431c      	orrs	r4, r3
 8100488:	40f9      	lsrs	r1, r7
 810048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810048e:	fa00 f306 	lsl.w	r3, r0, r6
 8100492:	fbb1 f8f9 	udiv	r8, r1, r9
 8100496:	0c20      	lsrs	r0, r4, #16
 8100498:	fa1f fe8c 	uxth.w	lr, ip
 810049c:	fb09 1118 	mls	r1, r9, r8, r1
 81004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81004a4:	fb08 f00e 	mul.w	r0, r8, lr
 81004a8:	4288      	cmp	r0, r1
 81004aa:	fa02 f206 	lsl.w	r2, r2, r6
 81004ae:	d90b      	bls.n	81004c8 <__udivmoddi4+0x1b8>
 81004b0:	eb1c 0101 	adds.w	r1, ip, r1
 81004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 81004b8:	f080 8088 	bcs.w	81005cc <__udivmoddi4+0x2bc>
 81004bc:	4288      	cmp	r0, r1
 81004be:	f240 8085 	bls.w	81005cc <__udivmoddi4+0x2bc>
 81004c2:	f1a8 0802 	sub.w	r8, r8, #2
 81004c6:	4461      	add	r1, ip
 81004c8:	1a09      	subs	r1, r1, r0
 81004ca:	b2a4      	uxth	r4, r4
 81004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 81004d0:	fb09 1110 	mls	r1, r9, r0, r1
 81004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 81004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 81004dc:	458e      	cmp	lr, r1
 81004de:	d908      	bls.n	81004f2 <__udivmoddi4+0x1e2>
 81004e0:	eb1c 0101 	adds.w	r1, ip, r1
 81004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 81004e8:	d26c      	bcs.n	81005c4 <__udivmoddi4+0x2b4>
 81004ea:	458e      	cmp	lr, r1
 81004ec:	d96a      	bls.n	81005c4 <__udivmoddi4+0x2b4>
 81004ee:	3802      	subs	r0, #2
 81004f0:	4461      	add	r1, ip
 81004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 81004f6:	fba0 9402 	umull	r9, r4, r0, r2
 81004fa:	eba1 010e 	sub.w	r1, r1, lr
 81004fe:	42a1      	cmp	r1, r4
 8100500:	46c8      	mov	r8, r9
 8100502:	46a6      	mov	lr, r4
 8100504:	d356      	bcc.n	81005b4 <__udivmoddi4+0x2a4>
 8100506:	d053      	beq.n	81005b0 <__udivmoddi4+0x2a0>
 8100508:	b15d      	cbz	r5, 8100522 <__udivmoddi4+0x212>
 810050a:	ebb3 0208 	subs.w	r2, r3, r8
 810050e:	eb61 010e 	sbc.w	r1, r1, lr
 8100512:	fa01 f707 	lsl.w	r7, r1, r7
 8100516:	fa22 f306 	lsr.w	r3, r2, r6
 810051a:	40f1      	lsrs	r1, r6
 810051c:	431f      	orrs	r7, r3
 810051e:	e9c5 7100 	strd	r7, r1, [r5]
 8100522:	2600      	movs	r6, #0
 8100524:	4631      	mov	r1, r6
 8100526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810052a:	f1c2 0320 	rsb	r3, r2, #32
 810052e:	40d8      	lsrs	r0, r3
 8100530:	fa0c fc02 	lsl.w	ip, ip, r2
 8100534:	fa21 f303 	lsr.w	r3, r1, r3
 8100538:	4091      	lsls	r1, r2
 810053a:	4301      	orrs	r1, r0
 810053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100540:	fa1f fe8c 	uxth.w	lr, ip
 8100544:	fbb3 f0f7 	udiv	r0, r3, r7
 8100548:	fb07 3610 	mls	r6, r7, r0, r3
 810054c:	0c0b      	lsrs	r3, r1, #16
 810054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100552:	fb00 f60e 	mul.w	r6, r0, lr
 8100556:	429e      	cmp	r6, r3
 8100558:	fa04 f402 	lsl.w	r4, r4, r2
 810055c:	d908      	bls.n	8100570 <__udivmoddi4+0x260>
 810055e:	eb1c 0303 	adds.w	r3, ip, r3
 8100562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8100566:	d22f      	bcs.n	81005c8 <__udivmoddi4+0x2b8>
 8100568:	429e      	cmp	r6, r3
 810056a:	d92d      	bls.n	81005c8 <__udivmoddi4+0x2b8>
 810056c:	3802      	subs	r0, #2
 810056e:	4463      	add	r3, ip
 8100570:	1b9b      	subs	r3, r3, r6
 8100572:	b289      	uxth	r1, r1
 8100574:	fbb3 f6f7 	udiv	r6, r3, r7
 8100578:	fb07 3316 	mls	r3, r7, r6, r3
 810057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100580:	fb06 f30e 	mul.w	r3, r6, lr
 8100584:	428b      	cmp	r3, r1
 8100586:	d908      	bls.n	810059a <__udivmoddi4+0x28a>
 8100588:	eb1c 0101 	adds.w	r1, ip, r1
 810058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8100590:	d216      	bcs.n	81005c0 <__udivmoddi4+0x2b0>
 8100592:	428b      	cmp	r3, r1
 8100594:	d914      	bls.n	81005c0 <__udivmoddi4+0x2b0>
 8100596:	3e02      	subs	r6, #2
 8100598:	4461      	add	r1, ip
 810059a:	1ac9      	subs	r1, r1, r3
 810059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81005a0:	e738      	b.n	8100414 <__udivmoddi4+0x104>
 81005a2:	462e      	mov	r6, r5
 81005a4:	4628      	mov	r0, r5
 81005a6:	e705      	b.n	81003b4 <__udivmoddi4+0xa4>
 81005a8:	4606      	mov	r6, r0
 81005aa:	e6e3      	b.n	8100374 <__udivmoddi4+0x64>
 81005ac:	4618      	mov	r0, r3
 81005ae:	e6f8      	b.n	81003a2 <__udivmoddi4+0x92>
 81005b0:	454b      	cmp	r3, r9
 81005b2:	d2a9      	bcs.n	8100508 <__udivmoddi4+0x1f8>
 81005b4:	ebb9 0802 	subs.w	r8, r9, r2
 81005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 81005bc:	3801      	subs	r0, #1
 81005be:	e7a3      	b.n	8100508 <__udivmoddi4+0x1f8>
 81005c0:	4646      	mov	r6, r8
 81005c2:	e7ea      	b.n	810059a <__udivmoddi4+0x28a>
 81005c4:	4620      	mov	r0, r4
 81005c6:	e794      	b.n	81004f2 <__udivmoddi4+0x1e2>
 81005c8:	4640      	mov	r0, r8
 81005ca:	e7d1      	b.n	8100570 <__udivmoddi4+0x260>
 81005cc:	46d0      	mov	r8, sl
 81005ce:	e77b      	b.n	81004c8 <__udivmoddi4+0x1b8>
 81005d0:	3b02      	subs	r3, #2
 81005d2:	4461      	add	r1, ip
 81005d4:	e732      	b.n	810043c <__udivmoddi4+0x12c>
 81005d6:	4630      	mov	r0, r6
 81005d8:	e709      	b.n	81003ee <__udivmoddi4+0xde>
 81005da:	4464      	add	r4, ip
 81005dc:	3802      	subs	r0, #2
 81005de:	e742      	b.n	8100466 <__udivmoddi4+0x156>

081005e0 <__aeabi_idiv0>:
 81005e0:	4770      	bx	lr
 81005e2:	bf00      	nop

081005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005e4:	b480      	push	{r7}
 81005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005e8:	4b09      	ldr	r3, [pc, #36]	; (8100610 <SystemInit+0x2c>)
 81005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005ee:	4a08      	ldr	r2, [pc, #32]	; (8100610 <SystemInit+0x2c>)
 81005f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005f8:	4b05      	ldr	r3, [pc, #20]	; (8100610 <SystemInit+0x2c>)
 81005fa:	691b      	ldr	r3, [r3, #16]
 81005fc:	4a04      	ldr	r2, [pc, #16]	; (8100610 <SystemInit+0x2c>)
 81005fe:	f043 0310 	orr.w	r3, r3, #16
 8100602:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100604:	bf00      	nop
 8100606:	46bd      	mov	sp, r7
 8100608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810060c:	4770      	bx	lr
 810060e:	bf00      	nop
 8100610:	e000ed00 	.word	0xe000ed00

08100614 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8100614:	b580      	push	{r7, lr}
 8100616:	b08a      	sub	sp, #40	; 0x28
 8100618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810061a:	f107 031c 	add.w	r3, r7, #28
 810061e:	2200      	movs	r2, #0
 8100620:	601a      	str	r2, [r3, #0]
 8100622:	605a      	str	r2, [r3, #4]
 8100624:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100626:	463b      	mov	r3, r7
 8100628:	2200      	movs	r2, #0
 810062a:	601a      	str	r2, [r3, #0]
 810062c:	605a      	str	r2, [r3, #4]
 810062e:	609a      	str	r2, [r3, #8]
 8100630:	60da      	str	r2, [r3, #12]
 8100632:	611a      	str	r2, [r3, #16]
 8100634:	615a      	str	r2, [r3, #20]
 8100636:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8100638:	4b30      	ldr	r3, [pc, #192]	; (81006fc <MX_ADC1_Init+0xe8>)
 810063a:	4a31      	ldr	r2, [pc, #196]	; (8100700 <MX_ADC1_Init+0xec>)
 810063c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 810063e:	4b2f      	ldr	r3, [pc, #188]	; (81006fc <MX_ADC1_Init+0xe8>)
 8100640:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8100644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100646:	4b2d      	ldr	r3, [pc, #180]	; (81006fc <MX_ADC1_Init+0xe8>)
 8100648:	2200      	movs	r2, #0
 810064a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 810064c:	4b2b      	ldr	r3, [pc, #172]	; (81006fc <MX_ADC1_Init+0xe8>)
 810064e:	2200      	movs	r2, #0
 8100650:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100652:	4b2a      	ldr	r3, [pc, #168]	; (81006fc <MX_ADC1_Init+0xe8>)
 8100654:	2204      	movs	r2, #4
 8100656:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100658:	4b28      	ldr	r3, [pc, #160]	; (81006fc <MX_ADC1_Init+0xe8>)
 810065a:	2200      	movs	r2, #0
 810065c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 810065e:	4b27      	ldr	r3, [pc, #156]	; (81006fc <MX_ADC1_Init+0xe8>)
 8100660:	2200      	movs	r2, #0
 8100662:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8100664:	4b25      	ldr	r3, [pc, #148]	; (81006fc <MX_ADC1_Init+0xe8>)
 8100666:	2201      	movs	r2, #1
 8100668:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810066a:	4b24      	ldr	r3, [pc, #144]	; (81006fc <MX_ADC1_Init+0xe8>)
 810066c:	2200      	movs	r2, #0
 810066e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100670:	4b22      	ldr	r3, [pc, #136]	; (81006fc <MX_ADC1_Init+0xe8>)
 8100672:	2200      	movs	r2, #0
 8100674:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100676:	4b21      	ldr	r3, [pc, #132]	; (81006fc <MX_ADC1_Init+0xe8>)
 8100678:	2200      	movs	r2, #0
 810067a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810067c:	4b1f      	ldr	r3, [pc, #124]	; (81006fc <MX_ADC1_Init+0xe8>)
 810067e:	2200      	movs	r2, #0
 8100680:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100682:	4b1e      	ldr	r3, [pc, #120]	; (81006fc <MX_ADC1_Init+0xe8>)
 8100684:	2200      	movs	r2, #0
 8100686:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100688:	4b1c      	ldr	r3, [pc, #112]	; (81006fc <MX_ADC1_Init+0xe8>)
 810068a:	2200      	movs	r2, #0
 810068c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 810068e:	4b1b      	ldr	r3, [pc, #108]	; (81006fc <MX_ADC1_Init+0xe8>)
 8100690:	2200      	movs	r2, #0
 8100692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8100696:	4819      	ldr	r0, [pc, #100]	; (81006fc <MX_ADC1_Init+0xe8>)
 8100698:	f002 fb1c 	bl	8102cd4 <HAL_ADC_Init>
 810069c:	4603      	mov	r3, r0
 810069e:	2b00      	cmp	r3, #0
 81006a0:	d001      	beq.n	81006a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 81006a2:	f000 fd51 	bl	8101148 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81006a6:	2300      	movs	r3, #0
 81006a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81006aa:	f107 031c 	add.w	r3, r7, #28
 81006ae:	4619      	mov	r1, r3
 81006b0:	4812      	ldr	r0, [pc, #72]	; (81006fc <MX_ADC1_Init+0xe8>)
 81006b2:	f003 f931 	bl	8103918 <HAL_ADCEx_MultiModeConfigChannel>
 81006b6:	4603      	mov	r3, r0
 81006b8:	2b00      	cmp	r3, #0
 81006ba:	d001      	beq.n	81006c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 81006bc:	f000 fd44 	bl	8101148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 81006c0:	4b10      	ldr	r3, [pc, #64]	; (8100704 <MX_ADC1_Init+0xf0>)
 81006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81006c4:	2306      	movs	r3, #6
 81006c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81006c8:	2300      	movs	r3, #0
 81006ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81006cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81006d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81006d2:	2304      	movs	r3, #4
 81006d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81006d6:	2300      	movs	r3, #0
 81006d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81006da:	2300      	movs	r3, #0
 81006dc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81006de:	463b      	mov	r3, r7
 81006e0:	4619      	mov	r1, r3
 81006e2:	4806      	ldr	r0, [pc, #24]	; (81006fc <MX_ADC1_Init+0xe8>)
 81006e4:	f002 fc98 	bl	8103018 <HAL_ADC_ConfigChannel>
 81006e8:	4603      	mov	r3, r0
 81006ea:	2b00      	cmp	r3, #0
 81006ec:	d001      	beq.n	81006f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 81006ee:	f000 fd2b 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81006f2:	bf00      	nop
 81006f4:	3728      	adds	r7, #40	; 0x28
 81006f6:	46bd      	mov	sp, r7
 81006f8:	bd80      	pop	{r7, pc}
 81006fa:	bf00      	nop
 81006fc:	10000164 	.word	0x10000164
 8100700:	40022000 	.word	0x40022000
 8100704:	04300002 	.word	0x04300002

08100708 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8100708:	b580      	push	{r7, lr}
 810070a:	b088      	sub	sp, #32
 810070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 810070e:	1d3b      	adds	r3, r7, #4
 8100710:	2200      	movs	r2, #0
 8100712:	601a      	str	r2, [r3, #0]
 8100714:	605a      	str	r2, [r3, #4]
 8100716:	609a      	str	r2, [r3, #8]
 8100718:	60da      	str	r2, [r3, #12]
 810071a:	611a      	str	r2, [r3, #16]
 810071c:	615a      	str	r2, [r3, #20]
 810071e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8100720:	4b27      	ldr	r3, [pc, #156]	; (81007c0 <MX_ADC3_Init+0xb8>)
 8100722:	4a28      	ldr	r2, [pc, #160]	; (81007c4 <MX_ADC3_Init+0xbc>)
 8100724:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8100726:	4b26      	ldr	r3, [pc, #152]	; (81007c0 <MX_ADC3_Init+0xb8>)
 8100728:	2200      	movs	r2, #0
 810072a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 810072c:	4b24      	ldr	r3, [pc, #144]	; (81007c0 <MX_ADC3_Init+0xb8>)
 810072e:	2200      	movs	r2, #0
 8100730:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100732:	4b23      	ldr	r3, [pc, #140]	; (81007c0 <MX_ADC3_Init+0xb8>)
 8100734:	2204      	movs	r2, #4
 8100736:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8100738:	4b21      	ldr	r3, [pc, #132]	; (81007c0 <MX_ADC3_Init+0xb8>)
 810073a:	2200      	movs	r2, #0
 810073c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 810073e:	4b20      	ldr	r3, [pc, #128]	; (81007c0 <MX_ADC3_Init+0xb8>)
 8100740:	2200      	movs	r2, #0
 8100742:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8100744:	4b1e      	ldr	r3, [pc, #120]	; (81007c0 <MX_ADC3_Init+0xb8>)
 8100746:	2201      	movs	r2, #1
 8100748:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 810074a:	4b1d      	ldr	r3, [pc, #116]	; (81007c0 <MX_ADC3_Init+0xb8>)
 810074c:	2200      	movs	r2, #0
 810074e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100750:	4b1b      	ldr	r3, [pc, #108]	; (81007c0 <MX_ADC3_Init+0xb8>)
 8100752:	2200      	movs	r2, #0
 8100754:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100756:	4b1a      	ldr	r3, [pc, #104]	; (81007c0 <MX_ADC3_Init+0xb8>)
 8100758:	2200      	movs	r2, #0
 810075a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810075c:	4b18      	ldr	r3, [pc, #96]	; (81007c0 <MX_ADC3_Init+0xb8>)
 810075e:	2200      	movs	r2, #0
 8100760:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100762:	4b17      	ldr	r3, [pc, #92]	; (81007c0 <MX_ADC3_Init+0xb8>)
 8100764:	2200      	movs	r2, #0
 8100766:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100768:	4b15      	ldr	r3, [pc, #84]	; (81007c0 <MX_ADC3_Init+0xb8>)
 810076a:	2200      	movs	r2, #0
 810076c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 810076e:	4b14      	ldr	r3, [pc, #80]	; (81007c0 <MX_ADC3_Init+0xb8>)
 8100770:	2200      	movs	r2, #0
 8100772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100776:	4812      	ldr	r0, [pc, #72]	; (81007c0 <MX_ADC3_Init+0xb8>)
 8100778:	f002 faac 	bl	8102cd4 <HAL_ADC_Init>
 810077c:	4603      	mov	r3, r0
 810077e:	2b00      	cmp	r3, #0
 8100780:	d001      	beq.n	8100786 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8100782:	f000 fce1 	bl	8101148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8100786:	2301      	movs	r3, #1
 8100788:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810078a:	2306      	movs	r3, #6
 810078c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810078e:	2300      	movs	r3, #0
 8100790:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100792:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8100796:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100798:	2304      	movs	r3, #4
 810079a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 810079c:	2300      	movs	r3, #0
 810079e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 81007a0:	2300      	movs	r3, #0
 81007a2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81007a4:	1d3b      	adds	r3, r7, #4
 81007a6:	4619      	mov	r1, r3
 81007a8:	4805      	ldr	r0, [pc, #20]	; (81007c0 <MX_ADC3_Init+0xb8>)
 81007aa:	f002 fc35 	bl	8103018 <HAL_ADC_ConfigChannel>
 81007ae:	4603      	mov	r3, r0
 81007b0:	2b00      	cmp	r3, #0
 81007b2:	d001      	beq.n	81007b8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 81007b4:	f000 fcc8 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81007b8:	bf00      	nop
 81007ba:	3720      	adds	r7, #32
 81007bc:	46bd      	mov	sp, r7
 81007be:	bd80      	pop	{r7, pc}
 81007c0:	100001c8 	.word	0x100001c8
 81007c4:	58026000 	.word	0x58026000

081007c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81007c8:	b580      	push	{r7, lr}
 81007ca:	b08c      	sub	sp, #48	; 0x30
 81007cc:	af00      	add	r7, sp, #0
 81007ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81007d0:	f107 031c 	add.w	r3, r7, #28
 81007d4:	2200      	movs	r2, #0
 81007d6:	601a      	str	r2, [r3, #0]
 81007d8:	605a      	str	r2, [r3, #4]
 81007da:	609a      	str	r2, [r3, #8]
 81007dc:	60da      	str	r2, [r3, #12]
 81007de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 81007e0:	687b      	ldr	r3, [r7, #4]
 81007e2:	681b      	ldr	r3, [r3, #0]
 81007e4:	4a3e      	ldr	r2, [pc, #248]	; (81008e0 <HAL_ADC_MspInit+0x118>)
 81007e6:	4293      	cmp	r3, r2
 81007e8:	d12a      	bne.n	8100840 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81007ea:	4b3e      	ldr	r3, [pc, #248]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 81007ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007f0:	4a3c      	ldr	r2, [pc, #240]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 81007f2:	f043 0320 	orr.w	r3, r3, #32
 81007f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81007fa:	4b3a      	ldr	r3, [pc, #232]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 81007fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100800:	f003 0320 	and.w	r3, r3, #32
 8100804:	61bb      	str	r3, [r7, #24]
 8100806:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100808:	4b36      	ldr	r3, [pc, #216]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 810080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810080e:	4a35      	ldr	r2, [pc, #212]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 8100810:	f043 0301 	orr.w	r3, r3, #1
 8100814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100818:	4b32      	ldr	r3, [pc, #200]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 810081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810081e:	f003 0301 	and.w	r3, r3, #1
 8100822:	617b      	str	r3, [r7, #20]
 8100824:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8100826:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 810082a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 810082e:	f002 f8af 	bl	8102990 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8100832:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8100836:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 810083a:	f002 f8a9 	bl	8102990 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 810083e:	e04a      	b.n	81008d6 <HAL_ADC_MspInit+0x10e>
  else if(adcHandle->Instance==ADC3)
 8100840:	687b      	ldr	r3, [r7, #4]
 8100842:	681b      	ldr	r3, [r3, #0]
 8100844:	4a28      	ldr	r2, [pc, #160]	; (81008e8 <HAL_ADC_MspInit+0x120>)
 8100846:	4293      	cmp	r3, r2
 8100848:	d145      	bne.n	81008d6 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 810084a:	4b26      	ldr	r3, [pc, #152]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 810084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100850:	4a24      	ldr	r2, [pc, #144]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 8100852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8100856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810085a:	4b22      	ldr	r3, [pc, #136]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 810085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8100864:	613b      	str	r3, [r7, #16]
 8100866:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100868:	4b1e      	ldr	r3, [pc, #120]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 810086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810086e:	4a1d      	ldr	r2, [pc, #116]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 8100870:	f043 0320 	orr.w	r3, r3, #32
 8100874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100878:	4b1a      	ldr	r3, [pc, #104]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 810087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810087e:	f003 0320 	and.w	r3, r3, #32
 8100882:	60fb      	str	r3, [r7, #12]
 8100884:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100886:	4b17      	ldr	r3, [pc, #92]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 8100888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810088c:	4a15      	ldr	r2, [pc, #84]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 810088e:	f043 0304 	orr.w	r3, r3, #4
 8100892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100896:	4b13      	ldr	r3, [pc, #76]	; (81008e4 <HAL_ADC_MspInit+0x11c>)
 8100898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810089c:	f003 0304 	and.w	r3, r3, #4
 81008a0:	60bb      	str	r3, [r7, #8]
 81008a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 81008a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81008aa:	2303      	movs	r3, #3
 81008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008ae:	2300      	movs	r3, #0
 81008b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 81008b2:	f107 031c 	add.w	r3, r7, #28
 81008b6:	4619      	mov	r1, r3
 81008b8:	480c      	ldr	r0, [pc, #48]	; (81008ec <HAL_ADC_MspInit+0x124>)
 81008ba:	f003 ff85 	bl	81047c8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81008be:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 81008c2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 81008c6:	f002 f863 	bl	8102990 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81008ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 81008ce:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 81008d2:	f002 f85d 	bl	8102990 <HAL_SYSCFG_AnalogSwitchConfig>
}
 81008d6:	bf00      	nop
 81008d8:	3730      	adds	r7, #48	; 0x30
 81008da:	46bd      	mov	sp, r7
 81008dc:	bd80      	pop	{r7, pc}
 81008de:	bf00      	nop
 81008e0:	40022000 	.word	0x40022000
 81008e4:	58024400 	.word	0x58024400
 81008e8:	58026000 	.word	0x58026000
 81008ec:	58021400 	.word	0x58021400

081008f0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 81008f0:	b580      	push	{r7, lr}
 81008f2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 81008f4:	4b1e      	ldr	r3, [pc, #120]	; (8100970 <MX_ETH_Init+0x80>)
 81008f6:	4a1f      	ldr	r2, [pc, #124]	; (8100974 <MX_ETH_Init+0x84>)
 81008f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81008fa:	4b1f      	ldr	r3, [pc, #124]	; (8100978 <MX_ETH_Init+0x88>)
 81008fc:	2200      	movs	r2, #0
 81008fe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8100900:	4b1d      	ldr	r3, [pc, #116]	; (8100978 <MX_ETH_Init+0x88>)
 8100902:	2280      	movs	r2, #128	; 0x80
 8100904:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8100906:	4b1c      	ldr	r3, [pc, #112]	; (8100978 <MX_ETH_Init+0x88>)
 8100908:	22e1      	movs	r2, #225	; 0xe1
 810090a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 810090c:	4b1a      	ldr	r3, [pc, #104]	; (8100978 <MX_ETH_Init+0x88>)
 810090e:	2200      	movs	r2, #0
 8100910:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8100912:	4b19      	ldr	r3, [pc, #100]	; (8100978 <MX_ETH_Init+0x88>)
 8100914:	2200      	movs	r2, #0
 8100916:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8100918:	4b17      	ldr	r3, [pc, #92]	; (8100978 <MX_ETH_Init+0x88>)
 810091a:	2200      	movs	r2, #0
 810091c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 810091e:	4b14      	ldr	r3, [pc, #80]	; (8100970 <MX_ETH_Init+0x80>)
 8100920:	4a15      	ldr	r2, [pc, #84]	; (8100978 <MX_ETH_Init+0x88>)
 8100922:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8100924:	4b12      	ldr	r3, [pc, #72]	; (8100970 <MX_ETH_Init+0x80>)
 8100926:	2201      	movs	r2, #1
 8100928:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 810092a:	4b11      	ldr	r3, [pc, #68]	; (8100970 <MX_ETH_Init+0x80>)
 810092c:	4a13      	ldr	r2, [pc, #76]	; (810097c <MX_ETH_Init+0x8c>)
 810092e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100930:	4b0f      	ldr	r3, [pc, #60]	; (8100970 <MX_ETH_Init+0x80>)
 8100932:	4a13      	ldr	r2, [pc, #76]	; (8100980 <MX_ETH_Init+0x90>)
 8100934:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8100936:	4b0e      	ldr	r3, [pc, #56]	; (8100970 <MX_ETH_Init+0x80>)
 8100938:	f240 52f4 	movw	r2, #1524	; 0x5f4
 810093c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 810093e:	480c      	ldr	r0, [pc, #48]	; (8100970 <MX_ETH_Init+0x80>)
 8100940:	f003 fb1e 	bl	8103f80 <HAL_ETH_Init>
 8100944:	4603      	mov	r3, r0
 8100946:	2b00      	cmp	r3, #0
 8100948:	d001      	beq.n	810094e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 810094a:	f000 fbfd 	bl	8101148 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 810094e:	2238      	movs	r2, #56	; 0x38
 8100950:	2100      	movs	r1, #0
 8100952:	480c      	ldr	r0, [pc, #48]	; (8100984 <MX_ETH_Init+0x94>)
 8100954:	f00f f8de 	bl	810fb14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100958:	4b0a      	ldr	r3, [pc, #40]	; (8100984 <MX_ETH_Init+0x94>)
 810095a:	2221      	movs	r2, #33	; 0x21
 810095c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810095e:	4b09      	ldr	r3, [pc, #36]	; (8100984 <MX_ETH_Init+0x94>)
 8100960:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8100964:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8100966:	4b07      	ldr	r3, [pc, #28]	; (8100984 <MX_ETH_Init+0x94>)
 8100968:	2200      	movs	r2, #0
 810096a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 810096c:	bf00      	nop
 810096e:	bd80      	pop	{r7, pc}
 8100970:	10000264 	.word	0x10000264
 8100974:	40028000 	.word	0x40028000
 8100978:	10000314 	.word	0x10000314
 810097c:	100000e8 	.word	0x100000e8
 8100980:	10000088 	.word	0x10000088
 8100984:	1000022c 	.word	0x1000022c

08100988 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8100988:	b580      	push	{r7, lr}
 810098a:	b08e      	sub	sp, #56	; 0x38
 810098c:	af00      	add	r7, sp, #0
 810098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100994:	2200      	movs	r2, #0
 8100996:	601a      	str	r2, [r3, #0]
 8100998:	605a      	str	r2, [r3, #4]
 810099a:	609a      	str	r2, [r3, #8]
 810099c:	60da      	str	r2, [r3, #12]
 810099e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 81009a0:	687b      	ldr	r3, [r7, #4]
 81009a2:	681b      	ldr	r3, [r3, #0]
 81009a4:	4a49      	ldr	r2, [pc, #292]	; (8100acc <HAL_ETH_MspInit+0x144>)
 81009a6:	4293      	cmp	r3, r2
 81009a8:	f040 808b 	bne.w	8100ac2 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81009ac:	4b48      	ldr	r3, [pc, #288]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 81009ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81009b2:	4a47      	ldr	r2, [pc, #284]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 81009b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81009b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81009bc:	4b44      	ldr	r3, [pc, #272]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 81009be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81009c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81009c6:	623b      	str	r3, [r7, #32]
 81009c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 81009ca:	4b41      	ldr	r3, [pc, #260]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 81009cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81009d0:	4a3f      	ldr	r2, [pc, #252]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 81009d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81009d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81009da:	4b3d      	ldr	r3, [pc, #244]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 81009dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81009e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81009e4:	61fb      	str	r3, [r7, #28]
 81009e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 81009e8:	4b39      	ldr	r3, [pc, #228]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 81009ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81009ee:	4a38      	ldr	r2, [pc, #224]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 81009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81009f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81009f8:	4b35      	ldr	r3, [pc, #212]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 81009fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100a02:	61bb      	str	r3, [r7, #24]
 8100a04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8100a06:	4b32      	ldr	r3, [pc, #200]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 8100a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a0c:	4a30      	ldr	r2, [pc, #192]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 8100a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a16:	4b2e      	ldr	r3, [pc, #184]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 8100a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100a20:	617b      	str	r3, [r7, #20]
 8100a22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100a24:	4b2a      	ldr	r3, [pc, #168]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 8100a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a2a:	4a29      	ldr	r2, [pc, #164]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 8100a2c:	f043 0304 	orr.w	r3, r3, #4
 8100a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a34:	4b26      	ldr	r3, [pc, #152]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 8100a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a3a:	f003 0304 	and.w	r3, r3, #4
 8100a3e:	613b      	str	r3, [r7, #16]
 8100a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100a42:	4b23      	ldr	r3, [pc, #140]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 8100a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a48:	4a21      	ldr	r2, [pc, #132]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 8100a4a:	f043 0301 	orr.w	r3, r3, #1
 8100a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a52:	4b1f      	ldr	r3, [pc, #124]	; (8100ad0 <HAL_ETH_MspInit+0x148>)
 8100a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a58:	f003 0301 	and.w	r3, r3, #1
 8100a5c:	60fb      	str	r3, [r7, #12]
 8100a5e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 8100a60:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8100a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100a66:	2302      	movs	r3, #2
 8100a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a6a:	2300      	movs	r3, #0
 8100a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a6e:	2300      	movs	r3, #0
 8100a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100a72:	230b      	movs	r3, #11
 8100a74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100a7a:	4619      	mov	r1, r3
 8100a7c:	4815      	ldr	r0, [pc, #84]	; (8100ad4 <HAL_ETH_MspInit+0x14c>)
 8100a7e:	f003 fea3 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 8100a82:	2332      	movs	r3, #50	; 0x32
 8100a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100a86:	2302      	movs	r3, #2
 8100a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a8a:	2300      	movs	r3, #0
 8100a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a8e:	2300      	movs	r3, #0
 8100a90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100a92:	230b      	movs	r3, #11
 8100a94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100a9a:	4619      	mov	r1, r3
 8100a9c:	480e      	ldr	r0, [pc, #56]	; (8100ad8 <HAL_ETH_MspInit+0x150>)
 8100a9e:	f003 fe93 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 8100aa2:	2386      	movs	r3, #134	; 0x86
 8100aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100aa6:	2302      	movs	r3, #2
 8100aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100aaa:	2300      	movs	r3, #0
 8100aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100aae:	2300      	movs	r3, #0
 8100ab0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100ab2:	230b      	movs	r3, #11
 8100ab4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100aba:	4619      	mov	r1, r3
 8100abc:	4807      	ldr	r0, [pc, #28]	; (8100adc <HAL_ETH_MspInit+0x154>)
 8100abe:	f003 fe83 	bl	81047c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8100ac2:	bf00      	nop
 8100ac4:	3738      	adds	r7, #56	; 0x38
 8100ac6:	46bd      	mov	sp, r7
 8100ac8:	bd80      	pop	{r7, pc}
 8100aca:	bf00      	nop
 8100acc:	40028000 	.word	0x40028000
 8100ad0:	58024400 	.word	0x58024400
 8100ad4:	58021800 	.word	0x58021800
 8100ad8:	58020800 	.word	0x58020800
 8100adc:	58020000 	.word	0x58020000

08100ae0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8100ae0:	b580      	push	{r7, lr}
 8100ae2:	b088      	sub	sp, #32
 8100ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8100ae6:	1d3b      	adds	r3, r7, #4
 8100ae8:	2200      	movs	r2, #0
 8100aea:	601a      	str	r2, [r3, #0]
 8100aec:	605a      	str	r2, [r3, #4]
 8100aee:	609a      	str	r2, [r3, #8]
 8100af0:	60da      	str	r2, [r3, #12]
 8100af2:	611a      	str	r2, [r3, #16]
 8100af4:	615a      	str	r2, [r3, #20]
 8100af6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8100af8:	4b1e      	ldr	r3, [pc, #120]	; (8100b74 <MX_FMC_Init+0x94>)
 8100afa:	4a1f      	ldr	r2, [pc, #124]	; (8100b78 <MX_FMC_Init+0x98>)
 8100afc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8100afe:	4b1d      	ldr	r3, [pc, #116]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b00:	2201      	movs	r2, #1
 8100b02:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8100b04:	4b1b      	ldr	r3, [pc, #108]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b06:	2200      	movs	r2, #0
 8100b08:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8100b0a:	4b1a      	ldr	r3, [pc, #104]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b0c:	2208      	movs	r2, #8
 8100b0e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8100b10:	4b18      	ldr	r3, [pc, #96]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b12:	2220      	movs	r2, #32
 8100b14:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8100b16:	4b17      	ldr	r3, [pc, #92]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b18:	2200      	movs	r2, #0
 8100b1a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8100b1c:	4b15      	ldr	r3, [pc, #84]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b1e:	2280      	movs	r2, #128	; 0x80
 8100b20:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8100b22:	4b14      	ldr	r3, [pc, #80]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b24:	2200      	movs	r2, #0
 8100b26:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8100b28:	4b12      	ldr	r3, [pc, #72]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b2a:	2200      	movs	r2, #0
 8100b2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8100b2e:	4b11      	ldr	r3, [pc, #68]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b30:	2200      	movs	r2, #0
 8100b32:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8100b34:	4b0f      	ldr	r3, [pc, #60]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b36:	2200      	movs	r2, #0
 8100b38:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8100b3a:	2310      	movs	r3, #16
 8100b3c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8100b3e:	2310      	movs	r3, #16
 8100b40:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8100b42:	2310      	movs	r3, #16
 8100b44:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8100b46:	2310      	movs	r3, #16
 8100b48:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8100b4a:	2310      	movs	r3, #16
 8100b4c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8100b4e:	2310      	movs	r3, #16
 8100b50:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8100b52:	2310      	movs	r3, #16
 8100b54:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8100b56:	1d3b      	adds	r3, r7, #4
 8100b58:	4619      	mov	r1, r3
 8100b5a:	4806      	ldr	r0, [pc, #24]	; (8100b74 <MX_FMC_Init+0x94>)
 8100b5c:	f008 fbce 	bl	81092fc <HAL_SDRAM_Init>
 8100b60:	4603      	mov	r3, r0
 8100b62:	2b00      	cmp	r3, #0
 8100b64:	d001      	beq.n	8100b6a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8100b66:	f000 faef 	bl	8101148 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8100b6a:	bf00      	nop
 8100b6c:	3720      	adds	r7, #32
 8100b6e:	46bd      	mov	sp, r7
 8100b70:	bd80      	pop	{r7, pc}
 8100b72:	bf00      	nop
 8100b74:	1000031c 	.word	0x1000031c
 8100b78:	52004140 	.word	0x52004140

08100b7c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8100b7c:	b580      	push	{r7, lr}
 8100b7e:	b0b6      	sub	sp, #216	; 0xd8
 8100b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b82:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8100b86:	2200      	movs	r2, #0
 8100b88:	601a      	str	r2, [r3, #0]
 8100b8a:	605a      	str	r2, [r3, #4]
 8100b8c:	609a      	str	r2, [r3, #8]
 8100b8e:	60da      	str	r2, [r3, #12]
 8100b90:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8100b92:	4b5a      	ldr	r3, [pc, #360]	; (8100cfc <HAL_FMC_MspInit+0x180>)
 8100b94:	681b      	ldr	r3, [r3, #0]
 8100b96:	2b00      	cmp	r3, #0
 8100b98:	f040 80ab 	bne.w	8100cf2 <HAL_FMC_MspInit+0x176>
    return;
  }
  FMC_Initialized = 1;
 8100b9c:	4b57      	ldr	r3, [pc, #348]	; (8100cfc <HAL_FMC_MspInit+0x180>)
 8100b9e:	2201      	movs	r2, #1
 8100ba0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100ba2:	1d3b      	adds	r3, r7, #4
 8100ba4:	22c0      	movs	r2, #192	; 0xc0
 8100ba6:	2100      	movs	r1, #0
 8100ba8:	4618      	mov	r0, r3
 8100baa:	f00e ffb3 	bl	810fb14 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8100bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8100bb2:	607b      	str	r3, [r7, #4]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8100bb4:	2300      	movs	r3, #0
 8100bb6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100bb8:	1d3b      	adds	r3, r7, #4
 8100bba:	4618      	mov	r0, r3
 8100bbc:	f004 fcb8 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 8100bc0:	4603      	mov	r3, r0
 8100bc2:	2b00      	cmp	r3, #0
 8100bc4:	d001      	beq.n	8100bca <HAL_FMC_MspInit+0x4e>
    {
      Error_Handler();
 8100bc6:	f000 fabf 	bl	8101148 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8100bca:	4b4d      	ldr	r3, [pc, #308]	; (8100d00 <HAL_FMC_MspInit+0x184>)
 8100bcc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100bd0:	4a4b      	ldr	r2, [pc, #300]	; (8100d00 <HAL_FMC_MspInit+0x184>)
 8100bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8100bd6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8100bda:	4b49      	ldr	r3, [pc, #292]	; (8100d00 <HAL_FMC_MspInit+0x184>)
 8100bdc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8100be4:	603b      	str	r3, [r7, #0]
 8100be6:	683b      	ldr	r3, [r7, #0]
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin
 8100be8:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8100bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100bf0:	2302      	movs	r3, #2
 8100bf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bf6:	2300      	movs	r3, #0
 8100bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100bfc:	2303      	movs	r3, #3
 8100bfe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100c02:	230c      	movs	r3, #12
 8100c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100c08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8100c0c:	4619      	mov	r1, r3
 8100c0e:	483d      	ldr	r0, [pc, #244]	; (8100d04 <HAL_FMC_MspInit+0x188>)
 8100c10:	f003 fdda 	bl	81047c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin
 8100c14:	f64f 7383 	movw	r3, #65411	; 0xff83
 8100c18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c1c:	2302      	movs	r3, #2
 8100c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c22:	2300      	movs	r3, #0
 8100c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100c28:	2303      	movs	r3, #3
 8100c2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100c2e:	230c      	movs	r3, #12
 8100c30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100c34:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8100c38:	4619      	mov	r1, r3
 8100c3a:	4833      	ldr	r0, [pc, #204]	; (8100d08 <HAL_FMC_MspInit+0x18c>)
 8100c3c:	f003 fdc4 	bl	81047c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin
 8100c40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8100c44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c48:	2302      	movs	r3, #2
 8100c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c4e:	2300      	movs	r3, #0
 8100c50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100c54:	2303      	movs	r3, #3
 8100c56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100c5a:	230c      	movs	r3, #12
 8100c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100c60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8100c64:	4619      	mov	r1, r3
 8100c66:	4829      	ldr	r0, [pc, #164]	; (8100d0c <HAL_FMC_MspInit+0x190>)
 8100c68:	f003 fdae 	bl	81047c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|FMC_BA0_Pin|FMC_A12_Pin
 8100c6c:	f248 1317 	movw	r3, #33047	; 0x8117
 8100c70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c74:	2302      	movs	r3, #2
 8100c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c7a:	2300      	movs	r3, #0
 8100c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100c80:	2303      	movs	r3, #3
 8100c82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100c86:	230c      	movs	r3, #12
 8100c88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100c8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8100c90:	4619      	mov	r1, r3
 8100c92:	481f      	ldr	r0, [pc, #124]	; (8100d10 <HAL_FMC_MspInit+0x194>)
 8100c94:	f003 fd98 	bl	81047c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin
 8100c98:	f24c 7303 	movw	r3, #50947	; 0xc703
 8100c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ca0:	2302      	movs	r3, #2
 8100ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ca6:	2300      	movs	r3, #0
 8100ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100cac:	2303      	movs	r3, #3
 8100cae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100cb2:	230c      	movs	r3, #12
 8100cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100cb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8100cbc:	4619      	mov	r1, r3
 8100cbe:	4815      	ldr	r0, [pc, #84]	; (8100d14 <HAL_FMC_MspInit+0x198>)
 8100cc0:	f003 fd82 	bl	81047c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin
 8100cc4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8100cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ccc:	2302      	movs	r3, #2
 8100cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cd2:	2300      	movs	r3, #0
 8100cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100cd8:	2303      	movs	r3, #3
 8100cda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100cde:	230c      	movs	r3, #12
 8100ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100ce4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8100ce8:	4619      	mov	r1, r3
 8100cea:	480b      	ldr	r0, [pc, #44]	; (8100d18 <HAL_FMC_MspInit+0x19c>)
 8100cec:	f003 fd6c 	bl	81047c8 <HAL_GPIO_Init>
 8100cf0:	e000      	b.n	8100cf4 <HAL_FMC_MspInit+0x178>
    return;
 8100cf2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8100cf4:	37d8      	adds	r7, #216	; 0xd8
 8100cf6:	46bd      	mov	sp, r7
 8100cf8:	bd80      	pop	{r7, pc}
 8100cfa:	bf00      	nop
 8100cfc:	10000350 	.word	0x10000350
 8100d00:	58024400 	.word	0x58024400
 8100d04:	58022000 	.word	0x58022000
 8100d08:	58021000 	.word	0x58021000
 8100d0c:	58021c00 	.word	0x58021c00
 8100d10:	58021800 	.word	0x58021800
 8100d14:	58020c00 	.word	0x58020c00
 8100d18:	58021400 	.word	0x58021400

08100d1c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8100d1c:	b580      	push	{r7, lr}
 8100d1e:	b082      	sub	sp, #8
 8100d20:	af00      	add	r7, sp, #0
 8100d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8100d24:	f7ff ff2a 	bl	8100b7c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8100d28:	bf00      	nop
 8100d2a:	3708      	adds	r7, #8
 8100d2c:	46bd      	mov	sp, r7
 8100d2e:	bd80      	pop	{r7, pc}

08100d30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8100d30:	b580      	push	{r7, lr}
 8100d32:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of toggle */
  toggleHandle = osSemaphoreNew(1, 1, &toggle_attributes);
 8100d34:	4a0c      	ldr	r2, [pc, #48]	; (8100d68 <MX_FREERTOS_Init+0x38>)
 8100d36:	2101      	movs	r1, #1
 8100d38:	2001      	movs	r0, #1
 8100d3a:	f00c f8bc 	bl	810ceb6 <osSemaphoreNew>
 8100d3e:	4603      	mov	r3, r0
 8100d40:	4a0a      	ldr	r2, [pc, #40]	; (8100d6c <MX_FREERTOS_Init+0x3c>)
 8100d42:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8100d44:	4a0a      	ldr	r2, [pc, #40]	; (8100d70 <MX_FREERTOS_Init+0x40>)
 8100d46:	2100      	movs	r1, #0
 8100d48:	480a      	ldr	r0, [pc, #40]	; (8100d74 <MX_FREERTOS_Init+0x44>)
 8100d4a:	f00c f807 	bl	810cd5c <osThreadNew>
 8100d4e:	4603      	mov	r3, r0
 8100d50:	4a09      	ldr	r2, [pc, #36]	; (8100d78 <MX_FREERTOS_Init+0x48>)
 8100d52:	6013      	str	r3, [r2, #0]

  /* creation of CM4_ToggleTask */
  CM4_ToggleTaskHandle = osThreadNew(CM4_ToggleSync, NULL, &CM4_ToggleTask_attributes);
 8100d54:	4a09      	ldr	r2, [pc, #36]	; (8100d7c <MX_FREERTOS_Init+0x4c>)
 8100d56:	2100      	movs	r1, #0
 8100d58:	4809      	ldr	r0, [pc, #36]	; (8100d80 <MX_FREERTOS_Init+0x50>)
 8100d5a:	f00b ffff 	bl	810cd5c <osThreadNew>
 8100d5e:	4603      	mov	r3, r0
 8100d60:	4a08      	ldr	r2, [pc, #32]	; (8100d84 <MX_FREERTOS_Init+0x54>)
 8100d62:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8100d64:	bf00      	nop
 8100d66:	bd80      	pop	{r7, pc}
 8100d68:	0810fd54 	.word	0x0810fd54
 8100d6c:	1000035c 	.word	0x1000035c
 8100d70:	0810fd0c 	.word	0x0810fd0c
 8100d74:	08100d89 	.word	0x08100d89
 8100d78:	10000354 	.word	0x10000354
 8100d7c:	0810fd30 	.word	0x0810fd30
 8100d80:	08100d99 	.word	0x08100d99
 8100d84:	10000358 	.word	0x10000358

08100d88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8100d88:	b580      	push	{r7, lr}
 8100d8a:	b082      	sub	sp, #8
 8100d8c:	af00      	add	r7, sp, #0
 8100d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8100d90:	2001      	movs	r0, #1
 8100d92:	f00c f875 	bl	810ce80 <osDelay>
 8100d96:	e7fb      	b.n	8100d90 <StartDefaultTask+0x8>

08100d98 <CM4_ToggleSync>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CM4_ToggleSync */
void CM4_ToggleSync(void *argument)
{
 8100d98:	b580      	push	{r7, lr}
 8100d9a:	b082      	sub	sp, #8
 8100d9c:	af00      	add	r7, sp, #0
 8100d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CM4_ToggleSync */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8100da0:	2001      	movs	r0, #1
 8100da2:	f00c f86d 	bl	810ce80 <osDelay>
 8100da6:	e7fb      	b.n	8100da0 <CM4_ToggleSync+0x8>

08100da8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8100da8:	b480      	push	{r7}
 8100daa:	b08d      	sub	sp, #52	; 0x34
 8100dac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100dae:	4b55      	ldr	r3, [pc, #340]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100db4:	4a53      	ldr	r2, [pc, #332]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100dbe:	4b51      	ldr	r3, [pc, #324]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8100dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100dcc:	4b4d      	ldr	r3, [pc, #308]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dd2:	4a4c      	ldr	r2, [pc, #304]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100dd4:	f043 0302 	orr.w	r3, r3, #2
 8100dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ddc:	4b49      	ldr	r3, [pc, #292]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100de2:	f003 0302 	and.w	r3, r3, #2
 8100de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8100de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100dea:	4b46      	ldr	r3, [pc, #280]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100df0:	4a44      	ldr	r2, [pc, #272]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100dfa:	4b42      	ldr	r3, [pc, #264]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100e04:	627b      	str	r3, [r7, #36]	; 0x24
 8100e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100e08:	4b3e      	ldr	r3, [pc, #248]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e0e:	4a3d      	ldr	r2, [pc, #244]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e10:	f043 0304 	orr.w	r3, r3, #4
 8100e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e18:	4b3a      	ldr	r3, [pc, #232]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e1e:	f003 0304 	and.w	r3, r3, #4
 8100e22:	623b      	str	r3, [r7, #32]
 8100e24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100e26:	4b37      	ldr	r3, [pc, #220]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e2c:	4a35      	ldr	r2, [pc, #212]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e2e:	f043 0310 	orr.w	r3, r3, #16
 8100e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e36:	4b33      	ldr	r3, [pc, #204]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e3c:	f003 0310 	and.w	r3, r3, #16
 8100e40:	61fb      	str	r3, [r7, #28]
 8100e42:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100e44:	4b2f      	ldr	r3, [pc, #188]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e4a:	4a2e      	ldr	r2, [pc, #184]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100e50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e54:	4b2b      	ldr	r3, [pc, #172]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100e5e:	61bb      	str	r3, [r7, #24]
 8100e60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100e62:	4b28      	ldr	r3, [pc, #160]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e68:	4a26      	ldr	r2, [pc, #152]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e6a:	f043 0308 	orr.w	r3, r3, #8
 8100e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e72:	4b24      	ldr	r3, [pc, #144]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e78:	f003 0308 	and.w	r3, r3, #8
 8100e7c:	617b      	str	r3, [r7, #20]
 8100e7e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100e80:	4b20      	ldr	r3, [pc, #128]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e86:	4a1f      	ldr	r2, [pc, #124]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e88:	f043 0301 	orr.w	r3, r3, #1
 8100e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e90:	4b1c      	ldr	r3, [pc, #112]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e96:	f003 0301 	and.w	r3, r3, #1
 8100e9a:	613b      	str	r3, [r7, #16]
 8100e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100e9e:	4b19      	ldr	r3, [pc, #100]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ea4:	4a17      	ldr	r2, [pc, #92]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100ea6:	f043 0320 	orr.w	r3, r3, #32
 8100eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100eae:	4b15      	ldr	r3, [pc, #84]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eb4:	f003 0320 	and.w	r3, r3, #32
 8100eb8:	60fb      	str	r3, [r7, #12]
 8100eba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8100ebc:	4b11      	ldr	r3, [pc, #68]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ec2:	4a10      	ldr	r2, [pc, #64]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8100ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ecc:	4b0d      	ldr	r3, [pc, #52]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8100ed6:	60bb      	str	r3, [r7, #8]
 8100ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100eda:	4b0a      	ldr	r3, [pc, #40]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ee0:	4a08      	ldr	r2, [pc, #32]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100eea:	4b06      	ldr	r3, [pc, #24]	; (8100f04 <MX_GPIO_Init+0x15c>)
 8100eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100ef4:	607b      	str	r3, [r7, #4]
 8100ef6:	687b      	ldr	r3, [r7, #4]

}
 8100ef8:	bf00      	nop
 8100efa:	3734      	adds	r7, #52	; 0x34
 8100efc:	46bd      	mov	sp, r7
 8100efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f02:	4770      	bx	lr
 8100f04:	58024400 	.word	0x58024400

08100f08 <MX_HDMI_CEC_Init>:
CEC_HandleTypeDef hcec;
uint8_t cec_receive_buffer[16];

/* HDMI_CEC init function */
void MX_HDMI_CEC_Init(void)
{
 8100f08:	b580      	push	{r7, lr}
 8100f0a:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100f0c:	4b15      	ldr	r3, [pc, #84]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f0e:	4a16      	ldr	r2, [pc, #88]	; (8100f68 <MX_HDMI_CEC_Init+0x60>)
 8100f10:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100f12:	4b14      	ldr	r3, [pc, #80]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f14:	2200      	movs	r2, #0
 8100f16:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100f18:	4b12      	ldr	r3, [pc, #72]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f1a:	2200      	movs	r2, #0
 8100f1c:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100f1e:	4b11      	ldr	r3, [pc, #68]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f20:	2210      	movs	r2, #16
 8100f22:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100f24:	4b0f      	ldr	r3, [pc, #60]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f26:	2200      	movs	r2, #0
 8100f28:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100f2a:	4b0e      	ldr	r3, [pc, #56]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f2c:	2200      	movs	r2, #0
 8100f2e:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100f30:	4b0c      	ldr	r3, [pc, #48]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f32:	2200      	movs	r2, #0
 8100f34:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100f36:	4b0b      	ldr	r3, [pc, #44]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f38:	2200      	movs	r2, #0
 8100f3a:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100f3c:	4b09      	ldr	r3, [pc, #36]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8100f42:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100f44:	4b07      	ldr	r3, [pc, #28]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f46:	2200      	movs	r2, #0
 8100f48:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100f4a:	4b06      	ldr	r3, [pc, #24]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f4c:	4a07      	ldr	r2, [pc, #28]	; (8100f6c <MX_HDMI_CEC_Init+0x64>)
 8100f4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100f50:	4804      	ldr	r0, [pc, #16]	; (8100f64 <MX_HDMI_CEC_Init+0x5c>)
 8100f52:	f002 fdc3 	bl	8103adc <HAL_CEC_Init>
 8100f56:	4603      	mov	r3, r0
 8100f58:	2b00      	cmp	r3, #0
 8100f5a:	d001      	beq.n	8100f60 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100f5c:	f000 f8f4 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100f60:	bf00      	nop
 8100f62:	bd80      	pop	{r7, pc}
 8100f64:	10000360 	.word	0x10000360
 8100f68:	40006c00 	.word	0x40006c00
 8100f6c:	100003a4 	.word	0x100003a4

08100f70 <HAL_CEC_MspInit>:

void HAL_CEC_MspInit(CEC_HandleTypeDef* cecHandle)
{
 8100f70:	b580      	push	{r7, lr}
 8100f72:	b0ba      	sub	sp, #232	; 0xe8
 8100f74:	af00      	add	r7, sp, #0
 8100f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100f7c:	2200      	movs	r2, #0
 8100f7e:	601a      	str	r2, [r3, #0]
 8100f80:	605a      	str	r2, [r3, #4]
 8100f82:	609a      	str	r2, [r3, #8]
 8100f84:	60da      	str	r2, [r3, #12]
 8100f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f88:	f107 0314 	add.w	r3, r7, #20
 8100f8c:	22c0      	movs	r2, #192	; 0xc0
 8100f8e:	2100      	movs	r1, #0
 8100f90:	4618      	mov	r0, r3
 8100f92:	f00e fdbf 	bl	810fb14 <memset>
  if(cecHandle->Instance==CEC)
 8100f96:	687b      	ldr	r3, [r7, #4]
 8100f98:	681b      	ldr	r3, [r3, #0]
 8100f9a:	4a29      	ldr	r2, [pc, #164]	; (8101040 <HAL_CEC_MspInit+0xd0>)
 8100f9c:	4293      	cmp	r3, r2
 8100f9e:	d14b      	bne.n	8101038 <HAL_CEC_MspInit+0xc8>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8100fa0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8100fa4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8100fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8100faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100fae:	f107 0314 	add.w	r3, r7, #20
 8100fb2:	4618      	mov	r0, r3
 8100fb4:	f004 fabc 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 8100fb8:	4603      	mov	r3, r0
 8100fba:	2b00      	cmp	r3, #0
 8100fbc:	d001      	beq.n	8100fc2 <HAL_CEC_MspInit+0x52>
    {
      Error_Handler();
 8100fbe:	f000 f8c3 	bl	8101148 <Error_Handler>
    }

    /* CEC clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8100fc2:	4b20      	ldr	r3, [pc, #128]	; (8101044 <HAL_CEC_MspInit+0xd4>)
 8100fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100fc8:	4a1e      	ldr	r2, [pc, #120]	; (8101044 <HAL_CEC_MspInit+0xd4>)
 8100fca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8100fce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100fd2:	4b1c      	ldr	r3, [pc, #112]	; (8101044 <HAL_CEC_MspInit+0xd4>)
 8100fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8100fdc:	613b      	str	r3, [r7, #16]
 8100fde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100fe0:	4b18      	ldr	r3, [pc, #96]	; (8101044 <HAL_CEC_MspInit+0xd4>)
 8100fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fe6:	4a17      	ldr	r2, [pc, #92]	; (8101044 <HAL_CEC_MspInit+0xd4>)
 8100fe8:	f043 0302 	orr.w	r3, r3, #2
 8100fec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ff0:	4b14      	ldr	r3, [pc, #80]	; (8101044 <HAL_CEC_MspInit+0xd4>)
 8100ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ff6:	f003 0302 	and.w	r3, r3, #2
 8100ffa:	60fb      	str	r3, [r7, #12]
 8100ffc:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8100ffe:	2340      	movs	r3, #64	; 0x40
 8101000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101004:	2312      	movs	r3, #18
 8101006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810100a:	2300      	movs	r3, #0
 810100c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101010:	2300      	movs	r3, #0
 8101012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101016:	2305      	movs	r3, #5
 8101018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 810101c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101020:	4619      	mov	r1, r3
 8101022:	4809      	ldr	r0, [pc, #36]	; (8101048 <HAL_CEC_MspInit+0xd8>)
 8101024:	f003 fbd0 	bl	81047c8 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 8101028:	2200      	movs	r2, #0
 810102a:	2105      	movs	r1, #5
 810102c:	205e      	movs	r0, #94	; 0x5e
 810102e:	f002 ff6b 	bl	8103f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8101032:	205e      	movs	r0, #94	; 0x5e
 8101034:	f002 ff82 	bl	8103f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }
}
 8101038:	bf00      	nop
 810103a:	37e8      	adds	r7, #232	; 0xe8
 810103c:	46bd      	mov	sp, r7
 810103e:	bd80      	pop	{r7, pc}
 8101040:	40006c00 	.word	0x40006c00
 8101044:	58024400 	.word	0x58024400
 8101048:	58020400 	.word	0x58020400

0810104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810104c:	b580      	push	{r7, lr}
 810104e:	b082      	sub	sp, #8
 8101050:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101052:	4b30      	ldr	r3, [pc, #192]	; (8101114 <main+0xc8>)
 8101054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101058:	4a2e      	ldr	r2, [pc, #184]	; (8101114 <main+0xc8>)
 810105a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810105e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101062:	4b2c      	ldr	r3, [pc, #176]	; (8101114 <main+0xc8>)
 8101064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810106c:	607b      	str	r3, [r7, #4]
 810106e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101070:	2001      	movs	r0, #1
 8101072:	f003 fd73 	bl	8104b5c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101076:	f003 ff69 	bl	8104f4c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810107a:	2201      	movs	r2, #1
 810107c:	2102      	movs	r1, #2
 810107e:	2000      	movs	r0, #0
 8101080:	f003 feea 	bl	8104e58 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101084:	4b24      	ldr	r3, [pc, #144]	; (8101118 <main+0xcc>)
 8101086:	681b      	ldr	r3, [r3, #0]
 8101088:	091b      	lsrs	r3, r3, #4
 810108a:	f003 030f 	and.w	r3, r3, #15
 810108e:	2b07      	cmp	r3, #7
 8101090:	d108      	bne.n	81010a4 <main+0x58>
 8101092:	4b22      	ldr	r3, [pc, #136]	; (810111c <main+0xd0>)
 8101094:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101098:	4a20      	ldr	r2, [pc, #128]	; (810111c <main+0xd0>)
 810109a:	f043 0301 	orr.w	r3, r3, #1
 810109e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81010a2:	e007      	b.n	81010b4 <main+0x68>
 81010a4:	4b1d      	ldr	r3, [pc, #116]	; (810111c <main+0xd0>)
 81010a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81010aa:	4a1c      	ldr	r2, [pc, #112]	; (810111c <main+0xd0>)
 81010ac:	f043 0301 	orr.w	r3, r3, #1
 81010b0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81010b4:	f001 fbaa 	bl	810280c <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(myLED);
 81010b8:	4b19      	ldr	r3, [pc, #100]	; (8101120 <main+0xd4>)
 81010ba:	781b      	ldrb	r3, [r3, #0]
 81010bc:	4618      	mov	r0, r3
 81010be:	f001 fb61 	bl	8102784 <BSP_LED_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81010c2:	f7ff fe71 	bl	8100da8 <MX_GPIO_Init>
  MX_ADC1_Init();
 81010c6:	f7ff faa5 	bl	8100614 <MX_ADC1_Init>
  MX_ADC3_Init();
 81010ca:	f7ff fb1d 	bl	8100708 <MX_ADC3_Init>
  MX_ETH_Init();
 81010ce:	f7ff fc0f 	bl	81008f0 <MX_ETH_Init>
  MX_FMC_Init();
 81010d2:	f7ff fd05 	bl	8100ae0 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 81010d6:	f7ff ff17 	bl	8100f08 <MX_HDMI_CEC_Init>
  MX_QUADSPI_Init();
 81010da:	f000 f83b 	bl	8101154 <MX_QUADSPI_Init>
  MX_RTC_Init();
 81010de:	f000 f98b 	bl	81013f8 <MX_RTC_Init>
  MX_SAI1_Init();
 81010e2:	f000 fa07 	bl	81014f4 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 81010e6:	f000 fb53 	bl	8101790 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX1_Init();
 81010ea:	f000 fc01 	bl	81018f0 <MX_SPDIFRX1_Init>
  MX_SPI2_Init();
 81010ee:	f000 fc99 	bl	8101a24 <MX_SPI2_Init>
  MX_SPI5_Init();
 81010f2:	f000 fceb 	bl	8101acc <MX_SPI5_Init>
  MX_TIM8_Init();
 81010f6:	f000 feff 	bl	8101ef8 <MX_TIM8_Init>
  MX_TIM13_Init();
 81010fa:	f000 ff8d 	bl	8102018 <MX_TIM13_Init>
  MX_UART8_Init();
 81010fe:	f001 f879 	bl	81021f4 <MX_UART8_Init>
  MX_USB_OTG_HS_PCD_Init();
 8101102:	f001 f94f 	bl	81023a4 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8101106:	f00b fddf 	bl	810ccc8 <osKernelInitialize>
  MX_FREERTOS_Init();
 810110a:	f7ff fe11 	bl	8100d30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 810110e:	f00b fdff 	bl	810cd10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101112:	e7fe      	b.n	8101112 <main+0xc6>
 8101114:	58024400 	.word	0x58024400
 8101118:	e000ed00 	.word	0xe000ed00
 810111c:	58026400 	.word	0x58026400
 8101120:	100003b4 	.word	0x100003b4

08101124 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101124:	b580      	push	{r7, lr}
 8101126:	b082      	sub	sp, #8
 8101128:	af00      	add	r7, sp, #0
 810112a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 810112c:	687b      	ldr	r3, [r7, #4]
 810112e:	681b      	ldr	r3, [r3, #0]
 8101130:	4a04      	ldr	r2, [pc, #16]	; (8101144 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101132:	4293      	cmp	r3, r2
 8101134:	d101      	bne.n	810113a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101136:	f001 fbc7 	bl	81028c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810113a:	bf00      	nop
 810113c:	3708      	adds	r7, #8
 810113e:	46bd      	mov	sp, r7
 8101140:	bd80      	pop	{r7, pc}
 8101142:	bf00      	nop
 8101144:	40001000 	.word	0x40001000

08101148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101148:	b480      	push	{r7}
 810114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810114c:	b672      	cpsid	i
}
 810114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101150:	e7fe      	b.n	8101150 <Error_Handler+0x8>
	...

08101154 <MX_QUADSPI_Init>:

extern QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8101154:	b580      	push	{r7, lr}
 8101156:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8101158:	4b10      	ldr	r3, [pc, #64]	; (810119c <MX_QUADSPI_Init+0x48>)
 810115a:	4a11      	ldr	r2, [pc, #68]	; (81011a0 <MX_QUADSPI_Init+0x4c>)
 810115c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 810115e:	4b0f      	ldr	r3, [pc, #60]	; (810119c <MX_QUADSPI_Init+0x48>)
 8101160:	22ff      	movs	r2, #255	; 0xff
 8101162:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8101164:	4b0d      	ldr	r3, [pc, #52]	; (810119c <MX_QUADSPI_Init+0x48>)
 8101166:	2201      	movs	r2, #1
 8101168:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 810116a:	4b0c      	ldr	r3, [pc, #48]	; (810119c <MX_QUADSPI_Init+0x48>)
 810116c:	2200      	movs	r2, #0
 810116e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8101170:	4b0a      	ldr	r3, [pc, #40]	; (810119c <MX_QUADSPI_Init+0x48>)
 8101172:	2201      	movs	r2, #1
 8101174:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8101176:	4b09      	ldr	r3, [pc, #36]	; (810119c <MX_QUADSPI_Init+0x48>)
 8101178:	2200      	movs	r2, #0
 810117a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 810117c:	4b07      	ldr	r3, [pc, #28]	; (810119c <MX_QUADSPI_Init+0x48>)
 810117e:	2200      	movs	r2, #0
 8101180:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8101182:	4b06      	ldr	r3, [pc, #24]	; (810119c <MX_QUADSPI_Init+0x48>)
 8101184:	2240      	movs	r2, #64	; 0x40
 8101186:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8101188:	4804      	ldr	r0, [pc, #16]	; (810119c <MX_QUADSPI_Init+0x48>)
 810118a:	f003 fefd 	bl	8104f88 <HAL_QSPI_Init>
 810118e:	4603      	mov	r3, r0
 8101190:	2b00      	cmp	r3, #0
 8101192:	d001      	beq.n	8101198 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8101194:	f7ff ffd8 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8101198:	bf00      	nop
 810119a:	bd80      	pop	{r7, pc}
 810119c:	10000d78 	.word	0x10000d78
 81011a0:	52005000 	.word	0x52005000

081011a4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 81011a4:	b580      	push	{r7, lr}
 81011a6:	b0be      	sub	sp, #248	; 0xf8
 81011a8:	af00      	add	r7, sp, #0
 81011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81011ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81011b0:	2200      	movs	r2, #0
 81011b2:	601a      	str	r2, [r3, #0]
 81011b4:	605a      	str	r2, [r3, #4]
 81011b6:	609a      	str	r2, [r3, #8]
 81011b8:	60da      	str	r2, [r3, #12]
 81011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81011c0:	22c0      	movs	r2, #192	; 0xc0
 81011c2:	2100      	movs	r1, #0
 81011c4:	4618      	mov	r0, r3
 81011c6:	f00e fca5 	bl	810fb14 <memset>
  if(qspiHandle->Instance==QUADSPI)
 81011ca:	687b      	ldr	r3, [r7, #4]
 81011cc:	681b      	ldr	r3, [r3, #0]
 81011ce:	4a83      	ldr	r2, [pc, #524]	; (81013dc <HAL_QSPI_MspInit+0x238>)
 81011d0:	4293      	cmp	r3, r2
 81011d2:	f040 80ff 	bne.w	81013d4 <HAL_QSPI_MspInit+0x230>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 81011d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81011da:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 81011dc:	2300      	movs	r3, #0
 81011de:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81011e4:	4618      	mov	r0, r3
 81011e6:	f004 f9a3 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 81011ea:	4603      	mov	r3, r0
 81011ec:	2b00      	cmp	r3, #0
 81011ee:	d001      	beq.n	81011f4 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 81011f0:	f7ff ffaa 	bl	8101148 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 81011f4:	4b7a      	ldr	r3, [pc, #488]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 81011f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81011fa:	4a79      	ldr	r2, [pc, #484]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 81011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101200:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101204:	4b76      	ldr	r3, [pc, #472]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101206:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810120e:	623b      	str	r3, [r7, #32]
 8101210:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8101212:	4b73      	ldr	r3, [pc, #460]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101218:	4a71      	ldr	r2, [pc, #452]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 810121a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810121e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101222:	4b6f      	ldr	r3, [pc, #444]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810122c:	61fb      	str	r3, [r7, #28]
 810122e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101230:	4b6b      	ldr	r3, [pc, #428]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101236:	4a6a      	ldr	r2, [pc, #424]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101238:	f043 0320 	orr.w	r3, r3, #32
 810123c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101240:	4b67      	ldr	r3, [pc, #412]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101246:	f003 0320 	and.w	r3, r3, #32
 810124a:	61bb      	str	r3, [r7, #24]
 810124c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 810124e:	4b64      	ldr	r3, [pc, #400]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101254:	4a62      	ldr	r2, [pc, #392]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810125a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810125e:	4b60      	ldr	r3, [pc, #384]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101268:	617b      	str	r3, [r7, #20]
 810126a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810126c:	4b5c      	ldr	r3, [pc, #368]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 810126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101272:	4a5b      	ldr	r2, [pc, #364]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101274:	f043 0302 	orr.w	r3, r3, #2
 8101278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810127c:	4b58      	ldr	r3, [pc, #352]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 810127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101282:	f003 0302 	and.w	r3, r3, #2
 8101286:	613b      	str	r3, [r7, #16]
 8101288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810128a:	4b55      	ldr	r3, [pc, #340]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 810128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101290:	4a53      	ldr	r2, [pc, #332]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 8101292:	f043 0308 	orr.w	r3, r3, #8
 8101296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810129a:	4b51      	ldr	r3, [pc, #324]	; (81013e0 <HAL_QSPI_MspInit+0x23c>)
 810129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a0:	f003 0308 	and.w	r3, r3, #8
 81012a4:	60fb      	str	r3, [r7, #12]
 81012a6:	68fb      	ldr	r3, [r7, #12]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 81012a8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 81012ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012b0:	2302      	movs	r3, #2
 81012b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012b6:	2300      	movs	r3, #0
 81012b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012bc:	2300      	movs	r3, #0
 81012be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81012c2:	2309      	movs	r3, #9
 81012c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81012c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81012cc:	4619      	mov	r1, r3
 81012ce:	4845      	ldr	r0, [pc, #276]	; (81013e4 <HAL_QSPI_MspInit+0x240>)
 81012d0:	f003 fa7a 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 81012d4:	2340      	movs	r3, #64	; 0x40
 81012d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012da:	2302      	movs	r3, #2
 81012dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012e0:	2300      	movs	r3, #0
 81012e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012e6:	2300      	movs	r3, #0
 81012e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81012ec:	230a      	movs	r3, #10
 81012ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 81012f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81012f6:	4619      	mov	r1, r3
 81012f8:	483a      	ldr	r0, [pc, #232]	; (81013e4 <HAL_QSPI_MspInit+0x240>)
 81012fa:	f003 fa65 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 81012fe:	23c0      	movs	r3, #192	; 0xc0
 8101300:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101304:	2302      	movs	r3, #2
 8101306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810130a:	2300      	movs	r3, #0
 810130c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101310:	2300      	movs	r3, #0
 8101312:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101316:	2309      	movs	r3, #9
 8101318:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810131c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101320:	4619      	mov	r1, r3
 8101322:	4831      	ldr	r0, [pc, #196]	; (81013e8 <HAL_QSPI_MspInit+0x244>)
 8101324:	f003 fa50 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8101328:	f44f 7300 	mov.w	r3, #512	; 0x200
 810132c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101330:	2302      	movs	r3, #2
 8101332:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101336:	2300      	movs	r3, #0
 8101338:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810133c:	2300      	movs	r3, #0
 810133e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101342:	230a      	movs	r3, #10
 8101344:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 8101348:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810134c:	4619      	mov	r1, r3
 810134e:	4826      	ldr	r0, [pc, #152]	; (81013e8 <HAL_QSPI_MspInit+0x244>)
 8101350:	f003 fa3a 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8101354:	230c      	movs	r3, #12
 8101356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810135a:	2302      	movs	r3, #2
 810135c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101360:	2300      	movs	r3, #0
 8101362:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101366:	2300      	movs	r3, #0
 8101368:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810136c:	2309      	movs	r3, #9
 810136e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101372:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101376:	4619      	mov	r1, r3
 8101378:	481c      	ldr	r0, [pc, #112]	; (81013ec <HAL_QSPI_MspInit+0x248>)
 810137a:	f003 fa25 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 810137e:	2304      	movs	r3, #4
 8101380:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101384:	2302      	movs	r3, #2
 8101386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810138a:	2300      	movs	r3, #0
 810138c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101390:	2300      	movs	r3, #0
 8101392:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101396:	2309      	movs	r3, #9
 8101398:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 810139c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81013a0:	4619      	mov	r1, r3
 81013a2:	4813      	ldr	r0, [pc, #76]	; (81013f0 <HAL_QSPI_MspInit+0x24c>)
 81013a4:	f003 fa10 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 81013a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81013ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81013b0:	2302      	movs	r3, #2
 81013b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013b6:	2300      	movs	r3, #0
 81013b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013bc:	2300      	movs	r3, #0
 81013be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81013c2:	2309      	movs	r3, #9
 81013c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 81013c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81013cc:	4619      	mov	r1, r3
 81013ce:	4809      	ldr	r0, [pc, #36]	; (81013f4 <HAL_QSPI_MspInit+0x250>)
 81013d0:	f003 f9fa 	bl	81047c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 81013d4:	bf00      	nop
 81013d6:	37f8      	adds	r7, #248	; 0xf8
 81013d8:	46bd      	mov	sp, r7
 81013da:	bd80      	pop	{r7, pc}
 81013dc:	52005000 	.word	0x52005000
 81013e0:	58024400 	.word	0x58024400
 81013e4:	58021800 	.word	0x58021800
 81013e8:	58021400 	.word	0x58021400
 81013ec:	58021c00 	.word	0x58021c00
 81013f0:	58020400 	.word	0x58020400
 81013f4:	58020c00 	.word	0x58020c00

081013f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 81013f8:	b580      	push	{r7, lr}
 81013fa:	b08a      	sub	sp, #40	; 0x28
 81013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 81013fe:	463b      	mov	r3, r7
 8101400:	2228      	movs	r2, #40	; 0x28
 8101402:	2100      	movs	r1, #0
 8101404:	4618      	mov	r0, r3
 8101406:	f00e fb85 	bl	810fb14 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 810140a:	4b20      	ldr	r3, [pc, #128]	; (810148c <MX_RTC_Init+0x94>)
 810140c:	4a20      	ldr	r2, [pc, #128]	; (8101490 <MX_RTC_Init+0x98>)
 810140e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8101410:	4b1e      	ldr	r3, [pc, #120]	; (810148c <MX_RTC_Init+0x94>)
 8101412:	2200      	movs	r2, #0
 8101414:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8101416:	4b1d      	ldr	r3, [pc, #116]	; (810148c <MX_RTC_Init+0x94>)
 8101418:	227f      	movs	r2, #127	; 0x7f
 810141a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 810141c:	4b1b      	ldr	r3, [pc, #108]	; (810148c <MX_RTC_Init+0x94>)
 810141e:	22ff      	movs	r2, #255	; 0xff
 8101420:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8101422:	4b1a      	ldr	r3, [pc, #104]	; (810148c <MX_RTC_Init+0x94>)
 8101424:	2200      	movs	r2, #0
 8101426:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8101428:	4b18      	ldr	r3, [pc, #96]	; (810148c <MX_RTC_Init+0x94>)
 810142a:	2200      	movs	r2, #0
 810142c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 810142e:	4b17      	ldr	r3, [pc, #92]	; (810148c <MX_RTC_Init+0x94>)
 8101430:	2200      	movs	r2, #0
 8101432:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8101434:	4b15      	ldr	r3, [pc, #84]	; (810148c <MX_RTC_Init+0x94>)
 8101436:	2200      	movs	r2, #0
 8101438:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 810143a:	4814      	ldr	r0, [pc, #80]	; (810148c <MX_RTC_Init+0x94>)
 810143c:	f006 fa2c 	bl	8107898 <HAL_RTC_Init>
 8101440:	4603      	mov	r3, r0
 8101442:	2b00      	cmp	r3, #0
 8101444:	d001      	beq.n	810144a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8101446:	f7ff fe7f 	bl	8101148 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 810144a:	2301      	movs	r3, #1
 810144c:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 810144e:	2301      	movs	r3, #1
 8101450:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8101452:	2300      	movs	r3, #0
 8101454:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8101456:	2300      	movs	r3, #0
 8101458:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 810145a:	2300      	movs	r3, #0
 810145c:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 810145e:	2300      	movs	r3, #0
 8101460:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8101462:	2300      	movs	r3, #0
 8101464:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8101466:	2300      	movs	r3, #0
 8101468:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 810146a:	2380      	movs	r3, #128	; 0x80
 810146c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 810146e:	463b      	mov	r3, r7
 8101470:	4619      	mov	r1, r3
 8101472:	4806      	ldr	r0, [pc, #24]	; (810148c <MX_RTC_Init+0x94>)
 8101474:	f006 fb20 	bl	8107ab8 <HAL_RTCEx_SetTamper>
 8101478:	4603      	mov	r3, r0
 810147a:	2b00      	cmp	r3, #0
 810147c:	d001      	beq.n	8101482 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 810147e:	f7ff fe63 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8101482:	bf00      	nop
 8101484:	3728      	adds	r7, #40	; 0x28
 8101486:	46bd      	mov	sp, r7
 8101488:	bd80      	pop	{r7, pc}
 810148a:	bf00      	nop
 810148c:	100003b8 	.word	0x100003b8
 8101490:	58004000 	.word	0x58004000

08101494 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8101494:	b580      	push	{r7, lr}
 8101496:	b0b2      	sub	sp, #200	; 0xc8
 8101498:	af00      	add	r7, sp, #0
 810149a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810149c:	f107 0308 	add.w	r3, r7, #8
 81014a0:	22c0      	movs	r2, #192	; 0xc0
 81014a2:	2100      	movs	r1, #0
 81014a4:	4618      	mov	r0, r3
 81014a6:	f00e fb35 	bl	810fb14 <memset>
  if(rtcHandle->Instance==RTC)
 81014aa:	687b      	ldr	r3, [r7, #4]
 81014ac:	681b      	ldr	r3, [r3, #0]
 81014ae:	4a0f      	ldr	r2, [pc, #60]	; (81014ec <HAL_RTC_MspInit+0x58>)
 81014b0:	4293      	cmp	r3, r2
 81014b2:	d116      	bne.n	81014e2 <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 81014b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 81014b8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 81014ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 81014be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81014c2:	f107 0308 	add.w	r3, r7, #8
 81014c6:	4618      	mov	r0, r3
 81014c8:	f004 f832 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 81014cc:	4603      	mov	r3, r0
 81014ce:	2b00      	cmp	r3, #0
 81014d0:	d001      	beq.n	81014d6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 81014d2:	f7ff fe39 	bl	8101148 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 81014d6:	4b06      	ldr	r3, [pc, #24]	; (81014f0 <HAL_RTC_MspInit+0x5c>)
 81014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81014da:	4a05      	ldr	r2, [pc, #20]	; (81014f0 <HAL_RTC_MspInit+0x5c>)
 81014dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81014e0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 81014e2:	bf00      	nop
 81014e4:	37c8      	adds	r7, #200	; 0xc8
 81014e6:	46bd      	mov	sp, r7
 81014e8:	bd80      	pop	{r7, pc}
 81014ea:	bf00      	nop
 81014ec:	58004000 	.word	0x58004000
 81014f0:	58024400 	.word	0x58024400

081014f4 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 81014f4:	b580      	push	{r7, lr}
 81014f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 81014f8:	4b47      	ldr	r3, [pc, #284]	; (8101618 <MX_SAI1_Init+0x124>)
 81014fa:	4a48      	ldr	r2, [pc, #288]	; (810161c <MX_SAI1_Init+0x128>)
 81014fc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 81014fe:	4b46      	ldr	r3, [pc, #280]	; (8101618 <MX_SAI1_Init+0x124>)
 8101500:	2200      	movs	r2, #0
 8101502:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8101504:	4b44      	ldr	r3, [pc, #272]	; (8101618 <MX_SAI1_Init+0x124>)
 8101506:	2200      	movs	r2, #0
 8101508:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 810150a:	4b43      	ldr	r3, [pc, #268]	; (8101618 <MX_SAI1_Init+0x124>)
 810150c:	2240      	movs	r2, #64	; 0x40
 810150e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8101510:	4b41      	ldr	r3, [pc, #260]	; (8101618 <MX_SAI1_Init+0x124>)
 8101512:	2200      	movs	r2, #0
 8101514:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8101516:	4b40      	ldr	r3, [pc, #256]	; (8101618 <MX_SAI1_Init+0x124>)
 8101518:	2200      	movs	r2, #0
 810151a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 810151c:	4b3e      	ldr	r3, [pc, #248]	; (8101618 <MX_SAI1_Init+0x124>)
 810151e:	2200      	movs	r2, #0
 8101520:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8101522:	4b3d      	ldr	r3, [pc, #244]	; (8101618 <MX_SAI1_Init+0x124>)
 8101524:	2200      	movs	r2, #0
 8101526:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8101528:	4b3b      	ldr	r3, [pc, #236]	; (8101618 <MX_SAI1_Init+0x124>)
 810152a:	2200      	movs	r2, #0
 810152c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 810152e:	4b3a      	ldr	r3, [pc, #232]	; (8101618 <MX_SAI1_Init+0x124>)
 8101530:	2200      	movs	r2, #0
 8101532:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8101534:	4b38      	ldr	r3, [pc, #224]	; (8101618 <MX_SAI1_Init+0x124>)
 8101536:	4a3a      	ldr	r2, [pc, #232]	; (8101620 <MX_SAI1_Init+0x12c>)
 8101538:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 810153a:	4b37      	ldr	r3, [pc, #220]	; (8101618 <MX_SAI1_Init+0x124>)
 810153c:	2200      	movs	r2, #0
 810153e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8101540:	4b35      	ldr	r3, [pc, #212]	; (8101618 <MX_SAI1_Init+0x124>)
 8101542:	2200      	movs	r2, #0
 8101544:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8101546:	4b34      	ldr	r3, [pc, #208]	; (8101618 <MX_SAI1_Init+0x124>)
 8101548:	2200      	movs	r2, #0
 810154a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 810154c:	4b32      	ldr	r3, [pc, #200]	; (8101618 <MX_SAI1_Init+0x124>)
 810154e:	2200      	movs	r2, #0
 8101550:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8101552:	4b31      	ldr	r3, [pc, #196]	; (8101618 <MX_SAI1_Init+0x124>)
 8101554:	2200      	movs	r2, #0
 8101556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 810155a:	4b2f      	ldr	r3, [pc, #188]	; (8101618 <MX_SAI1_Init+0x124>)
 810155c:	2201      	movs	r2, #1
 810155e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8101560:	4b2d      	ldr	r3, [pc, #180]	; (8101618 <MX_SAI1_Init+0x124>)
 8101562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101566:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8101568:	4b2b      	ldr	r3, [pc, #172]	; (8101618 <MX_SAI1_Init+0x124>)
 810156a:	2208      	movs	r2, #8
 810156c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 810156e:	4b2a      	ldr	r3, [pc, #168]	; (8101618 <MX_SAI1_Init+0x124>)
 8101570:	2201      	movs	r2, #1
 8101572:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8101574:	4b28      	ldr	r3, [pc, #160]	; (8101618 <MX_SAI1_Init+0x124>)
 8101576:	2200      	movs	r2, #0
 8101578:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 810157a:	4b27      	ldr	r3, [pc, #156]	; (8101618 <MX_SAI1_Init+0x124>)
 810157c:	2200      	movs	r2, #0
 810157e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8101580:	4b25      	ldr	r3, [pc, #148]	; (8101618 <MX_SAI1_Init+0x124>)
 8101582:	2200      	movs	r2, #0
 8101584:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8101586:	4b24      	ldr	r3, [pc, #144]	; (8101618 <MX_SAI1_Init+0x124>)
 8101588:	2200      	movs	r2, #0
 810158a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 810158c:	4b22      	ldr	r3, [pc, #136]	; (8101618 <MX_SAI1_Init+0x124>)
 810158e:	2200      	movs	r2, #0
 8101590:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8101592:	4b21      	ldr	r3, [pc, #132]	; (8101618 <MX_SAI1_Init+0x124>)
 8101594:	2201      	movs	r2, #1
 8101596:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8101598:	4b1f      	ldr	r3, [pc, #124]	; (8101618 <MX_SAI1_Init+0x124>)
 810159a:	2200      	movs	r2, #0
 810159c:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 810159e:	481e      	ldr	r0, [pc, #120]	; (8101618 <MX_SAI1_Init+0x124>)
 81015a0:	f006 fb6a 	bl	8107c78 <HAL_SAI_Init>
 81015a4:	4603      	mov	r3, r0
 81015a6:	2b00      	cmp	r3, #0
 81015a8:	d001      	beq.n	81015ae <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 81015aa:	f7ff fdcd 	bl	8101148 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 81015ae:	4b1d      	ldr	r3, [pc, #116]	; (8101624 <MX_SAI1_Init+0x130>)
 81015b0:	4a1d      	ldr	r2, [pc, #116]	; (8101628 <MX_SAI1_Init+0x134>)
 81015b2:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 81015b4:	4b1b      	ldr	r3, [pc, #108]	; (8101624 <MX_SAI1_Init+0x130>)
 81015b6:	2204      	movs	r2, #4
 81015b8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 81015ba:	4b1a      	ldr	r3, [pc, #104]	; (8101624 <MX_SAI1_Init+0x130>)
 81015bc:	2200      	movs	r2, #0
 81015be:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 81015c0:	4b18      	ldr	r3, [pc, #96]	; (8101624 <MX_SAI1_Init+0x130>)
 81015c2:	2200      	movs	r2, #0
 81015c4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 81015c6:	4b17      	ldr	r3, [pc, #92]	; (8101624 <MX_SAI1_Init+0x130>)
 81015c8:	2200      	movs	r2, #0
 81015ca:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 81015cc:	4b15      	ldr	r3, [pc, #84]	; (8101624 <MX_SAI1_Init+0x130>)
 81015ce:	2200      	movs	r2, #0
 81015d0:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 81015d2:	4b14      	ldr	r3, [pc, #80]	; (8101624 <MX_SAI1_Init+0x130>)
 81015d4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 81015d8:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81015da:	4b12      	ldr	r3, [pc, #72]	; (8101624 <MX_SAI1_Init+0x130>)
 81015dc:	2200      	movs	r2, #0
 81015de:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 81015e0:	4b10      	ldr	r3, [pc, #64]	; (8101624 <MX_SAI1_Init+0x130>)
 81015e2:	2200      	movs	r2, #0
 81015e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 81015e6:	4b0f      	ldr	r3, [pc, #60]	; (8101624 <MX_SAI1_Init+0x130>)
 81015e8:	2200      	movs	r2, #0
 81015ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 81015ec:	4b0d      	ldr	r3, [pc, #52]	; (8101624 <MX_SAI1_Init+0x130>)
 81015ee:	2200      	movs	r2, #0
 81015f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 81015f4:	4b0b      	ldr	r3, [pc, #44]	; (8101624 <MX_SAI1_Init+0x130>)
 81015f6:	2201      	movs	r2, #1
 81015f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 81015fa:	4b0a      	ldr	r3, [pc, #40]	; (8101624 <MX_SAI1_Init+0x130>)
 81015fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101600:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8101602:	4808      	ldr	r0, [pc, #32]	; (8101624 <MX_SAI1_Init+0x130>)
 8101604:	f006 fb38 	bl	8107c78 <HAL_SAI_Init>
 8101608:	4603      	mov	r3, r0
 810160a:	2b00      	cmp	r3, #0
 810160c:	d001      	beq.n	8101612 <MX_SAI1_Init+0x11e>
  {
    Error_Handler();
 810160e:	f7ff fd9b 	bl	8101148 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8101612:	bf00      	nop
 8101614:	bd80      	pop	{r7, pc}
 8101616:	bf00      	nop
 8101618:	100003dc 	.word	0x100003dc
 810161c:	40015804 	.word	0x40015804
 8101620:	0002ee00 	.word	0x0002ee00
 8101624:	10000474 	.word	0x10000474
 8101628:	40015824 	.word	0x40015824

0810162c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 810162c:	b580      	push	{r7, lr}
 810162e:	b0ba      	sub	sp, #232	; 0xe8
 8101630:	af00      	add	r7, sp, #0
 8101632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101634:	f107 0314 	add.w	r3, r7, #20
 8101638:	22c0      	movs	r2, #192	; 0xc0
 810163a:	2100      	movs	r1, #0
 810163c:	4618      	mov	r0, r3
 810163e:	f00e fa69 	bl	810fb14 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8101642:	687b      	ldr	r3, [r7, #4]
 8101644:	681b      	ldr	r3, [r3, #0]
 8101646:	4a4c      	ldr	r2, [pc, #304]	; (8101778 <HAL_SAI_MspInit+0x14c>)
 8101648:	4293      	cmp	r3, r2
 810164a:	d150      	bne.n	81016ee <HAL_SAI_MspInit+0xc2>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 810164c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101650:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101652:	2300      	movs	r3, #0
 8101654:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101656:	f107 0314 	add.w	r3, r7, #20
 810165a:	4618      	mov	r0, r3
 810165c:	f003 ff68 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 8101660:	4603      	mov	r3, r0
 8101662:	2b00      	cmp	r3, #0
 8101664:	d001      	beq.n	810166a <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 8101666:	f7ff fd6f 	bl	8101148 <Error_Handler>
    }

    if (SAI1_client == 0)
 810166a:	4b44      	ldr	r3, [pc, #272]	; (810177c <HAL_SAI_MspInit+0x150>)
 810166c:	681b      	ldr	r3, [r3, #0]
 810166e:	2b00      	cmp	r3, #0
 8101670:	d10e      	bne.n	8101690 <HAL_SAI_MspInit+0x64>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101672:	4b43      	ldr	r3, [pc, #268]	; (8101780 <HAL_SAI_MspInit+0x154>)
 8101674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101678:	4a41      	ldr	r2, [pc, #260]	; (8101780 <HAL_SAI_MspInit+0x154>)
 810167a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810167e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101682:	4b3f      	ldr	r3, [pc, #252]	; (8101780 <HAL_SAI_MspInit+0x154>)
 8101684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810168c:	613b      	str	r3, [r7, #16]
 810168e:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8101690:	4b3a      	ldr	r3, [pc, #232]	; (810177c <HAL_SAI_MspInit+0x150>)
 8101692:	681b      	ldr	r3, [r3, #0]
 8101694:	3301      	adds	r3, #1
 8101696:	4a39      	ldr	r2, [pc, #228]	; (810177c <HAL_SAI_MspInit+0x150>)
 8101698:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 810169a:	2370      	movs	r3, #112	; 0x70
 810169c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016a0:	2302      	movs	r3, #2
 81016a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016a6:	2300      	movs	r3, #0
 81016a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016ac:	2300      	movs	r3, #0
 81016ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81016b2:	2306      	movs	r3, #6
 81016b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81016b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81016bc:	4619      	mov	r1, r3
 81016be:	4831      	ldr	r0, [pc, #196]	; (8101784 <HAL_SAI_MspInit+0x158>)
 81016c0:	f003 f882 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 81016c4:	2380      	movs	r3, #128	; 0x80
 81016c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016ca:	2302      	movs	r3, #2
 81016cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016d0:	2300      	movs	r3, #0
 81016d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016d6:	2300      	movs	r3, #0
 81016d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81016dc:	2306      	movs	r3, #6
 81016de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 81016e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81016e6:	4619      	mov	r1, r3
 81016e8:	4827      	ldr	r0, [pc, #156]	; (8101788 <HAL_SAI_MspInit+0x15c>)
 81016ea:	f003 f86d 	bl	81047c8 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 81016ee:	687b      	ldr	r3, [r7, #4]
 81016f0:	681b      	ldr	r3, [r3, #0]
 81016f2:	4a26      	ldr	r2, [pc, #152]	; (810178c <HAL_SAI_MspInit+0x160>)
 81016f4:	4293      	cmp	r3, r2
 81016f6:	d13b      	bne.n	8101770 <HAL_SAI_MspInit+0x144>
    {
      /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81016f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 81016fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81016fe:	2300      	movs	r3, #0
 8101700:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101702:	f107 0314 	add.w	r3, r7, #20
 8101706:	4618      	mov	r0, r3
 8101708:	f003 ff12 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 810170c:	4603      	mov	r3, r0
 810170e:	2b00      	cmp	r3, #0
 8101710:	d001      	beq.n	8101716 <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 8101712:	f7ff fd19 	bl	8101148 <Error_Handler>
    }

      if (SAI1_client == 0)
 8101716:	4b19      	ldr	r3, [pc, #100]	; (810177c <HAL_SAI_MspInit+0x150>)
 8101718:	681b      	ldr	r3, [r3, #0]
 810171a:	2b00      	cmp	r3, #0
 810171c:	d10e      	bne.n	810173c <HAL_SAI_MspInit+0x110>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 810171e:	4b18      	ldr	r3, [pc, #96]	; (8101780 <HAL_SAI_MspInit+0x154>)
 8101720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101724:	4a16      	ldr	r2, [pc, #88]	; (8101780 <HAL_SAI_MspInit+0x154>)
 8101726:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810172a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810172e:	4b14      	ldr	r3, [pc, #80]	; (8101780 <HAL_SAI_MspInit+0x154>)
 8101730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101738:	60fb      	str	r3, [r7, #12]
 810173a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 810173c:	4b0f      	ldr	r3, [pc, #60]	; (810177c <HAL_SAI_MspInit+0x150>)
 810173e:	681b      	ldr	r3, [r3, #0]
 8101740:	3301      	adds	r3, #1
 8101742:	4a0e      	ldr	r2, [pc, #56]	; (810177c <HAL_SAI_MspInit+0x150>)
 8101744:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8101746:	2308      	movs	r3, #8
 8101748:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810174c:	2302      	movs	r3, #2
 810174e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101752:	2300      	movs	r3, #0
 8101754:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101758:	2300      	movs	r3, #0
 810175a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810175e:	2306      	movs	r3, #6
 8101760:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8101764:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101768:	4619      	mov	r1, r3
 810176a:	4806      	ldr	r0, [pc, #24]	; (8101784 <HAL_SAI_MspInit+0x158>)
 810176c:	f003 f82c 	bl	81047c8 <HAL_GPIO_Init>

    }
}
 8101770:	bf00      	nop
 8101772:	37e8      	adds	r7, #232	; 0xe8
 8101774:	46bd      	mov	sp, r7
 8101776:	bd80      	pop	{r7, pc}
 8101778:	40015804 	.word	0x40015804
 810177c:	1000050c 	.word	0x1000050c
 8101780:	58024400 	.word	0x58024400
 8101784:	58021000 	.word	0x58021000
 8101788:	58021800 	.word	0x58021800
 810178c:	40015824 	.word	0x40015824

08101790 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8101790:	b580      	push	{r7, lr}
 8101792:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8101794:	4b0e      	ldr	r3, [pc, #56]	; (81017d0 <MX_SDMMC1_SD_Init+0x40>)
 8101796:	4a0f      	ldr	r2, [pc, #60]	; (81017d4 <MX_SDMMC1_SD_Init+0x44>)
 8101798:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 810179a:	4b0d      	ldr	r3, [pc, #52]	; (81017d0 <MX_SDMMC1_SD_Init+0x40>)
 810179c:	2200      	movs	r2, #0
 810179e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 81017a0:	4b0b      	ldr	r3, [pc, #44]	; (81017d0 <MX_SDMMC1_SD_Init+0x40>)
 81017a2:	2200      	movs	r2, #0
 81017a4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 81017a6:	4b0a      	ldr	r3, [pc, #40]	; (81017d0 <MX_SDMMC1_SD_Init+0x40>)
 81017a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 81017ac:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 81017ae:	4b08      	ldr	r3, [pc, #32]	; (81017d0 <MX_SDMMC1_SD_Init+0x40>)
 81017b0:	2200      	movs	r2, #0
 81017b2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 81017b4:	4b06      	ldr	r3, [pc, #24]	; (81017d0 <MX_SDMMC1_SD_Init+0x40>)
 81017b6:	2200      	movs	r2, #0
 81017b8:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 81017ba:	4805      	ldr	r0, [pc, #20]	; (81017d0 <MX_SDMMC1_SD_Init+0x40>)
 81017bc:	f006 fd36 	bl	810822c <HAL_SD_Init>
 81017c0:	4603      	mov	r3, r0
 81017c2:	2b00      	cmp	r3, #0
 81017c4:	d001      	beq.n	81017ca <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 81017c6:	f7ff fcbf 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 81017ca:	bf00      	nop
 81017cc:	bd80      	pop	{r7, pc}
 81017ce:	bf00      	nop
 81017d0:	10000510 	.word	0x10000510
 81017d4:	52007000 	.word	0x52007000

081017d8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 81017d8:	b580      	push	{r7, lr}
 81017da:	b0ba      	sub	sp, #232	; 0xe8
 81017dc:	af00      	add	r7, sp, #0
 81017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81017e4:	2200      	movs	r2, #0
 81017e6:	601a      	str	r2, [r3, #0]
 81017e8:	605a      	str	r2, [r3, #4]
 81017ea:	609a      	str	r2, [r3, #8]
 81017ec:	60da      	str	r2, [r3, #12]
 81017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017f0:	f107 0314 	add.w	r3, r7, #20
 81017f4:	22c0      	movs	r2, #192	; 0xc0
 81017f6:	2100      	movs	r1, #0
 81017f8:	4618      	mov	r0, r3
 81017fa:	f00e f98b 	bl	810fb14 <memset>
  if(sdHandle->Instance==SDMMC1)
 81017fe:	687b      	ldr	r3, [r7, #4]
 8101800:	681b      	ldr	r3, [r3, #0]
 8101802:	4a37      	ldr	r2, [pc, #220]	; (81018e0 <HAL_SD_MspInit+0x108>)
 8101804:	4293      	cmp	r3, r2
 8101806:	d166      	bne.n	81018d6 <HAL_SD_MspInit+0xfe>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 810180c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 810180e:	2300      	movs	r3, #0
 8101810:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101812:	f107 0314 	add.w	r3, r7, #20
 8101816:	4618      	mov	r0, r3
 8101818:	f003 fe8a 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 810181c:	4603      	mov	r3, r0
 810181e:	2b00      	cmp	r3, #0
 8101820:	d001      	beq.n	8101826 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8101822:	f7ff fc91 	bl	8101148 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101826:	4b2f      	ldr	r3, [pc, #188]	; (81018e4 <HAL_SD_MspInit+0x10c>)
 8101828:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810182c:	4a2d      	ldr	r2, [pc, #180]	; (81018e4 <HAL_SD_MspInit+0x10c>)
 810182e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101832:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101836:	4b2b      	ldr	r3, [pc, #172]	; (81018e4 <HAL_SD_MspInit+0x10c>)
 8101838:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810183c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101840:	613b      	str	r3, [r7, #16]
 8101842:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101844:	4b27      	ldr	r3, [pc, #156]	; (81018e4 <HAL_SD_MspInit+0x10c>)
 8101846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810184a:	4a26      	ldr	r2, [pc, #152]	; (81018e4 <HAL_SD_MspInit+0x10c>)
 810184c:	f043 0304 	orr.w	r3, r3, #4
 8101850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101854:	4b23      	ldr	r3, [pc, #140]	; (81018e4 <HAL_SD_MspInit+0x10c>)
 8101856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810185a:	f003 0304 	and.w	r3, r3, #4
 810185e:	60fb      	str	r3, [r7, #12]
 8101860:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101862:	4b20      	ldr	r3, [pc, #128]	; (81018e4 <HAL_SD_MspInit+0x10c>)
 8101864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101868:	4a1e      	ldr	r2, [pc, #120]	; (81018e4 <HAL_SD_MspInit+0x10c>)
 810186a:	f043 0308 	orr.w	r3, r3, #8
 810186e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101872:	4b1c      	ldr	r3, [pc, #112]	; (81018e4 <HAL_SD_MspInit+0x10c>)
 8101874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101878:	f003 0308 	and.w	r3, r3, #8
 810187c:	60bb      	str	r3, [r7, #8]
 810187e:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101880:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8101884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101888:	2302      	movs	r3, #2
 810188a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810188e:	2300      	movs	r3, #0
 8101890:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101894:	2303      	movs	r3, #3
 8101896:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810189a:	230c      	movs	r3, #12
 810189c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81018a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81018a4:	4619      	mov	r1, r3
 81018a6:	4810      	ldr	r0, [pc, #64]	; (81018e8 <HAL_SD_MspInit+0x110>)
 81018a8:	f002 ff8e 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 81018ac:	2304      	movs	r3, #4
 81018ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018b2:	2302      	movs	r3, #2
 81018b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018b8:	2300      	movs	r3, #0
 81018ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81018be:	2303      	movs	r3, #3
 81018c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81018c4:	230c      	movs	r3, #12
 81018c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 81018ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81018ce:	4619      	mov	r1, r3
 81018d0:	4806      	ldr	r0, [pc, #24]	; (81018ec <HAL_SD_MspInit+0x114>)
 81018d2:	f002 ff79 	bl	81047c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 81018d6:	bf00      	nop
 81018d8:	37e8      	adds	r7, #232	; 0xe8
 81018da:	46bd      	mov	sp, r7
 81018dc:	bd80      	pop	{r7, pc}
 81018de:	bf00      	nop
 81018e0:	52007000 	.word	0x52007000
 81018e4:	58024400 	.word	0x58024400
 81018e8:	58020800 	.word	0x58020800
 81018ec:	58020c00 	.word	0x58020c00

081018f0 <MX_SPDIFRX1_Init>:

SPDIFRX_HandleTypeDef hspdif1;

/* SPDIFRX1 init function */
void MX_SPDIFRX1_Init(void)
{
 81018f0:	b580      	push	{r7, lr}
 81018f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 81018f4:	4b19      	ldr	r3, [pc, #100]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 81018f6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 81018fa:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 81018fc:	4b17      	ldr	r3, [pc, #92]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 81018fe:	2200      	movs	r2, #0
 8101900:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8101902:	4b16      	ldr	r3, [pc, #88]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 8101904:	2200      	movs	r2, #0
 8101906:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8101908:	4b14      	ldr	r3, [pc, #80]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 810190a:	2200      	movs	r2, #0
 810190c:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 810190e:	4b13      	ldr	r3, [pc, #76]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 8101910:	2200      	movs	r2, #0
 8101912:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8101914:	4b11      	ldr	r3, [pc, #68]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 8101916:	2200      	movs	r2, #0
 8101918:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 810191a:	4b10      	ldr	r3, [pc, #64]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 810191c:	2200      	movs	r2, #0
 810191e:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8101920:	4b0e      	ldr	r3, [pc, #56]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 8101922:	2200      	movs	r2, #0
 8101924:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8101926:	4b0d      	ldr	r3, [pc, #52]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 8101928:	2200      	movs	r2, #0
 810192a:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 810192c:	4b0b      	ldr	r3, [pc, #44]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 810192e:	2200      	movs	r2, #0
 8101930:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8101932:	4b0a      	ldr	r3, [pc, #40]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 8101934:	2200      	movs	r2, #0
 8101936:	629a      	str	r2, [r3, #40]	; 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8101938:	4b08      	ldr	r3, [pc, #32]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 810193a:	2200      	movs	r2, #0
 810193c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8101940:	4b06      	ldr	r3, [pc, #24]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 8101942:	2200      	movs	r2, #0
 8101944:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8101948:	4804      	ldr	r0, [pc, #16]	; (810195c <MX_SPDIFRX1_Init+0x6c>)
 810194a:	f007 fd13 	bl	8109374 <HAL_SPDIFRX_Init>
 810194e:	4603      	mov	r3, r0
 8101950:	2b00      	cmp	r3, #0
 8101952:	d001      	beq.n	8101958 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8101954:	f7ff fbf8 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8101958:	bf00      	nop
 810195a:	bd80      	pop	{r7, pc}
 810195c:	1000058c 	.word	0x1000058c

08101960 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8101960:	b580      	push	{r7, lr}
 8101962:	b0ba      	sub	sp, #232	; 0xe8
 8101964:	af00      	add	r7, sp, #0
 8101966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101968:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810196c:	2200      	movs	r2, #0
 810196e:	601a      	str	r2, [r3, #0]
 8101970:	605a      	str	r2, [r3, #4]
 8101972:	609a      	str	r2, [r3, #8]
 8101974:	60da      	str	r2, [r3, #12]
 8101976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101978:	f107 0314 	add.w	r3, r7, #20
 810197c:	22c0      	movs	r2, #192	; 0xc0
 810197e:	2100      	movs	r1, #0
 8101980:	4618      	mov	r0, r3
 8101982:	f00e f8c7 	bl	810fb14 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	681b      	ldr	r3, [r3, #0]
 810198a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 810198e:	d141      	bne.n	8101a14 <HAL_SPDIFRX_MspInit+0xb4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101990:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8101994:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8101996:	2300      	movs	r3, #0
 8101998:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810199a:	f107 0314 	add.w	r3, r7, #20
 810199e:	4618      	mov	r0, r3
 81019a0:	f003 fdc6 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 81019a4:	4603      	mov	r3, r0
 81019a6:	2b00      	cmp	r3, #0
 81019a8:	d001      	beq.n	81019ae <HAL_SPDIFRX_MspInit+0x4e>
    {
      Error_Handler();
 81019aa:	f7ff fbcd 	bl	8101148 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 81019ae:	4b1b      	ldr	r3, [pc, #108]	; (8101a1c <HAL_SPDIFRX_MspInit+0xbc>)
 81019b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81019b4:	4a19      	ldr	r2, [pc, #100]	; (8101a1c <HAL_SPDIFRX_MspInit+0xbc>)
 81019b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81019ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81019be:	4b17      	ldr	r3, [pc, #92]	; (8101a1c <HAL_SPDIFRX_MspInit+0xbc>)
 81019c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81019c8:	613b      	str	r3, [r7, #16]
 81019ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81019cc:	4b13      	ldr	r3, [pc, #76]	; (8101a1c <HAL_SPDIFRX_MspInit+0xbc>)
 81019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019d2:	4a12      	ldr	r2, [pc, #72]	; (8101a1c <HAL_SPDIFRX_MspInit+0xbc>)
 81019d4:	f043 0308 	orr.w	r3, r3, #8
 81019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019dc:	4b0f      	ldr	r3, [pc, #60]	; (8101a1c <HAL_SPDIFRX_MspInit+0xbc>)
 81019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019e2:	f003 0308 	and.w	r3, r3, #8
 81019e6:	60fb      	str	r3, [r7, #12]
 81019e8:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 81019ea:	2380      	movs	r3, #128	; 0x80
 81019ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019f0:	2302      	movs	r3, #2
 81019f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019f6:	2300      	movs	r3, #0
 81019f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019fc:	2300      	movs	r3, #0
 81019fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101a02:	2309      	movs	r3, #9
 8101a04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101a08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101a0c:	4619      	mov	r1, r3
 8101a0e:	4804      	ldr	r0, [pc, #16]	; (8101a20 <HAL_SPDIFRX_MspInit+0xc0>)
 8101a10:	f002 feda 	bl	81047c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8101a14:	bf00      	nop
 8101a16:	37e8      	adds	r7, #232	; 0xe8
 8101a18:	46bd      	mov	sp, r7
 8101a1a:	bd80      	pop	{r7, pc}
 8101a1c:	58024400 	.word	0x58024400
 8101a20:	58020c00 	.word	0x58020c00

08101a24 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8101a24:	b580      	push	{r7, lr}
 8101a26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8101a28:	4b26      	ldr	r3, [pc, #152]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a2a:	4a27      	ldr	r2, [pc, #156]	; (8101ac8 <MX_SPI2_Init+0xa4>)
 8101a2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8101a2e:	4b25      	ldr	r3, [pc, #148]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101a34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8101a36:	4b23      	ldr	r3, [pc, #140]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a38:	2200      	movs	r2, #0
 8101a3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8101a3c:	4b21      	ldr	r3, [pc, #132]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a3e:	2203      	movs	r2, #3
 8101a40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101a42:	4b20      	ldr	r3, [pc, #128]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a44:	2200      	movs	r2, #0
 8101a46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101a48:	4b1e      	ldr	r3, [pc, #120]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a4a:	2200      	movs	r2, #0
 8101a4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8101a4e:	4b1d      	ldr	r3, [pc, #116]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a50:	2200      	movs	r2, #0
 8101a52:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8101a54:	4b1b      	ldr	r3, [pc, #108]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a56:	2200      	movs	r2, #0
 8101a58:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101a5a:	4b1a      	ldr	r3, [pc, #104]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a5c:	2200      	movs	r2, #0
 8101a5e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8101a60:	4b18      	ldr	r3, [pc, #96]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a62:	2200      	movs	r2, #0
 8101a64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101a66:	4b17      	ldr	r3, [pc, #92]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a68:	2200      	movs	r2, #0
 8101a6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8101a6c:	4b15      	ldr	r3, [pc, #84]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a6e:	2200      	movs	r2, #0
 8101a70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101a72:	4b14      	ldr	r3, [pc, #80]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101a78:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101a7a:	4b12      	ldr	r3, [pc, #72]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a7c:	2200      	movs	r2, #0
 8101a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101a80:	4b10      	ldr	r3, [pc, #64]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a82:	2200      	movs	r2, #0
 8101a84:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101a86:	4b0f      	ldr	r3, [pc, #60]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a88:	2200      	movs	r2, #0
 8101a8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101a8c:	4b0d      	ldr	r3, [pc, #52]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a8e:	2200      	movs	r2, #0
 8101a90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101a92:	4b0c      	ldr	r3, [pc, #48]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a94:	2200      	movs	r2, #0
 8101a96:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101a98:	4b0a      	ldr	r3, [pc, #40]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101a9a:	2200      	movs	r2, #0
 8101a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101a9e:	4b09      	ldr	r3, [pc, #36]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101aa0:	2200      	movs	r2, #0
 8101aa2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101aa4:	4b07      	ldr	r3, [pc, #28]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101aa6:	2200      	movs	r2, #0
 8101aa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101aaa:	4b06      	ldr	r3, [pc, #24]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101aac:	2200      	movs	r2, #0
 8101aae:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8101ab0:	4804      	ldr	r0, [pc, #16]	; (8101ac4 <MX_SPI2_Init+0xa0>)
 8101ab2:	f007 fccd 	bl	8109450 <HAL_SPI_Init>
 8101ab6:	4603      	mov	r3, r0
 8101ab8:	2b00      	cmp	r3, #0
 8101aba:	d001      	beq.n	8101ac0 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8101abc:	f7ff fb44 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8101ac0:	bf00      	nop
 8101ac2:	bd80      	pop	{r7, pc}
 8101ac4:	100005dc 	.word	0x100005dc
 8101ac8:	40003800 	.word	0x40003800

08101acc <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8101acc:	b580      	push	{r7, lr}
 8101ace:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8101ad0:	4b26      	ldr	r3, [pc, #152]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101ad2:	4a27      	ldr	r2, [pc, #156]	; (8101b70 <MX_SPI5_Init+0xa4>)
 8101ad4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8101ad6:	4b25      	ldr	r3, [pc, #148]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101ad8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101adc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8101ade:	4b23      	ldr	r3, [pc, #140]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101ae0:	2200      	movs	r2, #0
 8101ae2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8101ae4:	4b21      	ldr	r3, [pc, #132]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101ae6:	2203      	movs	r2, #3
 8101ae8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101aea:	4b20      	ldr	r3, [pc, #128]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101aec:	2200      	movs	r2, #0
 8101aee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101af0:	4b1e      	ldr	r3, [pc, #120]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101af2:	2200      	movs	r2, #0
 8101af4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8101af6:	4b1d      	ldr	r3, [pc, #116]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101af8:	2200      	movs	r2, #0
 8101afa:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8101afc:	4b1b      	ldr	r3, [pc, #108]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101afe:	2200      	movs	r2, #0
 8101b00:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101b02:	4b1a      	ldr	r3, [pc, #104]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b04:	2200      	movs	r2, #0
 8101b06:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8101b08:	4b18      	ldr	r3, [pc, #96]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b0a:	2200      	movs	r2, #0
 8101b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101b0e:	4b17      	ldr	r3, [pc, #92]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b10:	2200      	movs	r2, #0
 8101b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8101b14:	4b15      	ldr	r3, [pc, #84]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b16:	2200      	movs	r2, #0
 8101b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8101b1a:	4b14      	ldr	r3, [pc, #80]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8101b20:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101b22:	4b12      	ldr	r3, [pc, #72]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b24:	2200      	movs	r2, #0
 8101b26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101b28:	4b10      	ldr	r3, [pc, #64]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b2a:	2200      	movs	r2, #0
 8101b2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101b2e:	4b0f      	ldr	r3, [pc, #60]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b30:	2200      	movs	r2, #0
 8101b32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101b34:	4b0d      	ldr	r3, [pc, #52]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b36:	2200      	movs	r2, #0
 8101b38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101b3a:	4b0c      	ldr	r3, [pc, #48]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b3c:	2200      	movs	r2, #0
 8101b3e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8101b40:	4b0a      	ldr	r3, [pc, #40]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b42:	2200      	movs	r2, #0
 8101b44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101b46:	4b09      	ldr	r3, [pc, #36]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b48:	2200      	movs	r2, #0
 8101b4a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8101b4c:	4b07      	ldr	r3, [pc, #28]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b4e:	2200      	movs	r2, #0
 8101b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101b52:	4b06      	ldr	r3, [pc, #24]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b54:	2200      	movs	r2, #0
 8101b56:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8101b58:	4804      	ldr	r0, [pc, #16]	; (8101b6c <MX_SPI5_Init+0xa0>)
 8101b5a:	f007 fc79 	bl	8109450 <HAL_SPI_Init>
 8101b5e:	4603      	mov	r3, r0
 8101b60:	2b00      	cmp	r3, #0
 8101b62:	d001      	beq.n	8101b68 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8101b64:	f7ff faf0 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8101b68:	bf00      	nop
 8101b6a:	bd80      	pop	{r7, pc}
 8101b6c:	10000664 	.word	0x10000664
 8101b70:	40015000 	.word	0x40015000

08101b74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101b74:	b580      	push	{r7, lr}
 8101b76:	b0be      	sub	sp, #248	; 0xf8
 8101b78:	af00      	add	r7, sp, #0
 8101b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101b80:	2200      	movs	r2, #0
 8101b82:	601a      	str	r2, [r3, #0]
 8101b84:	605a      	str	r2, [r3, #4]
 8101b86:	609a      	str	r2, [r3, #8]
 8101b88:	60da      	str	r2, [r3, #12]
 8101b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101b90:	22c0      	movs	r2, #192	; 0xc0
 8101b92:	2100      	movs	r1, #0
 8101b94:	4618      	mov	r0, r3
 8101b96:	f00d ffbd 	bl	810fb14 <memset>
  if(spiHandle->Instance==SPI2)
 8101b9a:	687b      	ldr	r3, [r7, #4]
 8101b9c:	681b      	ldr	r3, [r3, #0]
 8101b9e:	4a6e      	ldr	r2, [pc, #440]	; (8101d58 <HAL_SPI_MspInit+0x1e4>)
 8101ba0:	4293      	cmp	r3, r2
 8101ba2:	d168      	bne.n	8101c76 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8101ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101ba8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101baa:	2300      	movs	r3, #0
 8101bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101bb4:	4618      	mov	r0, r3
 8101bb6:	f003 fcbb 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 8101bba:	4603      	mov	r3, r0
 8101bbc:	2b00      	cmp	r3, #0
 8101bbe:	d001      	beq.n	8101bc4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8101bc0:	f7ff fac2 	bl	8101148 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8101bc4:	4b65      	ldr	r3, [pc, #404]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101bca:	4a64      	ldr	r2, [pc, #400]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101bd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101bd4:	4b61      	ldr	r3, [pc, #388]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101bde:	623b      	str	r3, [r7, #32]
 8101be0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101be2:	4b5e      	ldr	r3, [pc, #376]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101be8:	4a5c      	ldr	r2, [pc, #368]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101bea:	f043 0301 	orr.w	r3, r3, #1
 8101bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101bf2:	4b5a      	ldr	r3, [pc, #360]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bf8:	f003 0301 	and.w	r3, r3, #1
 8101bfc:	61fb      	str	r3, [r7, #28]
 8101bfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101c00:	4b56      	ldr	r3, [pc, #344]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c06:	4a55      	ldr	r2, [pc, #340]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101c08:	f043 0304 	orr.w	r3, r3, #4
 8101c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c10:	4b52      	ldr	r3, [pc, #328]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c16:	f003 0304 	and.w	r3, r3, #4
 8101c1a:	61bb      	str	r3, [r7, #24]
 8101c1c:	69bb      	ldr	r3, [r7, #24]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|PMOD_1_Pin;
 8101c1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8101c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c26:	2302      	movs	r3, #2
 8101c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c2c:	2300      	movs	r3, #0
 8101c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c32:	2300      	movs	r3, #0
 8101c34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101c38:	2305      	movs	r3, #5
 8101c3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101c42:	4619      	mov	r1, r3
 8101c44:	4846      	ldr	r0, [pc, #280]	; (8101d60 <HAL_SPI_MspInit+0x1ec>)
 8101c46:	f002 fdbf 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8101c4a:	230c      	movs	r3, #12
 8101c4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c50:	2302      	movs	r3, #2
 8101c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c56:	2300      	movs	r3, #0
 8101c58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c5c:	2300      	movs	r3, #0
 8101c5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101c62:	2305      	movs	r3, #5
 8101c64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101c68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101c6c:	4619      	mov	r1, r3
 8101c6e:	483d      	ldr	r0, [pc, #244]	; (8101d64 <HAL_SPI_MspInit+0x1f0>)
 8101c70:	f002 fdaa 	bl	81047c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8101c74:	e06c      	b.n	8101d50 <HAL_SPI_MspInit+0x1dc>
  else if(spiHandle->Instance==SPI5)
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	4a3b      	ldr	r2, [pc, #236]	; (8101d68 <HAL_SPI_MspInit+0x1f4>)
 8101c7c:	4293      	cmp	r3, r2
 8101c7e:	d167      	bne.n	8101d50 <HAL_SPI_MspInit+0x1dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101c84:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101c86:	2300      	movs	r3, #0
 8101c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101c90:	4618      	mov	r0, r3
 8101c92:	f003 fc4d 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 8101c96:	4603      	mov	r3, r0
 8101c98:	2b00      	cmp	r3, #0
 8101c9a:	d001      	beq.n	8101ca0 <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 8101c9c:	f7ff fa54 	bl	8101148 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101ca0:	4b2e      	ldr	r3, [pc, #184]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101ca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101ca6:	4a2d      	ldr	r2, [pc, #180]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8101cac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101cb0:	4b2a      	ldr	r3, [pc, #168]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101cba:	617b      	str	r3, [r7, #20]
 8101cbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101cbe:	4b27      	ldr	r3, [pc, #156]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cc4:	4a25      	ldr	r2, [pc, #148]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8101cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cce:	4b23      	ldr	r3, [pc, #140]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101cd8:	613b      	str	r3, [r7, #16]
 8101cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101cdc:	4b1f      	ldr	r3, [pc, #124]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ce2:	4a1e      	ldr	r2, [pc, #120]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cec:	4b1b      	ldr	r3, [pc, #108]	; (8101d5c <HAL_SPI_MspInit+0x1e8>)
 8101cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101cf6:	60fb      	str	r3, [r7, #12]
 8101cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101cfa:	2303      	movs	r3, #3
 8101cfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d00:	2302      	movs	r3, #2
 8101d02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d06:	2300      	movs	r3, #0
 8101d08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d0c:	2300      	movs	r3, #0
 8101d0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101d12:	2305      	movs	r3, #5
 8101d14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8101d18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101d1c:	4619      	mov	r1, r3
 8101d1e:	4813      	ldr	r0, [pc, #76]	; (8101d6c <HAL_SPI_MspInit+0x1f8>)
 8101d20:	f002 fd52 	bl	81047c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8101d24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101d28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d2c:	2302      	movs	r3, #2
 8101d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d32:	2300      	movs	r3, #0
 8101d34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d38:	2300      	movs	r3, #0
 8101d3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101d3e:	2305      	movs	r3, #5
 8101d40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101d44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101d48:	4619      	mov	r1, r3
 8101d4a:	4809      	ldr	r0, [pc, #36]	; (8101d70 <HAL_SPI_MspInit+0x1fc>)
 8101d4c:	f002 fd3c 	bl	81047c8 <HAL_GPIO_Init>
}
 8101d50:	bf00      	nop
 8101d52:	37f8      	adds	r7, #248	; 0xf8
 8101d54:	46bd      	mov	sp, r7
 8101d56:	bd80      	pop	{r7, pc}
 8101d58:	40003800 	.word	0x40003800
 8101d5c:	58024400 	.word	0x58024400
 8101d60:	58020000 	.word	0x58020000
 8101d64:	58020800 	.word	0x58020800
 8101d68:	40015000 	.word	0x40015000
 8101d6c:	58022800 	.word	0x58022800
 8101d70:	58022400 	.word	0x58022400

08101d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101d74:	b580      	push	{r7, lr}
 8101d76:	b082      	sub	sp, #8
 8101d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101d7a:	4b10      	ldr	r3, [pc, #64]	; (8101dbc <HAL_MspInit+0x48>)
 8101d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101d80:	4a0e      	ldr	r2, [pc, #56]	; (8101dbc <HAL_MspInit+0x48>)
 8101d82:	f043 0302 	orr.w	r3, r3, #2
 8101d86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101d8a:	4b0c      	ldr	r3, [pc, #48]	; (8101dbc <HAL_MspInit+0x48>)
 8101d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101d90:	f003 0302 	and.w	r3, r3, #2
 8101d94:	607b      	str	r3, [r7, #4]
 8101d96:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101d98:	2200      	movs	r2, #0
 8101d9a:	210f      	movs	r1, #15
 8101d9c:	f06f 0001 	mvn.w	r0, #1
 8101da0:	f002 f8b2 	bl	8103f08 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8101da4:	2200      	movs	r2, #0
 8101da6:	2105      	movs	r1, #5
 8101da8:	207e      	movs	r0, #126	; 0x7e
 8101daa:	f002 f8ad 	bl	8103f08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101dae:	207e      	movs	r0, #126	; 0x7e
 8101db0:	f002 f8c4 	bl	8103f3c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101db4:	bf00      	nop
 8101db6:	3708      	adds	r7, #8
 8101db8:	46bd      	mov	sp, r7
 8101dba:	bd80      	pop	{r7, pc}
 8101dbc:	58024400 	.word	0x58024400

08101dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101dc0:	b580      	push	{r7, lr}
 8101dc2:	b090      	sub	sp, #64	; 0x40
 8101dc4:	af00      	add	r7, sp, #0
 8101dc6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101dc8:	687b      	ldr	r3, [r7, #4]
 8101dca:	2b0f      	cmp	r3, #15
 8101dcc:	d827      	bhi.n	8101e1e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8101dce:	2200      	movs	r2, #0
 8101dd0:	6879      	ldr	r1, [r7, #4]
 8101dd2:	2036      	movs	r0, #54	; 0x36
 8101dd4:	f002 f898 	bl	8103f08 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8101dd8:	2036      	movs	r0, #54	; 0x36
 8101dda:	f002 f8af 	bl	8103f3c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101dde:	4a29      	ldr	r2, [pc, #164]	; (8101e84 <HAL_InitTick+0xc4>)
 8101de0:	687b      	ldr	r3, [r7, #4]
 8101de2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8101de4:	4b28      	ldr	r3, [pc, #160]	; (8101e88 <HAL_InitTick+0xc8>)
 8101de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dea:	4a27      	ldr	r2, [pc, #156]	; (8101e88 <HAL_InitTick+0xc8>)
 8101dec:	f043 0310 	orr.w	r3, r3, #16
 8101df0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101df4:	4b24      	ldr	r3, [pc, #144]	; (8101e88 <HAL_InitTick+0xc8>)
 8101df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dfa:	f003 0310 	and.w	r3, r3, #16
 8101dfe:	60fb      	str	r3, [r7, #12]
 8101e00:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101e02:	f107 0210 	add.w	r2, r7, #16
 8101e06:	f107 0314 	add.w	r3, r7, #20
 8101e0a:	4611      	mov	r1, r2
 8101e0c:	4618      	mov	r0, r3
 8101e0e:	f003 fb4d 	bl	81054ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8101e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101e14:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8101e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101e18:	2b00      	cmp	r3, #0
 8101e1a:	d106      	bne.n	8101e2a <HAL_InitTick+0x6a>
 8101e1c:	e001      	b.n	8101e22 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8101e1e:	2301      	movs	r3, #1
 8101e20:	e02b      	b.n	8101e7a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8101e22:	f003 fb17 	bl	8105454 <HAL_RCC_GetPCLK1Freq>
 8101e26:	63f8      	str	r0, [r7, #60]	; 0x3c
 8101e28:	e004      	b.n	8101e34 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8101e2a:	f003 fb13 	bl	8105454 <HAL_RCC_GetPCLK1Freq>
 8101e2e:	4603      	mov	r3, r0
 8101e30:	005b      	lsls	r3, r3, #1
 8101e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101e36:	4a15      	ldr	r2, [pc, #84]	; (8101e8c <HAL_InitTick+0xcc>)
 8101e38:	fba2 2303 	umull	r2, r3, r2, r3
 8101e3c:	0c9b      	lsrs	r3, r3, #18
 8101e3e:	3b01      	subs	r3, #1
 8101e40:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8101e42:	4b13      	ldr	r3, [pc, #76]	; (8101e90 <HAL_InitTick+0xd0>)
 8101e44:	4a13      	ldr	r2, [pc, #76]	; (8101e94 <HAL_InitTick+0xd4>)
 8101e46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8101e48:	4b11      	ldr	r3, [pc, #68]	; (8101e90 <HAL_InitTick+0xd0>)
 8101e4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101e4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8101e50:	4a0f      	ldr	r2, [pc, #60]	; (8101e90 <HAL_InitTick+0xd0>)
 8101e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101e54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8101e56:	4b0e      	ldr	r3, [pc, #56]	; (8101e90 <HAL_InitTick+0xd0>)
 8101e58:	2200      	movs	r2, #0
 8101e5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101e5c:	4b0c      	ldr	r3, [pc, #48]	; (8101e90 <HAL_InitTick+0xd0>)
 8101e5e:	2200      	movs	r2, #0
 8101e60:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8101e62:	480b      	ldr	r0, [pc, #44]	; (8101e90 <HAL_InitTick+0xd0>)
 8101e64:	f007 fc15 	bl	8109692 <HAL_TIM_Base_Init>
 8101e68:	4603      	mov	r3, r0
 8101e6a:	2b00      	cmp	r3, #0
 8101e6c:	d104      	bne.n	8101e78 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8101e6e:	4808      	ldr	r0, [pc, #32]	; (8101e90 <HAL_InitTick+0xd0>)
 8101e70:	f007 fc66 	bl	8109740 <HAL_TIM_Base_Start_IT>
 8101e74:	4603      	mov	r3, r0
 8101e76:	e000      	b.n	8101e7a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8101e78:	2301      	movs	r3, #1
}
 8101e7a:	4618      	mov	r0, r3
 8101e7c:	3740      	adds	r7, #64	; 0x40
 8101e7e:	46bd      	mov	sp, r7
 8101e80:	bd80      	pop	{r7, pc}
 8101e82:	bf00      	nop
 8101e84:	10000018 	.word	0x10000018
 8101e88:	58024400 	.word	0x58024400
 8101e8c:	431bde83 	.word	0x431bde83
 8101e90:	100006ec 	.word	0x100006ec
 8101e94:	40001000 	.word	0x40001000

08101e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101e98:	b480      	push	{r7}
 8101e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101e9c:	e7fe      	b.n	8101e9c <NMI_Handler+0x4>

08101e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101e9e:	b480      	push	{r7}
 8101ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101ea2:	e7fe      	b.n	8101ea2 <HardFault_Handler+0x4>

08101ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101ea4:	b480      	push	{r7}
 8101ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101ea8:	e7fe      	b.n	8101ea8 <MemManage_Handler+0x4>

08101eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101eaa:	b480      	push	{r7}
 8101eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101eae:	e7fe      	b.n	8101eae <BusFault_Handler+0x4>

08101eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101eb0:	b480      	push	{r7}
 8101eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101eb4:	e7fe      	b.n	8101eb4 <UsageFault_Handler+0x4>

08101eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101eb6:	b480      	push	{r7}
 8101eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101eba:	bf00      	nop
 8101ebc:	46bd      	mov	sp, r7
 8101ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ec2:	4770      	bx	lr

08101ec4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8101ec4:	b580      	push	{r7, lr}
 8101ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8101ec8:	4802      	ldr	r0, [pc, #8]	; (8101ed4 <TIM6_DAC_IRQHandler+0x10>)
 8101eca:	f007 fd69 	bl	81099a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8101ece:	bf00      	nop
 8101ed0:	bd80      	pop	{r7, pc}
 8101ed2:	bf00      	nop
 8101ed4:	100006ec 	.word	0x100006ec

08101ed8 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8101ed8:	b580      	push	{r7, lr}
 8101eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8101edc:	4802      	ldr	r0, [pc, #8]	; (8101ee8 <CEC_IRQHandler+0x10>)
 8101ede:	f001 fe5f 	bl	8103ba0 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8101ee2:	bf00      	nop
 8101ee4:	bd80      	pop	{r7, pc}
 8101ee6:	bf00      	nop
 8101ee8:	10000360 	.word	0x10000360

08101eec <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101eec:	b580      	push	{r7, lr}
 8101eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101ef0:	f002 fe46 	bl	8104b80 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8101ef4:	bf00      	nop
 8101ef6:	bd80      	pop	{r7, pc}

08101ef8 <MX_TIM8_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim13;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8101ef8:	b580      	push	{r7, lr}
 8101efa:	b096      	sub	sp, #88	; 0x58
 8101efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101efe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101f02:	2200      	movs	r2, #0
 8101f04:	601a      	str	r2, [r3, #0]
 8101f06:	605a      	str	r2, [r3, #4]
 8101f08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101f0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101f0e:	2200      	movs	r2, #0
 8101f10:	601a      	str	r2, [r3, #0]
 8101f12:	605a      	str	r2, [r3, #4]
 8101f14:	609a      	str	r2, [r3, #8]
 8101f16:	60da      	str	r2, [r3, #12]
 8101f18:	611a      	str	r2, [r3, #16]
 8101f1a:	615a      	str	r2, [r3, #20]
 8101f1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101f1e:	1d3b      	adds	r3, r7, #4
 8101f20:	222c      	movs	r2, #44	; 0x2c
 8101f22:	2100      	movs	r1, #0
 8101f24:	4618      	mov	r0, r3
 8101f26:	f00d fdf5 	bl	810fb14 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8101f2a:	4b39      	ldr	r3, [pc, #228]	; (8102010 <MX_TIM8_Init+0x118>)
 8101f2c:	4a39      	ldr	r2, [pc, #228]	; (8102014 <MX_TIM8_Init+0x11c>)
 8101f2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8101f30:	4b37      	ldr	r3, [pc, #220]	; (8102010 <MX_TIM8_Init+0x118>)
 8101f32:	2200      	movs	r2, #0
 8101f34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101f36:	4b36      	ldr	r3, [pc, #216]	; (8102010 <MX_TIM8_Init+0x118>)
 8101f38:	2200      	movs	r2, #0
 8101f3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8101f3c:	4b34      	ldr	r3, [pc, #208]	; (8102010 <MX_TIM8_Init+0x118>)
 8101f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8101f42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101f44:	4b32      	ldr	r3, [pc, #200]	; (8102010 <MX_TIM8_Init+0x118>)
 8101f46:	2200      	movs	r2, #0
 8101f48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8101f4a:	4b31      	ldr	r3, [pc, #196]	; (8102010 <MX_TIM8_Init+0x118>)
 8101f4c:	2200      	movs	r2, #0
 8101f4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101f50:	4b2f      	ldr	r3, [pc, #188]	; (8102010 <MX_TIM8_Init+0x118>)
 8101f52:	2200      	movs	r2, #0
 8101f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8101f56:	482e      	ldr	r0, [pc, #184]	; (8102010 <MX_TIM8_Init+0x118>)
 8101f58:	f007 fc6a 	bl	8109830 <HAL_TIM_OC_Init>
 8101f5c:	4603      	mov	r3, r0
 8101f5e:	2b00      	cmp	r3, #0
 8101f60:	d001      	beq.n	8101f66 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8101f62:	f7ff f8f1 	bl	8101148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101f66:	2300      	movs	r3, #0
 8101f68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101f6a:	2300      	movs	r3, #0
 8101f6c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101f6e:	2300      	movs	r3, #0
 8101f70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8101f72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101f76:	4619      	mov	r1, r3
 8101f78:	4825      	ldr	r0, [pc, #148]	; (8102010 <MX_TIM8_Init+0x118>)
 8101f7a:	f008 fc09 	bl	810a790 <HAL_TIMEx_MasterConfigSynchronization>
 8101f7e:	4603      	mov	r3, r0
 8101f80:	2b00      	cmp	r3, #0
 8101f82:	d001      	beq.n	8101f88 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8101f84:	f7ff f8e0 	bl	8101148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8101f88:	2300      	movs	r3, #0
 8101f8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8101f8c:	2300      	movs	r3, #0
 8101f8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101f90:	2300      	movs	r3, #0
 8101f92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8101f94:	2300      	movs	r3, #0
 8101f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101f98:	2300      	movs	r3, #0
 8101f9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8101f9c:	2300      	movs	r3, #0
 8101f9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101fa0:	2300      	movs	r3, #0
 8101fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101fa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101fa8:	2204      	movs	r2, #4
 8101faa:	4619      	mov	r1, r3
 8101fac:	4818      	ldr	r0, [pc, #96]	; (8102010 <MX_TIM8_Init+0x118>)
 8101fae:	f007 fe17 	bl	8109be0 <HAL_TIM_OC_ConfigChannel>
 8101fb2:	4603      	mov	r3, r0
 8101fb4:	2b00      	cmp	r3, #0
 8101fb6:	d001      	beq.n	8101fbc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8101fb8:	f7ff f8c6 	bl	8101148 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101fbc:	2300      	movs	r3, #0
 8101fbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101fc0:	2300      	movs	r3, #0
 8101fc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8101fc4:	2300      	movs	r3, #0
 8101fc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101fc8:	2300      	movs	r3, #0
 8101fca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101fcc:	2300      	movs	r3, #0
 8101fce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101fd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101fd6:	2300      	movs	r3, #0
 8101fd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101fda:	2300      	movs	r3, #0
 8101fdc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101fe2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101fe4:	2300      	movs	r3, #0
 8101fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101fe8:	2300      	movs	r3, #0
 8101fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8101fec:	1d3b      	adds	r3, r7, #4
 8101fee:	4619      	mov	r1, r3
 8101ff0:	4807      	ldr	r0, [pc, #28]	; (8102010 <MX_TIM8_Init+0x118>)
 8101ff2:	f008 fc5b 	bl	810a8ac <HAL_TIMEx_ConfigBreakDeadTime>
 8101ff6:	4603      	mov	r3, r0
 8101ff8:	2b00      	cmp	r3, #0
 8101ffa:	d001      	beq.n	8102000 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8101ffc:	f7ff f8a4 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8102000:	4803      	ldr	r0, [pc, #12]	; (8102010 <MX_TIM8_Init+0x118>)
 8102002:	f000 f8bd 	bl	8102180 <HAL_TIM_MspPostInit>

}
 8102006:	bf00      	nop
 8102008:	3758      	adds	r7, #88	; 0x58
 810200a:	46bd      	mov	sp, r7
 810200c:	bd80      	pop	{r7, pc}
 810200e:	bf00      	nop
 8102010:	10000738 	.word	0x10000738
 8102014:	40010400 	.word	0x40010400

08102018 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8102018:	b580      	push	{r7, lr}
 810201a:	b084      	sub	sp, #16
 810201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 810201e:	463b      	mov	r3, r7
 8102020:	2200      	movs	r2, #0
 8102022:	601a      	str	r2, [r3, #0]
 8102024:	605a      	str	r2, [r3, #4]
 8102026:	609a      	str	r2, [r3, #8]
 8102028:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 810202a:	4b1d      	ldr	r3, [pc, #116]	; (81020a0 <MX_TIM13_Init+0x88>)
 810202c:	4a1d      	ldr	r2, [pc, #116]	; (81020a4 <MX_TIM13_Init+0x8c>)
 810202e:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8102030:	4b1b      	ldr	r3, [pc, #108]	; (81020a0 <MX_TIM13_Init+0x88>)
 8102032:	2200      	movs	r2, #0
 8102034:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102036:	4b1a      	ldr	r3, [pc, #104]	; (81020a0 <MX_TIM13_Init+0x88>)
 8102038:	2200      	movs	r2, #0
 810203a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 810203c:	4b18      	ldr	r3, [pc, #96]	; (81020a0 <MX_TIM13_Init+0x88>)
 810203e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8102042:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102044:	4b16      	ldr	r3, [pc, #88]	; (81020a0 <MX_TIM13_Init+0x88>)
 8102046:	2200      	movs	r2, #0
 8102048:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810204a:	4b15      	ldr	r3, [pc, #84]	; (81020a0 <MX_TIM13_Init+0x88>)
 810204c:	2200      	movs	r2, #0
 810204e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8102050:	4813      	ldr	r0, [pc, #76]	; (81020a0 <MX_TIM13_Init+0x88>)
 8102052:	f007 fb1e 	bl	8109692 <HAL_TIM_Base_Init>
 8102056:	4603      	mov	r3, r0
 8102058:	2b00      	cmp	r3, #0
 810205a:	d001      	beq.n	8102060 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 810205c:	f7ff f874 	bl	8101148 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8102060:	480f      	ldr	r0, [pc, #60]	; (81020a0 <MX_TIM13_Init+0x88>)
 8102062:	f007 fc3c 	bl	81098de <HAL_TIM_IC_Init>
 8102066:	4603      	mov	r3, r0
 8102068:	2b00      	cmp	r3, #0
 810206a:	d001      	beq.n	8102070 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 810206c:	f7ff f86c 	bl	8101148 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8102070:	2300      	movs	r3, #0
 8102072:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8102074:	2301      	movs	r3, #1
 8102076:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8102078:	2300      	movs	r3, #0
 810207a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 810207c:	2300      	movs	r3, #0
 810207e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8102080:	463b      	mov	r3, r7
 8102082:	2200      	movs	r2, #0
 8102084:	4619      	mov	r1, r3
 8102086:	4806      	ldr	r0, [pc, #24]	; (81020a0 <MX_TIM13_Init+0x88>)
 8102088:	f007 fe24 	bl	8109cd4 <HAL_TIM_IC_ConfigChannel>
 810208c:	4603      	mov	r3, r0
 810208e:	2b00      	cmp	r3, #0
 8102090:	d001      	beq.n	8102096 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 8102092:	f7ff f859 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8102096:	bf00      	nop
 8102098:	3710      	adds	r7, #16
 810209a:	46bd      	mov	sp, r7
 810209c:	bd80      	pop	{r7, pc}
 810209e:	bf00      	nop
 81020a0:	10000784 	.word	0x10000784
 81020a4:	40001c00 	.word	0x40001c00

081020a8 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 81020a8:	b480      	push	{r7}
 81020aa:	b085      	sub	sp, #20
 81020ac:	af00      	add	r7, sp, #0
 81020ae:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM8)
 81020b0:	687b      	ldr	r3, [r7, #4]
 81020b2:	681b      	ldr	r3, [r3, #0]
 81020b4:	4a0b      	ldr	r2, [pc, #44]	; (81020e4 <HAL_TIM_OC_MspInit+0x3c>)
 81020b6:	4293      	cmp	r3, r2
 81020b8:	d10e      	bne.n	81020d8 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 81020ba:	4b0b      	ldr	r3, [pc, #44]	; (81020e8 <HAL_TIM_OC_MspInit+0x40>)
 81020bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81020c0:	4a09      	ldr	r2, [pc, #36]	; (81020e8 <HAL_TIM_OC_MspInit+0x40>)
 81020c2:	f043 0302 	orr.w	r3, r3, #2
 81020c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81020ca:	4b07      	ldr	r3, [pc, #28]	; (81020e8 <HAL_TIM_OC_MspInit+0x40>)
 81020cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81020d0:	f003 0302 	and.w	r3, r3, #2
 81020d4:	60fb      	str	r3, [r7, #12]
 81020d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 81020d8:	bf00      	nop
 81020da:	3714      	adds	r7, #20
 81020dc:	46bd      	mov	sp, r7
 81020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020e2:	4770      	bx	lr
 81020e4:	40010400 	.word	0x40010400
 81020e8:	58024400 	.word	0x58024400

081020ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 81020ec:	b580      	push	{r7, lr}
 81020ee:	b08a      	sub	sp, #40	; 0x28
 81020f0:	af00      	add	r7, sp, #0
 81020f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81020f4:	f107 0314 	add.w	r3, r7, #20
 81020f8:	2200      	movs	r2, #0
 81020fa:	601a      	str	r2, [r3, #0]
 81020fc:	605a      	str	r2, [r3, #4]
 81020fe:	609a      	str	r2, [r3, #8]
 8102100:	60da      	str	r2, [r3, #12]
 8102102:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM13)
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	681b      	ldr	r3, [r3, #0]
 8102108:	4a1a      	ldr	r2, [pc, #104]	; (8102174 <HAL_TIM_Base_MspInit+0x88>)
 810210a:	4293      	cmp	r3, r2
 810210c:	d12e      	bne.n	810216c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 810210e:	4b1a      	ldr	r3, [pc, #104]	; (8102178 <HAL_TIM_Base_MspInit+0x8c>)
 8102110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102114:	4a18      	ldr	r2, [pc, #96]	; (8102178 <HAL_TIM_Base_MspInit+0x8c>)
 8102116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810211a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810211e:	4b16      	ldr	r3, [pc, #88]	; (8102178 <HAL_TIM_Base_MspInit+0x8c>)
 8102120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102128:	613b      	str	r3, [r7, #16]
 810212a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 810212c:	4b12      	ldr	r3, [pc, #72]	; (8102178 <HAL_TIM_Base_MspInit+0x8c>)
 810212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102132:	4a11      	ldr	r2, [pc, #68]	; (8102178 <HAL_TIM_Base_MspInit+0x8c>)
 8102134:	f043 0320 	orr.w	r3, r3, #32
 8102138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810213c:	4b0e      	ldr	r3, [pc, #56]	; (8102178 <HAL_TIM_Base_MspInit+0x8c>)
 810213e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102142:	f003 0320 	and.w	r3, r3, #32
 8102146:	60fb      	str	r3, [r7, #12]
 8102148:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 810214a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102150:	2302      	movs	r3, #2
 8102152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102154:	2300      	movs	r3, #0
 8102156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102158:	2300      	movs	r3, #0
 810215a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 810215c:	2309      	movs	r3, #9
 810215e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8102160:	f107 0314 	add.w	r3, r7, #20
 8102164:	4619      	mov	r1, r3
 8102166:	4805      	ldr	r0, [pc, #20]	; (810217c <HAL_TIM_Base_MspInit+0x90>)
 8102168:	f002 fb2e 	bl	81047c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 810216c:	bf00      	nop
 810216e:	3728      	adds	r7, #40	; 0x28
 8102170:	46bd      	mov	sp, r7
 8102172:	bd80      	pop	{r7, pc}
 8102174:	40001c00 	.word	0x40001c00
 8102178:	58024400 	.word	0x58024400
 810217c:	58021400 	.word	0x58021400

08102180 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8102180:	b580      	push	{r7, lr}
 8102182:	b088      	sub	sp, #32
 8102184:	af00      	add	r7, sp, #0
 8102186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102188:	f107 030c 	add.w	r3, r7, #12
 810218c:	2200      	movs	r2, #0
 810218e:	601a      	str	r2, [r3, #0]
 8102190:	605a      	str	r2, [r3, #4]
 8102192:	609a      	str	r2, [r3, #8]
 8102194:	60da      	str	r2, [r3, #12]
 8102196:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	681b      	ldr	r3, [r3, #0]
 810219c:	4a12      	ldr	r2, [pc, #72]	; (81021e8 <HAL_TIM_MspPostInit+0x68>)
 810219e:	4293      	cmp	r3, r2
 81021a0:	d11e      	bne.n	81021e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81021a2:	4b12      	ldr	r3, [pc, #72]	; (81021ec <HAL_TIM_MspPostInit+0x6c>)
 81021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021a8:	4a10      	ldr	r2, [pc, #64]	; (81021ec <HAL_TIM_MspPostInit+0x6c>)
 81021aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81021ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81021b2:	4b0e      	ldr	r3, [pc, #56]	; (81021ec <HAL_TIM_MspPostInit+0x6c>)
 81021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81021bc:	60bb      	str	r3, [r7, #8]
 81021be:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 81021c0:	23c0      	movs	r3, #192	; 0xc0
 81021c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021c4:	2302      	movs	r3, #2
 81021c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021c8:	2300      	movs	r3, #0
 81021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021cc:	2300      	movs	r3, #0
 81021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 81021d0:	2303      	movs	r3, #3
 81021d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 81021d4:	f107 030c 	add.w	r3, r7, #12
 81021d8:	4619      	mov	r1, r3
 81021da:	4805      	ldr	r0, [pc, #20]	; (81021f0 <HAL_TIM_MspPostInit+0x70>)
 81021dc:	f002 faf4 	bl	81047c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 81021e0:	bf00      	nop
 81021e2:	3720      	adds	r7, #32
 81021e4:	46bd      	mov	sp, r7
 81021e6:	bd80      	pop	{r7, pc}
 81021e8:	40010400 	.word	0x40010400
 81021ec:	58024400 	.word	0x58024400
 81021f0:	58022400 	.word	0x58022400

081021f4 <MX_UART8_Init>:
UART_HandleTypeDef huart8;
UART_HandleTypeDef huart1;

/* UART8 init function */
void MX_UART8_Init(void)
{
 81021f4:	b580      	push	{r7, lr}
 81021f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 81021f8:	4b22      	ldr	r3, [pc, #136]	; (8102284 <MX_UART8_Init+0x90>)
 81021fa:	4a23      	ldr	r2, [pc, #140]	; (8102288 <MX_UART8_Init+0x94>)
 81021fc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 81021fe:	4b21      	ldr	r3, [pc, #132]	; (8102284 <MX_UART8_Init+0x90>)
 8102200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102204:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8102206:	4b1f      	ldr	r3, [pc, #124]	; (8102284 <MX_UART8_Init+0x90>)
 8102208:	2200      	movs	r2, #0
 810220a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 810220c:	4b1d      	ldr	r3, [pc, #116]	; (8102284 <MX_UART8_Init+0x90>)
 810220e:	2200      	movs	r2, #0
 8102210:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8102212:	4b1c      	ldr	r3, [pc, #112]	; (8102284 <MX_UART8_Init+0x90>)
 8102214:	2200      	movs	r2, #0
 8102216:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8102218:	4b1a      	ldr	r3, [pc, #104]	; (8102284 <MX_UART8_Init+0x90>)
 810221a:	220c      	movs	r2, #12
 810221c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810221e:	4b19      	ldr	r3, [pc, #100]	; (8102284 <MX_UART8_Init+0x90>)
 8102220:	2200      	movs	r2, #0
 8102222:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8102224:	4b17      	ldr	r3, [pc, #92]	; (8102284 <MX_UART8_Init+0x90>)
 8102226:	2200      	movs	r2, #0
 8102228:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810222a:	4b16      	ldr	r3, [pc, #88]	; (8102284 <MX_UART8_Init+0x90>)
 810222c:	2200      	movs	r2, #0
 810222e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102230:	4b14      	ldr	r3, [pc, #80]	; (8102284 <MX_UART8_Init+0x90>)
 8102232:	2200      	movs	r2, #0
 8102234:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102236:	4b13      	ldr	r3, [pc, #76]	; (8102284 <MX_UART8_Init+0x90>)
 8102238:	2200      	movs	r2, #0
 810223a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 810223c:	4811      	ldr	r0, [pc, #68]	; (8102284 <MX_UART8_Init+0x90>)
 810223e:	f008 fbd1 	bl	810a9e4 <HAL_UART_Init>
 8102242:	4603      	mov	r3, r0
 8102244:	2b00      	cmp	r3, #0
 8102246:	d001      	beq.n	810224c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8102248:	f7fe ff7e 	bl	8101148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810224c:	2100      	movs	r1, #0
 810224e:	480d      	ldr	r0, [pc, #52]	; (8102284 <MX_UART8_Init+0x90>)
 8102250:	f009 fb6e 	bl	810b930 <HAL_UARTEx_SetTxFifoThreshold>
 8102254:	4603      	mov	r3, r0
 8102256:	2b00      	cmp	r3, #0
 8102258:	d001      	beq.n	810225e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 810225a:	f7fe ff75 	bl	8101148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810225e:	2100      	movs	r1, #0
 8102260:	4808      	ldr	r0, [pc, #32]	; (8102284 <MX_UART8_Init+0x90>)
 8102262:	f009 fba3 	bl	810b9ac <HAL_UARTEx_SetRxFifoThreshold>
 8102266:	4603      	mov	r3, r0
 8102268:	2b00      	cmp	r3, #0
 810226a:	d001      	beq.n	8102270 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 810226c:	f7fe ff6c 	bl	8101148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8102270:	4804      	ldr	r0, [pc, #16]	; (8102284 <MX_UART8_Init+0x90>)
 8102272:	f009 fb24 	bl	810b8be <HAL_UARTEx_DisableFifoMode>
 8102276:	4603      	mov	r3, r0
 8102278:	2b00      	cmp	r3, #0
 810227a:	d001      	beq.n	8102280 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 810227c:	f7fe ff64 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8102280:	bf00      	nop
 8102282:	bd80      	pop	{r7, pc}
 8102284:	100007d0 	.word	0x100007d0
 8102288:	40007c00 	.word	0x40007c00

0810228c <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 810228c:	b580      	push	{r7, lr}
 810228e:	b0ba      	sub	sp, #232	; 0xe8
 8102290:	af00      	add	r7, sp, #0
 8102292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102294:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102298:	2200      	movs	r2, #0
 810229a:	601a      	str	r2, [r3, #0]
 810229c:	605a      	str	r2, [r3, #4]
 810229e:	609a      	str	r2, [r3, #8]
 81022a0:	60da      	str	r2, [r3, #12]
 81022a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81022a4:	f107 0314 	add.w	r3, r7, #20
 81022a8:	22c0      	movs	r2, #192	; 0xc0
 81022aa:	2100      	movs	r1, #0
 81022ac:	4618      	mov	r0, r3
 81022ae:	f00d fc31 	bl	810fb14 <memset>
  if(uartHandle->Instance==UART8)
 81022b2:	687b      	ldr	r3, [r7, #4]
 81022b4:	681b      	ldr	r3, [r3, #0]
 81022b6:	4a37      	ldr	r2, [pc, #220]	; (8102394 <HAL_UART_MspInit+0x108>)
 81022b8:	4293      	cmp	r3, r2
 81022ba:	d143      	bne.n	8102344 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 81022bc:	2302      	movs	r3, #2
 81022be:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81022c0:	2300      	movs	r3, #0
 81022c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81022c6:	f107 0314 	add.w	r3, r7, #20
 81022ca:	4618      	mov	r0, r3
 81022cc:	f003 f930 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 81022d0:	4603      	mov	r3, r0
 81022d2:	2b00      	cmp	r3, #0
 81022d4:	d001      	beq.n	81022da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 81022d6:	f7fe ff37 	bl	8101148 <Error_Handler>
    }

    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 81022da:	4b2f      	ldr	r3, [pc, #188]	; (8102398 <HAL_UART_MspInit+0x10c>)
 81022dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81022e0:	4a2d      	ldr	r2, [pc, #180]	; (8102398 <HAL_UART_MspInit+0x10c>)
 81022e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81022e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81022ea:	4b2b      	ldr	r3, [pc, #172]	; (8102398 <HAL_UART_MspInit+0x10c>)
 81022ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81022f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81022f4:	613b      	str	r3, [r7, #16]
 81022f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81022f8:	4b27      	ldr	r3, [pc, #156]	; (8102398 <HAL_UART_MspInit+0x10c>)
 81022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81022fe:	4a26      	ldr	r2, [pc, #152]	; (8102398 <HAL_UART_MspInit+0x10c>)
 8102300:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8102304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102308:	4b23      	ldr	r3, [pc, #140]	; (8102398 <HAL_UART_MspInit+0x10c>)
 810230a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810230e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102312:	60fb      	str	r3, [r7, #12]
 8102314:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8102316:	f44f 7340 	mov.w	r3, #768	; 0x300
 810231a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810231e:	2302      	movs	r3, #2
 8102320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102324:	2300      	movs	r3, #0
 8102326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810232a:	2300      	movs	r3, #0
 810232c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8102330:	2308      	movs	r3, #8
 8102332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8102336:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810233a:	4619      	mov	r1, r3
 810233c:	4817      	ldr	r0, [pc, #92]	; (810239c <HAL_UART_MspInit+0x110>)
 810233e:	f002 fa43 	bl	81047c8 <HAL_GPIO_Init>
    __HAL_RCC_USART1_CLK_ENABLE();
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8102342:	e022      	b.n	810238a <HAL_UART_MspInit+0xfe>
  else if(uartHandle->Instance==USART1)
 8102344:	687b      	ldr	r3, [r7, #4]
 8102346:	681b      	ldr	r3, [r3, #0]
 8102348:	4a15      	ldr	r2, [pc, #84]	; (81023a0 <HAL_UART_MspInit+0x114>)
 810234a:	4293      	cmp	r3, r2
 810234c:	d11d      	bne.n	810238a <HAL_UART_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 810234e:	2301      	movs	r3, #1
 8102350:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8102352:	2300      	movs	r3, #0
 8102354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102358:	f107 0314 	add.w	r3, r7, #20
 810235c:	4618      	mov	r0, r3
 810235e:	f003 f8e7 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 8102362:	4603      	mov	r3, r0
 8102364:	2b00      	cmp	r3, #0
 8102366:	d001      	beq.n	810236c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8102368:	f7fe feee 	bl	8101148 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 810236c:	4b0a      	ldr	r3, [pc, #40]	; (8102398 <HAL_UART_MspInit+0x10c>)
 810236e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102372:	4a09      	ldr	r2, [pc, #36]	; (8102398 <HAL_UART_MspInit+0x10c>)
 8102374:	f043 0310 	orr.w	r3, r3, #16
 8102378:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810237c:	4b06      	ldr	r3, [pc, #24]	; (8102398 <HAL_UART_MspInit+0x10c>)
 810237e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102382:	f003 0310 	and.w	r3, r3, #16
 8102386:	60bb      	str	r3, [r7, #8]
 8102388:	68bb      	ldr	r3, [r7, #8]
}
 810238a:	bf00      	nop
 810238c:	37e8      	adds	r7, #232	; 0xe8
 810238e:	46bd      	mov	sp, r7
 8102390:	bd80      	pop	{r7, pc}
 8102392:	bf00      	nop
 8102394:	40007c00 	.word	0x40007c00
 8102398:	58024400 	.word	0x58024400
 810239c:	58022400 	.word	0x58022400
 81023a0:	40011000 	.word	0x40011000

081023a4 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 81023a4:	b580      	push	{r7, lr}
 81023a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 81023a8:	4b15      	ldr	r3, [pc, #84]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023aa:	4a16      	ldr	r2, [pc, #88]	; (8102404 <MX_USB_OTG_HS_PCD_Init+0x60>)
 81023ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 81023ae:	4b14      	ldr	r3, [pc, #80]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023b0:	2209      	movs	r2, #9
 81023b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 81023b4:	4b12      	ldr	r3, [pc, #72]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023b6:	2200      	movs	r2, #0
 81023b8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 81023ba:	4b11      	ldr	r3, [pc, #68]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023bc:	2200      	movs	r2, #0
 81023be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 81023c0:	4b0f      	ldr	r3, [pc, #60]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023c2:	2201      	movs	r2, #1
 81023c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 81023c6:	4b0e      	ldr	r3, [pc, #56]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023c8:	2200      	movs	r2, #0
 81023ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 81023cc:	4b0c      	ldr	r3, [pc, #48]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023ce:	2200      	movs	r2, #0
 81023d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 81023d2:	4b0b      	ldr	r3, [pc, #44]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023d4:	2200      	movs	r2, #0
 81023d6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 81023d8:	4b09      	ldr	r3, [pc, #36]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023da:	2200      	movs	r2, #0
 81023dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 81023de:	4b08      	ldr	r3, [pc, #32]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023e0:	2200      	movs	r2, #0
 81023e2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 81023e4:	4b06      	ldr	r3, [pc, #24]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023e6:	2200      	movs	r2, #0
 81023e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 81023ea:	4805      	ldr	r0, [pc, #20]	; (8102400 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81023ec:	f002 fbec 	bl	8104bc8 <HAL_PCD_Init>
 81023f0:	4603      	mov	r3, r0
 81023f2:	2b00      	cmp	r3, #0
 81023f4:	d001      	beq.n	81023fa <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 81023f6:	f7fe fea7 	bl	8101148 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 81023fa:	bf00      	nop
 81023fc:	bd80      	pop	{r7, pc}
 81023fe:	bf00      	nop
 8102400:	10000860 	.word	0x10000860
 8102404:	40040000 	.word	0x40040000

08102408 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8102408:	b580      	push	{r7, lr}
 810240a:	b0be      	sub	sp, #248	; 0xf8
 810240c:	af00      	add	r7, sp, #0
 810240e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102410:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8102414:	2200      	movs	r2, #0
 8102416:	601a      	str	r2, [r3, #0]
 8102418:	605a      	str	r2, [r3, #4]
 810241a:	609a      	str	r2, [r3, #8]
 810241c:	60da      	str	r2, [r3, #12]
 810241e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8102424:	22c0      	movs	r2, #192	; 0xc0
 8102426:	2100      	movs	r1, #0
 8102428:	4618      	mov	r0, r3
 810242a:	f00d fb73 	bl	810fb14 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	681b      	ldr	r3, [r3, #0]
 8102432:	4a77      	ldr	r2, [pc, #476]	; (8102610 <HAL_PCD_MspInit+0x208>)
 8102434:	4293      	cmp	r3, r2
 8102436:	f040 80e7 	bne.w	8102608 <HAL_PCD_MspInit+0x200>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 810243a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810243e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8102440:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8102444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810244c:	4618      	mov	r0, r3
 810244e:	f003 f86f 	bl	8105530 <HAL_RCCEx_PeriphCLKConfig>
 8102452:	4603      	mov	r3, r0
 8102454:	2b00      	cmp	r3, #0
 8102456:	d001      	beq.n	810245c <HAL_PCD_MspInit+0x54>
    {
      Error_Handler();
 8102458:	f7fe fe76 	bl	8101148 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 810245c:	f002 fd84 	bl	8104f68 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102460:	4b6c      	ldr	r3, [pc, #432]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 8102462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102466:	4a6b      	ldr	r2, [pc, #428]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 8102468:	f043 0302 	orr.w	r3, r3, #2
 810246c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102470:	4b68      	ldr	r3, [pc, #416]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 8102472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102476:	f003 0302 	and.w	r3, r3, #2
 810247a:	623b      	str	r3, [r7, #32]
 810247c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 810247e:	4b65      	ldr	r3, [pc, #404]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 8102480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102484:	4a63      	ldr	r2, [pc, #396]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 8102486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810248a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810248e:	4b61      	ldr	r3, [pc, #388]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 8102490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102498:	61fb      	str	r3, [r7, #28]
 810249a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810249c:	4b5d      	ldr	r3, [pc, #372]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 810249e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024a2:	4a5c      	ldr	r2, [pc, #368]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81024a4:	f043 0304 	orr.w	r3, r3, #4
 81024a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81024ac:	4b59      	ldr	r3, [pc, #356]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81024ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024b2:	f003 0304 	and.w	r3, r3, #4
 81024b6:	61bb      	str	r3, [r7, #24]
 81024b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81024ba:	4b56      	ldr	r3, [pc, #344]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024c0:	4a54      	ldr	r2, [pc, #336]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81024c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81024c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81024ca:	4b52      	ldr	r3, [pc, #328]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81024d4:	617b      	str	r3, [r7, #20]
 81024d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81024d8:	4b4e      	ldr	r3, [pc, #312]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81024da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024de:	4a4d      	ldr	r2, [pc, #308]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81024e0:	f043 0301 	orr.w	r3, r3, #1
 81024e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81024e8:	4b4a      	ldr	r3, [pc, #296]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81024ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81024ee:	f003 0301 	and.w	r3, r3, #1
 81024f2:	613b      	str	r3, [r7, #16]
 81024f4:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 81024f6:	f643 4323 	movw	r3, #15395	; 0x3c23
 81024fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81024fe:	2302      	movs	r3, #2
 8102500:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102504:	2300      	movs	r3, #0
 8102506:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810250a:	2302      	movs	r3, #2
 810250c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102510:	230a      	movs	r3, #10
 8102512:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102516:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810251a:	4619      	mov	r1, r3
 810251c:	483e      	ldr	r0, [pc, #248]	; (8102618 <HAL_PCD_MspInit+0x210>)
 810251e:	f002 f953 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8102522:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810252a:	2302      	movs	r3, #2
 810252c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102530:	2300      	movs	r3, #0
 8102532:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102536:	2302      	movs	r3, #2
 8102538:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810253c:	230a      	movs	r3, #10
 810253e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8102542:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8102546:	4619      	mov	r1, r3
 8102548:	4834      	ldr	r0, [pc, #208]	; (810261c <HAL_PCD_MspInit+0x214>)
 810254a:	f002 f93d 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 810254e:	2301      	movs	r3, #1
 8102550:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102554:	2302      	movs	r3, #2
 8102556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810255a:	2300      	movs	r3, #0
 810255c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102560:	2302      	movs	r3, #2
 8102562:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102566:	230a      	movs	r3, #10
 8102568:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 810256c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8102570:	4619      	mov	r1, r3
 8102572:	482b      	ldr	r0, [pc, #172]	; (8102620 <HAL_PCD_MspInit+0x218>)
 8102574:	f002 f928 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8102578:	2310      	movs	r3, #16
 810257a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810257e:	2302      	movs	r3, #2
 8102580:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102584:	2300      	movs	r3, #0
 8102586:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810258a:	2302      	movs	r3, #2
 810258c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102590:	230a      	movs	r3, #10
 8102592:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8102596:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810259a:	4619      	mov	r1, r3
 810259c:	4821      	ldr	r0, [pc, #132]	; (8102624 <HAL_PCD_MspInit+0x21c>)
 810259e:	f002 f913 	bl	81047c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 81025a2:	2328      	movs	r3, #40	; 0x28
 81025a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025a8:	2302      	movs	r3, #2
 81025aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025ae:	2300      	movs	r3, #0
 81025b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81025b4:	2302      	movs	r3, #2
 81025b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81025ba:	230a      	movs	r3, #10
 81025bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81025c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81025c4:	4619      	mov	r1, r3
 81025c6:	4818      	ldr	r0, [pc, #96]	; (8102628 <HAL_PCD_MspInit+0x220>)
 81025c8:	f002 f8fe 	bl	81047c8 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 81025cc:	4b11      	ldr	r3, [pc, #68]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81025ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81025d2:	4a10      	ldr	r2, [pc, #64]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81025d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81025d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81025dc:	4b0d      	ldr	r3, [pc, #52]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81025de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81025e6:	60fb      	str	r3, [r7, #12]
 81025e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 81025ea:	4b0a      	ldr	r3, [pc, #40]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81025ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81025f0:	4a08      	ldr	r2, [pc, #32]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81025f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81025f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81025fa:	4b06      	ldr	r3, [pc, #24]	; (8102614 <HAL_PCD_MspInit+0x20c>)
 81025fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102600:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8102604:	60bb      	str	r3, [r7, #8]
 8102606:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8102608:	bf00      	nop
 810260a:	37f8      	adds	r7, #248	; 0xf8
 810260c:	46bd      	mov	sp, r7
 810260e:	bd80      	pop	{r7, pc}
 8102610:	40040000 	.word	0x40040000
 8102614:	58024400 	.word	0x58024400
 8102618:	58020400 	.word	0x58020400
 810261c:	58022000 	.word	0x58022000
 8102620:	58020800 	.word	0x58020800
 8102624:	58021c00 	.word	0x58021c00
 8102628:	58020000 	.word	0x58020000

0810262c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810262c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102664 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102630:	f7fd ffd8 	bl	81005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102634:	480c      	ldr	r0, [pc, #48]	; (8102668 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102636:	490d      	ldr	r1, [pc, #52]	; (810266c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102638:	4a0d      	ldr	r2, [pc, #52]	; (8102670 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810263a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810263c:	e002      	b.n	8102644 <LoopCopyDataInit>

0810263e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810263e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102642:	3304      	adds	r3, #4

08102644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102648:	d3f9      	bcc.n	810263e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810264a:	4a0a      	ldr	r2, [pc, #40]	; (8102674 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810264c:	4c0a      	ldr	r4, [pc, #40]	; (8102678 <LoopFillZerobss+0x22>)
  movs r3, #0
 810264e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102650:	e001      	b.n	8102656 <LoopFillZerobss>

08102652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102654:	3204      	adds	r2, #4

08102656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102658:	d3fb      	bcc.n	8102652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810265a:	f00d fa29 	bl	810fab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810265e:	f7fe fcf5 	bl	810104c <main>
  bx  lr
 8102662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102664:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102668:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810266c:	10000088 	.word	0x10000088
  ldr r2, =_sidata
 8102670:	0810fe0c 	.word	0x0810fe0c
  ldr r2, =_sbss
 8102674:	10000148 	.word	0x10000148
  ldr r4, =_ebss
 8102678:	100057dc 	.word	0x100057dc

0810267c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810267c:	e7fe      	b.n	810267c <ADC3_IRQHandler>

0810267e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 810267e:	b580      	push	{r7, lr}
 8102680:	b084      	sub	sp, #16
 8102682:	af00      	add	r7, sp, #0
 8102684:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	2b00      	cmp	r3, #0
 810268a:	d104      	bne.n	8102696 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 810268c:	b672      	cpsid	i
}
 810268e:	bf00      	nop
 8102690:	f7fe fd5a 	bl	8101148 <Error_Handler>
 8102694:	e7fe      	b.n	8102694 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8102696:	687b      	ldr	r3, [r7, #4]
 8102698:	7a1b      	ldrb	r3, [r3, #8]
 810269a:	2b01      	cmp	r3, #1
 810269c:	d904      	bls.n	81026a8 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 810269e:	b672      	cpsid	i
}
 81026a0:	bf00      	nop
 81026a2:	f7fe fd51 	bl	8101148 <Error_Handler>
 81026a6:	e7fe      	b.n	81026a6 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	7a1b      	ldrb	r3, [r3, #8]
 81026ac:	1c5a      	adds	r2, r3, #1
 81026ae:	b2d1      	uxtb	r1, r2
 81026b0:	687a      	ldr	r2, [r7, #4]
 81026b2:	7211      	strb	r1, [r2, #8]
 81026b4:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 81026b6:	f3ef 8211 	mrs	r2, BASEPRI
 81026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 81026be:	f383 8811 	msr	BASEPRI, r3
 81026c2:	f3bf 8f6f 	isb	sy
 81026c6:	f3bf 8f4f 	dsb	sy
 81026ca:	60fa      	str	r2, [r7, #12]
 81026cc:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 81026ce:	68fa      	ldr	r2, [r7, #12]
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 81026d6:	bf00      	nop
 81026d8:	3710      	adds	r7, #16
 81026da:	46bd      	mov	sp, r7
 81026dc:	bd80      	pop	{r7, pc}

081026de <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 81026de:	b580      	push	{r7, lr}
 81026e0:	b084      	sub	sp, #16
 81026e2:	af00      	add	r7, sp, #0
 81026e4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	2b00      	cmp	r3, #0
 81026ea:	d104      	bne.n	81026f6 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 81026ec:	b672      	cpsid	i
}
 81026ee:	bf00      	nop
 81026f0:	f7fe fd2a 	bl	8101148 <Error_Handler>
 81026f4:	e7fe      	b.n	81026f4 <stm32_lock_release+0x16>
  lock->nesting_level--;
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	7a1b      	ldrb	r3, [r3, #8]
 81026fa:	3b01      	subs	r3, #1
 81026fc:	b2da      	uxtb	r2, r3
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8102702:	687b      	ldr	r3, [r7, #4]
 8102704:	7a1b      	ldrb	r3, [r3, #8]
 8102706:	2b01      	cmp	r3, #1
 8102708:	d904      	bls.n	8102714 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 810270a:	b672      	cpsid	i
}
 810270c:	bf00      	nop
 810270e:	f7fe fd1b 	bl	8101148 <Error_Handler>
 8102712:	e7fe      	b.n	8102712 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	7a1b      	ldrb	r3, [r3, #8]
 8102718:	461a      	mov	r2, r3
 810271a:	687b      	ldr	r3, [r7, #4]
 810271c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102720:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8102722:	68fb      	ldr	r3, [r7, #12]
 8102724:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8102728:	bf00      	nop
}
 810272a:	bf00      	nop
 810272c:	3710      	adds	r7, #16
 810272e:	46bd      	mov	sp, r7
 8102730:	bd80      	pop	{r7, pc}

08102732 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8102732:	b580      	push	{r7, lr}
 8102734:	b082      	sub	sp, #8
 8102736:	af00      	add	r7, sp, #0
 8102738:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	2b00      	cmp	r3, #0
 810273e:	d104      	bne.n	810274a <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8102740:	b672      	cpsid	i
}
 8102742:	bf00      	nop
 8102744:	f7fe fd00 	bl	8101148 <Error_Handler>
 8102748:	e7fe      	b.n	8102748 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	4618      	mov	r0, r3
 810274e:	f7ff ff96 	bl	810267e <stm32_lock_acquire>
}
 8102752:	bf00      	nop
 8102754:	3708      	adds	r7, #8
 8102756:	46bd      	mov	sp, r7
 8102758:	bd80      	pop	{r7, pc}

0810275a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 810275a:	b580      	push	{r7, lr}
 810275c:	b082      	sub	sp, #8
 810275e:	af00      	add	r7, sp, #0
 8102760:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	2b00      	cmp	r3, #0
 8102766:	d104      	bne.n	8102772 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8102768:	b672      	cpsid	i
}
 810276a:	bf00      	nop
 810276c:	f7fe fcec 	bl	8101148 <Error_Handler>
 8102770:	e7fe      	b.n	8102770 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	4618      	mov	r0, r3
 8102776:	f7ff ffb2 	bl	81026de <stm32_lock_release>
}
 810277a:	bf00      	nop
 810277c:	3708      	adds	r7, #8
 810277e:	46bd      	mov	sp, r7
 8102780:	bd80      	pop	{r7, pc}
	...

08102784 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8102784:	b580      	push	{r7, lr}
 8102786:	b08a      	sub	sp, #40	; 0x28
 8102788:	af00      	add	r7, sp, #0
 810278a:	4603      	mov	r3, r0
 810278c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 810278e:	2300      	movs	r3, #0
 8102790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8102792:	4b1b      	ldr	r3, [pc, #108]	; (8102800 <BSP_LED_Init+0x7c>)
 8102794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102798:	4a19      	ldr	r2, [pc, #100]	; (8102800 <BSP_LED_Init+0x7c>)
 810279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810279e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81027a2:	4b17      	ldr	r3, [pc, #92]	; (8102800 <BSP_LED_Init+0x7c>)
 81027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81027ac:	60fb      	str	r3, [r7, #12]
 81027ae:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 81027b0:	79fb      	ldrb	r3, [r7, #7]
 81027b2:	4a14      	ldr	r2, [pc, #80]	; (8102804 <BSP_LED_Init+0x80>)
 81027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81027b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81027ba:	2301      	movs	r3, #1
 81027bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81027be:	2301      	movs	r3, #1
 81027c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81027c2:	2303      	movs	r3, #3
 81027c4:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 81027c6:	79fb      	ldrb	r3, [r7, #7]
 81027c8:	4a0f      	ldr	r2, [pc, #60]	; (8102808 <BSP_LED_Init+0x84>)
 81027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81027ce:	f107 0210 	add.w	r2, r7, #16
 81027d2:	4611      	mov	r1, r2
 81027d4:	4618      	mov	r0, r3
 81027d6:	f001 fff7 	bl	81047c8 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 81027da:	79fb      	ldrb	r3, [r7, #7]
 81027dc:	4a0a      	ldr	r2, [pc, #40]	; (8102808 <BSP_LED_Init+0x84>)
 81027de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 81027e2:	79fb      	ldrb	r3, [r7, #7]
 81027e4:	4a07      	ldr	r2, [pc, #28]	; (8102804 <BSP_LED_Init+0x80>)
 81027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81027ea:	b29b      	uxth	r3, r3
 81027ec:	2201      	movs	r2, #1
 81027ee:	4619      	mov	r1, r3
 81027f0:	f002 f99a 	bl	8104b28 <HAL_GPIO_WritePin>
 return ret;
 81027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 81027f6:	4618      	mov	r0, r3
 81027f8:	3728      	adds	r7, #40	; 0x28
 81027fa:	46bd      	mov	sp, r7
 81027fc:	bd80      	pop	{r7, pc}
 81027fe:	bf00      	nop
 8102800:	58024400 	.word	0x58024400
 8102804:	0810fd64 	.word	0x0810fd64
 8102808:	10000008 	.word	0x10000008

0810280c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810280c:	b580      	push	{r7, lr}
 810280e:	b082      	sub	sp, #8
 8102810:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102812:	4b28      	ldr	r3, [pc, #160]	; (81028b4 <HAL_Init+0xa8>)
 8102814:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102818:	4a26      	ldr	r2, [pc, #152]	; (81028b4 <HAL_Init+0xa8>)
 810281a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810281e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102822:	4b24      	ldr	r3, [pc, #144]	; (81028b4 <HAL_Init+0xa8>)
 8102824:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810282c:	603b      	str	r3, [r7, #0]
 810282e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102830:	4b21      	ldr	r3, [pc, #132]	; (81028b8 <HAL_Init+0xac>)
 8102832:	681b      	ldr	r3, [r3, #0]
 8102834:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102838:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810283c:	4a1e      	ldr	r2, [pc, #120]	; (81028b8 <HAL_Init+0xac>)
 810283e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102842:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102844:	4b1c      	ldr	r3, [pc, #112]	; (81028b8 <HAL_Init+0xac>)
 8102846:	681b      	ldr	r3, [r3, #0]
 8102848:	4a1b      	ldr	r2, [pc, #108]	; (81028b8 <HAL_Init+0xac>)
 810284a:	f043 0301 	orr.w	r3, r3, #1
 810284e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102850:	2003      	movs	r0, #3
 8102852:	f001 fb4e 	bl	8103ef2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102856:	f002 fc51 	bl	81050fc <HAL_RCC_GetSysClockFreq>
 810285a:	4602      	mov	r2, r0
 810285c:	4b15      	ldr	r3, [pc, #84]	; (81028b4 <HAL_Init+0xa8>)
 810285e:	699b      	ldr	r3, [r3, #24]
 8102860:	0a1b      	lsrs	r3, r3, #8
 8102862:	f003 030f 	and.w	r3, r3, #15
 8102866:	4915      	ldr	r1, [pc, #84]	; (81028bc <HAL_Init+0xb0>)
 8102868:	5ccb      	ldrb	r3, [r1, r3]
 810286a:	f003 031f 	and.w	r3, r3, #31
 810286e:	fa22 f303 	lsr.w	r3, r2, r3
 8102872:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102874:	4b0f      	ldr	r3, [pc, #60]	; (81028b4 <HAL_Init+0xa8>)
 8102876:	699b      	ldr	r3, [r3, #24]
 8102878:	f003 030f 	and.w	r3, r3, #15
 810287c:	4a0f      	ldr	r2, [pc, #60]	; (81028bc <HAL_Init+0xb0>)
 810287e:	5cd3      	ldrb	r3, [r2, r3]
 8102880:	f003 031f 	and.w	r3, r3, #31
 8102884:	687a      	ldr	r2, [r7, #4]
 8102886:	fa22 f303 	lsr.w	r3, r2, r3
 810288a:	4a0d      	ldr	r2, [pc, #52]	; (81028c0 <HAL_Init+0xb4>)
 810288c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810288e:	4b0c      	ldr	r3, [pc, #48]	; (81028c0 <HAL_Init+0xb4>)
 8102890:	681b      	ldr	r3, [r3, #0]
 8102892:	4a0c      	ldr	r2, [pc, #48]	; (81028c4 <HAL_Init+0xb8>)
 8102894:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102896:	200f      	movs	r0, #15
 8102898:	f7ff fa92 	bl	8101dc0 <HAL_InitTick>
 810289c:	4603      	mov	r3, r0
 810289e:	2b00      	cmp	r3, #0
 81028a0:	d001      	beq.n	81028a6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81028a2:	2301      	movs	r3, #1
 81028a4:	e002      	b.n	81028ac <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81028a6:	f7ff fa65 	bl	8101d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81028aa:	2300      	movs	r3, #0
}
 81028ac:	4618      	mov	r0, r3
 81028ae:	3708      	adds	r7, #8
 81028b0:	46bd      	mov	sp, r7
 81028b2:	bd80      	pop	{r7, pc}
 81028b4:	58024400 	.word	0x58024400
 81028b8:	40024400 	.word	0x40024400
 81028bc:	0810fcfc 	.word	0x0810fcfc
 81028c0:	10000004 	.word	0x10000004
 81028c4:	10000000 	.word	0x10000000

081028c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81028c8:	b480      	push	{r7}
 81028ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81028cc:	4b06      	ldr	r3, [pc, #24]	; (81028e8 <HAL_IncTick+0x20>)
 81028ce:	781b      	ldrb	r3, [r3, #0]
 81028d0:	461a      	mov	r2, r3
 81028d2:	4b06      	ldr	r3, [pc, #24]	; (81028ec <HAL_IncTick+0x24>)
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	4413      	add	r3, r2
 81028d8:	4a04      	ldr	r2, [pc, #16]	; (81028ec <HAL_IncTick+0x24>)
 81028da:	6013      	str	r3, [r2, #0]
}
 81028dc:	bf00      	nop
 81028de:	46bd      	mov	sp, r7
 81028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028e4:	4770      	bx	lr
 81028e6:	bf00      	nop
 81028e8:	1000001c 	.word	0x1000001c
 81028ec:	10000dc4 	.word	0x10000dc4

081028f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81028f0:	b480      	push	{r7}
 81028f2:	af00      	add	r7, sp, #0
  return uwTick;
 81028f4:	4b03      	ldr	r3, [pc, #12]	; (8102904 <HAL_GetTick+0x14>)
 81028f6:	681b      	ldr	r3, [r3, #0]
}
 81028f8:	4618      	mov	r0, r3
 81028fa:	46bd      	mov	sp, r7
 81028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102900:	4770      	bx	lr
 8102902:	bf00      	nop
 8102904:	10000dc4 	.word	0x10000dc4

08102908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102908:	b580      	push	{r7, lr}
 810290a:	b084      	sub	sp, #16
 810290c:	af00      	add	r7, sp, #0
 810290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102910:	f7ff ffee 	bl	81028f0 <HAL_GetTick>
 8102914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102916:	687b      	ldr	r3, [r7, #4]
 8102918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810291a:	68fb      	ldr	r3, [r7, #12]
 810291c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102920:	d005      	beq.n	810292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102922:	4b0a      	ldr	r3, [pc, #40]	; (810294c <HAL_Delay+0x44>)
 8102924:	781b      	ldrb	r3, [r3, #0]
 8102926:	461a      	mov	r2, r3
 8102928:	68fb      	ldr	r3, [r7, #12]
 810292a:	4413      	add	r3, r2
 810292c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810292e:	bf00      	nop
 8102930:	f7ff ffde 	bl	81028f0 <HAL_GetTick>
 8102934:	4602      	mov	r2, r0
 8102936:	68bb      	ldr	r3, [r7, #8]
 8102938:	1ad3      	subs	r3, r2, r3
 810293a:	68fa      	ldr	r2, [r7, #12]
 810293c:	429a      	cmp	r2, r3
 810293e:	d8f7      	bhi.n	8102930 <HAL_Delay+0x28>
  {
  }
}
 8102940:	bf00      	nop
 8102942:	bf00      	nop
 8102944:	3710      	adds	r7, #16
 8102946:	46bd      	mov	sp, r7
 8102948:	bd80      	pop	{r7, pc}
 810294a:	bf00      	nop
 810294c:	1000001c 	.word	0x1000001c

08102950 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102950:	b480      	push	{r7}
 8102952:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102954:	4b03      	ldr	r3, [pc, #12]	; (8102964 <HAL_GetREVID+0x14>)
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	0c1b      	lsrs	r3, r3, #16
}
 810295a:	4618      	mov	r0, r3
 810295c:	46bd      	mov	sp, r7
 810295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102962:	4770      	bx	lr
 8102964:	5c001000 	.word	0x5c001000

08102968 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8102968:	b480      	push	{r7}
 810296a:	b083      	sub	sp, #12
 810296c:	af00      	add	r7, sp, #0
 810296e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8102970:	4b06      	ldr	r3, [pc, #24]	; (810298c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102972:	685b      	ldr	r3, [r3, #4]
 8102974:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102978:	4904      	ldr	r1, [pc, #16]	; (810298c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	4313      	orrs	r3, r2
 810297e:	604b      	str	r3, [r1, #4]
}
 8102980:	bf00      	nop
 8102982:	370c      	adds	r7, #12
 8102984:	46bd      	mov	sp, r7
 8102986:	f85d 7b04 	ldr.w	r7, [sp], #4
 810298a:	4770      	bx	lr
 810298c:	58000400 	.word	0x58000400

08102990 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8102990:	b480      	push	{r7}
 8102992:	b083      	sub	sp, #12
 8102994:	af00      	add	r7, sp, #0
 8102996:	6078      	str	r0, [r7, #4]
 8102998:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810299a:	4b07      	ldr	r3, [pc, #28]	; (81029b8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 810299c:	685a      	ldr	r2, [r3, #4]
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	43db      	mvns	r3, r3
 81029a2:	401a      	ands	r2, r3
 81029a4:	4904      	ldr	r1, [pc, #16]	; (81029b8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 81029a6:	683b      	ldr	r3, [r7, #0]
 81029a8:	4313      	orrs	r3, r2
 81029aa:	604b      	str	r3, [r1, #4]
}
 81029ac:	bf00      	nop
 81029ae:	370c      	adds	r7, #12
 81029b0:	46bd      	mov	sp, r7
 81029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b6:	4770      	bx	lr
 81029b8:	58000400 	.word	0x58000400

081029bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81029bc:	b480      	push	{r7}
 81029be:	b083      	sub	sp, #12
 81029c0:	af00      	add	r7, sp, #0
 81029c2:	6078      	str	r0, [r7, #4]
 81029c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	689b      	ldr	r3, [r3, #8]
 81029ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81029ce:	683b      	ldr	r3, [r7, #0]
 81029d0:	431a      	orrs	r2, r3
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	609a      	str	r2, [r3, #8]
}
 81029d6:	bf00      	nop
 81029d8:	370c      	adds	r7, #12
 81029da:	46bd      	mov	sp, r7
 81029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029e0:	4770      	bx	lr

081029e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81029e2:	b480      	push	{r7}
 81029e4:	b083      	sub	sp, #12
 81029e6:	af00      	add	r7, sp, #0
 81029e8:	6078      	str	r0, [r7, #4]
 81029ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81029ec:	687b      	ldr	r3, [r7, #4]
 81029ee:	689b      	ldr	r3, [r3, #8]
 81029f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81029f4:	683b      	ldr	r3, [r7, #0]
 81029f6:	431a      	orrs	r2, r3
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	609a      	str	r2, [r3, #8]
}
 81029fc:	bf00      	nop
 81029fe:	370c      	adds	r7, #12
 8102a00:	46bd      	mov	sp, r7
 8102a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a06:	4770      	bx	lr

08102a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102a08:	b480      	push	{r7}
 8102a0a:	b083      	sub	sp, #12
 8102a0c:	af00      	add	r7, sp, #0
 8102a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	689b      	ldr	r3, [r3, #8]
 8102a14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8102a18:	4618      	mov	r0, r3
 8102a1a:	370c      	adds	r7, #12
 8102a1c:	46bd      	mov	sp, r7
 8102a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a22:	4770      	bx	lr

08102a24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102a24:	b480      	push	{r7}
 8102a26:	b087      	sub	sp, #28
 8102a28:	af00      	add	r7, sp, #0
 8102a2a:	60f8      	str	r0, [r7, #12]
 8102a2c:	60b9      	str	r1, [r7, #8]
 8102a2e:	607a      	str	r2, [r7, #4]
 8102a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102a32:	68fb      	ldr	r3, [r7, #12]
 8102a34:	3360      	adds	r3, #96	; 0x60
 8102a36:	461a      	mov	r2, r3
 8102a38:	68bb      	ldr	r3, [r7, #8]
 8102a3a:	009b      	lsls	r3, r3, #2
 8102a3c:	4413      	add	r3, r2
 8102a3e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102a40:	697b      	ldr	r3, [r7, #20]
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8102a4e:	683b      	ldr	r3, [r7, #0]
 8102a50:	430b      	orrs	r3, r1
 8102a52:	431a      	orrs	r2, r3
 8102a54:	697b      	ldr	r3, [r7, #20]
 8102a56:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102a58:	bf00      	nop
 8102a5a:	371c      	adds	r7, #28
 8102a5c:	46bd      	mov	sp, r7
 8102a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a62:	4770      	bx	lr

08102a64 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102a64:	b480      	push	{r7}
 8102a66:	b085      	sub	sp, #20
 8102a68:	af00      	add	r7, sp, #0
 8102a6a:	60f8      	str	r0, [r7, #12]
 8102a6c:	60b9      	str	r1, [r7, #8]
 8102a6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102a70:	68fb      	ldr	r3, [r7, #12]
 8102a72:	691b      	ldr	r3, [r3, #16]
 8102a74:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8102a78:	68bb      	ldr	r3, [r7, #8]
 8102a7a:	f003 031f 	and.w	r3, r3, #31
 8102a7e:	6879      	ldr	r1, [r7, #4]
 8102a80:	fa01 f303 	lsl.w	r3, r1, r3
 8102a84:	431a      	orrs	r2, r3
 8102a86:	68fb      	ldr	r3, [r7, #12]
 8102a88:	611a      	str	r2, [r3, #16]
}
 8102a8a:	bf00      	nop
 8102a8c:	3714      	adds	r7, #20
 8102a8e:	46bd      	mov	sp, r7
 8102a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a94:	4770      	bx	lr

08102a96 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102a96:	b480      	push	{r7}
 8102a98:	b087      	sub	sp, #28
 8102a9a:	af00      	add	r7, sp, #0
 8102a9c:	60f8      	str	r0, [r7, #12]
 8102a9e:	60b9      	str	r1, [r7, #8]
 8102aa0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102aa2:	68fb      	ldr	r3, [r7, #12]
 8102aa4:	3360      	adds	r3, #96	; 0x60
 8102aa6:	461a      	mov	r2, r3
 8102aa8:	68bb      	ldr	r3, [r7, #8]
 8102aaa:	009b      	lsls	r3, r3, #2
 8102aac:	4413      	add	r3, r2
 8102aae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102ab0:	697b      	ldr	r3, [r7, #20]
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	431a      	orrs	r2, r3
 8102abc:	697b      	ldr	r3, [r7, #20]
 8102abe:	601a      	str	r2, [r3, #0]
  }
}
 8102ac0:	bf00      	nop
 8102ac2:	371c      	adds	r7, #28
 8102ac4:	46bd      	mov	sp, r7
 8102ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aca:	4770      	bx	lr

08102acc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102acc:	b480      	push	{r7}
 8102ace:	b087      	sub	sp, #28
 8102ad0:	af00      	add	r7, sp, #0
 8102ad2:	60f8      	str	r0, [r7, #12]
 8102ad4:	60b9      	str	r1, [r7, #8]
 8102ad6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102ad8:	68fb      	ldr	r3, [r7, #12]
 8102ada:	3330      	adds	r3, #48	; 0x30
 8102adc:	461a      	mov	r2, r3
 8102ade:	68bb      	ldr	r3, [r7, #8]
 8102ae0:	0a1b      	lsrs	r3, r3, #8
 8102ae2:	009b      	lsls	r3, r3, #2
 8102ae4:	f003 030c 	and.w	r3, r3, #12
 8102ae8:	4413      	add	r3, r2
 8102aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102aec:	697b      	ldr	r3, [r7, #20]
 8102aee:	681a      	ldr	r2, [r3, #0]
 8102af0:	68bb      	ldr	r3, [r7, #8]
 8102af2:	f003 031f 	and.w	r3, r3, #31
 8102af6:	211f      	movs	r1, #31
 8102af8:	fa01 f303 	lsl.w	r3, r1, r3
 8102afc:	43db      	mvns	r3, r3
 8102afe:	401a      	ands	r2, r3
 8102b00:	687b      	ldr	r3, [r7, #4]
 8102b02:	0e9b      	lsrs	r3, r3, #26
 8102b04:	f003 011f 	and.w	r1, r3, #31
 8102b08:	68bb      	ldr	r3, [r7, #8]
 8102b0a:	f003 031f 	and.w	r3, r3, #31
 8102b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8102b12:	431a      	orrs	r2, r3
 8102b14:	697b      	ldr	r3, [r7, #20]
 8102b16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102b18:	bf00      	nop
 8102b1a:	371c      	adds	r7, #28
 8102b1c:	46bd      	mov	sp, r7
 8102b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b22:	4770      	bx	lr

08102b24 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102b24:	b480      	push	{r7}
 8102b26:	b087      	sub	sp, #28
 8102b28:	af00      	add	r7, sp, #0
 8102b2a:	60f8      	str	r0, [r7, #12]
 8102b2c:	60b9      	str	r1, [r7, #8]
 8102b2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102b30:	68fb      	ldr	r3, [r7, #12]
 8102b32:	3314      	adds	r3, #20
 8102b34:	461a      	mov	r2, r3
 8102b36:	68bb      	ldr	r3, [r7, #8]
 8102b38:	0e5b      	lsrs	r3, r3, #25
 8102b3a:	009b      	lsls	r3, r3, #2
 8102b3c:	f003 0304 	and.w	r3, r3, #4
 8102b40:	4413      	add	r3, r2
 8102b42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102b44:	697b      	ldr	r3, [r7, #20]
 8102b46:	681a      	ldr	r2, [r3, #0]
 8102b48:	68bb      	ldr	r3, [r7, #8]
 8102b4a:	0d1b      	lsrs	r3, r3, #20
 8102b4c:	f003 031f 	and.w	r3, r3, #31
 8102b50:	2107      	movs	r1, #7
 8102b52:	fa01 f303 	lsl.w	r3, r1, r3
 8102b56:	43db      	mvns	r3, r3
 8102b58:	401a      	ands	r2, r3
 8102b5a:	68bb      	ldr	r3, [r7, #8]
 8102b5c:	0d1b      	lsrs	r3, r3, #20
 8102b5e:	f003 031f 	and.w	r3, r3, #31
 8102b62:	6879      	ldr	r1, [r7, #4]
 8102b64:	fa01 f303 	lsl.w	r3, r1, r3
 8102b68:	431a      	orrs	r2, r3
 8102b6a:	697b      	ldr	r3, [r7, #20]
 8102b6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102b6e:	bf00      	nop
 8102b70:	371c      	adds	r7, #28
 8102b72:	46bd      	mov	sp, r7
 8102b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b78:	4770      	bx	lr
	...

08102b7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102b7c:	b480      	push	{r7}
 8102b7e:	b085      	sub	sp, #20
 8102b80:	af00      	add	r7, sp, #0
 8102b82:	60f8      	str	r0, [r7, #12]
 8102b84:	60b9      	str	r1, [r7, #8]
 8102b86:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102b88:	68fb      	ldr	r3, [r7, #12]
 8102b8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8102b8e:	68bb      	ldr	r3, [r7, #8]
 8102b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102b94:	43db      	mvns	r3, r3
 8102b96:	401a      	ands	r2, r3
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	f003 0318 	and.w	r3, r3, #24
 8102b9e:	4908      	ldr	r1, [pc, #32]	; (8102bc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102ba0:	40d9      	lsrs	r1, r3
 8102ba2:	68bb      	ldr	r3, [r7, #8]
 8102ba4:	400b      	ands	r3, r1
 8102ba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102baa:	431a      	orrs	r2, r3
 8102bac:	68fb      	ldr	r3, [r7, #12]
 8102bae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8102bb2:	bf00      	nop
 8102bb4:	3714      	adds	r7, #20
 8102bb6:	46bd      	mov	sp, r7
 8102bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bbc:	4770      	bx	lr
 8102bbe:	bf00      	nop
 8102bc0:	000fffff 	.word	0x000fffff

08102bc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102bc4:	b480      	push	{r7}
 8102bc6:	b083      	sub	sp, #12
 8102bc8:	af00      	add	r7, sp, #0
 8102bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102bcc:	687b      	ldr	r3, [r7, #4]
 8102bce:	689b      	ldr	r3, [r3, #8]
 8102bd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8102bd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102bd8:	687a      	ldr	r2, [r7, #4]
 8102bda:	6093      	str	r3, [r2, #8]
}
 8102bdc:	bf00      	nop
 8102bde:	370c      	adds	r7, #12
 8102be0:	46bd      	mov	sp, r7
 8102be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102be6:	4770      	bx	lr

08102be8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8102be8:	b480      	push	{r7}
 8102bea:	b083      	sub	sp, #12
 8102bec:	af00      	add	r7, sp, #0
 8102bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	689b      	ldr	r3, [r3, #8]
 8102bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102bfc:	d101      	bne.n	8102c02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102bfe:	2301      	movs	r3, #1
 8102c00:	e000      	b.n	8102c04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102c02:	2300      	movs	r3, #0
}
 8102c04:	4618      	mov	r0, r3
 8102c06:	370c      	adds	r7, #12
 8102c08:	46bd      	mov	sp, r7
 8102c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c0e:	4770      	bx	lr

08102c10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102c10:	b480      	push	{r7}
 8102c12:	b083      	sub	sp, #12
 8102c14:	af00      	add	r7, sp, #0
 8102c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	689b      	ldr	r3, [r3, #8]
 8102c1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102c24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102c2c:	bf00      	nop
 8102c2e:	370c      	adds	r7, #12
 8102c30:	46bd      	mov	sp, r7
 8102c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c36:	4770      	bx	lr

08102c38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8102c38:	b480      	push	{r7}
 8102c3a:	b083      	sub	sp, #12
 8102c3c:	af00      	add	r7, sp, #0
 8102c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102c40:	687b      	ldr	r3, [r7, #4]
 8102c42:	689b      	ldr	r3, [r3, #8]
 8102c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102c4c:	d101      	bne.n	8102c52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102c4e:	2301      	movs	r3, #1
 8102c50:	e000      	b.n	8102c54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102c52:	2300      	movs	r3, #0
}
 8102c54:	4618      	mov	r0, r3
 8102c56:	370c      	adds	r7, #12
 8102c58:	46bd      	mov	sp, r7
 8102c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c5e:	4770      	bx	lr

08102c60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102c60:	b480      	push	{r7}
 8102c62:	b083      	sub	sp, #12
 8102c64:	af00      	add	r7, sp, #0
 8102c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	689b      	ldr	r3, [r3, #8]
 8102c6c:	f003 0301 	and.w	r3, r3, #1
 8102c70:	2b01      	cmp	r3, #1
 8102c72:	d101      	bne.n	8102c78 <LL_ADC_IsEnabled+0x18>
 8102c74:	2301      	movs	r3, #1
 8102c76:	e000      	b.n	8102c7a <LL_ADC_IsEnabled+0x1a>
 8102c78:	2300      	movs	r3, #0
}
 8102c7a:	4618      	mov	r0, r3
 8102c7c:	370c      	adds	r7, #12
 8102c7e:	46bd      	mov	sp, r7
 8102c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c84:	4770      	bx	lr

08102c86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102c86:	b480      	push	{r7}
 8102c88:	b083      	sub	sp, #12
 8102c8a:	af00      	add	r7, sp, #0
 8102c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102c8e:	687b      	ldr	r3, [r7, #4]
 8102c90:	689b      	ldr	r3, [r3, #8]
 8102c92:	f003 0304 	and.w	r3, r3, #4
 8102c96:	2b04      	cmp	r3, #4
 8102c98:	d101      	bne.n	8102c9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8102c9a:	2301      	movs	r3, #1
 8102c9c:	e000      	b.n	8102ca0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102c9e:	2300      	movs	r3, #0
}
 8102ca0:	4618      	mov	r0, r3
 8102ca2:	370c      	adds	r7, #12
 8102ca4:	46bd      	mov	sp, r7
 8102ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102caa:	4770      	bx	lr

08102cac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102cac:	b480      	push	{r7}
 8102cae:	b083      	sub	sp, #12
 8102cb0:	af00      	add	r7, sp, #0
 8102cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	689b      	ldr	r3, [r3, #8]
 8102cb8:	f003 0308 	and.w	r3, r3, #8
 8102cbc:	2b08      	cmp	r3, #8
 8102cbe:	d101      	bne.n	8102cc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102cc0:	2301      	movs	r3, #1
 8102cc2:	e000      	b.n	8102cc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102cc4:	2300      	movs	r3, #0
}
 8102cc6:	4618      	mov	r0, r3
 8102cc8:	370c      	adds	r7, #12
 8102cca:	46bd      	mov	sp, r7
 8102ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cd0:	4770      	bx	lr
	...

08102cd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102cd4:	b590      	push	{r4, r7, lr}
 8102cd6:	b089      	sub	sp, #36	; 0x24
 8102cd8:	af00      	add	r7, sp, #0
 8102cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102cdc:	2300      	movs	r3, #0
 8102cde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102ce0:	2300      	movs	r3, #0
 8102ce2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102ce4:	687b      	ldr	r3, [r7, #4]
 8102ce6:	2b00      	cmp	r3, #0
 8102ce8:	d101      	bne.n	8102cee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8102cea:	2301      	movs	r3, #1
 8102cec:	e18f      	b.n	810300e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	68db      	ldr	r3, [r3, #12]
 8102cf2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102cf4:	687b      	ldr	r3, [r7, #4]
 8102cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cf8:	2b00      	cmp	r3, #0
 8102cfa:	d109      	bne.n	8102d10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102cfc:	6878      	ldr	r0, [r7, #4]
 8102cfe:	f7fd fd63 	bl	81007c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102d02:	687b      	ldr	r3, [r7, #4]
 8102d04:	2200      	movs	r2, #0
 8102d06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8102d08:	687b      	ldr	r3, [r7, #4]
 8102d0a:	2200      	movs	r2, #0
 8102d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	681b      	ldr	r3, [r3, #0]
 8102d14:	4618      	mov	r0, r3
 8102d16:	f7ff ff67 	bl	8102be8 <LL_ADC_IsDeepPowerDownEnabled>
 8102d1a:	4603      	mov	r3, r0
 8102d1c:	2b00      	cmp	r3, #0
 8102d1e:	d004      	beq.n	8102d2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102d20:	687b      	ldr	r3, [r7, #4]
 8102d22:	681b      	ldr	r3, [r3, #0]
 8102d24:	4618      	mov	r0, r3
 8102d26:	f7ff ff4d 	bl	8102bc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	681b      	ldr	r3, [r3, #0]
 8102d2e:	4618      	mov	r0, r3
 8102d30:	f7ff ff82 	bl	8102c38 <LL_ADC_IsInternalRegulatorEnabled>
 8102d34:	4603      	mov	r3, r0
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	d114      	bne.n	8102d64 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	681b      	ldr	r3, [r3, #0]
 8102d3e:	4618      	mov	r0, r3
 8102d40:	f7ff ff66 	bl	8102c10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102d44:	4b88      	ldr	r3, [pc, #544]	; (8102f68 <HAL_ADC_Init+0x294>)
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	099b      	lsrs	r3, r3, #6
 8102d4a:	4a88      	ldr	r2, [pc, #544]	; (8102f6c <HAL_ADC_Init+0x298>)
 8102d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8102d50:	099b      	lsrs	r3, r3, #6
 8102d52:	3301      	adds	r3, #1
 8102d54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102d56:	e002      	b.n	8102d5e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8102d58:	68bb      	ldr	r3, [r7, #8]
 8102d5a:	3b01      	subs	r3, #1
 8102d5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102d5e:	68bb      	ldr	r3, [r7, #8]
 8102d60:	2b00      	cmp	r3, #0
 8102d62:	d1f9      	bne.n	8102d58 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	681b      	ldr	r3, [r3, #0]
 8102d68:	4618      	mov	r0, r3
 8102d6a:	f7ff ff65 	bl	8102c38 <LL_ADC_IsInternalRegulatorEnabled>
 8102d6e:	4603      	mov	r3, r0
 8102d70:	2b00      	cmp	r3, #0
 8102d72:	d10d      	bne.n	8102d90 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d78:	f043 0210 	orr.w	r2, r3, #16
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102d80:	687b      	ldr	r3, [r7, #4]
 8102d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d84:	f043 0201 	orr.w	r2, r3, #1
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102d8c:	2301      	movs	r3, #1
 8102d8e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	4618      	mov	r0, r3
 8102d96:	f7ff ff76 	bl	8102c86 <LL_ADC_REG_IsConversionOngoing>
 8102d9a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102da0:	f003 0310 	and.w	r3, r3, #16
 8102da4:	2b00      	cmp	r3, #0
 8102da6:	f040 8129 	bne.w	8102ffc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8102daa:	697b      	ldr	r3, [r7, #20]
 8102dac:	2b00      	cmp	r3, #0
 8102dae:	f040 8125 	bne.w	8102ffc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102db2:	687b      	ldr	r3, [r7, #4]
 8102db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102db6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8102dba:	f043 0202 	orr.w	r2, r3, #2
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	4618      	mov	r0, r3
 8102dc8:	f7ff ff4a 	bl	8102c60 <LL_ADC_IsEnabled>
 8102dcc:	4603      	mov	r3, r0
 8102dce:	2b00      	cmp	r3, #0
 8102dd0:	d136      	bne.n	8102e40 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	4a66      	ldr	r2, [pc, #408]	; (8102f70 <HAL_ADC_Init+0x29c>)
 8102dd8:	4293      	cmp	r3, r2
 8102dda:	d004      	beq.n	8102de6 <HAL_ADC_Init+0x112>
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	4a64      	ldr	r2, [pc, #400]	; (8102f74 <HAL_ADC_Init+0x2a0>)
 8102de2:	4293      	cmp	r3, r2
 8102de4:	d10e      	bne.n	8102e04 <HAL_ADC_Init+0x130>
 8102de6:	4862      	ldr	r0, [pc, #392]	; (8102f70 <HAL_ADC_Init+0x29c>)
 8102de8:	f7ff ff3a 	bl	8102c60 <LL_ADC_IsEnabled>
 8102dec:	4604      	mov	r4, r0
 8102dee:	4861      	ldr	r0, [pc, #388]	; (8102f74 <HAL_ADC_Init+0x2a0>)
 8102df0:	f7ff ff36 	bl	8102c60 <LL_ADC_IsEnabled>
 8102df4:	4603      	mov	r3, r0
 8102df6:	4323      	orrs	r3, r4
 8102df8:	2b00      	cmp	r3, #0
 8102dfa:	bf0c      	ite	eq
 8102dfc:	2301      	moveq	r3, #1
 8102dfe:	2300      	movne	r3, #0
 8102e00:	b2db      	uxtb	r3, r3
 8102e02:	e008      	b.n	8102e16 <HAL_ADC_Init+0x142>
 8102e04:	485c      	ldr	r0, [pc, #368]	; (8102f78 <HAL_ADC_Init+0x2a4>)
 8102e06:	f7ff ff2b 	bl	8102c60 <LL_ADC_IsEnabled>
 8102e0a:	4603      	mov	r3, r0
 8102e0c:	2b00      	cmp	r3, #0
 8102e0e:	bf0c      	ite	eq
 8102e10:	2301      	moveq	r3, #1
 8102e12:	2300      	movne	r3, #0
 8102e14:	b2db      	uxtb	r3, r3
 8102e16:	2b00      	cmp	r3, #0
 8102e18:	d012      	beq.n	8102e40 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102e1a:	687b      	ldr	r3, [r7, #4]
 8102e1c:	681b      	ldr	r3, [r3, #0]
 8102e1e:	4a54      	ldr	r2, [pc, #336]	; (8102f70 <HAL_ADC_Init+0x29c>)
 8102e20:	4293      	cmp	r3, r2
 8102e22:	d004      	beq.n	8102e2e <HAL_ADC_Init+0x15a>
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	4a52      	ldr	r2, [pc, #328]	; (8102f74 <HAL_ADC_Init+0x2a0>)
 8102e2a:	4293      	cmp	r3, r2
 8102e2c:	d101      	bne.n	8102e32 <HAL_ADC_Init+0x15e>
 8102e2e:	4a53      	ldr	r2, [pc, #332]	; (8102f7c <HAL_ADC_Init+0x2a8>)
 8102e30:	e000      	b.n	8102e34 <HAL_ADC_Init+0x160>
 8102e32:	4a53      	ldr	r2, [pc, #332]	; (8102f80 <HAL_ADC_Init+0x2ac>)
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	685b      	ldr	r3, [r3, #4]
 8102e38:	4619      	mov	r1, r3
 8102e3a:	4610      	mov	r0, r2
 8102e3c:	f7ff fdbe 	bl	81029bc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102e40:	f7ff fd86 	bl	8102950 <HAL_GetREVID>
 8102e44:	4603      	mov	r3, r0
 8102e46:	f241 0203 	movw	r2, #4099	; 0x1003
 8102e4a:	4293      	cmp	r3, r2
 8102e4c:	d914      	bls.n	8102e78 <HAL_ADC_Init+0x1a4>
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	689b      	ldr	r3, [r3, #8]
 8102e52:	2b10      	cmp	r3, #16
 8102e54:	d110      	bne.n	8102e78 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	7d5b      	ldrb	r3, [r3, #21]
 8102e5a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102e60:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102e66:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	7f1b      	ldrb	r3, [r3, #28]
 8102e6c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102e6e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102e70:	f043 030c 	orr.w	r3, r3, #12
 8102e74:	61bb      	str	r3, [r7, #24]
 8102e76:	e00d      	b.n	8102e94 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102e78:	687b      	ldr	r3, [r7, #4]
 8102e7a:	7d5b      	ldrb	r3, [r3, #21]
 8102e7c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102e7e:	687b      	ldr	r3, [r7, #4]
 8102e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102e82:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102e88:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	7f1b      	ldrb	r3, [r3, #28]
 8102e8e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102e90:	4313      	orrs	r3, r2
 8102e92:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	7f1b      	ldrb	r3, [r3, #28]
 8102e98:	2b01      	cmp	r3, #1
 8102e9a:	d106      	bne.n	8102eaa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	6a1b      	ldr	r3, [r3, #32]
 8102ea0:	3b01      	subs	r3, #1
 8102ea2:	045b      	lsls	r3, r3, #17
 8102ea4:	69ba      	ldr	r2, [r7, #24]
 8102ea6:	4313      	orrs	r3, r2
 8102ea8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102eae:	2b00      	cmp	r3, #0
 8102eb0:	d009      	beq.n	8102ec6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102eb6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ebe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102ec0:	69ba      	ldr	r2, [r7, #24]
 8102ec2:	4313      	orrs	r3, r2
 8102ec4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102ec6:	687b      	ldr	r3, [r7, #4]
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	68da      	ldr	r2, [r3, #12]
 8102ecc:	4b2d      	ldr	r3, [pc, #180]	; (8102f84 <HAL_ADC_Init+0x2b0>)
 8102ece:	4013      	ands	r3, r2
 8102ed0:	687a      	ldr	r2, [r7, #4]
 8102ed2:	6812      	ldr	r2, [r2, #0]
 8102ed4:	69b9      	ldr	r1, [r7, #24]
 8102ed6:	430b      	orrs	r3, r1
 8102ed8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	681b      	ldr	r3, [r3, #0]
 8102ede:	4618      	mov	r0, r3
 8102ee0:	f7ff fed1 	bl	8102c86 <LL_ADC_REG_IsConversionOngoing>
 8102ee4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	4618      	mov	r0, r3
 8102eec:	f7ff fede 	bl	8102cac <LL_ADC_INJ_IsConversionOngoing>
 8102ef0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102ef2:	693b      	ldr	r3, [r7, #16]
 8102ef4:	2b00      	cmp	r3, #0
 8102ef6:	d15f      	bne.n	8102fb8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102ef8:	68fb      	ldr	r3, [r7, #12]
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d15c      	bne.n	8102fb8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	7d1b      	ldrb	r3, [r3, #20]
 8102f02:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8102f08:	4313      	orrs	r3, r2
 8102f0a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102f0c:	687b      	ldr	r3, [r7, #4]
 8102f0e:	681b      	ldr	r3, [r3, #0]
 8102f10:	68db      	ldr	r3, [r3, #12]
 8102f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8102f16:	f023 0303 	bic.w	r3, r3, #3
 8102f1a:	687a      	ldr	r2, [r7, #4]
 8102f1c:	6812      	ldr	r2, [r2, #0]
 8102f1e:	69b9      	ldr	r1, [r7, #24]
 8102f20:	430b      	orrs	r3, r1
 8102f22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8102f2a:	2b01      	cmp	r3, #1
 8102f2c:	d12e      	bne.n	8102f8c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102f32:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102f34:	687b      	ldr	r3, [r7, #4]
 8102f36:	681b      	ldr	r3, [r3, #0]
 8102f38:	691a      	ldr	r2, [r3, #16]
 8102f3a:	4b13      	ldr	r3, [pc, #76]	; (8102f88 <HAL_ADC_Init+0x2b4>)
 8102f3c:	4013      	ands	r3, r2
 8102f3e:	687a      	ldr	r2, [r7, #4]
 8102f40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102f42:	3a01      	subs	r2, #1
 8102f44:	0411      	lsls	r1, r2, #16
 8102f46:	687a      	ldr	r2, [r7, #4]
 8102f48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8102f4a:	4311      	orrs	r1, r2
 8102f4c:	687a      	ldr	r2, [r7, #4]
 8102f4e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102f50:	4311      	orrs	r1, r2
 8102f52:	687a      	ldr	r2, [r7, #4]
 8102f54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8102f56:	430a      	orrs	r2, r1
 8102f58:	431a      	orrs	r2, r3
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	681b      	ldr	r3, [r3, #0]
 8102f5e:	f042 0201 	orr.w	r2, r2, #1
 8102f62:	611a      	str	r2, [r3, #16]
 8102f64:	e01a      	b.n	8102f9c <HAL_ADC_Init+0x2c8>
 8102f66:	bf00      	nop
 8102f68:	10000000 	.word	0x10000000
 8102f6c:	053e2d63 	.word	0x053e2d63
 8102f70:	40022000 	.word	0x40022000
 8102f74:	40022100 	.word	0x40022100
 8102f78:	58026000 	.word	0x58026000
 8102f7c:	40022300 	.word	0x40022300
 8102f80:	58026300 	.word	0x58026300
 8102f84:	fff0c003 	.word	0xfff0c003
 8102f88:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	681b      	ldr	r3, [r3, #0]
 8102f90:	691a      	ldr	r2, [r3, #16]
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	f022 0201 	bic.w	r2, r2, #1
 8102f9a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	681b      	ldr	r3, [r3, #0]
 8102fa0:	691b      	ldr	r3, [r3, #16]
 8102fa2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	681b      	ldr	r3, [r3, #0]
 8102fae:	430a      	orrs	r2, r1
 8102fb0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102fb2:	6878      	ldr	r0, [r7, #4]
 8102fb4:	f000 fb80 	bl	81036b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	68db      	ldr	r3, [r3, #12]
 8102fbc:	2b01      	cmp	r3, #1
 8102fbe:	d10c      	bne.n	8102fda <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	681b      	ldr	r3, [r3, #0]
 8102fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102fc6:	f023 010f 	bic.w	r1, r3, #15
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	699b      	ldr	r3, [r3, #24]
 8102fce:	1e5a      	subs	r2, r3, #1
 8102fd0:	687b      	ldr	r3, [r7, #4]
 8102fd2:	681b      	ldr	r3, [r3, #0]
 8102fd4:	430a      	orrs	r2, r1
 8102fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8102fd8:	e007      	b.n	8102fea <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	681b      	ldr	r3, [r3, #0]
 8102fe4:	f022 020f 	bic.w	r2, r2, #15
 8102fe8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fee:	f023 0303 	bic.w	r3, r3, #3
 8102ff2:	f043 0201 	orr.w	r2, r3, #1
 8102ff6:	687b      	ldr	r3, [r7, #4]
 8102ff8:	655a      	str	r2, [r3, #84]	; 0x54
 8102ffa:	e007      	b.n	810300c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103000:	f043 0210 	orr.w	r2, r3, #16
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103008:	2301      	movs	r3, #1
 810300a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 810300c:	7ffb      	ldrb	r3, [r7, #31]
}
 810300e:	4618      	mov	r0, r3
 8103010:	3724      	adds	r7, #36	; 0x24
 8103012:	46bd      	mov	sp, r7
 8103014:	bd90      	pop	{r4, r7, pc}
 8103016:	bf00      	nop

08103018 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8103018:	b590      	push	{r4, r7, lr}
 810301a:	b0a1      	sub	sp, #132	; 0x84
 810301c:	af00      	add	r7, sp, #0
 810301e:	6078      	str	r0, [r7, #4]
 8103020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103022:	2300      	movs	r3, #0
 8103024:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8103028:	2300      	movs	r3, #0
 810302a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 810302c:	683b      	ldr	r3, [r7, #0]
 810302e:	68db      	ldr	r3, [r3, #12]
 8103030:	4a9d      	ldr	r2, [pc, #628]	; (81032a8 <HAL_ADC_ConfigChannel+0x290>)
 8103032:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810303a:	2b01      	cmp	r3, #1
 810303c:	d101      	bne.n	8103042 <HAL_ADC_ConfigChannel+0x2a>
 810303e:	2302      	movs	r3, #2
 8103040:	e321      	b.n	8103686 <HAL_ADC_ConfigChannel+0x66e>
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	2201      	movs	r2, #1
 8103046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	4618      	mov	r0, r3
 8103050:	f7ff fe19 	bl	8102c86 <LL_ADC_REG_IsConversionOngoing>
 8103054:	4603      	mov	r3, r0
 8103056:	2b00      	cmp	r3, #0
 8103058:	f040 8306 	bne.w	8103668 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 810305c:	683b      	ldr	r3, [r7, #0]
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103064:	2b00      	cmp	r3, #0
 8103066:	d108      	bne.n	810307a <HAL_ADC_ConfigChannel+0x62>
 8103068:	683b      	ldr	r3, [r7, #0]
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	0e9b      	lsrs	r3, r3, #26
 810306e:	f003 031f 	and.w	r3, r3, #31
 8103072:	2201      	movs	r2, #1
 8103074:	fa02 f303 	lsl.w	r3, r2, r3
 8103078:	e016      	b.n	81030a8 <HAL_ADC_ConfigChannel+0x90>
 810307a:	683b      	ldr	r3, [r7, #0]
 810307c:	681b      	ldr	r3, [r3, #0]
 810307e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8103082:	fa93 f3a3 	rbit	r3, r3
 8103086:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8103088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810308a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 810308c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810308e:	2b00      	cmp	r3, #0
 8103090:	d101      	bne.n	8103096 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8103092:	2320      	movs	r3, #32
 8103094:	e003      	b.n	810309e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8103096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8103098:	fab3 f383 	clz	r3, r3
 810309c:	b2db      	uxtb	r3, r3
 810309e:	f003 031f 	and.w	r3, r3, #31
 81030a2:	2201      	movs	r2, #1
 81030a4:	fa02 f303 	lsl.w	r3, r2, r3
 81030a8:	687a      	ldr	r2, [r7, #4]
 81030aa:	6812      	ldr	r2, [r2, #0]
 81030ac:	69d1      	ldr	r1, [r2, #28]
 81030ae:	687a      	ldr	r2, [r7, #4]
 81030b0:	6812      	ldr	r2, [r2, #0]
 81030b2:	430b      	orrs	r3, r1
 81030b4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	6818      	ldr	r0, [r3, #0]
 81030ba:	683b      	ldr	r3, [r7, #0]
 81030bc:	6859      	ldr	r1, [r3, #4]
 81030be:	683b      	ldr	r3, [r7, #0]
 81030c0:	681b      	ldr	r3, [r3, #0]
 81030c2:	461a      	mov	r2, r3
 81030c4:	f7ff fd02 	bl	8102acc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	681b      	ldr	r3, [r3, #0]
 81030cc:	4618      	mov	r0, r3
 81030ce:	f7ff fdda 	bl	8102c86 <LL_ADC_REG_IsConversionOngoing>
 81030d2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	4618      	mov	r0, r3
 81030da:	f7ff fde7 	bl	8102cac <LL_ADC_INJ_IsConversionOngoing>
 81030de:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81030e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81030e2:	2b00      	cmp	r3, #0
 81030e4:	f040 80b3 	bne.w	810324e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81030e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81030ea:	2b00      	cmp	r3, #0
 81030ec:	f040 80af 	bne.w	810324e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	6818      	ldr	r0, [r3, #0]
 81030f4:	683b      	ldr	r3, [r7, #0]
 81030f6:	6819      	ldr	r1, [r3, #0]
 81030f8:	683b      	ldr	r3, [r7, #0]
 81030fa:	689b      	ldr	r3, [r3, #8]
 81030fc:	461a      	mov	r2, r3
 81030fe:	f7ff fd11 	bl	8102b24 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8103102:	4b6a      	ldr	r3, [pc, #424]	; (81032ac <HAL_ADC_ConfigChannel+0x294>)
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 810310a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810310e:	d10b      	bne.n	8103128 <HAL_ADC_ConfigChannel+0x110>
 8103110:	683b      	ldr	r3, [r7, #0]
 8103112:	695a      	ldr	r2, [r3, #20]
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	68db      	ldr	r3, [r3, #12]
 810311a:	089b      	lsrs	r3, r3, #2
 810311c:	f003 0307 	and.w	r3, r3, #7
 8103120:	005b      	lsls	r3, r3, #1
 8103122:	fa02 f303 	lsl.w	r3, r2, r3
 8103126:	e01d      	b.n	8103164 <HAL_ADC_ConfigChannel+0x14c>
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	68db      	ldr	r3, [r3, #12]
 810312e:	f003 0310 	and.w	r3, r3, #16
 8103132:	2b00      	cmp	r3, #0
 8103134:	d10b      	bne.n	810314e <HAL_ADC_ConfigChannel+0x136>
 8103136:	683b      	ldr	r3, [r7, #0]
 8103138:	695a      	ldr	r2, [r3, #20]
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	681b      	ldr	r3, [r3, #0]
 810313e:	68db      	ldr	r3, [r3, #12]
 8103140:	089b      	lsrs	r3, r3, #2
 8103142:	f003 0307 	and.w	r3, r3, #7
 8103146:	005b      	lsls	r3, r3, #1
 8103148:	fa02 f303 	lsl.w	r3, r2, r3
 810314c:	e00a      	b.n	8103164 <HAL_ADC_ConfigChannel+0x14c>
 810314e:	683b      	ldr	r3, [r7, #0]
 8103150:	695a      	ldr	r2, [r3, #20]
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	68db      	ldr	r3, [r3, #12]
 8103158:	089b      	lsrs	r3, r3, #2
 810315a:	f003 0304 	and.w	r3, r3, #4
 810315e:	005b      	lsls	r3, r3, #1
 8103160:	fa02 f303 	lsl.w	r3, r2, r3
 8103164:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8103166:	683b      	ldr	r3, [r7, #0]
 8103168:	691b      	ldr	r3, [r3, #16]
 810316a:	2b04      	cmp	r3, #4
 810316c:	d027      	beq.n	81031be <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810316e:	687b      	ldr	r3, [r7, #4]
 8103170:	6818      	ldr	r0, [r3, #0]
 8103172:	683b      	ldr	r3, [r7, #0]
 8103174:	6919      	ldr	r1, [r3, #16]
 8103176:	683b      	ldr	r3, [r7, #0]
 8103178:	681a      	ldr	r2, [r3, #0]
 810317a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810317c:	f7ff fc52 	bl	8102a24 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	6818      	ldr	r0, [r3, #0]
 8103184:	683b      	ldr	r3, [r7, #0]
 8103186:	6919      	ldr	r1, [r3, #16]
 8103188:	683b      	ldr	r3, [r7, #0]
 810318a:	7e5b      	ldrb	r3, [r3, #25]
 810318c:	2b01      	cmp	r3, #1
 810318e:	d102      	bne.n	8103196 <HAL_ADC_ConfigChannel+0x17e>
 8103190:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103194:	e000      	b.n	8103198 <HAL_ADC_ConfigChannel+0x180>
 8103196:	2300      	movs	r3, #0
 8103198:	461a      	mov	r2, r3
 810319a:	f7ff fc7c 	bl	8102a96 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	6818      	ldr	r0, [r3, #0]
 81031a2:	683b      	ldr	r3, [r7, #0]
 81031a4:	6919      	ldr	r1, [r3, #16]
 81031a6:	683b      	ldr	r3, [r7, #0]
 81031a8:	7e1b      	ldrb	r3, [r3, #24]
 81031aa:	2b01      	cmp	r3, #1
 81031ac:	d102      	bne.n	81031b4 <HAL_ADC_ConfigChannel+0x19c>
 81031ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81031b2:	e000      	b.n	81031b6 <HAL_ADC_ConfigChannel+0x19e>
 81031b4:	2300      	movs	r3, #0
 81031b6:	461a      	mov	r2, r3
 81031b8:	f7ff fc54 	bl	8102a64 <LL_ADC_SetDataRightShift>
 81031bc:	e047      	b.n	810324e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	681b      	ldr	r3, [r3, #0]
 81031c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81031c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81031c8:	683b      	ldr	r3, [r7, #0]
 81031ca:	681b      	ldr	r3, [r3, #0]
 81031cc:	069b      	lsls	r3, r3, #26
 81031ce:	429a      	cmp	r2, r3
 81031d0:	d107      	bne.n	81031e2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	681b      	ldr	r3, [r3, #0]
 81031d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 81031d8:	687b      	ldr	r3, [r7, #4]
 81031da:	681b      	ldr	r3, [r3, #0]
 81031dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81031e0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81031e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81031ec:	683b      	ldr	r3, [r7, #0]
 81031ee:	681b      	ldr	r3, [r3, #0]
 81031f0:	069b      	lsls	r3, r3, #26
 81031f2:	429a      	cmp	r2, r3
 81031f4:	d107      	bne.n	8103206 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	681b      	ldr	r3, [r3, #0]
 81031fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	681b      	ldr	r3, [r3, #0]
 8103200:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103204:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	681b      	ldr	r3, [r3, #0]
 810320a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810320c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103210:	683b      	ldr	r3, [r7, #0]
 8103212:	681b      	ldr	r3, [r3, #0]
 8103214:	069b      	lsls	r3, r3, #26
 8103216:	429a      	cmp	r2, r3
 8103218:	d107      	bne.n	810322a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	681b      	ldr	r3, [r3, #0]
 810321e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103228:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103230:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103234:	683b      	ldr	r3, [r7, #0]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	069b      	lsls	r3, r3, #26
 810323a:	429a      	cmp	r2, r3
 810323c:	d107      	bne.n	810324e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	681b      	ldr	r3, [r3, #0]
 8103248:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810324c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	681b      	ldr	r3, [r3, #0]
 8103252:	4618      	mov	r0, r3
 8103254:	f7ff fd04 	bl	8102c60 <LL_ADC_IsEnabled>
 8103258:	4603      	mov	r3, r0
 810325a:	2b00      	cmp	r3, #0
 810325c:	f040 820d 	bne.w	810367a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	6818      	ldr	r0, [r3, #0]
 8103264:	683b      	ldr	r3, [r7, #0]
 8103266:	6819      	ldr	r1, [r3, #0]
 8103268:	683b      	ldr	r3, [r7, #0]
 810326a:	68db      	ldr	r3, [r3, #12]
 810326c:	461a      	mov	r2, r3
 810326e:	f7ff fc85 	bl	8102b7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8103272:	683b      	ldr	r3, [r7, #0]
 8103274:	68db      	ldr	r3, [r3, #12]
 8103276:	4a0c      	ldr	r2, [pc, #48]	; (81032a8 <HAL_ADC_ConfigChannel+0x290>)
 8103278:	4293      	cmp	r3, r2
 810327a:	f040 8133 	bne.w	81034e4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103282:	683b      	ldr	r3, [r7, #0]
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810328a:	2b00      	cmp	r3, #0
 810328c:	d110      	bne.n	81032b0 <HAL_ADC_ConfigChannel+0x298>
 810328e:	683b      	ldr	r3, [r7, #0]
 8103290:	681b      	ldr	r3, [r3, #0]
 8103292:	0e9b      	lsrs	r3, r3, #26
 8103294:	3301      	adds	r3, #1
 8103296:	f003 031f 	and.w	r3, r3, #31
 810329a:	2b09      	cmp	r3, #9
 810329c:	bf94      	ite	ls
 810329e:	2301      	movls	r3, #1
 81032a0:	2300      	movhi	r3, #0
 81032a2:	b2db      	uxtb	r3, r3
 81032a4:	e01e      	b.n	81032e4 <HAL_ADC_ConfigChannel+0x2cc>
 81032a6:	bf00      	nop
 81032a8:	47ff0000 	.word	0x47ff0000
 81032ac:	5c001000 	.word	0x5c001000
 81032b0:	683b      	ldr	r3, [r7, #0]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81032b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81032b8:	fa93 f3a3 	rbit	r3, r3
 81032bc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 81032be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81032c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 81032c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81032c4:	2b00      	cmp	r3, #0
 81032c6:	d101      	bne.n	81032cc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 81032c8:	2320      	movs	r3, #32
 81032ca:	e003      	b.n	81032d4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 81032cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81032ce:	fab3 f383 	clz	r3, r3
 81032d2:	b2db      	uxtb	r3, r3
 81032d4:	3301      	adds	r3, #1
 81032d6:	f003 031f 	and.w	r3, r3, #31
 81032da:	2b09      	cmp	r3, #9
 81032dc:	bf94      	ite	ls
 81032de:	2301      	movls	r3, #1
 81032e0:	2300      	movhi	r3, #0
 81032e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81032e4:	2b00      	cmp	r3, #0
 81032e6:	d079      	beq.n	81033dc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81032e8:	683b      	ldr	r3, [r7, #0]
 81032ea:	681b      	ldr	r3, [r3, #0]
 81032ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81032f0:	2b00      	cmp	r3, #0
 81032f2:	d107      	bne.n	8103304 <HAL_ADC_ConfigChannel+0x2ec>
 81032f4:	683b      	ldr	r3, [r7, #0]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	0e9b      	lsrs	r3, r3, #26
 81032fa:	3301      	adds	r3, #1
 81032fc:	069b      	lsls	r3, r3, #26
 81032fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103302:	e015      	b.n	8103330 <HAL_ADC_ConfigChannel+0x318>
 8103304:	683b      	ldr	r3, [r7, #0]
 8103306:	681b      	ldr	r3, [r3, #0]
 8103308:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810330a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810330c:	fa93 f3a3 	rbit	r3, r3
 8103310:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8103312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103314:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8103316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103318:	2b00      	cmp	r3, #0
 810331a:	d101      	bne.n	8103320 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 810331c:	2320      	movs	r3, #32
 810331e:	e003      	b.n	8103328 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8103320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103322:	fab3 f383 	clz	r3, r3
 8103326:	b2db      	uxtb	r3, r3
 8103328:	3301      	adds	r3, #1
 810332a:	069b      	lsls	r3, r3, #26
 810332c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103330:	683b      	ldr	r3, [r7, #0]
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103338:	2b00      	cmp	r3, #0
 810333a:	d109      	bne.n	8103350 <HAL_ADC_ConfigChannel+0x338>
 810333c:	683b      	ldr	r3, [r7, #0]
 810333e:	681b      	ldr	r3, [r3, #0]
 8103340:	0e9b      	lsrs	r3, r3, #26
 8103342:	3301      	adds	r3, #1
 8103344:	f003 031f 	and.w	r3, r3, #31
 8103348:	2101      	movs	r1, #1
 810334a:	fa01 f303 	lsl.w	r3, r1, r3
 810334e:	e017      	b.n	8103380 <HAL_ADC_ConfigChannel+0x368>
 8103350:	683b      	ldr	r3, [r7, #0]
 8103352:	681b      	ldr	r3, [r3, #0]
 8103354:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103358:	fa93 f3a3 	rbit	r3, r3
 810335c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 810335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103360:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8103362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103364:	2b00      	cmp	r3, #0
 8103366:	d101      	bne.n	810336c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8103368:	2320      	movs	r3, #32
 810336a:	e003      	b.n	8103374 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 810336c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810336e:	fab3 f383 	clz	r3, r3
 8103372:	b2db      	uxtb	r3, r3
 8103374:	3301      	adds	r3, #1
 8103376:	f003 031f 	and.w	r3, r3, #31
 810337a:	2101      	movs	r1, #1
 810337c:	fa01 f303 	lsl.w	r3, r1, r3
 8103380:	ea42 0103 	orr.w	r1, r2, r3
 8103384:	683b      	ldr	r3, [r7, #0]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810338c:	2b00      	cmp	r3, #0
 810338e:	d10a      	bne.n	81033a6 <HAL_ADC_ConfigChannel+0x38e>
 8103390:	683b      	ldr	r3, [r7, #0]
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	0e9b      	lsrs	r3, r3, #26
 8103396:	3301      	adds	r3, #1
 8103398:	f003 021f 	and.w	r2, r3, #31
 810339c:	4613      	mov	r3, r2
 810339e:	005b      	lsls	r3, r3, #1
 81033a0:	4413      	add	r3, r2
 81033a2:	051b      	lsls	r3, r3, #20
 81033a4:	e018      	b.n	81033d8 <HAL_ADC_ConfigChannel+0x3c0>
 81033a6:	683b      	ldr	r3, [r7, #0]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81033ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81033ae:	fa93 f3a3 	rbit	r3, r3
 81033b2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 81033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81033b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 81033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81033ba:	2b00      	cmp	r3, #0
 81033bc:	d101      	bne.n	81033c2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 81033be:	2320      	movs	r3, #32
 81033c0:	e003      	b.n	81033ca <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 81033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81033c4:	fab3 f383 	clz	r3, r3
 81033c8:	b2db      	uxtb	r3, r3
 81033ca:	3301      	adds	r3, #1
 81033cc:	f003 021f 	and.w	r2, r3, #31
 81033d0:	4613      	mov	r3, r2
 81033d2:	005b      	lsls	r3, r3, #1
 81033d4:	4413      	add	r3, r2
 81033d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81033d8:	430b      	orrs	r3, r1
 81033da:	e07e      	b.n	81034da <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81033dc:	683b      	ldr	r3, [r7, #0]
 81033de:	681b      	ldr	r3, [r3, #0]
 81033e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81033e4:	2b00      	cmp	r3, #0
 81033e6:	d107      	bne.n	81033f8 <HAL_ADC_ConfigChannel+0x3e0>
 81033e8:	683b      	ldr	r3, [r7, #0]
 81033ea:	681b      	ldr	r3, [r3, #0]
 81033ec:	0e9b      	lsrs	r3, r3, #26
 81033ee:	3301      	adds	r3, #1
 81033f0:	069b      	lsls	r3, r3, #26
 81033f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81033f6:	e015      	b.n	8103424 <HAL_ADC_ConfigChannel+0x40c>
 81033f8:	683b      	ldr	r3, [r7, #0]
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103400:	fa93 f3a3 	rbit	r3, r3
 8103404:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8103406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103408:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 810340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810340c:	2b00      	cmp	r3, #0
 810340e:	d101      	bne.n	8103414 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8103410:	2320      	movs	r3, #32
 8103412:	e003      	b.n	810341c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8103414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103416:	fab3 f383 	clz	r3, r3
 810341a:	b2db      	uxtb	r3, r3
 810341c:	3301      	adds	r3, #1
 810341e:	069b      	lsls	r3, r3, #26
 8103420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103424:	683b      	ldr	r3, [r7, #0]
 8103426:	681b      	ldr	r3, [r3, #0]
 8103428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810342c:	2b00      	cmp	r3, #0
 810342e:	d109      	bne.n	8103444 <HAL_ADC_ConfigChannel+0x42c>
 8103430:	683b      	ldr	r3, [r7, #0]
 8103432:	681b      	ldr	r3, [r3, #0]
 8103434:	0e9b      	lsrs	r3, r3, #26
 8103436:	3301      	adds	r3, #1
 8103438:	f003 031f 	and.w	r3, r3, #31
 810343c:	2101      	movs	r1, #1
 810343e:	fa01 f303 	lsl.w	r3, r1, r3
 8103442:	e017      	b.n	8103474 <HAL_ADC_ConfigChannel+0x45c>
 8103444:	683b      	ldr	r3, [r7, #0]
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810344a:	69fb      	ldr	r3, [r7, #28]
 810344c:	fa93 f3a3 	rbit	r3, r3
 8103450:	61bb      	str	r3, [r7, #24]
  return result;
 8103452:	69bb      	ldr	r3, [r7, #24]
 8103454:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103456:	6a3b      	ldr	r3, [r7, #32]
 8103458:	2b00      	cmp	r3, #0
 810345a:	d101      	bne.n	8103460 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 810345c:	2320      	movs	r3, #32
 810345e:	e003      	b.n	8103468 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103460:	6a3b      	ldr	r3, [r7, #32]
 8103462:	fab3 f383 	clz	r3, r3
 8103466:	b2db      	uxtb	r3, r3
 8103468:	3301      	adds	r3, #1
 810346a:	f003 031f 	and.w	r3, r3, #31
 810346e:	2101      	movs	r1, #1
 8103470:	fa01 f303 	lsl.w	r3, r1, r3
 8103474:	ea42 0103 	orr.w	r1, r2, r3
 8103478:	683b      	ldr	r3, [r7, #0]
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103480:	2b00      	cmp	r3, #0
 8103482:	d10d      	bne.n	81034a0 <HAL_ADC_ConfigChannel+0x488>
 8103484:	683b      	ldr	r3, [r7, #0]
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	0e9b      	lsrs	r3, r3, #26
 810348a:	3301      	adds	r3, #1
 810348c:	f003 021f 	and.w	r2, r3, #31
 8103490:	4613      	mov	r3, r2
 8103492:	005b      	lsls	r3, r3, #1
 8103494:	4413      	add	r3, r2
 8103496:	3b1e      	subs	r3, #30
 8103498:	051b      	lsls	r3, r3, #20
 810349a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810349e:	e01b      	b.n	81034d8 <HAL_ADC_ConfigChannel+0x4c0>
 81034a0:	683b      	ldr	r3, [r7, #0]
 81034a2:	681b      	ldr	r3, [r3, #0]
 81034a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81034a6:	693b      	ldr	r3, [r7, #16]
 81034a8:	fa93 f3a3 	rbit	r3, r3
 81034ac:	60fb      	str	r3, [r7, #12]
  return result;
 81034ae:	68fb      	ldr	r3, [r7, #12]
 81034b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 81034b2:	697b      	ldr	r3, [r7, #20]
 81034b4:	2b00      	cmp	r3, #0
 81034b6:	d101      	bne.n	81034bc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 81034b8:	2320      	movs	r3, #32
 81034ba:	e003      	b.n	81034c4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 81034bc:	697b      	ldr	r3, [r7, #20]
 81034be:	fab3 f383 	clz	r3, r3
 81034c2:	b2db      	uxtb	r3, r3
 81034c4:	3301      	adds	r3, #1
 81034c6:	f003 021f 	and.w	r2, r3, #31
 81034ca:	4613      	mov	r3, r2
 81034cc:	005b      	lsls	r3, r3, #1
 81034ce:	4413      	add	r3, r2
 81034d0:	3b1e      	subs	r3, #30
 81034d2:	051b      	lsls	r3, r3, #20
 81034d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81034d8:	430b      	orrs	r3, r1
 81034da:	683a      	ldr	r2, [r7, #0]
 81034dc:	6892      	ldr	r2, [r2, #8]
 81034de:	4619      	mov	r1, r3
 81034e0:	f7ff fb20 	bl	8102b24 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 81034e4:	683b      	ldr	r3, [r7, #0]
 81034e6:	681b      	ldr	r3, [r3, #0]
 81034e8:	2b00      	cmp	r3, #0
 81034ea:	f280 80c6 	bge.w	810367a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	681b      	ldr	r3, [r3, #0]
 81034f2:	4a67      	ldr	r2, [pc, #412]	; (8103690 <HAL_ADC_ConfigChannel+0x678>)
 81034f4:	4293      	cmp	r3, r2
 81034f6:	d004      	beq.n	8103502 <HAL_ADC_ConfigChannel+0x4ea>
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	4a65      	ldr	r2, [pc, #404]	; (8103694 <HAL_ADC_ConfigChannel+0x67c>)
 81034fe:	4293      	cmp	r3, r2
 8103500:	d101      	bne.n	8103506 <HAL_ADC_ConfigChannel+0x4ee>
 8103502:	4b65      	ldr	r3, [pc, #404]	; (8103698 <HAL_ADC_ConfigChannel+0x680>)
 8103504:	e000      	b.n	8103508 <HAL_ADC_ConfigChannel+0x4f0>
 8103506:	4b65      	ldr	r3, [pc, #404]	; (810369c <HAL_ADC_ConfigChannel+0x684>)
 8103508:	4618      	mov	r0, r3
 810350a:	f7ff fa7d 	bl	8102a08 <LL_ADC_GetCommonPathInternalCh>
 810350e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	681b      	ldr	r3, [r3, #0]
 8103514:	4a5e      	ldr	r2, [pc, #376]	; (8103690 <HAL_ADC_ConfigChannel+0x678>)
 8103516:	4293      	cmp	r3, r2
 8103518:	d004      	beq.n	8103524 <HAL_ADC_ConfigChannel+0x50c>
 810351a:	687b      	ldr	r3, [r7, #4]
 810351c:	681b      	ldr	r3, [r3, #0]
 810351e:	4a5d      	ldr	r2, [pc, #372]	; (8103694 <HAL_ADC_ConfigChannel+0x67c>)
 8103520:	4293      	cmp	r3, r2
 8103522:	d10e      	bne.n	8103542 <HAL_ADC_ConfigChannel+0x52a>
 8103524:	485a      	ldr	r0, [pc, #360]	; (8103690 <HAL_ADC_ConfigChannel+0x678>)
 8103526:	f7ff fb9b 	bl	8102c60 <LL_ADC_IsEnabled>
 810352a:	4604      	mov	r4, r0
 810352c:	4859      	ldr	r0, [pc, #356]	; (8103694 <HAL_ADC_ConfigChannel+0x67c>)
 810352e:	f7ff fb97 	bl	8102c60 <LL_ADC_IsEnabled>
 8103532:	4603      	mov	r3, r0
 8103534:	4323      	orrs	r3, r4
 8103536:	2b00      	cmp	r3, #0
 8103538:	bf0c      	ite	eq
 810353a:	2301      	moveq	r3, #1
 810353c:	2300      	movne	r3, #0
 810353e:	b2db      	uxtb	r3, r3
 8103540:	e008      	b.n	8103554 <HAL_ADC_ConfigChannel+0x53c>
 8103542:	4857      	ldr	r0, [pc, #348]	; (81036a0 <HAL_ADC_ConfigChannel+0x688>)
 8103544:	f7ff fb8c 	bl	8102c60 <LL_ADC_IsEnabled>
 8103548:	4603      	mov	r3, r0
 810354a:	2b00      	cmp	r3, #0
 810354c:	bf0c      	ite	eq
 810354e:	2301      	moveq	r3, #1
 8103550:	2300      	movne	r3, #0
 8103552:	b2db      	uxtb	r3, r3
 8103554:	2b00      	cmp	r3, #0
 8103556:	d07d      	beq.n	8103654 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103558:	683b      	ldr	r3, [r7, #0]
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	4a51      	ldr	r2, [pc, #324]	; (81036a4 <HAL_ADC_ConfigChannel+0x68c>)
 810355e:	4293      	cmp	r3, r2
 8103560:	d130      	bne.n	81035c4 <HAL_ADC_ConfigChannel+0x5ac>
 8103562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103568:	2b00      	cmp	r3, #0
 810356a:	d12b      	bne.n	81035c4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	681b      	ldr	r3, [r3, #0]
 8103570:	4a4b      	ldr	r2, [pc, #300]	; (81036a0 <HAL_ADC_ConfigChannel+0x688>)
 8103572:	4293      	cmp	r3, r2
 8103574:	f040 8081 	bne.w	810367a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	681b      	ldr	r3, [r3, #0]
 810357c:	4a44      	ldr	r2, [pc, #272]	; (8103690 <HAL_ADC_ConfigChannel+0x678>)
 810357e:	4293      	cmp	r3, r2
 8103580:	d004      	beq.n	810358c <HAL_ADC_ConfigChannel+0x574>
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	681b      	ldr	r3, [r3, #0]
 8103586:	4a43      	ldr	r2, [pc, #268]	; (8103694 <HAL_ADC_ConfigChannel+0x67c>)
 8103588:	4293      	cmp	r3, r2
 810358a:	d101      	bne.n	8103590 <HAL_ADC_ConfigChannel+0x578>
 810358c:	4a42      	ldr	r2, [pc, #264]	; (8103698 <HAL_ADC_ConfigChannel+0x680>)
 810358e:	e000      	b.n	8103592 <HAL_ADC_ConfigChannel+0x57a>
 8103590:	4a42      	ldr	r2, [pc, #264]	; (810369c <HAL_ADC_ConfigChannel+0x684>)
 8103592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103598:	4619      	mov	r1, r3
 810359a:	4610      	mov	r0, r2
 810359c:	f7ff fa21 	bl	81029e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81035a0:	4b41      	ldr	r3, [pc, #260]	; (81036a8 <HAL_ADC_ConfigChannel+0x690>)
 81035a2:	681b      	ldr	r3, [r3, #0]
 81035a4:	099b      	lsrs	r3, r3, #6
 81035a6:	4a41      	ldr	r2, [pc, #260]	; (81036ac <HAL_ADC_ConfigChannel+0x694>)
 81035a8:	fba2 2303 	umull	r2, r3, r2, r3
 81035ac:	099b      	lsrs	r3, r3, #6
 81035ae:	3301      	adds	r3, #1
 81035b0:	005b      	lsls	r3, r3, #1
 81035b2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81035b4:	e002      	b.n	81035bc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 81035b6:	68bb      	ldr	r3, [r7, #8]
 81035b8:	3b01      	subs	r3, #1
 81035ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81035bc:	68bb      	ldr	r3, [r7, #8]
 81035be:	2b00      	cmp	r3, #0
 81035c0:	d1f9      	bne.n	81035b6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81035c2:	e05a      	b.n	810367a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 81035c4:	683b      	ldr	r3, [r7, #0]
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	4a39      	ldr	r2, [pc, #228]	; (81036b0 <HAL_ADC_ConfigChannel+0x698>)
 81035ca:	4293      	cmp	r3, r2
 81035cc:	d11e      	bne.n	810360c <HAL_ADC_ConfigChannel+0x5f4>
 81035ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81035d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81035d4:	2b00      	cmp	r3, #0
 81035d6:	d119      	bne.n	810360c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81035d8:	687b      	ldr	r3, [r7, #4]
 81035da:	681b      	ldr	r3, [r3, #0]
 81035dc:	4a30      	ldr	r2, [pc, #192]	; (81036a0 <HAL_ADC_ConfigChannel+0x688>)
 81035de:	4293      	cmp	r3, r2
 81035e0:	d14b      	bne.n	810367a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	681b      	ldr	r3, [r3, #0]
 81035e6:	4a2a      	ldr	r2, [pc, #168]	; (8103690 <HAL_ADC_ConfigChannel+0x678>)
 81035e8:	4293      	cmp	r3, r2
 81035ea:	d004      	beq.n	81035f6 <HAL_ADC_ConfigChannel+0x5de>
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	4a28      	ldr	r2, [pc, #160]	; (8103694 <HAL_ADC_ConfigChannel+0x67c>)
 81035f2:	4293      	cmp	r3, r2
 81035f4:	d101      	bne.n	81035fa <HAL_ADC_ConfigChannel+0x5e2>
 81035f6:	4a28      	ldr	r2, [pc, #160]	; (8103698 <HAL_ADC_ConfigChannel+0x680>)
 81035f8:	e000      	b.n	81035fc <HAL_ADC_ConfigChannel+0x5e4>
 81035fa:	4a28      	ldr	r2, [pc, #160]	; (810369c <HAL_ADC_ConfigChannel+0x684>)
 81035fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81035fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103602:	4619      	mov	r1, r3
 8103604:	4610      	mov	r0, r2
 8103606:	f7ff f9ec 	bl	81029e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810360a:	e036      	b.n	810367a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 810360c:	683b      	ldr	r3, [r7, #0]
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	4a28      	ldr	r2, [pc, #160]	; (81036b4 <HAL_ADC_ConfigChannel+0x69c>)
 8103612:	4293      	cmp	r3, r2
 8103614:	d131      	bne.n	810367a <HAL_ADC_ConfigChannel+0x662>
 8103616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810361c:	2b00      	cmp	r3, #0
 810361e:	d12c      	bne.n	810367a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681b      	ldr	r3, [r3, #0]
 8103624:	4a1e      	ldr	r2, [pc, #120]	; (81036a0 <HAL_ADC_ConfigChannel+0x688>)
 8103626:	4293      	cmp	r3, r2
 8103628:	d127      	bne.n	810367a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	681b      	ldr	r3, [r3, #0]
 810362e:	4a18      	ldr	r2, [pc, #96]	; (8103690 <HAL_ADC_ConfigChannel+0x678>)
 8103630:	4293      	cmp	r3, r2
 8103632:	d004      	beq.n	810363e <HAL_ADC_ConfigChannel+0x626>
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	4a16      	ldr	r2, [pc, #88]	; (8103694 <HAL_ADC_ConfigChannel+0x67c>)
 810363a:	4293      	cmp	r3, r2
 810363c:	d101      	bne.n	8103642 <HAL_ADC_ConfigChannel+0x62a>
 810363e:	4a16      	ldr	r2, [pc, #88]	; (8103698 <HAL_ADC_ConfigChannel+0x680>)
 8103640:	e000      	b.n	8103644 <HAL_ADC_ConfigChannel+0x62c>
 8103642:	4a16      	ldr	r2, [pc, #88]	; (810369c <HAL_ADC_ConfigChannel+0x684>)
 8103644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810364a:	4619      	mov	r1, r3
 810364c:	4610      	mov	r0, r2
 810364e:	f7ff f9c8 	bl	81029e2 <LL_ADC_SetCommonPathInternalCh>
 8103652:	e012      	b.n	810367a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103654:	687b      	ldr	r3, [r7, #4]
 8103656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103658:	f043 0220 	orr.w	r2, r3, #32
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103660:	2301      	movs	r3, #1
 8103662:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103666:	e008      	b.n	810367a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810366c:	f043 0220 	orr.w	r2, r3, #32
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103674:	2301      	movs	r3, #1
 8103676:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	2200      	movs	r2, #0
 810367e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103682:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103686:	4618      	mov	r0, r3
 8103688:	3784      	adds	r7, #132	; 0x84
 810368a:	46bd      	mov	sp, r7
 810368c:	bd90      	pop	{r4, r7, pc}
 810368e:	bf00      	nop
 8103690:	40022000 	.word	0x40022000
 8103694:	40022100 	.word	0x40022100
 8103698:	40022300 	.word	0x40022300
 810369c:	58026300 	.word	0x58026300
 81036a0:	58026000 	.word	0x58026000
 81036a4:	cb840000 	.word	0xcb840000
 81036a8:	10000000 	.word	0x10000000
 81036ac:	053e2d63 	.word	0x053e2d63
 81036b0:	c7520000 	.word	0xc7520000
 81036b4:	cfb80000 	.word	0xcfb80000

081036b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81036b8:	b580      	push	{r7, lr}
 81036ba:	b084      	sub	sp, #16
 81036bc:	af00      	add	r7, sp, #0
 81036be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4a79      	ldr	r2, [pc, #484]	; (81038ac <ADC_ConfigureBoostMode+0x1f4>)
 81036c6:	4293      	cmp	r3, r2
 81036c8:	d004      	beq.n	81036d4 <ADC_ConfigureBoostMode+0x1c>
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	4a78      	ldr	r2, [pc, #480]	; (81038b0 <ADC_ConfigureBoostMode+0x1f8>)
 81036d0:	4293      	cmp	r3, r2
 81036d2:	d109      	bne.n	81036e8 <ADC_ConfigureBoostMode+0x30>
 81036d4:	4b77      	ldr	r3, [pc, #476]	; (81038b4 <ADC_ConfigureBoostMode+0x1fc>)
 81036d6:	689b      	ldr	r3, [r3, #8]
 81036d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81036dc:	2b00      	cmp	r3, #0
 81036de:	bf14      	ite	ne
 81036e0:	2301      	movne	r3, #1
 81036e2:	2300      	moveq	r3, #0
 81036e4:	b2db      	uxtb	r3, r3
 81036e6:	e008      	b.n	81036fa <ADC_ConfigureBoostMode+0x42>
 81036e8:	4b73      	ldr	r3, [pc, #460]	; (81038b8 <ADC_ConfigureBoostMode+0x200>)
 81036ea:	689b      	ldr	r3, [r3, #8]
 81036ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81036f0:	2b00      	cmp	r3, #0
 81036f2:	bf14      	ite	ne
 81036f4:	2301      	movne	r3, #1
 81036f6:	2300      	moveq	r3, #0
 81036f8:	b2db      	uxtb	r3, r3
 81036fa:	2b00      	cmp	r3, #0
 81036fc:	d01c      	beq.n	8103738 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81036fe:	f001 fe77 	bl	81053f0 <HAL_RCC_GetHCLKFreq>
 8103702:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	685b      	ldr	r3, [r3, #4]
 8103708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810370c:	d010      	beq.n	8103730 <ADC_ConfigureBoostMode+0x78>
 810370e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103712:	d871      	bhi.n	81037f8 <ADC_ConfigureBoostMode+0x140>
 8103714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103718:	d002      	beq.n	8103720 <ADC_ConfigureBoostMode+0x68>
 810371a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810371e:	d16b      	bne.n	81037f8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103720:	687b      	ldr	r3, [r7, #4]
 8103722:	685b      	ldr	r3, [r3, #4]
 8103724:	0c1b      	lsrs	r3, r3, #16
 8103726:	68fa      	ldr	r2, [r7, #12]
 8103728:	fbb2 f3f3 	udiv	r3, r2, r3
 810372c:	60fb      	str	r3, [r7, #12]
        break;
 810372e:	e066      	b.n	81037fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103730:	68fb      	ldr	r3, [r7, #12]
 8103732:	089b      	lsrs	r3, r3, #2
 8103734:	60fb      	str	r3, [r7, #12]
        break;
 8103736:	e062      	b.n	81037fe <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103738:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 810373c:	f002 fe66 	bl	810640c <HAL_RCCEx_GetPeriphCLKFreq>
 8103740:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	685b      	ldr	r3, [r3, #4]
 8103746:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 810374a:	d051      	beq.n	81037f0 <ADC_ConfigureBoostMode+0x138>
 810374c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103750:	d854      	bhi.n	81037fc <ADC_ConfigureBoostMode+0x144>
 8103752:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103756:	d047      	beq.n	81037e8 <ADC_ConfigureBoostMode+0x130>
 8103758:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810375c:	d84e      	bhi.n	81037fc <ADC_ConfigureBoostMode+0x144>
 810375e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103762:	d03d      	beq.n	81037e0 <ADC_ConfigureBoostMode+0x128>
 8103764:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103768:	d848      	bhi.n	81037fc <ADC_ConfigureBoostMode+0x144>
 810376a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810376e:	d033      	beq.n	81037d8 <ADC_ConfigureBoostMode+0x120>
 8103770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103774:	d842      	bhi.n	81037fc <ADC_ConfigureBoostMode+0x144>
 8103776:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810377a:	d029      	beq.n	81037d0 <ADC_ConfigureBoostMode+0x118>
 810377c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103780:	d83c      	bhi.n	81037fc <ADC_ConfigureBoostMode+0x144>
 8103782:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103786:	d01a      	beq.n	81037be <ADC_ConfigureBoostMode+0x106>
 8103788:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810378c:	d836      	bhi.n	81037fc <ADC_ConfigureBoostMode+0x144>
 810378e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103792:	d014      	beq.n	81037be <ADC_ConfigureBoostMode+0x106>
 8103794:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103798:	d830      	bhi.n	81037fc <ADC_ConfigureBoostMode+0x144>
 810379a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810379e:	d00e      	beq.n	81037be <ADC_ConfigureBoostMode+0x106>
 81037a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81037a4:	d82a      	bhi.n	81037fc <ADC_ConfigureBoostMode+0x144>
 81037a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81037aa:	d008      	beq.n	81037be <ADC_ConfigureBoostMode+0x106>
 81037ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81037b0:	d824      	bhi.n	81037fc <ADC_ConfigureBoostMode+0x144>
 81037b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81037b6:	d002      	beq.n	81037be <ADC_ConfigureBoostMode+0x106>
 81037b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81037bc:	d11e      	bne.n	81037fc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81037be:	687b      	ldr	r3, [r7, #4]
 81037c0:	685b      	ldr	r3, [r3, #4]
 81037c2:	0c9b      	lsrs	r3, r3, #18
 81037c4:	005b      	lsls	r3, r3, #1
 81037c6:	68fa      	ldr	r2, [r7, #12]
 81037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 81037cc:	60fb      	str	r3, [r7, #12]
        break;
 81037ce:	e016      	b.n	81037fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81037d0:	68fb      	ldr	r3, [r7, #12]
 81037d2:	091b      	lsrs	r3, r3, #4
 81037d4:	60fb      	str	r3, [r7, #12]
        break;
 81037d6:	e012      	b.n	81037fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81037d8:	68fb      	ldr	r3, [r7, #12]
 81037da:	095b      	lsrs	r3, r3, #5
 81037dc:	60fb      	str	r3, [r7, #12]
        break;
 81037de:	e00e      	b.n	81037fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81037e0:	68fb      	ldr	r3, [r7, #12]
 81037e2:	099b      	lsrs	r3, r3, #6
 81037e4:	60fb      	str	r3, [r7, #12]
        break;
 81037e6:	e00a      	b.n	81037fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 81037e8:	68fb      	ldr	r3, [r7, #12]
 81037ea:	09db      	lsrs	r3, r3, #7
 81037ec:	60fb      	str	r3, [r7, #12]
        break;
 81037ee:	e006      	b.n	81037fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81037f0:	68fb      	ldr	r3, [r7, #12]
 81037f2:	0a1b      	lsrs	r3, r3, #8
 81037f4:	60fb      	str	r3, [r7, #12]
        break;
 81037f6:	e002      	b.n	81037fe <ADC_ConfigureBoostMode+0x146>
        break;
 81037f8:	bf00      	nop
 81037fa:	e000      	b.n	81037fe <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 81037fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81037fe:	f7ff f8a7 	bl	8102950 <HAL_GetREVID>
 8103802:	4603      	mov	r3, r0
 8103804:	f241 0203 	movw	r2, #4099	; 0x1003
 8103808:	4293      	cmp	r3, r2
 810380a:	d815      	bhi.n	8103838 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 810380c:	68fb      	ldr	r3, [r7, #12]
 810380e:	4a2b      	ldr	r2, [pc, #172]	; (81038bc <ADC_ConfigureBoostMode+0x204>)
 8103810:	4293      	cmp	r3, r2
 8103812:	d908      	bls.n	8103826 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103814:	687b      	ldr	r3, [r7, #4]
 8103816:	681b      	ldr	r3, [r3, #0]
 8103818:	689a      	ldr	r2, [r3, #8]
 810381a:	687b      	ldr	r3, [r7, #4]
 810381c:	681b      	ldr	r3, [r3, #0]
 810381e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103822:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103824:	e03e      	b.n	81038a4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	681b      	ldr	r3, [r3, #0]
 810382a:	689a      	ldr	r2, [r3, #8]
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103834:	609a      	str	r2, [r3, #8]
}
 8103836:	e035      	b.n	81038a4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103838:	68fb      	ldr	r3, [r7, #12]
 810383a:	085b      	lsrs	r3, r3, #1
 810383c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 810383e:	68fb      	ldr	r3, [r7, #12]
 8103840:	4a1f      	ldr	r2, [pc, #124]	; (81038c0 <ADC_ConfigureBoostMode+0x208>)
 8103842:	4293      	cmp	r3, r2
 8103844:	d808      	bhi.n	8103858 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	681b      	ldr	r3, [r3, #0]
 810384a:	689a      	ldr	r2, [r3, #8]
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	681b      	ldr	r3, [r3, #0]
 8103850:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103854:	609a      	str	r2, [r3, #8]
}
 8103856:	e025      	b.n	81038a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8103858:	68fb      	ldr	r3, [r7, #12]
 810385a:	4a1a      	ldr	r2, [pc, #104]	; (81038c4 <ADC_ConfigureBoostMode+0x20c>)
 810385c:	4293      	cmp	r3, r2
 810385e:	d80a      	bhi.n	8103876 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	689b      	ldr	r3, [r3, #8]
 8103866:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103872:	609a      	str	r2, [r3, #8]
}
 8103874:	e016      	b.n	81038a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8103876:	68fb      	ldr	r3, [r7, #12]
 8103878:	4a13      	ldr	r2, [pc, #76]	; (81038c8 <ADC_ConfigureBoostMode+0x210>)
 810387a:	4293      	cmp	r3, r2
 810387c:	d80a      	bhi.n	8103894 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	681b      	ldr	r3, [r3, #0]
 8103882:	689b      	ldr	r3, [r3, #8]
 8103884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103890:	609a      	str	r2, [r3, #8]
}
 8103892:	e007      	b.n	81038a4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	689a      	ldr	r2, [r3, #8]
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	681b      	ldr	r3, [r3, #0]
 810389e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 81038a2:	609a      	str	r2, [r3, #8]
}
 81038a4:	bf00      	nop
 81038a6:	3710      	adds	r7, #16
 81038a8:	46bd      	mov	sp, r7
 81038aa:	bd80      	pop	{r7, pc}
 81038ac:	40022000 	.word	0x40022000
 81038b0:	40022100 	.word	0x40022100
 81038b4:	40022300 	.word	0x40022300
 81038b8:	58026300 	.word	0x58026300
 81038bc:	01312d00 	.word	0x01312d00
 81038c0:	005f5e10 	.word	0x005f5e10
 81038c4:	00bebc20 	.word	0x00bebc20
 81038c8:	017d7840 	.word	0x017d7840

081038cc <LL_ADC_IsEnabled>:
{
 81038cc:	b480      	push	{r7}
 81038ce:	b083      	sub	sp, #12
 81038d0:	af00      	add	r7, sp, #0
 81038d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	689b      	ldr	r3, [r3, #8]
 81038d8:	f003 0301 	and.w	r3, r3, #1
 81038dc:	2b01      	cmp	r3, #1
 81038de:	d101      	bne.n	81038e4 <LL_ADC_IsEnabled+0x18>
 81038e0:	2301      	movs	r3, #1
 81038e2:	e000      	b.n	81038e6 <LL_ADC_IsEnabled+0x1a>
 81038e4:	2300      	movs	r3, #0
}
 81038e6:	4618      	mov	r0, r3
 81038e8:	370c      	adds	r7, #12
 81038ea:	46bd      	mov	sp, r7
 81038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038f0:	4770      	bx	lr

081038f2 <LL_ADC_REG_IsConversionOngoing>:
{
 81038f2:	b480      	push	{r7}
 81038f4:	b083      	sub	sp, #12
 81038f6:	af00      	add	r7, sp, #0
 81038f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	689b      	ldr	r3, [r3, #8]
 81038fe:	f003 0304 	and.w	r3, r3, #4
 8103902:	2b04      	cmp	r3, #4
 8103904:	d101      	bne.n	810390a <LL_ADC_REG_IsConversionOngoing+0x18>
 8103906:	2301      	movs	r3, #1
 8103908:	e000      	b.n	810390c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810390a:	2300      	movs	r3, #0
}
 810390c:	4618      	mov	r0, r3
 810390e:	370c      	adds	r7, #12
 8103910:	46bd      	mov	sp, r7
 8103912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103916:	4770      	bx	lr

08103918 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103918:	b590      	push	{r4, r7, lr}
 810391a:	b09f      	sub	sp, #124	; 0x7c
 810391c:	af00      	add	r7, sp, #0
 810391e:	6078      	str	r0, [r7, #4]
 8103920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103922:	2300      	movs	r3, #0
 8103924:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810392e:	2b01      	cmp	r3, #1
 8103930:	d101      	bne.n	8103936 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103932:	2302      	movs	r3, #2
 8103934:	e0c4      	b.n	8103ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	2201      	movs	r2, #1
 810393a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810393e:	2300      	movs	r3, #0
 8103940:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103942:	2300      	movs	r3, #0
 8103944:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	681b      	ldr	r3, [r3, #0]
 810394a:	4a5f      	ldr	r2, [pc, #380]	; (8103ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810394c:	4293      	cmp	r3, r2
 810394e:	d102      	bne.n	8103956 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103950:	4b5e      	ldr	r3, [pc, #376]	; (8103acc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103952:	60bb      	str	r3, [r7, #8]
 8103954:	e001      	b.n	810395a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8103956:	2300      	movs	r3, #0
 8103958:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 810395a:	68bb      	ldr	r3, [r7, #8]
 810395c:	2b00      	cmp	r3, #0
 810395e:	d10b      	bne.n	8103978 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103964:	f043 0220 	orr.w	r2, r3, #32
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	2200      	movs	r2, #0
 8103970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8103974:	2301      	movs	r3, #1
 8103976:	e0a3      	b.n	8103ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103978:	68bb      	ldr	r3, [r7, #8]
 810397a:	4618      	mov	r0, r3
 810397c:	f7ff ffb9 	bl	81038f2 <LL_ADC_REG_IsConversionOngoing>
 8103980:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	681b      	ldr	r3, [r3, #0]
 8103986:	4618      	mov	r0, r3
 8103988:	f7ff ffb3 	bl	81038f2 <LL_ADC_REG_IsConversionOngoing>
 810398c:	4603      	mov	r3, r0
 810398e:	2b00      	cmp	r3, #0
 8103990:	f040 8085 	bne.w	8103a9e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103996:	2b00      	cmp	r3, #0
 8103998:	f040 8081 	bne.w	8103a9e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	681b      	ldr	r3, [r3, #0]
 81039a0:	4a49      	ldr	r2, [pc, #292]	; (8103ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81039a2:	4293      	cmp	r3, r2
 81039a4:	d004      	beq.n	81039b0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	681b      	ldr	r3, [r3, #0]
 81039aa:	4a48      	ldr	r2, [pc, #288]	; (8103acc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81039ac:	4293      	cmp	r3, r2
 81039ae:	d101      	bne.n	81039b4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81039b0:	4b47      	ldr	r3, [pc, #284]	; (8103ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81039b2:	e000      	b.n	81039b6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81039b4:	4b47      	ldr	r3, [pc, #284]	; (8103ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81039b6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81039b8:	683b      	ldr	r3, [r7, #0]
 81039ba:	681b      	ldr	r3, [r3, #0]
 81039bc:	2b00      	cmp	r3, #0
 81039be:	d03b      	beq.n	8103a38 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81039c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81039c2:	689b      	ldr	r3, [r3, #8]
 81039c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81039c8:	683b      	ldr	r3, [r7, #0]
 81039ca:	685b      	ldr	r3, [r3, #4]
 81039cc:	431a      	orrs	r2, r3
 81039ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81039d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	681b      	ldr	r3, [r3, #0]
 81039d6:	4a3c      	ldr	r2, [pc, #240]	; (8103ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81039d8:	4293      	cmp	r3, r2
 81039da:	d004      	beq.n	81039e6 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	4a3a      	ldr	r2, [pc, #232]	; (8103acc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81039e2:	4293      	cmp	r3, r2
 81039e4:	d10e      	bne.n	8103a04 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 81039e6:	4838      	ldr	r0, [pc, #224]	; (8103ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81039e8:	f7ff ff70 	bl	81038cc <LL_ADC_IsEnabled>
 81039ec:	4604      	mov	r4, r0
 81039ee:	4837      	ldr	r0, [pc, #220]	; (8103acc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81039f0:	f7ff ff6c 	bl	81038cc <LL_ADC_IsEnabled>
 81039f4:	4603      	mov	r3, r0
 81039f6:	4323      	orrs	r3, r4
 81039f8:	2b00      	cmp	r3, #0
 81039fa:	bf0c      	ite	eq
 81039fc:	2301      	moveq	r3, #1
 81039fe:	2300      	movne	r3, #0
 8103a00:	b2db      	uxtb	r3, r3
 8103a02:	e008      	b.n	8103a16 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103a04:	4834      	ldr	r0, [pc, #208]	; (8103ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103a06:	f7ff ff61 	bl	81038cc <LL_ADC_IsEnabled>
 8103a0a:	4603      	mov	r3, r0
 8103a0c:	2b00      	cmp	r3, #0
 8103a0e:	bf0c      	ite	eq
 8103a10:	2301      	moveq	r3, #1
 8103a12:	2300      	movne	r3, #0
 8103a14:	b2db      	uxtb	r3, r3
 8103a16:	2b00      	cmp	r3, #0
 8103a18:	d04b      	beq.n	8103ab2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8103a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103a1c:	689b      	ldr	r3, [r3, #8]
 8103a1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103a22:	f023 030f 	bic.w	r3, r3, #15
 8103a26:	683a      	ldr	r2, [r7, #0]
 8103a28:	6811      	ldr	r1, [r2, #0]
 8103a2a:	683a      	ldr	r2, [r7, #0]
 8103a2c:	6892      	ldr	r2, [r2, #8]
 8103a2e:	430a      	orrs	r2, r1
 8103a30:	431a      	orrs	r2, r3
 8103a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103a34:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103a36:	e03c      	b.n	8103ab2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103a3a:	689b      	ldr	r3, [r3, #8]
 8103a3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103a42:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	681b      	ldr	r3, [r3, #0]
 8103a48:	4a1f      	ldr	r2, [pc, #124]	; (8103ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103a4a:	4293      	cmp	r3, r2
 8103a4c:	d004      	beq.n	8103a58 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	681b      	ldr	r3, [r3, #0]
 8103a52:	4a1e      	ldr	r2, [pc, #120]	; (8103acc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103a54:	4293      	cmp	r3, r2
 8103a56:	d10e      	bne.n	8103a76 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8103a58:	481b      	ldr	r0, [pc, #108]	; (8103ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103a5a:	f7ff ff37 	bl	81038cc <LL_ADC_IsEnabled>
 8103a5e:	4604      	mov	r4, r0
 8103a60:	481a      	ldr	r0, [pc, #104]	; (8103acc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103a62:	f7ff ff33 	bl	81038cc <LL_ADC_IsEnabled>
 8103a66:	4603      	mov	r3, r0
 8103a68:	4323      	orrs	r3, r4
 8103a6a:	2b00      	cmp	r3, #0
 8103a6c:	bf0c      	ite	eq
 8103a6e:	2301      	moveq	r3, #1
 8103a70:	2300      	movne	r3, #0
 8103a72:	b2db      	uxtb	r3, r3
 8103a74:	e008      	b.n	8103a88 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8103a76:	4818      	ldr	r0, [pc, #96]	; (8103ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103a78:	f7ff ff28 	bl	81038cc <LL_ADC_IsEnabled>
 8103a7c:	4603      	mov	r3, r0
 8103a7e:	2b00      	cmp	r3, #0
 8103a80:	bf0c      	ite	eq
 8103a82:	2301      	moveq	r3, #1
 8103a84:	2300      	movne	r3, #0
 8103a86:	b2db      	uxtb	r3, r3
 8103a88:	2b00      	cmp	r3, #0
 8103a8a:	d012      	beq.n	8103ab2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103a8e:	689b      	ldr	r3, [r3, #8]
 8103a90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103a94:	f023 030f 	bic.w	r3, r3, #15
 8103a98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8103a9a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103a9c:	e009      	b.n	8103ab2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103aa2:	f043 0220 	orr.w	r2, r3, #32
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103aaa:	2301      	movs	r3, #1
 8103aac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8103ab0:	e000      	b.n	8103ab4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103ab2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	2200      	movs	r2, #0
 8103ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103abc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8103ac0:	4618      	mov	r0, r3
 8103ac2:	377c      	adds	r7, #124	; 0x7c
 8103ac4:	46bd      	mov	sp, r7
 8103ac6:	bd90      	pop	{r4, r7, pc}
 8103ac8:	40022000 	.word	0x40022000
 8103acc:	40022100 	.word	0x40022100
 8103ad0:	40022300 	.word	0x40022300
 8103ad4:	58026300 	.word	0x58026300
 8103ad8:	58026000 	.word	0x58026000

08103adc <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8103adc:	b580      	push	{r7, lr}
 8103ade:	b082      	sub	sp, #8
 8103ae0:	af00      	add	r7, sp, #0
 8103ae2:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	2b00      	cmp	r3, #0
 8103ae8:	d003      	beq.n	8103af2 <HAL_CEC_Init+0x16>
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103aee:	2b00      	cmp	r3, #0
 8103af0:	d101      	bne.n	8103af6 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8103af2:	2301      	movs	r3, #1
 8103af4:	e050      	b.n	8103b98 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103afa:	2b00      	cmp	r3, #0
 8103afc:	d106      	bne.n	8103b0c <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	2200      	movs	r2, #0
 8103b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8103b06:	6878      	ldr	r0, [r7, #4]
 8103b08:	f7fd fa32 	bl	8100f70 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	2224      	movs	r2, #36	; 0x24
 8103b10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	681b      	ldr	r3, [r3, #0]
 8103b16:	681a      	ldr	r2, [r3, #0]
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	681b      	ldr	r3, [r3, #0]
 8103b1c:	f022 0201 	bic.w	r2, r2, #1
 8103b20:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	685a      	ldr	r2, [r3, #4]
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	689b      	ldr	r3, [r3, #8]
 8103b2a:	431a      	orrs	r2, r3
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	68db      	ldr	r3, [r3, #12]
 8103b30:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103b36:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	695b      	ldr	r3, [r3, #20]
 8103b3c:	431a      	orrs	r2, r3
 8103b3e:	687b      	ldr	r3, [r7, #4]
 8103b40:	699b      	ldr	r3, [r3, #24]
 8103b42:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103b48:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8103b4e:	041b      	lsls	r3, r3, #16
 8103b50:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103b5c:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103b5e:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	695b      	ldr	r3, [r3, #20]
 8103b66:	687a      	ldr	r2, [r7, #4]
 8103b68:	6812      	ldr	r2, [r2, #0]
 8103b6a:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8103b6e:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8103b72:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	681b      	ldr	r3, [r3, #0]
 8103b78:	681a      	ldr	r2, [r3, #0]
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	681b      	ldr	r3, [r3, #0]
 8103b7e:	f042 0201 	orr.w	r2, r2, #1
 8103b82:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	2200      	movs	r2, #0
 8103b88:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	2220      	movs	r2, #32
 8103b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	2220      	movs	r2, #32
 8103b94:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8103b96:	2300      	movs	r3, #0
}
 8103b98:	4618      	mov	r0, r3
 8103b9a:	3708      	adds	r7, #8
 8103b9c:	46bd      	mov	sp, r7
 8103b9e:	bd80      	pop	{r7, pc}

08103ba0 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8103ba0:	b580      	push	{r7, lr}
 8103ba2:	b084      	sub	sp, #16
 8103ba4:	af00      	add	r7, sp, #0
 8103ba6:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t reg;
  reg = hcec->Instance->ISR;
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	691b      	ldr	r3, [r3, #16]
 8103bae:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if ((reg & CEC_FLAG_ARBLST) != 0U)
 8103bb0:	68fb      	ldr	r3, [r7, #12]
 8103bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103bb6:	2b00      	cmp	r3, #0
 8103bb8:	d00a      	beq.n	8103bd0 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	2280      	movs	r2, #128	; 0x80
 8103bbe:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	681b      	ldr	r3, [r3, #0]
 8103bc4:	691a      	ldr	r2, [r3, #16]
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8103bce:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXBR) != 0U)
 8103bd0:	68fb      	ldr	r3, [r7, #12]
 8103bd2:	f003 0301 	and.w	r3, r3, #1
 8103bd6:	2b00      	cmp	r3, #0
 8103bd8:	d01c      	beq.n	8103c14 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	2222      	movs	r2, #34	; 0x22
 8103bde:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103be4:	3301      	adds	r3, #1
 8103be6:	b29a      	uxth	r2, r3
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	68da      	ldr	r2, [r3, #12]
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103bf6:	b2d2      	uxtb	r2, r2
 8103bf8:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103bfe:	1c5a      	adds	r2, r3, #1
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	691a      	ldr	r2, [r3, #16]
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	f042 0201 	orr.w	r2, r2, #1
 8103c12:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXEND) != 0U)
 8103c14:	68fb      	ldr	r3, [r7, #12]
 8103c16:	f003 0302 	and.w	r3, r3, #2
 8103c1a:	2b00      	cmp	r3, #0
 8103c1c:	d01e      	beq.n	8103c5c <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	691a      	ldr	r2, [r3, #16]
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	f042 0202 	orr.w	r2, r2, #2
 8103c2c:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	2220      	movs	r2, #32
 8103c32:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103c34:	687b      	ldr	r3, [r7, #4]
 8103c36:	2200      	movs	r2, #0
 8103c38:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103c42:	425b      	negs	r3, r3
 8103c44:	441a      	add	r2, r3
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103c4e:	4619      	mov	r1, r3
 8103c50:	6878      	ldr	r0, [r7, #4]
 8103c52:	f000 f88c 	bl	8103d6e <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	2200      	movs	r2, #0
 8103c5a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXBR) != 0U)
 8103c5c:	68fb      	ldr	r3, [r7, #12]
 8103c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103c62:	2b00      	cmp	r3, #0
 8103c64:	d024      	beq.n	8103cb0 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8103c6a:	3b01      	subs	r3, #1
 8103c6c:	b29a      	uxth	r2, r3
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8103c76:	2b00      	cmp	r3, #0
 8103c78:	d107      	bne.n	8103c8a <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	681b      	ldr	r3, [r3, #0]
 8103c7e:	681a      	ldr	r2, [r3, #0]
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	681b      	ldr	r3, [r3, #0]
 8103c84:	f042 0204 	orr.w	r2, r2, #4
 8103c88:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 8103c8a:	687b      	ldr	r3, [r7, #4]
 8103c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c8e:	781a      	ldrb	r2, [r3, #0]
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c9a:	1c5a      	adds	r2, r3, #1
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	691a      	ldr	r2, [r3, #16]
 8103ca6:	687b      	ldr	r3, [r7, #4]
 8103ca8:	681b      	ldr	r3, [r3, #0]
 8103caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103cae:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXEND) != 0U)
 8103cb0:	68fb      	ldr	r3, [r7, #12]
 8103cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103cb6:	2b00      	cmp	r3, #0
 8103cb8:	d014      	beq.n	8103ce4 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	681b      	ldr	r3, [r3, #0]
 8103cbe:	691a      	ldr	r2, [r3, #16]
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	681b      	ldr	r3, [r3, #0]
 8103cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103cc8:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	2220      	movs	r2, #32
 8103cce:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	2200      	movs	r2, #0
 8103cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	2200      	movs	r2, #0
 8103cdc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8103cde:	6878      	ldr	r0, [r7, #4]
 8103ce0:	f000 f83b 	bl	8103d5a <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR | CEC_ISR_TXERR |
 8103ce4:	68fa      	ldr	r2, [r7, #12]
 8103ce6:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8103cea:	4013      	ands	r3, r2
 8103cec:	2b00      	cmp	r3, #0
 8103cee:	d030      	beq.n	8103d52 <HAL_CEC_IRQHandler+0x1b2>
              CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = reg;
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	68fa      	ldr	r2, [r7, #12]
 8103cf4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	681b      	ldr	r3, [r3, #0]
 8103cfa:	691b      	ldr	r3, [r3, #16]
 8103cfc:	687a      	ldr	r2, [r7, #4]
 8103cfe:	6812      	ldr	r2, [r2, #0]
 8103d00:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 8103d04:	f043 031c 	orr.w	r3, r3, #28
 8103d08:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8103d0a:	68fb      	ldr	r3, [r7, #12]
 8103d0c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8103d10:	2b00      	cmp	r3, #0
 8103d12:	d00e      	beq.n	8103d32 <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8103d1c:	425b      	negs	r3, r3
 8103d1e:	441a      	add	r2, r3
 8103d20:	687b      	ldr	r3, [r7, #4]
 8103d22:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	2200      	movs	r2, #0
 8103d28:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	2220      	movs	r2, #32
 8103d2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8103d30:	e00c      	b.n	8103d4c <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((reg & CEC_ISR_ARBLST) == 0U) && ((reg & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8103d32:	68fb      	ldr	r3, [r7, #12]
 8103d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103d38:	2b00      	cmp	r3, #0
 8103d3a:	d107      	bne.n	8103d4c <HAL_CEC_IRQHandler+0x1ac>
 8103d3c:	68fb      	ldr	r3, [r7, #12]
 8103d3e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8103d42:	2b00      	cmp	r3, #0
 8103d44:	d002      	beq.n	8103d4c <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8103d46:	687b      	ldr	r3, [r7, #4]
 8103d48:	2220      	movs	r2, #32
 8103d4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8103d4c:	6878      	ldr	r0, [r7, #4]
 8103d4e:	f000 f819 	bl	8103d84 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8103d52:	bf00      	nop
 8103d54:	3710      	adds	r7, #16
 8103d56:	46bd      	mov	sp, r7
 8103d58:	bd80      	pop	{r7, pc}

08103d5a <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8103d5a:	b480      	push	{r7}
 8103d5c:	b083      	sub	sp, #12
 8103d5e:	af00      	add	r7, sp, #0
 8103d60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8103d62:	bf00      	nop
 8103d64:	370c      	adds	r7, #12
 8103d66:	46bd      	mov	sp, r7
 8103d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d6c:	4770      	bx	lr

08103d6e <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8103d6e:	b480      	push	{r7}
 8103d70:	b083      	sub	sp, #12
 8103d72:	af00      	add	r7, sp, #0
 8103d74:	6078      	str	r0, [r7, #4]
 8103d76:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8103d78:	bf00      	nop
 8103d7a:	370c      	adds	r7, #12
 8103d7c:	46bd      	mov	sp, r7
 8103d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d82:	4770      	bx	lr

08103d84 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8103d84:	b480      	push	{r7}
 8103d86:	b083      	sub	sp, #12
 8103d88:	af00      	add	r7, sp, #0
 8103d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8103d8c:	bf00      	nop
 8103d8e:	370c      	adds	r7, #12
 8103d90:	46bd      	mov	sp, r7
 8103d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d96:	4770      	bx	lr

08103d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103d98:	b480      	push	{r7}
 8103d9a:	b085      	sub	sp, #20
 8103d9c:	af00      	add	r7, sp, #0
 8103d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	f003 0307 	and.w	r3, r3, #7
 8103da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103da8:	4b0c      	ldr	r3, [pc, #48]	; (8103ddc <__NVIC_SetPriorityGrouping+0x44>)
 8103daa:	68db      	ldr	r3, [r3, #12]
 8103dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103dae:	68ba      	ldr	r2, [r7, #8]
 8103db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103db4:	4013      	ands	r3, r2
 8103db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103db8:	68fb      	ldr	r3, [r7, #12]
 8103dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103dbc:	68bb      	ldr	r3, [r7, #8]
 8103dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103dca:	4a04      	ldr	r2, [pc, #16]	; (8103ddc <__NVIC_SetPriorityGrouping+0x44>)
 8103dcc:	68bb      	ldr	r3, [r7, #8]
 8103dce:	60d3      	str	r3, [r2, #12]
}
 8103dd0:	bf00      	nop
 8103dd2:	3714      	adds	r7, #20
 8103dd4:	46bd      	mov	sp, r7
 8103dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dda:	4770      	bx	lr
 8103ddc:	e000ed00 	.word	0xe000ed00

08103de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103de0:	b480      	push	{r7}
 8103de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103de4:	4b04      	ldr	r3, [pc, #16]	; (8103df8 <__NVIC_GetPriorityGrouping+0x18>)
 8103de6:	68db      	ldr	r3, [r3, #12]
 8103de8:	0a1b      	lsrs	r3, r3, #8
 8103dea:	f003 0307 	and.w	r3, r3, #7
}
 8103dee:	4618      	mov	r0, r3
 8103df0:	46bd      	mov	sp, r7
 8103df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103df6:	4770      	bx	lr
 8103df8:	e000ed00 	.word	0xe000ed00

08103dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103dfc:	b480      	push	{r7}
 8103dfe:	b083      	sub	sp, #12
 8103e00:	af00      	add	r7, sp, #0
 8103e02:	4603      	mov	r3, r0
 8103e04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103e0a:	2b00      	cmp	r3, #0
 8103e0c:	db0b      	blt.n	8103e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103e0e:	88fb      	ldrh	r3, [r7, #6]
 8103e10:	f003 021f 	and.w	r2, r3, #31
 8103e14:	4907      	ldr	r1, [pc, #28]	; (8103e34 <__NVIC_EnableIRQ+0x38>)
 8103e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103e1a:	095b      	lsrs	r3, r3, #5
 8103e1c:	2001      	movs	r0, #1
 8103e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8103e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103e26:	bf00      	nop
 8103e28:	370c      	adds	r7, #12
 8103e2a:	46bd      	mov	sp, r7
 8103e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e30:	4770      	bx	lr
 8103e32:	bf00      	nop
 8103e34:	e000e100 	.word	0xe000e100

08103e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103e38:	b480      	push	{r7}
 8103e3a:	b083      	sub	sp, #12
 8103e3c:	af00      	add	r7, sp, #0
 8103e3e:	4603      	mov	r3, r0
 8103e40:	6039      	str	r1, [r7, #0]
 8103e42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103e48:	2b00      	cmp	r3, #0
 8103e4a:	db0a      	blt.n	8103e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103e4c:	683b      	ldr	r3, [r7, #0]
 8103e4e:	b2da      	uxtb	r2, r3
 8103e50:	490c      	ldr	r1, [pc, #48]	; (8103e84 <__NVIC_SetPriority+0x4c>)
 8103e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103e56:	0112      	lsls	r2, r2, #4
 8103e58:	b2d2      	uxtb	r2, r2
 8103e5a:	440b      	add	r3, r1
 8103e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103e60:	e00a      	b.n	8103e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103e62:	683b      	ldr	r3, [r7, #0]
 8103e64:	b2da      	uxtb	r2, r3
 8103e66:	4908      	ldr	r1, [pc, #32]	; (8103e88 <__NVIC_SetPriority+0x50>)
 8103e68:	88fb      	ldrh	r3, [r7, #6]
 8103e6a:	f003 030f 	and.w	r3, r3, #15
 8103e6e:	3b04      	subs	r3, #4
 8103e70:	0112      	lsls	r2, r2, #4
 8103e72:	b2d2      	uxtb	r2, r2
 8103e74:	440b      	add	r3, r1
 8103e76:	761a      	strb	r2, [r3, #24]
}
 8103e78:	bf00      	nop
 8103e7a:	370c      	adds	r7, #12
 8103e7c:	46bd      	mov	sp, r7
 8103e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e82:	4770      	bx	lr
 8103e84:	e000e100 	.word	0xe000e100
 8103e88:	e000ed00 	.word	0xe000ed00

08103e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103e8c:	b480      	push	{r7}
 8103e8e:	b089      	sub	sp, #36	; 0x24
 8103e90:	af00      	add	r7, sp, #0
 8103e92:	60f8      	str	r0, [r7, #12]
 8103e94:	60b9      	str	r1, [r7, #8]
 8103e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103e98:	68fb      	ldr	r3, [r7, #12]
 8103e9a:	f003 0307 	and.w	r3, r3, #7
 8103e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103ea0:	69fb      	ldr	r3, [r7, #28]
 8103ea2:	f1c3 0307 	rsb	r3, r3, #7
 8103ea6:	2b04      	cmp	r3, #4
 8103ea8:	bf28      	it	cs
 8103eaa:	2304      	movcs	r3, #4
 8103eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103eae:	69fb      	ldr	r3, [r7, #28]
 8103eb0:	3304      	adds	r3, #4
 8103eb2:	2b06      	cmp	r3, #6
 8103eb4:	d902      	bls.n	8103ebc <NVIC_EncodePriority+0x30>
 8103eb6:	69fb      	ldr	r3, [r7, #28]
 8103eb8:	3b03      	subs	r3, #3
 8103eba:	e000      	b.n	8103ebe <NVIC_EncodePriority+0x32>
 8103ebc:	2300      	movs	r3, #0
 8103ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8103ec4:	69bb      	ldr	r3, [r7, #24]
 8103ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8103eca:	43da      	mvns	r2, r3
 8103ecc:	68bb      	ldr	r3, [r7, #8]
 8103ece:	401a      	ands	r2, r3
 8103ed0:	697b      	ldr	r3, [r7, #20]
 8103ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8103ed8:	697b      	ldr	r3, [r7, #20]
 8103eda:	fa01 f303 	lsl.w	r3, r1, r3
 8103ede:	43d9      	mvns	r1, r3
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103ee4:	4313      	orrs	r3, r2
         );
}
 8103ee6:	4618      	mov	r0, r3
 8103ee8:	3724      	adds	r7, #36	; 0x24
 8103eea:	46bd      	mov	sp, r7
 8103eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ef0:	4770      	bx	lr

08103ef2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103ef2:	b580      	push	{r7, lr}
 8103ef4:	b082      	sub	sp, #8
 8103ef6:	af00      	add	r7, sp, #0
 8103ef8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103efa:	6878      	ldr	r0, [r7, #4]
 8103efc:	f7ff ff4c 	bl	8103d98 <__NVIC_SetPriorityGrouping>
}
 8103f00:	bf00      	nop
 8103f02:	3708      	adds	r7, #8
 8103f04:	46bd      	mov	sp, r7
 8103f06:	bd80      	pop	{r7, pc}

08103f08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103f08:	b580      	push	{r7, lr}
 8103f0a:	b086      	sub	sp, #24
 8103f0c:	af00      	add	r7, sp, #0
 8103f0e:	4603      	mov	r3, r0
 8103f10:	60b9      	str	r1, [r7, #8]
 8103f12:	607a      	str	r2, [r7, #4]
 8103f14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103f16:	f7ff ff63 	bl	8103de0 <__NVIC_GetPriorityGrouping>
 8103f1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103f1c:	687a      	ldr	r2, [r7, #4]
 8103f1e:	68b9      	ldr	r1, [r7, #8]
 8103f20:	6978      	ldr	r0, [r7, #20]
 8103f22:	f7ff ffb3 	bl	8103e8c <NVIC_EncodePriority>
 8103f26:	4602      	mov	r2, r0
 8103f28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103f2c:	4611      	mov	r1, r2
 8103f2e:	4618      	mov	r0, r3
 8103f30:	f7ff ff82 	bl	8103e38 <__NVIC_SetPriority>
}
 8103f34:	bf00      	nop
 8103f36:	3718      	adds	r7, #24
 8103f38:	46bd      	mov	sp, r7
 8103f3a:	bd80      	pop	{r7, pc}

08103f3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103f3c:	b580      	push	{r7, lr}
 8103f3e:	b082      	sub	sp, #8
 8103f40:	af00      	add	r7, sp, #0
 8103f42:	4603      	mov	r3, r0
 8103f44:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103f4a:	4618      	mov	r0, r3
 8103f4c:	f7ff ff56 	bl	8103dfc <__NVIC_EnableIRQ>
}
 8103f50:	bf00      	nop
 8103f52:	3708      	adds	r7, #8
 8103f54:	46bd      	mov	sp, r7
 8103f56:	bd80      	pop	{r7, pc}

08103f58 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103f58:	b480      	push	{r7}
 8103f5a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103f5c:	4b07      	ldr	r3, [pc, #28]	; (8103f7c <HAL_GetCurrentCPUID+0x24>)
 8103f5e:	681b      	ldr	r3, [r3, #0]
 8103f60:	091b      	lsrs	r3, r3, #4
 8103f62:	f003 030f 	and.w	r3, r3, #15
 8103f66:	2b07      	cmp	r3, #7
 8103f68:	d101      	bne.n	8103f6e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103f6a:	2303      	movs	r3, #3
 8103f6c:	e000      	b.n	8103f70 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103f6e:	2301      	movs	r3, #1
  }
}
 8103f70:	4618      	mov	r0, r3
 8103f72:	46bd      	mov	sp, r7
 8103f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f78:	4770      	bx	lr
 8103f7a:	bf00      	nop
 8103f7c:	e000ed00 	.word	0xe000ed00

08103f80 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8103f80:	b580      	push	{r7, lr}
 8103f82:	b084      	sub	sp, #16
 8103f84:	af00      	add	r7, sp, #0
 8103f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	2b00      	cmp	r3, #0
 8103f8c:	d101      	bne.n	8103f92 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8103f8e:	2301      	movs	r3, #1
 8103f90:	e0d1      	b.n	8104136 <HAL_ETH_Init+0x1b6>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8103f92:	687b      	ldr	r3, [r7, #4]
 8103f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103f98:	2b00      	cmp	r3, #0
 8103f9a:	d106      	bne.n	8103faa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	2223      	movs	r2, #35	; 0x23
 8103fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8103fa4:	6878      	ldr	r0, [r7, #4]
 8103fa6:	f7fc fcef 	bl	8100988 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103faa:	4b65      	ldr	r3, [pc, #404]	; (8104140 <HAL_ETH_Init+0x1c0>)
 8103fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103fb0:	4a63      	ldr	r2, [pc, #396]	; (8104140 <HAL_ETH_Init+0x1c0>)
 8103fb2:	f043 0302 	orr.w	r3, r3, #2
 8103fb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103fba:	4b61      	ldr	r3, [pc, #388]	; (8104140 <HAL_ETH_Init+0x1c0>)
 8103fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103fc0:	f003 0302 	and.w	r3, r3, #2
 8103fc4:	60bb      	str	r3, [r7, #8]
 8103fc6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	7a1b      	ldrb	r3, [r3, #8]
 8103fcc:	2b00      	cmp	r3, #0
 8103fce:	d103      	bne.n	8103fd8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8103fd0:	2000      	movs	r0, #0
 8103fd2:	f7fe fcc9 	bl	8102968 <HAL_SYSCFG_ETHInterfaceSelect>
 8103fd6:	e003      	b.n	8103fe0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8103fd8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8103fdc:	f7fe fcc4 	bl	8102968 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8103fe0:	4b58      	ldr	r3, [pc, #352]	; (8104144 <HAL_ETH_Init+0x1c4>)
 8103fe2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8103fec:	681b      	ldr	r3, [r3, #0]
 8103fee:	687a      	ldr	r2, [r7, #4]
 8103ff0:	6812      	ldr	r2, [r2, #0]
 8103ff2:	f043 0301 	orr.w	r3, r3, #1
 8103ff6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8103ffa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8103ffc:	f7fe fc78 	bl	81028f0 <HAL_GetTick>
 8104000:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8104002:	e011      	b.n	8104028 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8104004:	f7fe fc74 	bl	81028f0 <HAL_GetTick>
 8104008:	4602      	mov	r2, r0
 810400a:	68fb      	ldr	r3, [r7, #12]
 810400c:	1ad3      	subs	r3, r2, r3
 810400e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8104012:	d909      	bls.n	8104028 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	2204      	movs	r2, #4
 8104018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 810401c:	687b      	ldr	r3, [r7, #4]
 810401e:	22e0      	movs	r2, #224	; 0xe0
 8104020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8104024:	2301      	movs	r3, #1
 8104026:	e086      	b.n	8104136 <HAL_ETH_Init+0x1b6>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	681b      	ldr	r3, [r3, #0]
 810402c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	f003 0301 	and.w	r3, r3, #1
 8104036:	2b00      	cmp	r3, #0
 8104038:	d1e4      	bne.n	8104004 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 810403a:	6878      	ldr	r0, [r7, #4]
 810403c:	f000 f886 	bl	810414c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8104040:	f001 f9d6 	bl	81053f0 <HAL_RCC_GetHCLKFreq>
 8104044:	4603      	mov	r3, r0
 8104046:	4a40      	ldr	r2, [pc, #256]	; (8104148 <HAL_ETH_Init+0x1c8>)
 8104048:	fba2 2303 	umull	r2, r3, r2, r3
 810404c:	0c9a      	lsrs	r2, r3, #18
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	681b      	ldr	r3, [r3, #0]
 8104052:	3a01      	subs	r2, #1
 8104054:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8104058:	6878      	ldr	r0, [r7, #4]
 810405a:	f000 fa71 	bl	8104540 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	681b      	ldr	r3, [r3, #0]
 8104062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104066:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 810406a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 810406e:	687a      	ldr	r2, [r7, #4]
 8104070:	6812      	ldr	r2, [r2, #0]
 8104072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104076:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 810407a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	695b      	ldr	r3, [r3, #20]
 8104082:	f003 0303 	and.w	r3, r3, #3
 8104086:	2b00      	cmp	r3, #0
 8104088:	d009      	beq.n	810409e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	2201      	movs	r2, #1
 810408e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	22e0      	movs	r2, #224	; 0xe0
 8104096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 810409a:	2301      	movs	r3, #1
 810409c:	e04b      	b.n	8104136 <HAL_ETH_Init+0x1b6>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81040a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 81040aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 81040ae:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 81040b2:	687a      	ldr	r2, [r7, #4]
 81040b4:	6952      	ldr	r2, [r2, #20]
 81040b6:	0051      	lsls	r1, r2, #1
 81040b8:	687a      	ldr	r2, [r7, #4]
 81040ba:	6812      	ldr	r2, [r2, #0]
 81040bc:	430b      	orrs	r3, r1
 81040be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 81040c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 81040c6:	6878      	ldr	r0, [r7, #4]
 81040c8:	f000 fad7 	bl	810467a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 81040cc:	6878      	ldr	r0, [r7, #4]
 81040ce:	f000 fb1d 	bl	810470c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 81040d2:	687b      	ldr	r3, [r7, #4]
 81040d4:	685b      	ldr	r3, [r3, #4]
 81040d6:	3305      	adds	r3, #5
 81040d8:	781b      	ldrb	r3, [r3, #0]
 81040da:	021a      	lsls	r2, r3, #8
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	685b      	ldr	r3, [r3, #4]
 81040e0:	3304      	adds	r3, #4
 81040e2:	781b      	ldrb	r3, [r3, #0]
 81040e4:	4619      	mov	r1, r3
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	430a      	orrs	r2, r1
 81040ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	685b      	ldr	r3, [r3, #4]
 81040f4:	3303      	adds	r3, #3
 81040f6:	781b      	ldrb	r3, [r3, #0]
 81040f8:	061a      	lsls	r2, r3, #24
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	685b      	ldr	r3, [r3, #4]
 81040fe:	3302      	adds	r3, #2
 8104100:	781b      	ldrb	r3, [r3, #0]
 8104102:	041b      	lsls	r3, r3, #16
 8104104:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104106:	687b      	ldr	r3, [r7, #4]
 8104108:	685b      	ldr	r3, [r3, #4]
 810410a:	3301      	adds	r3, #1
 810410c:	781b      	ldrb	r3, [r3, #0]
 810410e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104110:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	685b      	ldr	r3, [r3, #4]
 8104116:	781b      	ldrb	r3, [r3, #0]
 8104118:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810411e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104120:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	2200      	movs	r2, #0
 8104128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	2210      	movs	r2, #16
 8104130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8104134:	2300      	movs	r3, #0
}
 8104136:	4618      	mov	r0, r3
 8104138:	3710      	adds	r7, #16
 810413a:	46bd      	mov	sp, r7
 810413c:	bd80      	pop	{r7, pc}
 810413e:	bf00      	nop
 8104140:	58024400 	.word	0x58024400
 8104144:	58000400 	.word	0x58000400
 8104148:	431bde83 	.word	0x431bde83

0810414c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 810414c:	b580      	push	{r7, lr}
 810414e:	b084      	sub	sp, #16
 8104150:	af00      	add	r7, sp, #0
 8104152:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 810415c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810415e:	68fb      	ldr	r3, [r7, #12]
 8104160:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8104164:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8104166:	f001 f943 	bl	81053f0 <HAL_RCC_GetHCLKFreq>
 810416a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 810416c:	68bb      	ldr	r3, [r7, #8]
 810416e:	4a1e      	ldr	r2, [pc, #120]	; (81041e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8104170:	4293      	cmp	r3, r2
 8104172:	d908      	bls.n	8104186 <HAL_ETH_SetMDIOClockRange+0x3a>
 8104174:	68bb      	ldr	r3, [r7, #8]
 8104176:	4a1d      	ldr	r2, [pc, #116]	; (81041ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8104178:	4293      	cmp	r3, r2
 810417a:	d804      	bhi.n	8104186 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 810417c:	68fb      	ldr	r3, [r7, #12]
 810417e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8104182:	60fb      	str	r3, [r7, #12]
 8104184:	e027      	b.n	81041d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8104186:	68bb      	ldr	r3, [r7, #8]
 8104188:	4a18      	ldr	r2, [pc, #96]	; (81041ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 810418a:	4293      	cmp	r3, r2
 810418c:	d908      	bls.n	81041a0 <HAL_ETH_SetMDIOClockRange+0x54>
 810418e:	68bb      	ldr	r3, [r7, #8]
 8104190:	4a17      	ldr	r2, [pc, #92]	; (81041f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8104192:	4293      	cmp	r3, r2
 8104194:	d204      	bcs.n	81041a0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8104196:	68fb      	ldr	r3, [r7, #12]
 8104198:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 810419c:	60fb      	str	r3, [r7, #12]
 810419e:	e01a      	b.n	81041d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 81041a0:	68bb      	ldr	r3, [r7, #8]
 81041a2:	4a13      	ldr	r2, [pc, #76]	; (81041f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 81041a4:	4293      	cmp	r3, r2
 81041a6:	d303      	bcc.n	81041b0 <HAL_ETH_SetMDIOClockRange+0x64>
 81041a8:	68bb      	ldr	r3, [r7, #8]
 81041aa:	4a12      	ldr	r2, [pc, #72]	; (81041f4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 81041ac:	4293      	cmp	r3, r2
 81041ae:	d911      	bls.n	81041d4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 81041b0:	68bb      	ldr	r3, [r7, #8]
 81041b2:	4a10      	ldr	r2, [pc, #64]	; (81041f4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 81041b4:	4293      	cmp	r3, r2
 81041b6:	d908      	bls.n	81041ca <HAL_ETH_SetMDIOClockRange+0x7e>
 81041b8:	68bb      	ldr	r3, [r7, #8]
 81041ba:	4a0f      	ldr	r2, [pc, #60]	; (81041f8 <HAL_ETH_SetMDIOClockRange+0xac>)
 81041bc:	4293      	cmp	r3, r2
 81041be:	d804      	bhi.n	81041ca <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 81041c0:	68fb      	ldr	r3, [r7, #12]
 81041c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81041c6:	60fb      	str	r3, [r7, #12]
 81041c8:	e005      	b.n	81041d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 81041ca:	68fb      	ldr	r3, [r7, #12]
 81041cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 81041d0:	60fb      	str	r3, [r7, #12]
 81041d2:	e000      	b.n	81041d6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 81041d4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	68fa      	ldr	r2, [r7, #12]
 81041dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 81041e0:	bf00      	nop
 81041e2:	3710      	adds	r7, #16
 81041e4:	46bd      	mov	sp, r7
 81041e6:	bd80      	pop	{r7, pc}
 81041e8:	01312cff 	.word	0x01312cff
 81041ec:	02160ebf 	.word	0x02160ebf
 81041f0:	03938700 	.word	0x03938700
 81041f4:	05f5e0ff 	.word	0x05f5e0ff
 81041f8:	08f0d17f 	.word	0x08f0d17f

081041fc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 81041fc:	b480      	push	{r7}
 81041fe:	b085      	sub	sp, #20
 8104200:	af00      	add	r7, sp, #0
 8104202:	6078      	str	r0, [r7, #4]
 8104204:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8104206:	683b      	ldr	r3, [r7, #0]
 8104208:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 810420a:	683b      	ldr	r3, [r7, #0]
 810420c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 810420e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8104210:	683b      	ldr	r3, [r7, #0]
 8104212:	791b      	ldrb	r3, [r3, #4]
 8104214:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8104216:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8104218:	683b      	ldr	r3, [r7, #0]
 810421a:	7b1b      	ldrb	r3, [r3, #12]
 810421c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810421e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8104220:	683b      	ldr	r3, [r7, #0]
 8104222:	7b5b      	ldrb	r3, [r3, #13]
 8104224:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8104226:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8104228:	683b      	ldr	r3, [r7, #0]
 810422a:	7b9b      	ldrb	r3, [r3, #14]
 810422c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810422e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8104230:	683b      	ldr	r3, [r7, #0]
 8104232:	7bdb      	ldrb	r3, [r3, #15]
 8104234:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8104236:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8104238:	683a      	ldr	r2, [r7, #0]
 810423a:	7c12      	ldrb	r2, [r2, #16]
 810423c:	2a00      	cmp	r2, #0
 810423e:	d102      	bne.n	8104246 <ETH_SetMACConfig+0x4a>
 8104240:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8104244:	e000      	b.n	8104248 <ETH_SetMACConfig+0x4c>
 8104246:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8104248:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810424a:	683a      	ldr	r2, [r7, #0]
 810424c:	7c52      	ldrb	r2, [r2, #17]
 810424e:	2a00      	cmp	r2, #0
 8104250:	d102      	bne.n	8104258 <ETH_SetMACConfig+0x5c>
 8104252:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8104256:	e000      	b.n	810425a <ETH_SetMACConfig+0x5e>
 8104258:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810425a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 810425c:	683b      	ldr	r3, [r7, #0]
 810425e:	7c9b      	ldrb	r3, [r3, #18]
 8104260:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8104262:	431a      	orrs	r2, r3
               macconf->Speed |
 8104264:	683b      	ldr	r3, [r7, #0]
 8104266:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8104268:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810426a:	683b      	ldr	r3, [r7, #0]
 810426c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810426e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8104270:	683b      	ldr	r3, [r7, #0]
 8104272:	7f1b      	ldrb	r3, [r3, #28]
 8104274:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8104276:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8104278:	683b      	ldr	r3, [r7, #0]
 810427a:	7f5b      	ldrb	r3, [r3, #29]
 810427c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810427e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8104280:	683a      	ldr	r2, [r7, #0]
 8104282:	7f92      	ldrb	r2, [r2, #30]
 8104284:	2a00      	cmp	r2, #0
 8104286:	d102      	bne.n	810428e <ETH_SetMACConfig+0x92>
 8104288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810428c:	e000      	b.n	8104290 <ETH_SetMACConfig+0x94>
 810428e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8104290:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8104292:	683b      	ldr	r3, [r7, #0]
 8104294:	7fdb      	ldrb	r3, [r3, #31]
 8104296:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8104298:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810429a:	683a      	ldr	r2, [r7, #0]
 810429c:	f892 2020 	ldrb.w	r2, [r2, #32]
 81042a0:	2a00      	cmp	r2, #0
 81042a2:	d102      	bne.n	81042aa <ETH_SetMACConfig+0xae>
 81042a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 81042a8:	e000      	b.n	81042ac <ETH_SetMACConfig+0xb0>
 81042aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 81042ac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 81042ae:	683b      	ldr	r3, [r7, #0]
 81042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 81042b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 81042b4:	683b      	ldr	r3, [r7, #0]
 81042b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81042ba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 81042bc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 81042be:	683b      	ldr	r3, [r7, #0]
 81042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 81042c2:	4313      	orrs	r3, r2
 81042c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	681a      	ldr	r2, [r3, #0]
 81042cc:	4b57      	ldr	r3, [pc, #348]	; (810442c <ETH_SetMACConfig+0x230>)
 81042ce:	4013      	ands	r3, r2
 81042d0:	687a      	ldr	r2, [r7, #4]
 81042d2:	6812      	ldr	r2, [r2, #0]
 81042d4:	68f9      	ldr	r1, [r7, #12]
 81042d6:	430b      	orrs	r3, r1
 81042d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81042da:	683b      	ldr	r3, [r7, #0]
 81042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81042de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81042e0:	683b      	ldr	r3, [r7, #0]
 81042e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81042e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81042e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81042ea:	683b      	ldr	r3, [r7, #0]
 81042ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81042f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81042f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81042f4:	683b      	ldr	r3, [r7, #0]
 81042f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 81042fa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81042fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 81042fe:	683a      	ldr	r2, [r7, #0]
 8104300:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8104304:	2a00      	cmp	r2, #0
 8104306:	d102      	bne.n	810430e <ETH_SetMACConfig+0x112>
 8104308:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 810430c:	e000      	b.n	8104310 <ETH_SetMACConfig+0x114>
 810430e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8104310:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8104312:	683b      	ldr	r3, [r7, #0]
 8104314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8104316:	4313      	orrs	r3, r2
 8104318:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	681b      	ldr	r3, [r3, #0]
 810431e:	685a      	ldr	r2, [r3, #4]
 8104320:	4b43      	ldr	r3, [pc, #268]	; (8104430 <ETH_SetMACConfig+0x234>)
 8104322:	4013      	ands	r3, r2
 8104324:	687a      	ldr	r2, [r7, #4]
 8104326:	6812      	ldr	r2, [r2, #0]
 8104328:	68f9      	ldr	r1, [r7, #12]
 810432a:	430b      	orrs	r3, r1
 810432c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810432e:	683b      	ldr	r3, [r7, #0]
 8104330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104334:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8104336:	683b      	ldr	r3, [r7, #0]
 8104338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810433a:	4313      	orrs	r3, r2
 810433c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	68db      	ldr	r3, [r3, #12]
 8104344:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8104348:	f023 0301 	bic.w	r3, r3, #1
 810434c:	687a      	ldr	r2, [r7, #4]
 810434e:	6812      	ldr	r2, [r2, #0]
 8104350:	68f9      	ldr	r1, [r7, #12]
 8104352:	430b      	orrs	r3, r1
 8104354:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104356:	683b      	ldr	r3, [r7, #0]
 8104358:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 810435c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810435e:	683b      	ldr	r3, [r7, #0]
 8104360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104362:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8104364:	683a      	ldr	r2, [r7, #0]
 8104366:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 810436a:	2a00      	cmp	r2, #0
 810436c:	d101      	bne.n	8104372 <ETH_SetMACConfig+0x176>
 810436e:	2280      	movs	r2, #128	; 0x80
 8104370:	e000      	b.n	8104374 <ETH_SetMACConfig+0x178>
 8104372:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8104374:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8104376:	683b      	ldr	r3, [r7, #0]
 8104378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810437a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810437c:	4313      	orrs	r3, r2
 810437e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104386:	f64f 730d 	movw	r3, #65293	; 0xff0d
 810438a:	4013      	ands	r3, r2
 810438c:	687a      	ldr	r2, [r7, #4]
 810438e:	6812      	ldr	r2, [r2, #0]
 8104390:	68f9      	ldr	r1, [r7, #12]
 8104392:	430b      	orrs	r3, r1
 8104394:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8104396:	683b      	ldr	r3, [r7, #0]
 8104398:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 810439c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810439e:	683b      	ldr	r3, [r7, #0]
 81043a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 81043a4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 81043a6:	4313      	orrs	r3, r2
 81043a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	681b      	ldr	r3, [r3, #0]
 81043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81043b2:	f023 0103 	bic.w	r1, r3, #3
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	68fa      	ldr	r2, [r7, #12]
 81043bc:	430a      	orrs	r2, r1
 81043be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 81043c2:	687b      	ldr	r3, [r7, #4]
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 81043ca:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 81043ce:	683b      	ldr	r3, [r7, #0]
 81043d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	681b      	ldr	r3, [r3, #0]
 81043d6:	430a      	orrs	r2, r1
 81043d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 81043dc:	683b      	ldr	r3, [r7, #0]
 81043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81043e0:	683a      	ldr	r2, [r7, #0]
 81043e2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 81043e6:	2a00      	cmp	r2, #0
 81043e8:	d101      	bne.n	81043ee <ETH_SetMACConfig+0x1f2>
 81043ea:	2240      	movs	r2, #64	; 0x40
 81043ec:	e000      	b.n	81043f0 <ETH_SetMACConfig+0x1f4>
 81043ee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 81043f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 81043f2:	683b      	ldr	r3, [r7, #0]
 81043f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 81043f8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81043fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81043fc:	683b      	ldr	r3, [r7, #0]
 81043fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8104402:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8104404:	4313      	orrs	r3, r2
 8104406:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8104408:	687b      	ldr	r3, [r7, #4]
 810440a:	681b      	ldr	r3, [r3, #0]
 810440c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8104410:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	681b      	ldr	r3, [r3, #0]
 8104418:	68fa      	ldr	r2, [r7, #12]
 810441a:	430a      	orrs	r2, r1
 810441c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8104420:	bf00      	nop
 8104422:	3714      	adds	r7, #20
 8104424:	46bd      	mov	sp, r7
 8104426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810442a:	4770      	bx	lr
 810442c:	00048083 	.word	0x00048083
 8104430:	c0f88000 	.word	0xc0f88000

08104434 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8104434:	b480      	push	{r7}
 8104436:	b085      	sub	sp, #20
 8104438:	af00      	add	r7, sp, #0
 810443a:	6078      	str	r0, [r7, #4]
 810443c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 810444c:	f023 0302 	bic.w	r3, r3, #2
 8104450:	683a      	ldr	r2, [r7, #0]
 8104452:	6811      	ldr	r1, [r2, #0]
 8104454:	687a      	ldr	r2, [r7, #4]
 8104456:	6812      	ldr	r2, [r2, #0]
 8104458:	430b      	orrs	r3, r1
 810445a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 810445e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104460:	683b      	ldr	r3, [r7, #0]
 8104462:	791b      	ldrb	r3, [r3, #4]
 8104464:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8104466:	683b      	ldr	r3, [r7, #0]
 8104468:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810446a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 810446c:	683b      	ldr	r3, [r7, #0]
 810446e:	7b1b      	ldrb	r3, [r3, #12]
 8104470:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104472:	4313      	orrs	r3, r2
 8104474:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810447e:	685b      	ldr	r3, [r3, #4]
 8104480:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8104484:	f023 0301 	bic.w	r3, r3, #1
 8104488:	687a      	ldr	r2, [r7, #4]
 810448a:	6812      	ldr	r2, [r2, #0]
 810448c:	68f9      	ldr	r1, [r7, #12]
 810448e:	430b      	orrs	r3, r1
 8104490:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8104494:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8104496:	683b      	ldr	r3, [r7, #0]
 8104498:	7b5b      	ldrb	r3, [r3, #13]
 810449a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 810449c:	683b      	ldr	r3, [r7, #0]
 810449e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 81044a0:	4313      	orrs	r3, r2
 81044a2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	681b      	ldr	r3, [r3, #0]
 81044a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81044ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 81044b0:	4b21      	ldr	r3, [pc, #132]	; (8104538 <ETH_SetDMAConfig+0x104>)
 81044b2:	4013      	ands	r3, r2
 81044b4:	687a      	ldr	r2, [r7, #4]
 81044b6:	6812      	ldr	r2, [r2, #0]
 81044b8:	68f9      	ldr	r1, [r7, #12]
 81044ba:	430b      	orrs	r3, r1
 81044bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 81044c0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 81044c4:	683b      	ldr	r3, [r7, #0]
 81044c6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 81044c8:	683b      	ldr	r3, [r7, #0]
 81044ca:	7d1b      	ldrb	r3, [r3, #20]
 81044cc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 81044ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 81044d0:	683b      	ldr	r3, [r7, #0]
 81044d2:	7f5b      	ldrb	r3, [r3, #29]
 81044d4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 81044d6:	4313      	orrs	r3, r2
 81044d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	681b      	ldr	r3, [r3, #0]
 81044de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81044e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 81044e6:	4b15      	ldr	r3, [pc, #84]	; (810453c <ETH_SetDMAConfig+0x108>)
 81044e8:	4013      	ands	r3, r2
 81044ea:	687a      	ldr	r2, [r7, #4]
 81044ec:	6812      	ldr	r2, [r2, #0]
 81044ee:	68f9      	ldr	r1, [r7, #12]
 81044f0:	430b      	orrs	r3, r1
 81044f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 81044f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81044fa:	683b      	ldr	r3, [r7, #0]
 81044fc:	7f1b      	ldrb	r3, [r3, #28]
 81044fe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8104500:	683b      	ldr	r3, [r7, #0]
 8104502:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8104504:	4313      	orrs	r3, r2
 8104506:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	681b      	ldr	r3, [r3, #0]
 810450c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104510:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8104514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8104518:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 810451c:	687a      	ldr	r2, [r7, #4]
 810451e:	6812      	ldr	r2, [r2, #0]
 8104520:	68f9      	ldr	r1, [r7, #12]
 8104522:	430b      	orrs	r3, r1
 8104524:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8104528:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 810452c:	bf00      	nop
 810452e:	3714      	adds	r7, #20
 8104530:	46bd      	mov	sp, r7
 8104532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104536:	4770      	bx	lr
 8104538:	fffec000 	.word	0xfffec000
 810453c:	ffc0efef 	.word	0xffc0efef

08104540 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8104540:	b580      	push	{r7, lr}
 8104542:	b0a4      	sub	sp, #144	; 0x90
 8104544:	af00      	add	r7, sp, #0
 8104546:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8104548:	2301      	movs	r3, #1
 810454a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810454e:	2300      	movs	r3, #0
 8104550:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8104552:	2300      	movs	r3, #0
 8104554:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8104558:	2300      	movs	r3, #0
 810455a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810455e:	2301      	movs	r3, #1
 8104560:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8104564:	2301      	movs	r3, #1
 8104566:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810456a:	2301      	movs	r3, #1
 810456c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8104570:	2300      	movs	r3, #0
 8104572:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8104576:	2301      	movs	r3, #1
 8104578:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 810457c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8104580:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8104582:	2300      	movs	r3, #0
 8104584:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8104588:	2300      	movs	r3, #0
 810458a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 810458c:	2300      	movs	r3, #0
 810458e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8104592:	2300      	movs	r3, #0
 8104594:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8104598:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 810459c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810459e:	2300      	movs	r3, #0
 81045a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 81045a4:	2300      	movs	r3, #0
 81045a6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 81045a8:	2301      	movs	r3, #1
 81045aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 81045ae:	2300      	movs	r3, #0
 81045b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 81045b4:	2300      	movs	r3, #0
 81045b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 81045ba:	2300      	movs	r3, #0
 81045bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 81045be:	2300      	movs	r3, #0
 81045c0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 81045c2:	2300      	movs	r3, #0
 81045c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 81045c6:	2300      	movs	r3, #0
 81045c8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 81045cc:	2300      	movs	r3, #0
 81045ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 81045d2:	2301      	movs	r3, #1
 81045d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 81045d8:	2320      	movs	r3, #32
 81045da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 81045de:	2301      	movs	r3, #1
 81045e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 81045e4:	2300      	movs	r3, #0
 81045e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 81045ea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 81045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81045f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81045f4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81045f6:	2300      	movs	r3, #0
 81045f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81045fc:	2302      	movs	r3, #2
 81045fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8104602:	2300      	movs	r3, #0
 8104604:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8104608:	2300      	movs	r3, #0
 810460a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 810460e:	2300      	movs	r3, #0
 8104610:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8104614:	2301      	movs	r3, #1
 8104616:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810461a:	2300      	movs	r3, #0
 810461c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 810461e:	2301      	movs	r3, #1
 8104620:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8104624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8104628:	4619      	mov	r1, r3
 810462a:	6878      	ldr	r0, [r7, #4]
 810462c:	f7ff fde6 	bl	81041fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8104630:	2301      	movs	r3, #1
 8104632:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8104634:	2301      	movs	r3, #1
 8104636:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8104638:	2300      	movs	r3, #0
 810463a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 810463c:	2300      	movs	r3, #0
 810463e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8104642:	2300      	movs	r3, #0
 8104644:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8104646:	2300      	movs	r3, #0
 8104648:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 810464a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 810464e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8104650:	2300      	movs	r3, #0
 8104652:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8104654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8104658:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810465a:	2300      	movs	r3, #0
 810465c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8104660:	f44f 7306 	mov.w	r3, #536	; 0x218
 8104664:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8104666:	f107 0308 	add.w	r3, r7, #8
 810466a:	4619      	mov	r1, r3
 810466c:	6878      	ldr	r0, [r7, #4]
 810466e:	f7ff fee1 	bl	8104434 <ETH_SetDMAConfig>
}
 8104672:	bf00      	nop
 8104674:	3790      	adds	r7, #144	; 0x90
 8104676:	46bd      	mov	sp, r7
 8104678:	bd80      	pop	{r7, pc}

0810467a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810467a:	b480      	push	{r7}
 810467c:	b085      	sub	sp, #20
 810467e:	af00      	add	r7, sp, #0
 8104680:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104682:	2300      	movs	r3, #0
 8104684:	60fb      	str	r3, [r7, #12]
 8104686:	e01d      	b.n	81046c4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	68d9      	ldr	r1, [r3, #12]
 810468c:	68fa      	ldr	r2, [r7, #12]
 810468e:	4613      	mov	r3, r2
 8104690:	005b      	lsls	r3, r3, #1
 8104692:	4413      	add	r3, r2
 8104694:	00db      	lsls	r3, r3, #3
 8104696:	440b      	add	r3, r1
 8104698:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 810469a:	68bb      	ldr	r3, [r7, #8]
 810469c:	2200      	movs	r2, #0
 810469e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 81046a0:	68bb      	ldr	r3, [r7, #8]
 81046a2:	2200      	movs	r2, #0
 81046a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 81046a6:	68bb      	ldr	r3, [r7, #8]
 81046a8:	2200      	movs	r2, #0
 81046aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 81046ac:	68bb      	ldr	r3, [r7, #8]
 81046ae:	2200      	movs	r2, #0
 81046b0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 81046b2:	68b9      	ldr	r1, [r7, #8]
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	68fa      	ldr	r2, [r7, #12]
 81046b8:	3206      	adds	r2, #6
 81046ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 81046be:	68fb      	ldr	r3, [r7, #12]
 81046c0:	3301      	adds	r3, #1
 81046c2:	60fb      	str	r3, [r7, #12]
 81046c4:	68fb      	ldr	r3, [r7, #12]
 81046c6:	2b03      	cmp	r3, #3
 81046c8:	d9de      	bls.n	8104688 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	2200      	movs	r2, #0
 81046ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	681b      	ldr	r3, [r3, #0]
 81046d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81046d8:	461a      	mov	r2, r3
 81046da:	2303      	movs	r3, #3
 81046dc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	68da      	ldr	r2, [r3, #12]
 81046e4:	687b      	ldr	r3, [r7, #4]
 81046e6:	681b      	ldr	r3, [r3, #0]
 81046e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81046ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 81046f0:	687b      	ldr	r3, [r7, #4]
 81046f2:	68da      	ldr	r2, [r3, #12]
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	681b      	ldr	r3, [r3, #0]
 81046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81046fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8104700:	bf00      	nop
 8104702:	3714      	adds	r7, #20
 8104704:	46bd      	mov	sp, r7
 8104706:	f85d 7b04 	ldr.w	r7, [sp], #4
 810470a:	4770      	bx	lr

0810470c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 810470c:	b480      	push	{r7}
 810470e:	b085      	sub	sp, #20
 8104710:	af00      	add	r7, sp, #0
 8104712:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8104714:	2300      	movs	r3, #0
 8104716:	60fb      	str	r3, [r7, #12]
 8104718:	e023      	b.n	8104762 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	6919      	ldr	r1, [r3, #16]
 810471e:	68fa      	ldr	r2, [r7, #12]
 8104720:	4613      	mov	r3, r2
 8104722:	005b      	lsls	r3, r3, #1
 8104724:	4413      	add	r3, r2
 8104726:	00db      	lsls	r3, r3, #3
 8104728:	440b      	add	r3, r1
 810472a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 810472c:	68bb      	ldr	r3, [r7, #8]
 810472e:	2200      	movs	r2, #0
 8104730:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8104732:	68bb      	ldr	r3, [r7, #8]
 8104734:	2200      	movs	r2, #0
 8104736:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8104738:	68bb      	ldr	r3, [r7, #8]
 810473a:	2200      	movs	r2, #0
 810473c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 810473e:	68bb      	ldr	r3, [r7, #8]
 8104740:	2200      	movs	r2, #0
 8104742:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8104744:	68bb      	ldr	r3, [r7, #8]
 8104746:	2200      	movs	r2, #0
 8104748:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 810474a:	68bb      	ldr	r3, [r7, #8]
 810474c:	2200      	movs	r2, #0
 810474e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8104750:	68b9      	ldr	r1, [r7, #8]
 8104752:	687b      	ldr	r3, [r7, #4]
 8104754:	68fa      	ldr	r2, [r7, #12]
 8104756:	3212      	adds	r2, #18
 8104758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	3301      	adds	r3, #1
 8104760:	60fb      	str	r3, [r7, #12]
 8104762:	68fb      	ldr	r3, [r7, #12]
 8104764:	2b03      	cmp	r3, #3
 8104766:	d9d8      	bls.n	810471a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	2200      	movs	r2, #0
 810476c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	2200      	movs	r2, #0
 8104772:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	2200      	movs	r2, #0
 8104778:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	2200      	movs	r2, #0
 810477e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8104780:	687b      	ldr	r3, [r7, #4]
 8104782:	2200      	movs	r2, #0
 8104784:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8104786:	687b      	ldr	r3, [r7, #4]
 8104788:	681b      	ldr	r3, [r3, #0]
 810478a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810478e:	461a      	mov	r2, r3
 8104790:	2303      	movs	r3, #3
 8104792:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	691a      	ldr	r2, [r3, #16]
 810479a:	687b      	ldr	r3, [r7, #4]
 810479c:	681b      	ldr	r3, [r3, #0]
 810479e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81047a2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	691b      	ldr	r3, [r3, #16]
 81047aa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	681b      	ldr	r3, [r3, #0]
 81047b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81047b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 81047ba:	bf00      	nop
 81047bc:	3714      	adds	r7, #20
 81047be:	46bd      	mov	sp, r7
 81047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047c4:	4770      	bx	lr
	...

081047c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81047c8:	b480      	push	{r7}
 81047ca:	b089      	sub	sp, #36	; 0x24
 81047cc:	af00      	add	r7, sp, #0
 81047ce:	6078      	str	r0, [r7, #4]
 81047d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81047d2:	2300      	movs	r3, #0
 81047d4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81047d6:	4b89      	ldr	r3, [pc, #548]	; (81049fc <HAL_GPIO_Init+0x234>)
 81047d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81047da:	e194      	b.n	8104b06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81047dc:	683b      	ldr	r3, [r7, #0]
 81047de:	681a      	ldr	r2, [r3, #0]
 81047e0:	2101      	movs	r1, #1
 81047e2:	69fb      	ldr	r3, [r7, #28]
 81047e4:	fa01 f303 	lsl.w	r3, r1, r3
 81047e8:	4013      	ands	r3, r2
 81047ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81047ec:	693b      	ldr	r3, [r7, #16]
 81047ee:	2b00      	cmp	r3, #0
 81047f0:	f000 8186 	beq.w	8104b00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81047f4:	683b      	ldr	r3, [r7, #0]
 81047f6:	685b      	ldr	r3, [r3, #4]
 81047f8:	f003 0303 	and.w	r3, r3, #3
 81047fc:	2b01      	cmp	r3, #1
 81047fe:	d005      	beq.n	810480c <HAL_GPIO_Init+0x44>
 8104800:	683b      	ldr	r3, [r7, #0]
 8104802:	685b      	ldr	r3, [r3, #4]
 8104804:	f003 0303 	and.w	r3, r3, #3
 8104808:	2b02      	cmp	r3, #2
 810480a:	d130      	bne.n	810486e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	689b      	ldr	r3, [r3, #8]
 8104810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104812:	69fb      	ldr	r3, [r7, #28]
 8104814:	005b      	lsls	r3, r3, #1
 8104816:	2203      	movs	r2, #3
 8104818:	fa02 f303 	lsl.w	r3, r2, r3
 810481c:	43db      	mvns	r3, r3
 810481e:	69ba      	ldr	r2, [r7, #24]
 8104820:	4013      	ands	r3, r2
 8104822:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104824:	683b      	ldr	r3, [r7, #0]
 8104826:	68da      	ldr	r2, [r3, #12]
 8104828:	69fb      	ldr	r3, [r7, #28]
 810482a:	005b      	lsls	r3, r3, #1
 810482c:	fa02 f303 	lsl.w	r3, r2, r3
 8104830:	69ba      	ldr	r2, [r7, #24]
 8104832:	4313      	orrs	r3, r2
 8104834:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	69ba      	ldr	r2, [r7, #24]
 810483a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	685b      	ldr	r3, [r3, #4]
 8104840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104842:	2201      	movs	r2, #1
 8104844:	69fb      	ldr	r3, [r7, #28]
 8104846:	fa02 f303 	lsl.w	r3, r2, r3
 810484a:	43db      	mvns	r3, r3
 810484c:	69ba      	ldr	r2, [r7, #24]
 810484e:	4013      	ands	r3, r2
 8104850:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104852:	683b      	ldr	r3, [r7, #0]
 8104854:	685b      	ldr	r3, [r3, #4]
 8104856:	091b      	lsrs	r3, r3, #4
 8104858:	f003 0201 	and.w	r2, r3, #1
 810485c:	69fb      	ldr	r3, [r7, #28]
 810485e:	fa02 f303 	lsl.w	r3, r2, r3
 8104862:	69ba      	ldr	r2, [r7, #24]
 8104864:	4313      	orrs	r3, r2
 8104866:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	69ba      	ldr	r2, [r7, #24]
 810486c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810486e:	683b      	ldr	r3, [r7, #0]
 8104870:	685b      	ldr	r3, [r3, #4]
 8104872:	f003 0303 	and.w	r3, r3, #3
 8104876:	2b03      	cmp	r3, #3
 8104878:	d017      	beq.n	81048aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	68db      	ldr	r3, [r3, #12]
 810487e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104880:	69fb      	ldr	r3, [r7, #28]
 8104882:	005b      	lsls	r3, r3, #1
 8104884:	2203      	movs	r2, #3
 8104886:	fa02 f303 	lsl.w	r3, r2, r3
 810488a:	43db      	mvns	r3, r3
 810488c:	69ba      	ldr	r2, [r7, #24]
 810488e:	4013      	ands	r3, r2
 8104890:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104892:	683b      	ldr	r3, [r7, #0]
 8104894:	689a      	ldr	r2, [r3, #8]
 8104896:	69fb      	ldr	r3, [r7, #28]
 8104898:	005b      	lsls	r3, r3, #1
 810489a:	fa02 f303 	lsl.w	r3, r2, r3
 810489e:	69ba      	ldr	r2, [r7, #24]
 81048a0:	4313      	orrs	r3, r2
 81048a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	69ba      	ldr	r2, [r7, #24]
 81048a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81048aa:	683b      	ldr	r3, [r7, #0]
 81048ac:	685b      	ldr	r3, [r3, #4]
 81048ae:	f003 0303 	and.w	r3, r3, #3
 81048b2:	2b02      	cmp	r3, #2
 81048b4:	d123      	bne.n	81048fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81048b6:	69fb      	ldr	r3, [r7, #28]
 81048b8:	08da      	lsrs	r2, r3, #3
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	3208      	adds	r2, #8
 81048be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81048c4:	69fb      	ldr	r3, [r7, #28]
 81048c6:	f003 0307 	and.w	r3, r3, #7
 81048ca:	009b      	lsls	r3, r3, #2
 81048cc:	220f      	movs	r2, #15
 81048ce:	fa02 f303 	lsl.w	r3, r2, r3
 81048d2:	43db      	mvns	r3, r3
 81048d4:	69ba      	ldr	r2, [r7, #24]
 81048d6:	4013      	ands	r3, r2
 81048d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81048da:	683b      	ldr	r3, [r7, #0]
 81048dc:	691a      	ldr	r2, [r3, #16]
 81048de:	69fb      	ldr	r3, [r7, #28]
 81048e0:	f003 0307 	and.w	r3, r3, #7
 81048e4:	009b      	lsls	r3, r3, #2
 81048e6:	fa02 f303 	lsl.w	r3, r2, r3
 81048ea:	69ba      	ldr	r2, [r7, #24]
 81048ec:	4313      	orrs	r3, r2
 81048ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81048f0:	69fb      	ldr	r3, [r7, #28]
 81048f2:	08da      	lsrs	r2, r3, #3
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	3208      	adds	r2, #8
 81048f8:	69b9      	ldr	r1, [r7, #24]
 81048fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	681b      	ldr	r3, [r3, #0]
 8104902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104904:	69fb      	ldr	r3, [r7, #28]
 8104906:	005b      	lsls	r3, r3, #1
 8104908:	2203      	movs	r2, #3
 810490a:	fa02 f303 	lsl.w	r3, r2, r3
 810490e:	43db      	mvns	r3, r3
 8104910:	69ba      	ldr	r2, [r7, #24]
 8104912:	4013      	ands	r3, r2
 8104914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104916:	683b      	ldr	r3, [r7, #0]
 8104918:	685b      	ldr	r3, [r3, #4]
 810491a:	f003 0203 	and.w	r2, r3, #3
 810491e:	69fb      	ldr	r3, [r7, #28]
 8104920:	005b      	lsls	r3, r3, #1
 8104922:	fa02 f303 	lsl.w	r3, r2, r3
 8104926:	69ba      	ldr	r2, [r7, #24]
 8104928:	4313      	orrs	r3, r2
 810492a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	69ba      	ldr	r2, [r7, #24]
 8104930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104932:	683b      	ldr	r3, [r7, #0]
 8104934:	685b      	ldr	r3, [r3, #4]
 8104936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810493a:	2b00      	cmp	r3, #0
 810493c:	f000 80e0 	beq.w	8104b00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104940:	4b2f      	ldr	r3, [pc, #188]	; (8104a00 <HAL_GPIO_Init+0x238>)
 8104942:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104946:	4a2e      	ldr	r2, [pc, #184]	; (8104a00 <HAL_GPIO_Init+0x238>)
 8104948:	f043 0302 	orr.w	r3, r3, #2
 810494c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104950:	4b2b      	ldr	r3, [pc, #172]	; (8104a00 <HAL_GPIO_Init+0x238>)
 8104952:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104956:	f003 0302 	and.w	r3, r3, #2
 810495a:	60fb      	str	r3, [r7, #12]
 810495c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810495e:	4a29      	ldr	r2, [pc, #164]	; (8104a04 <HAL_GPIO_Init+0x23c>)
 8104960:	69fb      	ldr	r3, [r7, #28]
 8104962:	089b      	lsrs	r3, r3, #2
 8104964:	3302      	adds	r3, #2
 8104966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810496a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810496c:	69fb      	ldr	r3, [r7, #28]
 810496e:	f003 0303 	and.w	r3, r3, #3
 8104972:	009b      	lsls	r3, r3, #2
 8104974:	220f      	movs	r2, #15
 8104976:	fa02 f303 	lsl.w	r3, r2, r3
 810497a:	43db      	mvns	r3, r3
 810497c:	69ba      	ldr	r2, [r7, #24]
 810497e:	4013      	ands	r3, r2
 8104980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	4a20      	ldr	r2, [pc, #128]	; (8104a08 <HAL_GPIO_Init+0x240>)
 8104986:	4293      	cmp	r3, r2
 8104988:	d052      	beq.n	8104a30 <HAL_GPIO_Init+0x268>
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	4a1f      	ldr	r2, [pc, #124]	; (8104a0c <HAL_GPIO_Init+0x244>)
 810498e:	4293      	cmp	r3, r2
 8104990:	d031      	beq.n	81049f6 <HAL_GPIO_Init+0x22e>
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	4a1e      	ldr	r2, [pc, #120]	; (8104a10 <HAL_GPIO_Init+0x248>)
 8104996:	4293      	cmp	r3, r2
 8104998:	d02b      	beq.n	81049f2 <HAL_GPIO_Init+0x22a>
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	4a1d      	ldr	r2, [pc, #116]	; (8104a14 <HAL_GPIO_Init+0x24c>)
 810499e:	4293      	cmp	r3, r2
 81049a0:	d025      	beq.n	81049ee <HAL_GPIO_Init+0x226>
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	4a1c      	ldr	r2, [pc, #112]	; (8104a18 <HAL_GPIO_Init+0x250>)
 81049a6:	4293      	cmp	r3, r2
 81049a8:	d01f      	beq.n	81049ea <HAL_GPIO_Init+0x222>
 81049aa:	687b      	ldr	r3, [r7, #4]
 81049ac:	4a1b      	ldr	r2, [pc, #108]	; (8104a1c <HAL_GPIO_Init+0x254>)
 81049ae:	4293      	cmp	r3, r2
 81049b0:	d019      	beq.n	81049e6 <HAL_GPIO_Init+0x21e>
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	4a1a      	ldr	r2, [pc, #104]	; (8104a20 <HAL_GPIO_Init+0x258>)
 81049b6:	4293      	cmp	r3, r2
 81049b8:	d013      	beq.n	81049e2 <HAL_GPIO_Init+0x21a>
 81049ba:	687b      	ldr	r3, [r7, #4]
 81049bc:	4a19      	ldr	r2, [pc, #100]	; (8104a24 <HAL_GPIO_Init+0x25c>)
 81049be:	4293      	cmp	r3, r2
 81049c0:	d00d      	beq.n	81049de <HAL_GPIO_Init+0x216>
 81049c2:	687b      	ldr	r3, [r7, #4]
 81049c4:	4a18      	ldr	r2, [pc, #96]	; (8104a28 <HAL_GPIO_Init+0x260>)
 81049c6:	4293      	cmp	r3, r2
 81049c8:	d007      	beq.n	81049da <HAL_GPIO_Init+0x212>
 81049ca:	687b      	ldr	r3, [r7, #4]
 81049cc:	4a17      	ldr	r2, [pc, #92]	; (8104a2c <HAL_GPIO_Init+0x264>)
 81049ce:	4293      	cmp	r3, r2
 81049d0:	d101      	bne.n	81049d6 <HAL_GPIO_Init+0x20e>
 81049d2:	2309      	movs	r3, #9
 81049d4:	e02d      	b.n	8104a32 <HAL_GPIO_Init+0x26a>
 81049d6:	230a      	movs	r3, #10
 81049d8:	e02b      	b.n	8104a32 <HAL_GPIO_Init+0x26a>
 81049da:	2308      	movs	r3, #8
 81049dc:	e029      	b.n	8104a32 <HAL_GPIO_Init+0x26a>
 81049de:	2307      	movs	r3, #7
 81049e0:	e027      	b.n	8104a32 <HAL_GPIO_Init+0x26a>
 81049e2:	2306      	movs	r3, #6
 81049e4:	e025      	b.n	8104a32 <HAL_GPIO_Init+0x26a>
 81049e6:	2305      	movs	r3, #5
 81049e8:	e023      	b.n	8104a32 <HAL_GPIO_Init+0x26a>
 81049ea:	2304      	movs	r3, #4
 81049ec:	e021      	b.n	8104a32 <HAL_GPIO_Init+0x26a>
 81049ee:	2303      	movs	r3, #3
 81049f0:	e01f      	b.n	8104a32 <HAL_GPIO_Init+0x26a>
 81049f2:	2302      	movs	r3, #2
 81049f4:	e01d      	b.n	8104a32 <HAL_GPIO_Init+0x26a>
 81049f6:	2301      	movs	r3, #1
 81049f8:	e01b      	b.n	8104a32 <HAL_GPIO_Init+0x26a>
 81049fa:	bf00      	nop
 81049fc:	580000c0 	.word	0x580000c0
 8104a00:	58024400 	.word	0x58024400
 8104a04:	58000400 	.word	0x58000400
 8104a08:	58020000 	.word	0x58020000
 8104a0c:	58020400 	.word	0x58020400
 8104a10:	58020800 	.word	0x58020800
 8104a14:	58020c00 	.word	0x58020c00
 8104a18:	58021000 	.word	0x58021000
 8104a1c:	58021400 	.word	0x58021400
 8104a20:	58021800 	.word	0x58021800
 8104a24:	58021c00 	.word	0x58021c00
 8104a28:	58022000 	.word	0x58022000
 8104a2c:	58022400 	.word	0x58022400
 8104a30:	2300      	movs	r3, #0
 8104a32:	69fa      	ldr	r2, [r7, #28]
 8104a34:	f002 0203 	and.w	r2, r2, #3
 8104a38:	0092      	lsls	r2, r2, #2
 8104a3a:	4093      	lsls	r3, r2
 8104a3c:	69ba      	ldr	r2, [r7, #24]
 8104a3e:	4313      	orrs	r3, r2
 8104a40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104a42:	4938      	ldr	r1, [pc, #224]	; (8104b24 <HAL_GPIO_Init+0x35c>)
 8104a44:	69fb      	ldr	r3, [r7, #28]
 8104a46:	089b      	lsrs	r3, r3, #2
 8104a48:	3302      	adds	r3, #2
 8104a4a:	69ba      	ldr	r2, [r7, #24]
 8104a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104a58:	693b      	ldr	r3, [r7, #16]
 8104a5a:	43db      	mvns	r3, r3
 8104a5c:	69ba      	ldr	r2, [r7, #24]
 8104a5e:	4013      	ands	r3, r2
 8104a60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104a62:	683b      	ldr	r3, [r7, #0]
 8104a64:	685b      	ldr	r3, [r3, #4]
 8104a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104a6a:	2b00      	cmp	r3, #0
 8104a6c:	d003      	beq.n	8104a76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104a6e:	69ba      	ldr	r2, [r7, #24]
 8104a70:	693b      	ldr	r3, [r7, #16]
 8104a72:	4313      	orrs	r3, r2
 8104a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104a7a:	69bb      	ldr	r3, [r7, #24]
 8104a7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104a82:	685b      	ldr	r3, [r3, #4]
 8104a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104a86:	693b      	ldr	r3, [r7, #16]
 8104a88:	43db      	mvns	r3, r3
 8104a8a:	69ba      	ldr	r2, [r7, #24]
 8104a8c:	4013      	ands	r3, r2
 8104a8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104a90:	683b      	ldr	r3, [r7, #0]
 8104a92:	685b      	ldr	r3, [r3, #4]
 8104a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104a98:	2b00      	cmp	r3, #0
 8104a9a:	d003      	beq.n	8104aa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104a9c:	69ba      	ldr	r2, [r7, #24]
 8104a9e:	693b      	ldr	r3, [r7, #16]
 8104aa0:	4313      	orrs	r3, r2
 8104aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104aa8:	69bb      	ldr	r3, [r7, #24]
 8104aaa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104aac:	697b      	ldr	r3, [r7, #20]
 8104aae:	685b      	ldr	r3, [r3, #4]
 8104ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104ab2:	693b      	ldr	r3, [r7, #16]
 8104ab4:	43db      	mvns	r3, r3
 8104ab6:	69ba      	ldr	r2, [r7, #24]
 8104ab8:	4013      	ands	r3, r2
 8104aba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104abc:	683b      	ldr	r3, [r7, #0]
 8104abe:	685b      	ldr	r3, [r3, #4]
 8104ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104ac4:	2b00      	cmp	r3, #0
 8104ac6:	d003      	beq.n	8104ad0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104ac8:	69ba      	ldr	r2, [r7, #24]
 8104aca:	693b      	ldr	r3, [r7, #16]
 8104acc:	4313      	orrs	r3, r2
 8104ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104ad0:	697b      	ldr	r3, [r7, #20]
 8104ad2:	69ba      	ldr	r2, [r7, #24]
 8104ad4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104ad6:	697b      	ldr	r3, [r7, #20]
 8104ad8:	681b      	ldr	r3, [r3, #0]
 8104ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104adc:	693b      	ldr	r3, [r7, #16]
 8104ade:	43db      	mvns	r3, r3
 8104ae0:	69ba      	ldr	r2, [r7, #24]
 8104ae2:	4013      	ands	r3, r2
 8104ae4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104ae6:	683b      	ldr	r3, [r7, #0]
 8104ae8:	685b      	ldr	r3, [r3, #4]
 8104aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104aee:	2b00      	cmp	r3, #0
 8104af0:	d003      	beq.n	8104afa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8104af2:	69ba      	ldr	r2, [r7, #24]
 8104af4:	693b      	ldr	r3, [r7, #16]
 8104af6:	4313      	orrs	r3, r2
 8104af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104afa:	697b      	ldr	r3, [r7, #20]
 8104afc:	69ba      	ldr	r2, [r7, #24]
 8104afe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104b00:	69fb      	ldr	r3, [r7, #28]
 8104b02:	3301      	adds	r3, #1
 8104b04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104b06:	683b      	ldr	r3, [r7, #0]
 8104b08:	681a      	ldr	r2, [r3, #0]
 8104b0a:	69fb      	ldr	r3, [r7, #28]
 8104b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8104b10:	2b00      	cmp	r3, #0
 8104b12:	f47f ae63 	bne.w	81047dc <HAL_GPIO_Init+0x14>
  }
}
 8104b16:	bf00      	nop
 8104b18:	bf00      	nop
 8104b1a:	3724      	adds	r7, #36	; 0x24
 8104b1c:	46bd      	mov	sp, r7
 8104b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b22:	4770      	bx	lr
 8104b24:	58000400 	.word	0x58000400

08104b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104b28:	b480      	push	{r7}
 8104b2a:	b083      	sub	sp, #12
 8104b2c:	af00      	add	r7, sp, #0
 8104b2e:	6078      	str	r0, [r7, #4]
 8104b30:	460b      	mov	r3, r1
 8104b32:	807b      	strh	r3, [r7, #2]
 8104b34:	4613      	mov	r3, r2
 8104b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104b38:	787b      	ldrb	r3, [r7, #1]
 8104b3a:	2b00      	cmp	r3, #0
 8104b3c:	d003      	beq.n	8104b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104b3e:	887a      	ldrh	r2, [r7, #2]
 8104b40:	687b      	ldr	r3, [r7, #4]
 8104b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104b44:	e003      	b.n	8104b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104b46:	887b      	ldrh	r3, [r7, #2]
 8104b48:	041a      	lsls	r2, r3, #16
 8104b4a:	687b      	ldr	r3, [r7, #4]
 8104b4c:	619a      	str	r2, [r3, #24]
}
 8104b4e:	bf00      	nop
 8104b50:	370c      	adds	r7, #12
 8104b52:	46bd      	mov	sp, r7
 8104b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b58:	4770      	bx	lr
	...

08104b5c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104b5c:	b480      	push	{r7}
 8104b5e:	b083      	sub	sp, #12
 8104b60:	af00      	add	r7, sp, #0
 8104b62:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104b64:	4b05      	ldr	r3, [pc, #20]	; (8104b7c <HAL_HSEM_ActivateNotification+0x20>)
 8104b66:	681a      	ldr	r2, [r3, #0]
 8104b68:	4904      	ldr	r1, [pc, #16]	; (8104b7c <HAL_HSEM_ActivateNotification+0x20>)
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	4313      	orrs	r3, r2
 8104b6e:	600b      	str	r3, [r1, #0]
#endif
}
 8104b70:	bf00      	nop
 8104b72:	370c      	adds	r7, #12
 8104b74:	46bd      	mov	sp, r7
 8104b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b7a:	4770      	bx	lr
 8104b7c:	58026510 	.word	0x58026510

08104b80 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8104b80:	b580      	push	{r7, lr}
 8104b82:	b082      	sub	sp, #8
 8104b84:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8104b86:	4b0a      	ldr	r3, [pc, #40]	; (8104bb0 <HAL_HSEM_IRQHandler+0x30>)
 8104b88:	68db      	ldr	r3, [r3, #12]
 8104b8a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8104b8c:	4b08      	ldr	r3, [pc, #32]	; (8104bb0 <HAL_HSEM_IRQHandler+0x30>)
 8104b8e:	681a      	ldr	r2, [r3, #0]
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	43db      	mvns	r3, r3
 8104b94:	4906      	ldr	r1, [pc, #24]	; (8104bb0 <HAL_HSEM_IRQHandler+0x30>)
 8104b96:	4013      	ands	r3, r2
 8104b98:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8104b9a:	4a05      	ldr	r2, [pc, #20]	; (8104bb0 <HAL_HSEM_IRQHandler+0x30>)
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8104ba0:	6878      	ldr	r0, [r7, #4]
 8104ba2:	f000 f807 	bl	8104bb4 <HAL_HSEM_FreeCallback>
}
 8104ba6:	bf00      	nop
 8104ba8:	3708      	adds	r7, #8
 8104baa:	46bd      	mov	sp, r7
 8104bac:	bd80      	pop	{r7, pc}
 8104bae:	bf00      	nop
 8104bb0:	58026510 	.word	0x58026510

08104bb4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8104bb4:	b480      	push	{r7}
 8104bb6:	b083      	sub	sp, #12
 8104bb8:	af00      	add	r7, sp, #0
 8104bba:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8104bbc:	bf00      	nop
 8104bbe:	370c      	adds	r7, #12
 8104bc0:	46bd      	mov	sp, r7
 8104bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bc6:	4770      	bx	lr

08104bc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8104bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8104bca:	b08f      	sub	sp, #60	; 0x3c
 8104bcc:	af0a      	add	r7, sp, #40	; 0x28
 8104bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	2b00      	cmp	r3, #0
 8104bd4:	d101      	bne.n	8104bda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8104bd6:	2301      	movs	r3, #1
 8104bd8:	e116      	b.n	8104e08 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8104bda:	687b      	ldr	r3, [r7, #4]
 8104bdc:	681b      	ldr	r3, [r3, #0]
 8104bde:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8104be6:	b2db      	uxtb	r3, r3
 8104be8:	2b00      	cmp	r3, #0
 8104bea:	d106      	bne.n	8104bfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8104bec:	687b      	ldr	r3, [r7, #4]
 8104bee:	2200      	movs	r2, #0
 8104bf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8104bf4:	6878      	ldr	r0, [r7, #4]
 8104bf6:	f7fd fc07 	bl	8102408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8104bfa:	687b      	ldr	r3, [r7, #4]
 8104bfc:	2203      	movs	r2, #3
 8104bfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8104c02:	68bb      	ldr	r3, [r7, #8]
 8104c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104c0a:	2b00      	cmp	r3, #0
 8104c0c:	d102      	bne.n	8104c14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	2200      	movs	r2, #0
 8104c12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8104c14:	687b      	ldr	r3, [r7, #4]
 8104c16:	681b      	ldr	r3, [r3, #0]
 8104c18:	4618      	mov	r0, r3
 8104c1a:	f007 fd75 	bl	810c708 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	681b      	ldr	r3, [r3, #0]
 8104c22:	603b      	str	r3, [r7, #0]
 8104c24:	687e      	ldr	r6, [r7, #4]
 8104c26:	466d      	mov	r5, sp
 8104c28:	f106 0410 	add.w	r4, r6, #16
 8104c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104c34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8104c38:	e885 0003 	stmia.w	r5, {r0, r1}
 8104c3c:	1d33      	adds	r3, r6, #4
 8104c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8104c40:	6838      	ldr	r0, [r7, #0]
 8104c42:	f007 fcf3 	bl	810c62c <USB_CoreInit>
 8104c46:	4603      	mov	r3, r0
 8104c48:	2b00      	cmp	r3, #0
 8104c4a:	d005      	beq.n	8104c58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104c4c:	687b      	ldr	r3, [r7, #4]
 8104c4e:	2202      	movs	r2, #2
 8104c50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8104c54:	2301      	movs	r3, #1
 8104c56:	e0d7      	b.n	8104e08 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	681b      	ldr	r3, [r3, #0]
 8104c5c:	2100      	movs	r1, #0
 8104c5e:	4618      	mov	r0, r3
 8104c60:	f007 fd63 	bl	810c72a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104c64:	2300      	movs	r3, #0
 8104c66:	73fb      	strb	r3, [r7, #15]
 8104c68:	e04a      	b.n	8104d00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8104c6a:	7bfa      	ldrb	r2, [r7, #15]
 8104c6c:	6879      	ldr	r1, [r7, #4]
 8104c6e:	4613      	mov	r3, r2
 8104c70:	00db      	lsls	r3, r3, #3
 8104c72:	4413      	add	r3, r2
 8104c74:	009b      	lsls	r3, r3, #2
 8104c76:	440b      	add	r3, r1
 8104c78:	333d      	adds	r3, #61	; 0x3d
 8104c7a:	2201      	movs	r2, #1
 8104c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8104c7e:	7bfa      	ldrb	r2, [r7, #15]
 8104c80:	6879      	ldr	r1, [r7, #4]
 8104c82:	4613      	mov	r3, r2
 8104c84:	00db      	lsls	r3, r3, #3
 8104c86:	4413      	add	r3, r2
 8104c88:	009b      	lsls	r3, r3, #2
 8104c8a:	440b      	add	r3, r1
 8104c8c:	333c      	adds	r3, #60	; 0x3c
 8104c8e:	7bfa      	ldrb	r2, [r7, #15]
 8104c90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8104c92:	7bfa      	ldrb	r2, [r7, #15]
 8104c94:	7bfb      	ldrb	r3, [r7, #15]
 8104c96:	b298      	uxth	r0, r3
 8104c98:	6879      	ldr	r1, [r7, #4]
 8104c9a:	4613      	mov	r3, r2
 8104c9c:	00db      	lsls	r3, r3, #3
 8104c9e:	4413      	add	r3, r2
 8104ca0:	009b      	lsls	r3, r3, #2
 8104ca2:	440b      	add	r3, r1
 8104ca4:	3344      	adds	r3, #68	; 0x44
 8104ca6:	4602      	mov	r2, r0
 8104ca8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8104caa:	7bfa      	ldrb	r2, [r7, #15]
 8104cac:	6879      	ldr	r1, [r7, #4]
 8104cae:	4613      	mov	r3, r2
 8104cb0:	00db      	lsls	r3, r3, #3
 8104cb2:	4413      	add	r3, r2
 8104cb4:	009b      	lsls	r3, r3, #2
 8104cb6:	440b      	add	r3, r1
 8104cb8:	3340      	adds	r3, #64	; 0x40
 8104cba:	2200      	movs	r2, #0
 8104cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8104cbe:	7bfa      	ldrb	r2, [r7, #15]
 8104cc0:	6879      	ldr	r1, [r7, #4]
 8104cc2:	4613      	mov	r3, r2
 8104cc4:	00db      	lsls	r3, r3, #3
 8104cc6:	4413      	add	r3, r2
 8104cc8:	009b      	lsls	r3, r3, #2
 8104cca:	440b      	add	r3, r1
 8104ccc:	3348      	adds	r3, #72	; 0x48
 8104cce:	2200      	movs	r2, #0
 8104cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8104cd2:	7bfa      	ldrb	r2, [r7, #15]
 8104cd4:	6879      	ldr	r1, [r7, #4]
 8104cd6:	4613      	mov	r3, r2
 8104cd8:	00db      	lsls	r3, r3, #3
 8104cda:	4413      	add	r3, r2
 8104cdc:	009b      	lsls	r3, r3, #2
 8104cde:	440b      	add	r3, r1
 8104ce0:	334c      	adds	r3, #76	; 0x4c
 8104ce2:	2200      	movs	r2, #0
 8104ce4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8104ce6:	7bfa      	ldrb	r2, [r7, #15]
 8104ce8:	6879      	ldr	r1, [r7, #4]
 8104cea:	4613      	mov	r3, r2
 8104cec:	00db      	lsls	r3, r3, #3
 8104cee:	4413      	add	r3, r2
 8104cf0:	009b      	lsls	r3, r3, #2
 8104cf2:	440b      	add	r3, r1
 8104cf4:	3354      	adds	r3, #84	; 0x54
 8104cf6:	2200      	movs	r2, #0
 8104cf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104cfa:	7bfb      	ldrb	r3, [r7, #15]
 8104cfc:	3301      	adds	r3, #1
 8104cfe:	73fb      	strb	r3, [r7, #15]
 8104d00:	7bfa      	ldrb	r2, [r7, #15]
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	685b      	ldr	r3, [r3, #4]
 8104d06:	429a      	cmp	r2, r3
 8104d08:	d3af      	bcc.n	8104c6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104d0a:	2300      	movs	r3, #0
 8104d0c:	73fb      	strb	r3, [r7, #15]
 8104d0e:	e044      	b.n	8104d9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8104d10:	7bfa      	ldrb	r2, [r7, #15]
 8104d12:	6879      	ldr	r1, [r7, #4]
 8104d14:	4613      	mov	r3, r2
 8104d16:	00db      	lsls	r3, r3, #3
 8104d18:	4413      	add	r3, r2
 8104d1a:	009b      	lsls	r3, r3, #2
 8104d1c:	440b      	add	r3, r1
 8104d1e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8104d22:	2200      	movs	r2, #0
 8104d24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8104d26:	7bfa      	ldrb	r2, [r7, #15]
 8104d28:	6879      	ldr	r1, [r7, #4]
 8104d2a:	4613      	mov	r3, r2
 8104d2c:	00db      	lsls	r3, r3, #3
 8104d2e:	4413      	add	r3, r2
 8104d30:	009b      	lsls	r3, r3, #2
 8104d32:	440b      	add	r3, r1
 8104d34:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8104d38:	7bfa      	ldrb	r2, [r7, #15]
 8104d3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8104d3c:	7bfa      	ldrb	r2, [r7, #15]
 8104d3e:	6879      	ldr	r1, [r7, #4]
 8104d40:	4613      	mov	r3, r2
 8104d42:	00db      	lsls	r3, r3, #3
 8104d44:	4413      	add	r3, r2
 8104d46:	009b      	lsls	r3, r3, #2
 8104d48:	440b      	add	r3, r1
 8104d4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8104d4e:	2200      	movs	r2, #0
 8104d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8104d52:	7bfa      	ldrb	r2, [r7, #15]
 8104d54:	6879      	ldr	r1, [r7, #4]
 8104d56:	4613      	mov	r3, r2
 8104d58:	00db      	lsls	r3, r3, #3
 8104d5a:	4413      	add	r3, r2
 8104d5c:	009b      	lsls	r3, r3, #2
 8104d5e:	440b      	add	r3, r1
 8104d60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8104d64:	2200      	movs	r2, #0
 8104d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8104d68:	7bfa      	ldrb	r2, [r7, #15]
 8104d6a:	6879      	ldr	r1, [r7, #4]
 8104d6c:	4613      	mov	r3, r2
 8104d6e:	00db      	lsls	r3, r3, #3
 8104d70:	4413      	add	r3, r2
 8104d72:	009b      	lsls	r3, r3, #2
 8104d74:	440b      	add	r3, r1
 8104d76:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8104d7a:	2200      	movs	r2, #0
 8104d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8104d7e:	7bfa      	ldrb	r2, [r7, #15]
 8104d80:	6879      	ldr	r1, [r7, #4]
 8104d82:	4613      	mov	r3, r2
 8104d84:	00db      	lsls	r3, r3, #3
 8104d86:	4413      	add	r3, r2
 8104d88:	009b      	lsls	r3, r3, #2
 8104d8a:	440b      	add	r3, r1
 8104d8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8104d90:	2200      	movs	r2, #0
 8104d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104d94:	7bfb      	ldrb	r3, [r7, #15]
 8104d96:	3301      	adds	r3, #1
 8104d98:	73fb      	strb	r3, [r7, #15]
 8104d9a:	7bfa      	ldrb	r2, [r7, #15]
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	685b      	ldr	r3, [r3, #4]
 8104da0:	429a      	cmp	r2, r3
 8104da2:	d3b5      	bcc.n	8104d10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	681b      	ldr	r3, [r3, #0]
 8104da8:	603b      	str	r3, [r7, #0]
 8104daa:	687e      	ldr	r6, [r7, #4]
 8104dac:	466d      	mov	r5, sp
 8104dae:	f106 0410 	add.w	r4, r6, #16
 8104db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104dba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8104dbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8104dc2:	1d33      	adds	r3, r6, #4
 8104dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8104dc6:	6838      	ldr	r0, [r7, #0]
 8104dc8:	f007 fcfc 	bl	810c7c4 <USB_DevInit>
 8104dcc:	4603      	mov	r3, r0
 8104dce:	2b00      	cmp	r3, #0
 8104dd0:	d005      	beq.n	8104dde <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104dd2:	687b      	ldr	r3, [r7, #4]
 8104dd4:	2202      	movs	r2, #2
 8104dd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8104dda:	2301      	movs	r3, #1
 8104ddc:	e014      	b.n	8104e08 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	2200      	movs	r2, #0
 8104de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8104de6:	687b      	ldr	r3, [r7, #4]
 8104de8:	2201      	movs	r2, #1
 8104dea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104df2:	2b01      	cmp	r3, #1
 8104df4:	d102      	bne.n	8104dfc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8104df6:	6878      	ldr	r0, [r7, #4]
 8104df8:	f000 f80a 	bl	8104e10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	681b      	ldr	r3, [r3, #0]
 8104e00:	4618      	mov	r0, r3
 8104e02:	f007 feba 	bl	810cb7a <USB_DevDisconnect>

  return HAL_OK;
 8104e06:	2300      	movs	r3, #0
}
 8104e08:	4618      	mov	r0, r3
 8104e0a:	3714      	adds	r7, #20
 8104e0c:	46bd      	mov	sp, r7
 8104e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08104e10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8104e10:	b480      	push	{r7}
 8104e12:	b085      	sub	sp, #20
 8104e14:	af00      	add	r7, sp, #0
 8104e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8104e18:	687b      	ldr	r3, [r7, #4]
 8104e1a:	681b      	ldr	r3, [r3, #0]
 8104e1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	2201      	movs	r2, #1
 8104e22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8104e26:	687b      	ldr	r3, [r7, #4]
 8104e28:	2200      	movs	r2, #0
 8104e2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8104e2e:	68fb      	ldr	r3, [r7, #12]
 8104e30:	699b      	ldr	r3, [r3, #24]
 8104e32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8104e36:	68fb      	ldr	r3, [r7, #12]
 8104e38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8104e3a:	68fb      	ldr	r3, [r7, #12]
 8104e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104e42:	f043 0303 	orr.w	r3, r3, #3
 8104e46:	68fa      	ldr	r2, [r7, #12]
 8104e48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8104e4a:	2300      	movs	r3, #0
}
 8104e4c:	4618      	mov	r0, r3
 8104e4e:	3714      	adds	r7, #20
 8104e50:	46bd      	mov	sp, r7
 8104e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e56:	4770      	bx	lr

08104e58 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104e58:	b580      	push	{r7, lr}
 8104e5a:	b084      	sub	sp, #16
 8104e5c:	af00      	add	r7, sp, #0
 8104e5e:	60f8      	str	r0, [r7, #12]
 8104e60:	460b      	mov	r3, r1
 8104e62:	607a      	str	r2, [r7, #4]
 8104e64:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104e66:	4b37      	ldr	r3, [pc, #220]	; (8104f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104e68:	681b      	ldr	r3, [r3, #0]
 8104e6a:	f023 0201 	bic.w	r2, r3, #1
 8104e6e:	4935      	ldr	r1, [pc, #212]	; (8104f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104e70:	68fb      	ldr	r3, [r7, #12]
 8104e72:	4313      	orrs	r3, r2
 8104e74:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104e76:	687b      	ldr	r3, [r7, #4]
 8104e78:	2b00      	cmp	r3, #0
 8104e7a:	d123      	bne.n	8104ec4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104e7c:	f7ff f86c 	bl	8103f58 <HAL_GetCurrentCPUID>
 8104e80:	4603      	mov	r3, r0
 8104e82:	2b03      	cmp	r3, #3
 8104e84:	d158      	bne.n	8104f38 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104e86:	4b2f      	ldr	r3, [pc, #188]	; (8104f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104e88:	691b      	ldr	r3, [r3, #16]
 8104e8a:	4a2e      	ldr	r2, [pc, #184]	; (8104f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104e8c:	f023 0301 	bic.w	r3, r3, #1
 8104e90:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104e92:	4b2d      	ldr	r3, [pc, #180]	; (8104f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104e94:	691b      	ldr	r3, [r3, #16]
 8104e96:	4a2c      	ldr	r2, [pc, #176]	; (8104f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104e98:	f043 0304 	orr.w	r3, r3, #4
 8104e9c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104e9e:	f3bf 8f4f 	dsb	sy
}
 8104ea2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104ea4:	f3bf 8f6f 	isb	sy
}
 8104ea8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104eaa:	7afb      	ldrb	r3, [r7, #11]
 8104eac:	2b01      	cmp	r3, #1
 8104eae:	d101      	bne.n	8104eb4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104eb0:	bf30      	wfi
 8104eb2:	e000      	b.n	8104eb6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104eb4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104eb6:	4b24      	ldr	r3, [pc, #144]	; (8104f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104eb8:	691b      	ldr	r3, [r3, #16]
 8104eba:	4a23      	ldr	r2, [pc, #140]	; (8104f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104ebc:	f023 0304 	bic.w	r3, r3, #4
 8104ec0:	6113      	str	r3, [r2, #16]
 8104ec2:	e03c      	b.n	8104f3e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104ec4:	687b      	ldr	r3, [r7, #4]
 8104ec6:	2b01      	cmp	r3, #1
 8104ec8:	d123      	bne.n	8104f12 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104eca:	f7ff f845 	bl	8103f58 <HAL_GetCurrentCPUID>
 8104ece:	4603      	mov	r3, r0
 8104ed0:	2b01      	cmp	r3, #1
 8104ed2:	d133      	bne.n	8104f3c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104ed4:	4b1b      	ldr	r3, [pc, #108]	; (8104f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104ed6:	695b      	ldr	r3, [r3, #20]
 8104ed8:	4a1a      	ldr	r2, [pc, #104]	; (8104f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104eda:	f023 0302 	bic.w	r3, r3, #2
 8104ede:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104ee0:	4b19      	ldr	r3, [pc, #100]	; (8104f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104ee2:	691b      	ldr	r3, [r3, #16]
 8104ee4:	4a18      	ldr	r2, [pc, #96]	; (8104f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104ee6:	f043 0304 	orr.w	r3, r3, #4
 8104eea:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104eec:	f3bf 8f4f 	dsb	sy
}
 8104ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104ef2:	f3bf 8f6f 	isb	sy
}
 8104ef6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104ef8:	7afb      	ldrb	r3, [r7, #11]
 8104efa:	2b01      	cmp	r3, #1
 8104efc:	d101      	bne.n	8104f02 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104efe:	bf30      	wfi
 8104f00:	e000      	b.n	8104f04 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104f02:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104f04:	4b10      	ldr	r3, [pc, #64]	; (8104f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f06:	691b      	ldr	r3, [r3, #16]
 8104f08:	4a0f      	ldr	r2, [pc, #60]	; (8104f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f0a:	f023 0304 	bic.w	r3, r3, #4
 8104f0e:	6113      	str	r3, [r2, #16]
 8104f10:	e015      	b.n	8104f3e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104f12:	f7ff f821 	bl	8103f58 <HAL_GetCurrentCPUID>
 8104f16:	4603      	mov	r3, r0
 8104f18:	2b03      	cmp	r3, #3
 8104f1a:	d106      	bne.n	8104f2a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104f1c:	4b09      	ldr	r3, [pc, #36]	; (8104f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f1e:	691b      	ldr	r3, [r3, #16]
 8104f20:	4a08      	ldr	r2, [pc, #32]	; (8104f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f22:	f023 0304 	bic.w	r3, r3, #4
 8104f26:	6113      	str	r3, [r2, #16]
 8104f28:	e009      	b.n	8104f3e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104f2a:	4b06      	ldr	r3, [pc, #24]	; (8104f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f2c:	695b      	ldr	r3, [r3, #20]
 8104f2e:	4a05      	ldr	r2, [pc, #20]	; (8104f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f30:	f023 0304 	bic.w	r3, r3, #4
 8104f34:	6153      	str	r3, [r2, #20]
 8104f36:	e002      	b.n	8104f3e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104f38:	bf00      	nop
 8104f3a:	e000      	b.n	8104f3e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104f3c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104f3e:	3710      	adds	r7, #16
 8104f40:	46bd      	mov	sp, r7
 8104f42:	bd80      	pop	{r7, pc}
 8104f44:	58024800 	.word	0x58024800
 8104f48:	e000ed00 	.word	0xe000ed00

08104f4c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104f4c:	b580      	push	{r7, lr}
 8104f4e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104f50:	f7ff f802 	bl	8103f58 <HAL_GetCurrentCPUID>
 8104f54:	4603      	mov	r3, r0
 8104f56:	2b03      	cmp	r3, #3
 8104f58:	d101      	bne.n	8104f5e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104f5a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104f5c:	e001      	b.n	8104f62 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104f5e:	bf40      	sev
    __WFE ();
 8104f60:	bf20      	wfe
}
 8104f62:	bf00      	nop
 8104f64:	bd80      	pop	{r7, pc}
	...

08104f68 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8104f68:	b480      	push	{r7}
 8104f6a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8104f6c:	4b05      	ldr	r3, [pc, #20]	; (8104f84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8104f6e:	68db      	ldr	r3, [r3, #12]
 8104f70:	4a04      	ldr	r2, [pc, #16]	; (8104f84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8104f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104f76:	60d3      	str	r3, [r2, #12]
}
 8104f78:	bf00      	nop
 8104f7a:	46bd      	mov	sp, r7
 8104f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f80:	4770      	bx	lr
 8104f82:	bf00      	nop
 8104f84:	58024800 	.word	0x58024800

08104f88 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8104f88:	b580      	push	{r7, lr}
 8104f8a:	b086      	sub	sp, #24
 8104f8c:	af02      	add	r7, sp, #8
 8104f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8104f90:	f7fd fcae 	bl	81028f0 <HAL_GetTick>
 8104f94:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	2b00      	cmp	r3, #0
 8104f9a:	d101      	bne.n	8104fa0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8104f9c:	2301      	movs	r3, #1
 8104f9e:	e061      	b.n	8105064 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104fa6:	b2db      	uxtb	r3, r3
 8104fa8:	2b00      	cmp	r3, #0
 8104faa:	d107      	bne.n	8104fbc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8104fac:	6878      	ldr	r0, [r7, #4]
 8104fae:	f7fc f8f9 	bl	81011a4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8104fb2:	f241 3188 	movw	r1, #5000	; 0x1388
 8104fb6:	6878      	ldr	r0, [r7, #4]
 8104fb8:	f000 f85a 	bl	8105070 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8104fbc:	687b      	ldr	r3, [r7, #4]
 8104fbe:	681b      	ldr	r3, [r3, #0]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8104fc6:	687b      	ldr	r3, [r7, #4]
 8104fc8:	689b      	ldr	r3, [r3, #8]
 8104fca:	3b01      	subs	r3, #1
 8104fcc:	021a      	lsls	r2, r3, #8
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	681b      	ldr	r3, [r3, #0]
 8104fd2:	430a      	orrs	r2, r1
 8104fd4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8104fd6:	687b      	ldr	r3, [r7, #4]
 8104fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104fda:	9300      	str	r3, [sp, #0]
 8104fdc:	68fb      	ldr	r3, [r7, #12]
 8104fde:	2200      	movs	r2, #0
 8104fe0:	2120      	movs	r1, #32
 8104fe2:	6878      	ldr	r0, [r7, #4]
 8104fe4:	f000 f852 	bl	810508c <QSPI_WaitFlagStateUntilTimeout>
 8104fe8:	4603      	mov	r3, r0
 8104fea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8104fec:	7afb      	ldrb	r3, [r7, #11]
 8104fee:	2b00      	cmp	r3, #0
 8104ff0:	d137      	bne.n	8105062 <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	681b      	ldr	r3, [r3, #0]
 8104ff8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104ffc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8105000:	687a      	ldr	r2, [r7, #4]
 8105002:	6852      	ldr	r2, [r2, #4]
 8105004:	0611      	lsls	r1, r2, #24
 8105006:	687a      	ldr	r2, [r7, #4]
 8105008:	68d2      	ldr	r2, [r2, #12]
 810500a:	4311      	orrs	r1, r2
 810500c:	687a      	ldr	r2, [r7, #4]
 810500e:	69d2      	ldr	r2, [r2, #28]
 8105010:	4311      	orrs	r1, r2
 8105012:	687a      	ldr	r2, [r7, #4]
 8105014:	6a12      	ldr	r2, [r2, #32]
 8105016:	4311      	orrs	r1, r2
 8105018:	687a      	ldr	r2, [r7, #4]
 810501a:	6812      	ldr	r2, [r2, #0]
 810501c:	430b      	orrs	r3, r1
 810501e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8105020:	687b      	ldr	r3, [r7, #4]
 8105022:	681b      	ldr	r3, [r3, #0]
 8105024:	685a      	ldr	r2, [r3, #4]
 8105026:	4b11      	ldr	r3, [pc, #68]	; (810506c <HAL_QSPI_Init+0xe4>)
 8105028:	4013      	ands	r3, r2
 810502a:	687a      	ldr	r2, [r7, #4]
 810502c:	6912      	ldr	r2, [r2, #16]
 810502e:	0411      	lsls	r1, r2, #16
 8105030:	687a      	ldr	r2, [r7, #4]
 8105032:	6952      	ldr	r2, [r2, #20]
 8105034:	4311      	orrs	r1, r2
 8105036:	687a      	ldr	r2, [r7, #4]
 8105038:	6992      	ldr	r2, [r2, #24]
 810503a:	4311      	orrs	r1, r2
 810503c:	687a      	ldr	r2, [r7, #4]
 810503e:	6812      	ldr	r2, [r2, #0]
 8105040:	430b      	orrs	r3, r1
 8105042:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8105044:	687b      	ldr	r3, [r7, #4]
 8105046:	681b      	ldr	r3, [r3, #0]
 8105048:	681a      	ldr	r2, [r3, #0]
 810504a:	687b      	ldr	r3, [r7, #4]
 810504c:	681b      	ldr	r3, [r3, #0]
 810504e:	f042 0201 	orr.w	r2, r2, #1
 8105052:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	2200      	movs	r2, #0
 8105058:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	2201      	movs	r2, #1
 810505e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8105062:	7afb      	ldrb	r3, [r7, #11]
}
 8105064:	4618      	mov	r0, r3
 8105066:	3710      	adds	r7, #16
 8105068:	46bd      	mov	sp, r7
 810506a:	bd80      	pop	{r7, pc}
 810506c:	ffe0f8fe 	.word	0xffe0f8fe

08105070 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8105070:	b480      	push	{r7}
 8105072:	b083      	sub	sp, #12
 8105074:	af00      	add	r7, sp, #0
 8105076:	6078      	str	r0, [r7, #4]
 8105078:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 810507a:	687b      	ldr	r3, [r7, #4]
 810507c:	683a      	ldr	r2, [r7, #0]
 810507e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8105080:	bf00      	nop
 8105082:	370c      	adds	r7, #12
 8105084:	46bd      	mov	sp, r7
 8105086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810508a:	4770      	bx	lr

0810508c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 810508c:	b580      	push	{r7, lr}
 810508e:	b084      	sub	sp, #16
 8105090:	af00      	add	r7, sp, #0
 8105092:	60f8      	str	r0, [r7, #12]
 8105094:	60b9      	str	r1, [r7, #8]
 8105096:	603b      	str	r3, [r7, #0]
 8105098:	4613      	mov	r3, r2
 810509a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 810509c:	e01a      	b.n	81050d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810509e:	69bb      	ldr	r3, [r7, #24]
 81050a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81050a4:	d016      	beq.n	81050d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81050a6:	f7fd fc23 	bl	81028f0 <HAL_GetTick>
 81050aa:	4602      	mov	r2, r0
 81050ac:	683b      	ldr	r3, [r7, #0]
 81050ae:	1ad3      	subs	r3, r2, r3
 81050b0:	69ba      	ldr	r2, [r7, #24]
 81050b2:	429a      	cmp	r2, r3
 81050b4:	d302      	bcc.n	81050bc <QSPI_WaitFlagStateUntilTimeout+0x30>
 81050b6:	69bb      	ldr	r3, [r7, #24]
 81050b8:	2b00      	cmp	r3, #0
 81050ba:	d10b      	bne.n	81050d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 81050bc:	68fb      	ldr	r3, [r7, #12]
 81050be:	2204      	movs	r2, #4
 81050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 81050c4:	68fb      	ldr	r3, [r7, #12]
 81050c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81050c8:	f043 0201 	orr.w	r2, r3, #1
 81050cc:	68fb      	ldr	r3, [r7, #12]
 81050ce:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 81050d0:	2301      	movs	r3, #1
 81050d2:	e00e      	b.n	81050f2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81050d4:	68fb      	ldr	r3, [r7, #12]
 81050d6:	681b      	ldr	r3, [r3, #0]
 81050d8:	689a      	ldr	r2, [r3, #8]
 81050da:	68bb      	ldr	r3, [r7, #8]
 81050dc:	4013      	ands	r3, r2
 81050de:	2b00      	cmp	r3, #0
 81050e0:	bf14      	ite	ne
 81050e2:	2301      	movne	r3, #1
 81050e4:	2300      	moveq	r3, #0
 81050e6:	b2db      	uxtb	r3, r3
 81050e8:	461a      	mov	r2, r3
 81050ea:	79fb      	ldrb	r3, [r7, #7]
 81050ec:	429a      	cmp	r2, r3
 81050ee:	d1d6      	bne.n	810509e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81050f0:	2300      	movs	r3, #0
}
 81050f2:	4618      	mov	r0, r3
 81050f4:	3710      	adds	r7, #16
 81050f6:	46bd      	mov	sp, r7
 81050f8:	bd80      	pop	{r7, pc}
	...

081050fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81050fc:	b480      	push	{r7}
 81050fe:	b089      	sub	sp, #36	; 0x24
 8105100:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105102:	4bb3      	ldr	r3, [pc, #716]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105104:	691b      	ldr	r3, [r3, #16]
 8105106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810510a:	2b18      	cmp	r3, #24
 810510c:	f200 8155 	bhi.w	81053ba <HAL_RCC_GetSysClockFreq+0x2be>
 8105110:	a201      	add	r2, pc, #4	; (adr r2, 8105118 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105116:	bf00      	nop
 8105118:	0810517d 	.word	0x0810517d
 810511c:	081053bb 	.word	0x081053bb
 8105120:	081053bb 	.word	0x081053bb
 8105124:	081053bb 	.word	0x081053bb
 8105128:	081053bb 	.word	0x081053bb
 810512c:	081053bb 	.word	0x081053bb
 8105130:	081053bb 	.word	0x081053bb
 8105134:	081053bb 	.word	0x081053bb
 8105138:	081051a3 	.word	0x081051a3
 810513c:	081053bb 	.word	0x081053bb
 8105140:	081053bb 	.word	0x081053bb
 8105144:	081053bb 	.word	0x081053bb
 8105148:	081053bb 	.word	0x081053bb
 810514c:	081053bb 	.word	0x081053bb
 8105150:	081053bb 	.word	0x081053bb
 8105154:	081053bb 	.word	0x081053bb
 8105158:	081051a9 	.word	0x081051a9
 810515c:	081053bb 	.word	0x081053bb
 8105160:	081053bb 	.word	0x081053bb
 8105164:	081053bb 	.word	0x081053bb
 8105168:	081053bb 	.word	0x081053bb
 810516c:	081053bb 	.word	0x081053bb
 8105170:	081053bb 	.word	0x081053bb
 8105174:	081053bb 	.word	0x081053bb
 8105178:	081051af 	.word	0x081051af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810517c:	4b94      	ldr	r3, [pc, #592]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810517e:	681b      	ldr	r3, [r3, #0]
 8105180:	f003 0320 	and.w	r3, r3, #32
 8105184:	2b00      	cmp	r3, #0
 8105186:	d009      	beq.n	810519c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105188:	4b91      	ldr	r3, [pc, #580]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810518a:	681b      	ldr	r3, [r3, #0]
 810518c:	08db      	lsrs	r3, r3, #3
 810518e:	f003 0303 	and.w	r3, r3, #3
 8105192:	4a90      	ldr	r2, [pc, #576]	; (81053d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105194:	fa22 f303 	lsr.w	r3, r2, r3
 8105198:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810519a:	e111      	b.n	81053c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810519c:	4b8d      	ldr	r3, [pc, #564]	; (81053d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810519e:	61bb      	str	r3, [r7, #24]
    break;
 81051a0:	e10e      	b.n	81053c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81051a2:	4b8d      	ldr	r3, [pc, #564]	; (81053d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81051a4:	61bb      	str	r3, [r7, #24]
    break;
 81051a6:	e10b      	b.n	81053c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81051a8:	4b8c      	ldr	r3, [pc, #560]	; (81053dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 81051aa:	61bb      	str	r3, [r7, #24]
    break;
 81051ac:	e108      	b.n	81053c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81051ae:	4b88      	ldr	r3, [pc, #544]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051b2:	f003 0303 	and.w	r3, r3, #3
 81051b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81051b8:	4b85      	ldr	r3, [pc, #532]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051bc:	091b      	lsrs	r3, r3, #4
 81051be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81051c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81051c4:	4b82      	ldr	r3, [pc, #520]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051c8:	f003 0301 	and.w	r3, r3, #1
 81051cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81051ce:	4b80      	ldr	r3, [pc, #512]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81051d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81051d2:	08db      	lsrs	r3, r3, #3
 81051d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81051d8:	68fa      	ldr	r2, [r7, #12]
 81051da:	fb02 f303 	mul.w	r3, r2, r3
 81051de:	ee07 3a90 	vmov	s15, r3
 81051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81051ea:	693b      	ldr	r3, [r7, #16]
 81051ec:	2b00      	cmp	r3, #0
 81051ee:	f000 80e1 	beq.w	81053b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 81051f2:	697b      	ldr	r3, [r7, #20]
 81051f4:	2b02      	cmp	r3, #2
 81051f6:	f000 8083 	beq.w	8105300 <HAL_RCC_GetSysClockFreq+0x204>
 81051fa:	697b      	ldr	r3, [r7, #20]
 81051fc:	2b02      	cmp	r3, #2
 81051fe:	f200 80a1 	bhi.w	8105344 <HAL_RCC_GetSysClockFreq+0x248>
 8105202:	697b      	ldr	r3, [r7, #20]
 8105204:	2b00      	cmp	r3, #0
 8105206:	d003      	beq.n	8105210 <HAL_RCC_GetSysClockFreq+0x114>
 8105208:	697b      	ldr	r3, [r7, #20]
 810520a:	2b01      	cmp	r3, #1
 810520c:	d056      	beq.n	81052bc <HAL_RCC_GetSysClockFreq+0x1c0>
 810520e:	e099      	b.n	8105344 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105210:	4b6f      	ldr	r3, [pc, #444]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105212:	681b      	ldr	r3, [r3, #0]
 8105214:	f003 0320 	and.w	r3, r3, #32
 8105218:	2b00      	cmp	r3, #0
 810521a:	d02d      	beq.n	8105278 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810521c:	4b6c      	ldr	r3, [pc, #432]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810521e:	681b      	ldr	r3, [r3, #0]
 8105220:	08db      	lsrs	r3, r3, #3
 8105222:	f003 0303 	and.w	r3, r3, #3
 8105226:	4a6b      	ldr	r2, [pc, #428]	; (81053d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105228:	fa22 f303 	lsr.w	r3, r2, r3
 810522c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810522e:	687b      	ldr	r3, [r7, #4]
 8105230:	ee07 3a90 	vmov	s15, r3
 8105234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105238:	693b      	ldr	r3, [r7, #16]
 810523a:	ee07 3a90 	vmov	s15, r3
 810523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105246:	4b62      	ldr	r3, [pc, #392]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810524e:	ee07 3a90 	vmov	s15, r3
 8105252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105256:	ed97 6a02 	vldr	s12, [r7, #8]
 810525a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81053e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810525e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810526a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810526e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105272:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8105276:	e087      	b.n	8105388 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105278:	693b      	ldr	r3, [r7, #16]
 810527a:	ee07 3a90 	vmov	s15, r3
 810527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105282:	eddf 6a58 	vldr	s13, [pc, #352]	; 81053e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810528a:	4b51      	ldr	r3, [pc, #324]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105292:	ee07 3a90 	vmov	s15, r3
 8105296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810529a:	ed97 6a02 	vldr	s12, [r7, #8]
 810529e:	eddf 5a50 	vldr	s11, [pc, #320]	; 81053e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81052a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81052ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81052ba:	e065      	b.n	8105388 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81052bc:	693b      	ldr	r3, [r7, #16]
 81052be:	ee07 3a90 	vmov	s15, r3
 81052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 81053e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81052ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052ce:	4b40      	ldr	r3, [pc, #256]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81052d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052d6:	ee07 3a90 	vmov	s15, r3
 81052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052de:	ed97 6a02 	vldr	s12, [r7, #8]
 81052e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81053e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81052fe:	e043      	b.n	8105388 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105300:	693b      	ldr	r3, [r7, #16]
 8105302:	ee07 3a90 	vmov	s15, r3
 8105306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810530a:	eddf 6a38 	vldr	s13, [pc, #224]	; 81053ec <HAL_RCC_GetSysClockFreq+0x2f0>
 810530e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105312:	4b2f      	ldr	r3, [pc, #188]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810531a:	ee07 3a90 	vmov	s15, r3
 810531e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105322:	ed97 6a02 	vldr	s12, [r7, #8]
 8105326:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81053e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810532a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810532e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810533e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105342:	e021      	b.n	8105388 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105344:	693b      	ldr	r3, [r7, #16]
 8105346:	ee07 3a90 	vmov	s15, r3
 810534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810534e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81053e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105356:	4b1e      	ldr	r3, [pc, #120]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810535a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810535e:	ee07 3a90 	vmov	s15, r3
 8105362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105366:	ed97 6a02 	vldr	s12, [r7, #8]
 810536a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81053e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810536e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810537a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810537e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105386:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105388:	4b11      	ldr	r3, [pc, #68]	; (81053d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810538c:	0a5b      	lsrs	r3, r3, #9
 810538e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105392:	3301      	adds	r3, #1
 8105394:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8105396:	683b      	ldr	r3, [r7, #0]
 8105398:	ee07 3a90 	vmov	s15, r3
 810539c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81053a0:	edd7 6a07 	vldr	s13, [r7, #28]
 81053a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053ac:	ee17 3a90 	vmov	r3, s15
 81053b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81053b2:	e005      	b.n	81053c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81053b4:	2300      	movs	r3, #0
 81053b6:	61bb      	str	r3, [r7, #24]
    break;
 81053b8:	e002      	b.n	81053c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81053ba:	4b07      	ldr	r3, [pc, #28]	; (81053d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81053bc:	61bb      	str	r3, [r7, #24]
    break;
 81053be:	bf00      	nop
  }

  return sysclockfreq;
 81053c0:	69bb      	ldr	r3, [r7, #24]
}
 81053c2:	4618      	mov	r0, r3
 81053c4:	3724      	adds	r7, #36	; 0x24
 81053c6:	46bd      	mov	sp, r7
 81053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053cc:	4770      	bx	lr
 81053ce:	bf00      	nop
 81053d0:	58024400 	.word	0x58024400
 81053d4:	03d09000 	.word	0x03d09000
 81053d8:	003d0900 	.word	0x003d0900
 81053dc:	017d7840 	.word	0x017d7840
 81053e0:	46000000 	.word	0x46000000
 81053e4:	4c742400 	.word	0x4c742400
 81053e8:	4a742400 	.word	0x4a742400
 81053ec:	4bbebc20 	.word	0x4bbebc20

081053f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81053f0:	b580      	push	{r7, lr}
 81053f2:	b082      	sub	sp, #8
 81053f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81053f6:	f7ff fe81 	bl	81050fc <HAL_RCC_GetSysClockFreq>
 81053fa:	4602      	mov	r2, r0
 81053fc:	4b11      	ldr	r3, [pc, #68]	; (8105444 <HAL_RCC_GetHCLKFreq+0x54>)
 81053fe:	699b      	ldr	r3, [r3, #24]
 8105400:	0a1b      	lsrs	r3, r3, #8
 8105402:	f003 030f 	and.w	r3, r3, #15
 8105406:	4910      	ldr	r1, [pc, #64]	; (8105448 <HAL_RCC_GetHCLKFreq+0x58>)
 8105408:	5ccb      	ldrb	r3, [r1, r3]
 810540a:	f003 031f 	and.w	r3, r3, #31
 810540e:	fa22 f303 	lsr.w	r3, r2, r3
 8105412:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105414:	4b0b      	ldr	r3, [pc, #44]	; (8105444 <HAL_RCC_GetHCLKFreq+0x54>)
 8105416:	699b      	ldr	r3, [r3, #24]
 8105418:	f003 030f 	and.w	r3, r3, #15
 810541c:	4a0a      	ldr	r2, [pc, #40]	; (8105448 <HAL_RCC_GetHCLKFreq+0x58>)
 810541e:	5cd3      	ldrb	r3, [r2, r3]
 8105420:	f003 031f 	and.w	r3, r3, #31
 8105424:	687a      	ldr	r2, [r7, #4]
 8105426:	fa22 f303 	lsr.w	r3, r2, r3
 810542a:	4a08      	ldr	r2, [pc, #32]	; (810544c <HAL_RCC_GetHCLKFreq+0x5c>)
 810542c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810542e:	4b07      	ldr	r3, [pc, #28]	; (810544c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105430:	681b      	ldr	r3, [r3, #0]
 8105432:	4a07      	ldr	r2, [pc, #28]	; (8105450 <HAL_RCC_GetHCLKFreq+0x60>)
 8105434:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105436:	4b05      	ldr	r3, [pc, #20]	; (810544c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105438:	681b      	ldr	r3, [r3, #0]
}
 810543a:	4618      	mov	r0, r3
 810543c:	3708      	adds	r7, #8
 810543e:	46bd      	mov	sp, r7
 8105440:	bd80      	pop	{r7, pc}
 8105442:	bf00      	nop
 8105444:	58024400 	.word	0x58024400
 8105448:	0810fcfc 	.word	0x0810fcfc
 810544c:	10000004 	.word	0x10000004
 8105450:	10000000 	.word	0x10000000

08105454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105454:	b580      	push	{r7, lr}
 8105456:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105458:	f7ff ffca 	bl	81053f0 <HAL_RCC_GetHCLKFreq>
 810545c:	4602      	mov	r2, r0
 810545e:	4b06      	ldr	r3, [pc, #24]	; (8105478 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105460:	69db      	ldr	r3, [r3, #28]
 8105462:	091b      	lsrs	r3, r3, #4
 8105464:	f003 0307 	and.w	r3, r3, #7
 8105468:	4904      	ldr	r1, [pc, #16]	; (810547c <HAL_RCC_GetPCLK1Freq+0x28>)
 810546a:	5ccb      	ldrb	r3, [r1, r3]
 810546c:	f003 031f 	and.w	r3, r3, #31
 8105470:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105474:	4618      	mov	r0, r3
 8105476:	bd80      	pop	{r7, pc}
 8105478:	58024400 	.word	0x58024400
 810547c:	0810fcfc 	.word	0x0810fcfc

08105480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105480:	b580      	push	{r7, lr}
 8105482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105484:	f7ff ffb4 	bl	81053f0 <HAL_RCC_GetHCLKFreq>
 8105488:	4602      	mov	r2, r0
 810548a:	4b06      	ldr	r3, [pc, #24]	; (81054a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 810548c:	69db      	ldr	r3, [r3, #28]
 810548e:	0a1b      	lsrs	r3, r3, #8
 8105490:	f003 0307 	and.w	r3, r3, #7
 8105494:	4904      	ldr	r1, [pc, #16]	; (81054a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105496:	5ccb      	ldrb	r3, [r1, r3]
 8105498:	f003 031f 	and.w	r3, r3, #31
 810549c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81054a0:	4618      	mov	r0, r3
 81054a2:	bd80      	pop	{r7, pc}
 81054a4:	58024400 	.word	0x58024400
 81054a8:	0810fcfc 	.word	0x0810fcfc

081054ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81054ac:	b480      	push	{r7}
 81054ae:	b083      	sub	sp, #12
 81054b0:	af00      	add	r7, sp, #0
 81054b2:	6078      	str	r0, [r7, #4]
 81054b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81054b6:	687b      	ldr	r3, [r7, #4]
 81054b8:	223f      	movs	r2, #63	; 0x3f
 81054ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81054bc:	4b1a      	ldr	r3, [pc, #104]	; (8105528 <HAL_RCC_GetClockConfig+0x7c>)
 81054be:	691b      	ldr	r3, [r3, #16]
 81054c0:	f003 0207 	and.w	r2, r3, #7
 81054c4:	687b      	ldr	r3, [r7, #4]
 81054c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 81054c8:	4b17      	ldr	r3, [pc, #92]	; (8105528 <HAL_RCC_GetClockConfig+0x7c>)
 81054ca:	699b      	ldr	r3, [r3, #24]
 81054cc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81054d4:	4b14      	ldr	r3, [pc, #80]	; (8105528 <HAL_RCC_GetClockConfig+0x7c>)
 81054d6:	699b      	ldr	r3, [r3, #24]
 81054d8:	f003 020f 	and.w	r2, r3, #15
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81054e0:	4b11      	ldr	r3, [pc, #68]	; (8105528 <HAL_RCC_GetClockConfig+0x7c>)
 81054e2:	699b      	ldr	r3, [r3, #24]
 81054e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81054ec:	4b0e      	ldr	r3, [pc, #56]	; (8105528 <HAL_RCC_GetClockConfig+0x7c>)
 81054ee:	69db      	ldr	r3, [r3, #28]
 81054f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81054f4:	687b      	ldr	r3, [r7, #4]
 81054f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81054f8:	4b0b      	ldr	r3, [pc, #44]	; (8105528 <HAL_RCC_GetClockConfig+0x7c>)
 81054fa:	69db      	ldr	r3, [r3, #28]
 81054fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8105500:	687b      	ldr	r3, [r7, #4]
 8105502:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8105504:	4b08      	ldr	r3, [pc, #32]	; (8105528 <HAL_RCC_GetClockConfig+0x7c>)
 8105506:	6a1b      	ldr	r3, [r3, #32]
 8105508:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8105510:	4b06      	ldr	r3, [pc, #24]	; (810552c <HAL_RCC_GetClockConfig+0x80>)
 8105512:	681b      	ldr	r3, [r3, #0]
 8105514:	f003 020f 	and.w	r2, r3, #15
 8105518:	683b      	ldr	r3, [r7, #0]
 810551a:	601a      	str	r2, [r3, #0]
}
 810551c:	bf00      	nop
 810551e:	370c      	adds	r7, #12
 8105520:	46bd      	mov	sp, r7
 8105522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105526:	4770      	bx	lr
 8105528:	58024400 	.word	0x58024400
 810552c:	52002000 	.word	0x52002000

08105530 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105530:	b580      	push	{r7, lr}
 8105532:	b086      	sub	sp, #24
 8105534:	af00      	add	r7, sp, #0
 8105536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105538:	2300      	movs	r3, #0
 810553a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810553c:	2300      	movs	r3, #0
 810553e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105548:	2b00      	cmp	r3, #0
 810554a:	d03f      	beq.n	81055cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105550:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105554:	d02a      	beq.n	81055ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8105556:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810555a:	d824      	bhi.n	81055a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810555c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105560:	d018      	beq.n	8105594 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105566:	d81e      	bhi.n	81055a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105568:	2b00      	cmp	r3, #0
 810556a:	d003      	beq.n	8105574 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810556c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105570:	d007      	beq.n	8105582 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8105572:	e018      	b.n	81055a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105574:	4ba3      	ldr	r3, [pc, #652]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105578:	4aa2      	ldr	r2, [pc, #648]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810557a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810557e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105580:	e015      	b.n	81055ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105582:	687b      	ldr	r3, [r7, #4]
 8105584:	3304      	adds	r3, #4
 8105586:	2102      	movs	r1, #2
 8105588:	4618      	mov	r0, r3
 810558a:	f002 f821 	bl	81075d0 <RCCEx_PLL2_Config>
 810558e:	4603      	mov	r3, r0
 8105590:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8105592:	e00c      	b.n	81055ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105594:	687b      	ldr	r3, [r7, #4]
 8105596:	3324      	adds	r3, #36	; 0x24
 8105598:	2102      	movs	r1, #2
 810559a:	4618      	mov	r0, r3
 810559c:	f002 f8ca 	bl	8107734 <RCCEx_PLL3_Config>
 81055a0:	4603      	mov	r3, r0
 81055a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81055a4:	e003      	b.n	81055ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81055a6:	2301      	movs	r3, #1
 81055a8:	75fb      	strb	r3, [r7, #23]
      break;
 81055aa:	e000      	b.n	81055ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81055ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 81055ae:	7dfb      	ldrb	r3, [r7, #23]
 81055b0:	2b00      	cmp	r3, #0
 81055b2:	d109      	bne.n	81055c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81055b4:	4b93      	ldr	r3, [pc, #588]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81055b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81055b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81055c0:	4990      	ldr	r1, [pc, #576]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81055c2:	4313      	orrs	r3, r2
 81055c4:	650b      	str	r3, [r1, #80]	; 0x50
 81055c6:	e001      	b.n	81055cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055c8:	7dfb      	ldrb	r3, [r7, #23]
 81055ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	681b      	ldr	r3, [r3, #0]
 81055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81055d4:	2b00      	cmp	r3, #0
 81055d6:	d03d      	beq.n	8105654 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81055dc:	2b04      	cmp	r3, #4
 81055de:	d826      	bhi.n	810562e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81055e0:	a201      	add	r2, pc, #4	; (adr r2, 81055e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81055e6:	bf00      	nop
 81055e8:	081055fd 	.word	0x081055fd
 81055ec:	0810560b 	.word	0x0810560b
 81055f0:	0810561d 	.word	0x0810561d
 81055f4:	08105635 	.word	0x08105635
 81055f8:	08105635 	.word	0x08105635
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81055fc:	4b81      	ldr	r3, [pc, #516]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105600:	4a80      	ldr	r2, [pc, #512]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105606:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105608:	e015      	b.n	8105636 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	3304      	adds	r3, #4
 810560e:	2100      	movs	r1, #0
 8105610:	4618      	mov	r0, r3
 8105612:	f001 ffdd 	bl	81075d0 <RCCEx_PLL2_Config>
 8105616:	4603      	mov	r3, r0
 8105618:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810561a:	e00c      	b.n	8105636 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810561c:	687b      	ldr	r3, [r7, #4]
 810561e:	3324      	adds	r3, #36	; 0x24
 8105620:	2100      	movs	r1, #0
 8105622:	4618      	mov	r0, r3
 8105624:	f002 f886 	bl	8107734 <RCCEx_PLL3_Config>
 8105628:	4603      	mov	r3, r0
 810562a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810562c:	e003      	b.n	8105636 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810562e:	2301      	movs	r3, #1
 8105630:	75fb      	strb	r3, [r7, #23]
      break;
 8105632:	e000      	b.n	8105636 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8105634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105636:	7dfb      	ldrb	r3, [r7, #23]
 8105638:	2b00      	cmp	r3, #0
 810563a:	d109      	bne.n	8105650 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810563c:	4b71      	ldr	r3, [pc, #452]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810563e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105640:	f023 0207 	bic.w	r2, r3, #7
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105648:	496e      	ldr	r1, [pc, #440]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810564a:	4313      	orrs	r3, r2
 810564c:	650b      	str	r3, [r1, #80]	; 0x50
 810564e:	e001      	b.n	8105654 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105650:	7dfb      	ldrb	r3, [r7, #23]
 8105652:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810565c:	2b00      	cmp	r3, #0
 810565e:	d042      	beq.n	81056e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105668:	d02b      	beq.n	81056c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810566a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810566e:	d825      	bhi.n	81056bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105670:	2bc0      	cmp	r3, #192	; 0xc0
 8105672:	d028      	beq.n	81056c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8105674:	2bc0      	cmp	r3, #192	; 0xc0
 8105676:	d821      	bhi.n	81056bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105678:	2b80      	cmp	r3, #128	; 0x80
 810567a:	d016      	beq.n	81056aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 810567c:	2b80      	cmp	r3, #128	; 0x80
 810567e:	d81d      	bhi.n	81056bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8105680:	2b00      	cmp	r3, #0
 8105682:	d002      	beq.n	810568a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8105684:	2b40      	cmp	r3, #64	; 0x40
 8105686:	d007      	beq.n	8105698 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8105688:	e018      	b.n	81056bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810568a:	4b5e      	ldr	r3, [pc, #376]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810568e:	4a5d      	ldr	r2, [pc, #372]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8105690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8105696:	e017      	b.n	81056c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105698:	687b      	ldr	r3, [r7, #4]
 810569a:	3304      	adds	r3, #4
 810569c:	2100      	movs	r1, #0
 810569e:	4618      	mov	r0, r3
 81056a0:	f001 ff96 	bl	81075d0 <RCCEx_PLL2_Config>
 81056a4:	4603      	mov	r3, r0
 81056a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81056a8:	e00e      	b.n	81056c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	3324      	adds	r3, #36	; 0x24
 81056ae:	2100      	movs	r1, #0
 81056b0:	4618      	mov	r0, r3
 81056b2:	f002 f83f 	bl	8107734 <RCCEx_PLL3_Config>
 81056b6:	4603      	mov	r3, r0
 81056b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81056ba:	e005      	b.n	81056c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81056bc:	2301      	movs	r3, #1
 81056be:	75fb      	strb	r3, [r7, #23]
      break;
 81056c0:	e002      	b.n	81056c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81056c2:	bf00      	nop
 81056c4:	e000      	b.n	81056c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81056c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81056c8:	7dfb      	ldrb	r3, [r7, #23]
 81056ca:	2b00      	cmp	r3, #0
 81056cc:	d109      	bne.n	81056e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81056ce:	4b4d      	ldr	r3, [pc, #308]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81056d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81056da:	494a      	ldr	r1, [pc, #296]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81056dc:	4313      	orrs	r3, r2
 81056de:	650b      	str	r3, [r1, #80]	; 0x50
 81056e0:	e001      	b.n	81056e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056e2:	7dfb      	ldrb	r3, [r7, #23]
 81056e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	681b      	ldr	r3, [r3, #0]
 81056ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81056ee:	2b00      	cmp	r3, #0
 81056f0:	d049      	beq.n	8105786 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81056f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81056fc:	d030      	beq.n	8105760 <HAL_RCCEx_PeriphCLKConfig+0x230>
 81056fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105702:	d82a      	bhi.n	810575a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105704:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105708:	d02c      	beq.n	8105764 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810570a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810570e:	d824      	bhi.n	810575a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105714:	d018      	beq.n	8105748 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8105716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810571a:	d81e      	bhi.n	810575a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810571c:	2b00      	cmp	r3, #0
 810571e:	d003      	beq.n	8105728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8105720:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105724:	d007      	beq.n	8105736 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8105726:	e018      	b.n	810575a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105728:	4b36      	ldr	r3, [pc, #216]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810572c:	4a35      	ldr	r2, [pc, #212]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810572e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105732:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105734:	e017      	b.n	8105766 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	3304      	adds	r3, #4
 810573a:	2100      	movs	r1, #0
 810573c:	4618      	mov	r0, r3
 810573e:	f001 ff47 	bl	81075d0 <RCCEx_PLL2_Config>
 8105742:	4603      	mov	r3, r0
 8105744:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105746:	e00e      	b.n	8105766 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	3324      	adds	r3, #36	; 0x24
 810574c:	2100      	movs	r1, #0
 810574e:	4618      	mov	r0, r3
 8105750:	f001 fff0 	bl	8107734 <RCCEx_PLL3_Config>
 8105754:	4603      	mov	r3, r0
 8105756:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105758:	e005      	b.n	8105766 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810575a:	2301      	movs	r3, #1
 810575c:	75fb      	strb	r3, [r7, #23]
      break;
 810575e:	e002      	b.n	8105766 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105760:	bf00      	nop
 8105762:	e000      	b.n	8105766 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105766:	7dfb      	ldrb	r3, [r7, #23]
 8105768:	2b00      	cmp	r3, #0
 810576a:	d10a      	bne.n	8105782 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810576c:	4b25      	ldr	r3, [pc, #148]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810576e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105770:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810577a:	4922      	ldr	r1, [pc, #136]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810577c:	4313      	orrs	r3, r2
 810577e:	658b      	str	r3, [r1, #88]	; 0x58
 8105780:	e001      	b.n	8105786 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105782:	7dfb      	ldrb	r3, [r7, #23]
 8105784:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810578e:	2b00      	cmp	r3, #0
 8105790:	d04b      	beq.n	810582a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810579c:	d030      	beq.n	8105800 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810579e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81057a2:	d82a      	bhi.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81057a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81057a8:	d02e      	beq.n	8105808 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81057aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81057ae:	d824      	bhi.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81057b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81057b4:	d018      	beq.n	81057e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81057b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81057ba:	d81e      	bhi.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81057bc:	2b00      	cmp	r3, #0
 81057be:	d003      	beq.n	81057c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81057c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81057c4:	d007      	beq.n	81057d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81057c6:	e018      	b.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81057c8:	4b0e      	ldr	r3, [pc, #56]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057cc:	4a0d      	ldr	r2, [pc, #52]	; (8105804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81057ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81057d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81057d4:	e019      	b.n	810580a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81057d6:	687b      	ldr	r3, [r7, #4]
 81057d8:	3304      	adds	r3, #4
 81057da:	2100      	movs	r1, #0
 81057dc:	4618      	mov	r0, r3
 81057de:	f001 fef7 	bl	81075d0 <RCCEx_PLL2_Config>
 81057e2:	4603      	mov	r3, r0
 81057e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81057e6:	e010      	b.n	810580a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81057e8:	687b      	ldr	r3, [r7, #4]
 81057ea:	3324      	adds	r3, #36	; 0x24
 81057ec:	2100      	movs	r1, #0
 81057ee:	4618      	mov	r0, r3
 81057f0:	f001 ffa0 	bl	8107734 <RCCEx_PLL3_Config>
 81057f4:	4603      	mov	r3, r0
 81057f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81057f8:	e007      	b.n	810580a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81057fa:	2301      	movs	r3, #1
 81057fc:	75fb      	strb	r3, [r7, #23]
      break;
 81057fe:	e004      	b.n	810580a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8105800:	bf00      	nop
 8105802:	e002      	b.n	810580a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8105804:	58024400 	.word	0x58024400
      break;
 8105808:	bf00      	nop
    }

    if(ret == HAL_OK)
 810580a:	7dfb      	ldrb	r3, [r7, #23]
 810580c:	2b00      	cmp	r3, #0
 810580e:	d10a      	bne.n	8105826 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105810:	4b99      	ldr	r3, [pc, #612]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105814:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8105818:	687b      	ldr	r3, [r7, #4]
 810581a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810581e:	4996      	ldr	r1, [pc, #600]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105820:	4313      	orrs	r3, r2
 8105822:	658b      	str	r3, [r1, #88]	; 0x58
 8105824:	e001      	b.n	810582a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105826:	7dfb      	ldrb	r3, [r7, #23]
 8105828:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810582a:	687b      	ldr	r3, [r7, #4]
 810582c:	681b      	ldr	r3, [r3, #0]
 810582e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105832:	2b00      	cmp	r3, #0
 8105834:	d032      	beq.n	810589c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8105836:	687b      	ldr	r3, [r7, #4]
 8105838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810583a:	2b30      	cmp	r3, #48	; 0x30
 810583c:	d01c      	beq.n	8105878 <HAL_RCCEx_PeriphCLKConfig+0x348>
 810583e:	2b30      	cmp	r3, #48	; 0x30
 8105840:	d817      	bhi.n	8105872 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8105842:	2b20      	cmp	r3, #32
 8105844:	d00c      	beq.n	8105860 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8105846:	2b20      	cmp	r3, #32
 8105848:	d813      	bhi.n	8105872 <HAL_RCCEx_PeriphCLKConfig+0x342>
 810584a:	2b00      	cmp	r3, #0
 810584c:	d016      	beq.n	810587c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 810584e:	2b10      	cmp	r3, #16
 8105850:	d10f      	bne.n	8105872 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105852:	4b89      	ldr	r3, [pc, #548]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105856:	4a88      	ldr	r2, [pc, #544]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810585c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810585e:	e00e      	b.n	810587e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	3304      	adds	r3, #4
 8105864:	2102      	movs	r1, #2
 8105866:	4618      	mov	r0, r3
 8105868:	f001 feb2 	bl	81075d0 <RCCEx_PLL2_Config>
 810586c:	4603      	mov	r3, r0
 810586e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105870:	e005      	b.n	810587e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105872:	2301      	movs	r3, #1
 8105874:	75fb      	strb	r3, [r7, #23]
      break;
 8105876:	e002      	b.n	810587e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8105878:	bf00      	nop
 810587a:	e000      	b.n	810587e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 810587c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810587e:	7dfb      	ldrb	r3, [r7, #23]
 8105880:	2b00      	cmp	r3, #0
 8105882:	d109      	bne.n	8105898 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105884:	4b7c      	ldr	r3, [pc, #496]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105890:	4979      	ldr	r1, [pc, #484]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105892:	4313      	orrs	r3, r2
 8105894:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105896:	e001      	b.n	810589c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105898:	7dfb      	ldrb	r3, [r7, #23]
 810589a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	681b      	ldr	r3, [r3, #0]
 81058a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81058a4:	2b00      	cmp	r3, #0
 81058a6:	d047      	beq.n	8105938 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81058a8:	687b      	ldr	r3, [r7, #4]
 81058aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81058ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81058b0:	d030      	beq.n	8105914 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 81058b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81058b6:	d82a      	bhi.n	810590e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81058b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81058bc:	d02c      	beq.n	8105918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 81058be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81058c2:	d824      	bhi.n	810590e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81058c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81058c8:	d018      	beq.n	81058fc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 81058ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81058ce:	d81e      	bhi.n	810590e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81058d0:	2b00      	cmp	r3, #0
 81058d2:	d003      	beq.n	81058dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 81058d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81058d8:	d007      	beq.n	81058ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 81058da:	e018      	b.n	810590e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81058dc:	4b66      	ldr	r3, [pc, #408]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81058e0:	4a65      	ldr	r2, [pc, #404]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81058e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81058e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81058e8:	e017      	b.n	810591a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	3304      	adds	r3, #4
 81058ee:	2100      	movs	r1, #0
 81058f0:	4618      	mov	r0, r3
 81058f2:	f001 fe6d 	bl	81075d0 <RCCEx_PLL2_Config>
 81058f6:	4603      	mov	r3, r0
 81058f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81058fa:	e00e      	b.n	810591a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	3324      	adds	r3, #36	; 0x24
 8105900:	2100      	movs	r1, #0
 8105902:	4618      	mov	r0, r3
 8105904:	f001 ff16 	bl	8107734 <RCCEx_PLL3_Config>
 8105908:	4603      	mov	r3, r0
 810590a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810590c:	e005      	b.n	810591a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810590e:	2301      	movs	r3, #1
 8105910:	75fb      	strb	r3, [r7, #23]
      break;
 8105912:	e002      	b.n	810591a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105914:	bf00      	nop
 8105916:	e000      	b.n	810591a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8105918:	bf00      	nop
    }

    if(ret == HAL_OK)
 810591a:	7dfb      	ldrb	r3, [r7, #23]
 810591c:	2b00      	cmp	r3, #0
 810591e:	d109      	bne.n	8105934 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105920:	4b55      	ldr	r3, [pc, #340]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105924:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8105928:	687b      	ldr	r3, [r7, #4]
 810592a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810592c:	4952      	ldr	r1, [pc, #328]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810592e:	4313      	orrs	r3, r2
 8105930:	650b      	str	r3, [r1, #80]	; 0x50
 8105932:	e001      	b.n	8105938 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105934:	7dfb      	ldrb	r3, [r7, #23]
 8105936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105938:	687b      	ldr	r3, [r7, #4]
 810593a:	681b      	ldr	r3, [r3, #0]
 810593c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105940:	2b00      	cmp	r3, #0
 8105942:	d049      	beq.n	81059d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8105944:	687b      	ldr	r3, [r7, #4]
 8105946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810594c:	d02e      	beq.n	81059ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 810594e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105952:	d828      	bhi.n	81059a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105954:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105958:	d02a      	beq.n	81059b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 810595a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810595e:	d822      	bhi.n	81059a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105960:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105964:	d026      	beq.n	81059b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8105966:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810596a:	d81c      	bhi.n	81059a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 810596c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105970:	d010      	beq.n	8105994 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8105972:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105976:	d816      	bhi.n	81059a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8105978:	2b00      	cmp	r3, #0
 810597a:	d01d      	beq.n	81059b8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 810597c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105980:	d111      	bne.n	81059a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	3304      	adds	r3, #4
 8105986:	2101      	movs	r1, #1
 8105988:	4618      	mov	r0, r3
 810598a:	f001 fe21 	bl	81075d0 <RCCEx_PLL2_Config>
 810598e:	4603      	mov	r3, r0
 8105990:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105992:	e012      	b.n	81059ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	3324      	adds	r3, #36	; 0x24
 8105998:	2101      	movs	r1, #1
 810599a:	4618      	mov	r0, r3
 810599c:	f001 feca 	bl	8107734 <RCCEx_PLL3_Config>
 81059a0:	4603      	mov	r3, r0
 81059a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81059a4:	e009      	b.n	81059ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81059a6:	2301      	movs	r3, #1
 81059a8:	75fb      	strb	r3, [r7, #23]
      break;
 81059aa:	e006      	b.n	81059ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81059ac:	bf00      	nop
 81059ae:	e004      	b.n	81059ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81059b0:	bf00      	nop
 81059b2:	e002      	b.n	81059ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81059b4:	bf00      	nop
 81059b6:	e000      	b.n	81059ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81059b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81059ba:	7dfb      	ldrb	r3, [r7, #23]
 81059bc:	2b00      	cmp	r3, #0
 81059be:	d109      	bne.n	81059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81059c0:	4b2d      	ldr	r3, [pc, #180]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81059c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81059c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059cc:	492a      	ldr	r1, [pc, #168]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81059ce:	4313      	orrs	r3, r2
 81059d0:	650b      	str	r3, [r1, #80]	; 0x50
 81059d2:	e001      	b.n	81059d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81059d4:	7dfb      	ldrb	r3, [r7, #23]
 81059d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81059d8:	687b      	ldr	r3, [r7, #4]
 81059da:	681b      	ldr	r3, [r3, #0]
 81059dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81059e0:	2b00      	cmp	r3, #0
 81059e2:	d04d      	beq.n	8105a80 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81059ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81059ee:	d02e      	beq.n	8105a4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81059f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81059f4:	d828      	bhi.n	8105a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 81059f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81059fa:	d02a      	beq.n	8105a52 <HAL_RCCEx_PeriphCLKConfig+0x522>
 81059fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105a00:	d822      	bhi.n	8105a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105a02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105a06:	d026      	beq.n	8105a56 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8105a08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105a0c:	d81c      	bhi.n	8105a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105a12:	d010      	beq.n	8105a36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8105a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105a18:	d816      	bhi.n	8105a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8105a1a:	2b00      	cmp	r3, #0
 8105a1c:	d01d      	beq.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8105a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105a22:	d111      	bne.n	8105a48 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	3304      	adds	r3, #4
 8105a28:	2101      	movs	r1, #1
 8105a2a:	4618      	mov	r0, r3
 8105a2c:	f001 fdd0 	bl	81075d0 <RCCEx_PLL2_Config>
 8105a30:	4603      	mov	r3, r0
 8105a32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105a34:	e012      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	3324      	adds	r3, #36	; 0x24
 8105a3a:	2101      	movs	r1, #1
 8105a3c:	4618      	mov	r0, r3
 8105a3e:	f001 fe79 	bl	8107734 <RCCEx_PLL3_Config>
 8105a42:	4603      	mov	r3, r0
 8105a44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105a46:	e009      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8105a48:	2301      	movs	r3, #1
 8105a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8105a4c:	e006      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105a4e:	bf00      	nop
 8105a50:	e004      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105a52:	bf00      	nop
 8105a54:	e002      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105a56:	bf00      	nop
 8105a58:	e000      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8105a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105a5c:	7dfb      	ldrb	r3, [r7, #23]
 8105a5e:	2b00      	cmp	r3, #0
 8105a60:	d10c      	bne.n	8105a7c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105a62:	4b05      	ldr	r3, [pc, #20]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105a6a:	687b      	ldr	r3, [r7, #4]
 8105a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105a70:	4901      	ldr	r1, [pc, #4]	; (8105a78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8105a72:	4313      	orrs	r3, r2
 8105a74:	658b      	str	r3, [r1, #88]	; 0x58
 8105a76:	e003      	b.n	8105a80 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8105a78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a7c:	7dfb      	ldrb	r3, [r7, #23]
 8105a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8105a80:	687b      	ldr	r3, [r7, #4]
 8105a82:	681b      	ldr	r3, [r3, #0]
 8105a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8105a88:	2b00      	cmp	r3, #0
 8105a8a:	d022      	beq.n	8105ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8105a8c:	687b      	ldr	r3, [r7, #4]
 8105a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105a90:	2b00      	cmp	r3, #0
 8105a92:	d00e      	beq.n	8105ab2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8105a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105a98:	d108      	bne.n	8105aac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105a9a:	687b      	ldr	r3, [r7, #4]
 8105a9c:	3304      	adds	r3, #4
 8105a9e:	2101      	movs	r1, #1
 8105aa0:	4618      	mov	r0, r3
 8105aa2:	f001 fd95 	bl	81075d0 <RCCEx_PLL2_Config>
 8105aa6:	4603      	mov	r3, r0
 8105aa8:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8105aaa:	e003      	b.n	8105ab4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105aac:	2301      	movs	r3, #1
 8105aae:	75fb      	strb	r3, [r7, #23]
      break;
 8105ab0:	e000      	b.n	8105ab4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      break;
 8105ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105ab4:	7dfb      	ldrb	r3, [r7, #23]
 8105ab6:	2b00      	cmp	r3, #0
 8105ab8:	d109      	bne.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0x59e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8105aba:	4b83      	ldr	r3, [pc, #524]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105ac6:	4980      	ldr	r1, [pc, #512]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105ac8:	4313      	orrs	r3, r2
 8105aca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105acc:	e001      	b.n	8105ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ace:	7dfb      	ldrb	r3, [r7, #23]
 8105ad0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	681b      	ldr	r3, [r3, #0]
 8105ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105ada:	2b00      	cmp	r3, #0
 8105adc:	d02f      	beq.n	8105b3e <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8105ade:	687b      	ldr	r3, [r7, #4]
 8105ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ae6:	d00e      	beq.n	8105b06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8105ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105aec:	d814      	bhi.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8105aee:	2b00      	cmp	r3, #0
 8105af0:	d015      	beq.n	8105b1e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8105af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105af6:	d10f      	bne.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105af8:	4b73      	ldr	r3, [pc, #460]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105afc:	4a72      	ldr	r2, [pc, #456]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105b04:	e00c      	b.n	8105b20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	3304      	adds	r3, #4
 8105b0a:	2101      	movs	r1, #1
 8105b0c:	4618      	mov	r0, r3
 8105b0e:	f001 fd5f 	bl	81075d0 <RCCEx_PLL2_Config>
 8105b12:	4603      	mov	r3, r0
 8105b14:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105b16:	e003      	b.n	8105b20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105b18:	2301      	movs	r3, #1
 8105b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8105b1c:	e000      	b.n	8105b20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      break;
 8105b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105b20:	7dfb      	ldrb	r3, [r7, #23]
 8105b22:	2b00      	cmp	r3, #0
 8105b24:	d109      	bne.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105b26:	4b68      	ldr	r3, [pc, #416]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105b2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105b2e:	687b      	ldr	r3, [r7, #4]
 8105b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105b32:	4965      	ldr	r1, [pc, #404]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105b34:	4313      	orrs	r3, r2
 8105b36:	650b      	str	r3, [r1, #80]	; 0x50
 8105b38:	e001      	b.n	8105b3e <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b3a:	7dfb      	ldrb	r3, [r7, #23]
 8105b3c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	681b      	ldr	r3, [r3, #0]
 8105b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105b46:	2b00      	cmp	r3, #0
 8105b48:	d031      	beq.n	8105bae <HAL_RCCEx_PeriphCLKConfig+0x67e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8105b4a:	687b      	ldr	r3, [r7, #4]
 8105b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b4e:	2b03      	cmp	r3, #3
 8105b50:	d81a      	bhi.n	8105b88 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8105b52:	a201      	add	r2, pc, #4	; (adr r2, 8105b58 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8105b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b58:	08105b8f 	.word	0x08105b8f
 8105b5c:	08105b69 	.word	0x08105b69
 8105b60:	08105b77 	.word	0x08105b77
 8105b64:	08105b8f 	.word	0x08105b8f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b68:	4b57      	ldr	r3, [pc, #348]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b6c:	4a56      	ldr	r2, [pc, #344]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105b74:	e00c      	b.n	8105b90 <HAL_RCCEx_PeriphCLKConfig+0x660>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	3304      	adds	r3, #4
 8105b7a:	2102      	movs	r1, #2
 8105b7c:	4618      	mov	r0, r3
 8105b7e:	f001 fd27 	bl	81075d0 <RCCEx_PLL2_Config>
 8105b82:	4603      	mov	r3, r0
 8105b84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105b86:	e003      	b.n	8105b90 <HAL_RCCEx_PeriphCLKConfig+0x660>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105b88:	2301      	movs	r3, #1
 8105b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8105b8c:	e000      	b.n	8105b90 <HAL_RCCEx_PeriphCLKConfig+0x660>
      break;
 8105b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105b90:	7dfb      	ldrb	r3, [r7, #23]
 8105b92:	2b00      	cmp	r3, #0
 8105b94:	d109      	bne.n	8105baa <HAL_RCCEx_PeriphCLKConfig+0x67a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105b96:	4b4c      	ldr	r3, [pc, #304]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105b9a:	f023 0203 	bic.w	r2, r3, #3
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105ba2:	4949      	ldr	r1, [pc, #292]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105ba4:	4313      	orrs	r3, r2
 8105ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105ba8:	e001      	b.n	8105bae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105baa:	7dfb      	ldrb	r3, [r7, #23]
 8105bac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	681b      	ldr	r3, [r3, #0]
 8105bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105bb6:	2b00      	cmp	r3, #0
 8105bb8:	f000 808c 	beq.w	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105bbc:	4b43      	ldr	r3, [pc, #268]	; (8105ccc <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8105bbe:	681b      	ldr	r3, [r3, #0]
 8105bc0:	4a42      	ldr	r2, [pc, #264]	; (8105ccc <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8105bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105bc8:	f7fc fe92 	bl	81028f0 <HAL_GetTick>
 8105bcc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105bce:	e009      	b.n	8105be4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105bd0:	f7fc fe8e 	bl	81028f0 <HAL_GetTick>
 8105bd4:	4602      	mov	r2, r0
 8105bd6:	693b      	ldr	r3, [r7, #16]
 8105bd8:	1ad3      	subs	r3, r2, r3
 8105bda:	2b64      	cmp	r3, #100	; 0x64
 8105bdc:	d902      	bls.n	8105be4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      {
        ret = HAL_TIMEOUT;
 8105bde:	2303      	movs	r3, #3
 8105be0:	75fb      	strb	r3, [r7, #23]
        break;
 8105be2:	e005      	b.n	8105bf0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105be4:	4b39      	ldr	r3, [pc, #228]	; (8105ccc <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8105be6:	681b      	ldr	r3, [r3, #0]
 8105be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105bec:	2b00      	cmp	r3, #0
 8105bee:	d0ef      	beq.n	8105bd0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      }
    }

    if(ret == HAL_OK)
 8105bf0:	7dfb      	ldrb	r3, [r7, #23]
 8105bf2:	2b00      	cmp	r3, #0
 8105bf4:	d16c      	bne.n	8105cd0 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105bf6:	4b34      	ldr	r3, [pc, #208]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105bfa:	687b      	ldr	r3, [r7, #4]
 8105bfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105c00:	4053      	eors	r3, r2
 8105c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105c06:	2b00      	cmp	r3, #0
 8105c08:	d013      	beq.n	8105c32 <HAL_RCCEx_PeriphCLKConfig+0x702>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105c0a:	4b2f      	ldr	r3, [pc, #188]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105c12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105c14:	4b2c      	ldr	r3, [pc, #176]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c18:	4a2b      	ldr	r2, [pc, #172]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105c1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105c20:	4b29      	ldr	r3, [pc, #164]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c24:	4a28      	ldr	r2, [pc, #160]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105c2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105c2c:	4a26      	ldr	r2, [pc, #152]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105c2e:	68fb      	ldr	r3, [r7, #12]
 8105c30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c3c:	d115      	bne.n	8105c6a <HAL_RCCEx_PeriphCLKConfig+0x73a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105c3e:	f7fc fe57 	bl	81028f0 <HAL_GetTick>
 8105c42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105c44:	e00b      	b.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105c46:	f7fc fe53 	bl	81028f0 <HAL_GetTick>
 8105c4a:	4602      	mov	r2, r0
 8105c4c:	693b      	ldr	r3, [r7, #16]
 8105c4e:	1ad3      	subs	r3, r2, r3
 8105c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8105c54:	4293      	cmp	r3, r2
 8105c56:	d902      	bls.n	8105c5e <HAL_RCCEx_PeriphCLKConfig+0x72e>
          {
            ret = HAL_TIMEOUT;
 8105c58:	2303      	movs	r3, #3
 8105c5a:	75fb      	strb	r3, [r7, #23]
            break;
 8105c5c:	e005      	b.n	8105c6a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105c5e:	4b1a      	ldr	r3, [pc, #104]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c62:	f003 0302 	and.w	r3, r3, #2
 8105c66:	2b00      	cmp	r3, #0
 8105c68:	d0ed      	beq.n	8105c46 <HAL_RCCEx_PeriphCLKConfig+0x716>
          }
        }
      }

      if(ret == HAL_OK)
 8105c6a:	7dfb      	ldrb	r3, [r7, #23]
 8105c6c:	2b00      	cmp	r3, #0
 8105c6e:	d128      	bne.n	8105cc2 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105c7e:	d10f      	bne.n	8105ca0 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8105c80:	4b11      	ldr	r3, [pc, #68]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105c82:	691b      	ldr	r3, [r3, #16]
 8105c84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105c8e:	091b      	lsrs	r3, r3, #4
 8105c90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8105c94:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8105c98:	490b      	ldr	r1, [pc, #44]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105c9a:	4313      	orrs	r3, r2
 8105c9c:	610b      	str	r3, [r1, #16]
 8105c9e:	e005      	b.n	8105cac <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8105ca0:	4b09      	ldr	r3, [pc, #36]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105ca2:	691b      	ldr	r3, [r3, #16]
 8105ca4:	4a08      	ldr	r2, [pc, #32]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105ca6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8105caa:	6113      	str	r3, [r2, #16]
 8105cac:	4b06      	ldr	r3, [pc, #24]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105cb0:	687b      	ldr	r3, [r7, #4]
 8105cb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105cba:	4903      	ldr	r1, [pc, #12]	; (8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8105cbc:	4313      	orrs	r3, r2
 8105cbe:	670b      	str	r3, [r1, #112]	; 0x70
 8105cc0:	e008      	b.n	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105cc2:	7dfb      	ldrb	r3, [r7, #23]
 8105cc4:	75bb      	strb	r3, [r7, #22]
 8105cc6:	e005      	b.n	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8105cc8:	58024400 	.word	0x58024400
 8105ccc:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cd0:	7dfb      	ldrb	r3, [r7, #23]
 8105cd2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	681b      	ldr	r3, [r3, #0]
 8105cd8:	f003 0301 	and.w	r3, r3, #1
 8105cdc:	2b00      	cmp	r3, #0
 8105cde:	d07e      	beq.n	8105dde <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8105ce0:	687b      	ldr	r3, [r7, #4]
 8105ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105ce4:	2b28      	cmp	r3, #40	; 0x28
 8105ce6:	d867      	bhi.n	8105db8 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8105ce8:	a201      	add	r2, pc, #4	; (adr r2, 8105cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8105cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105cee:	bf00      	nop
 8105cf0:	08105dbf 	.word	0x08105dbf
 8105cf4:	08105db9 	.word	0x08105db9
 8105cf8:	08105db9 	.word	0x08105db9
 8105cfc:	08105db9 	.word	0x08105db9
 8105d00:	08105db9 	.word	0x08105db9
 8105d04:	08105db9 	.word	0x08105db9
 8105d08:	08105db9 	.word	0x08105db9
 8105d0c:	08105db9 	.word	0x08105db9
 8105d10:	08105d95 	.word	0x08105d95
 8105d14:	08105db9 	.word	0x08105db9
 8105d18:	08105db9 	.word	0x08105db9
 8105d1c:	08105db9 	.word	0x08105db9
 8105d20:	08105db9 	.word	0x08105db9
 8105d24:	08105db9 	.word	0x08105db9
 8105d28:	08105db9 	.word	0x08105db9
 8105d2c:	08105db9 	.word	0x08105db9
 8105d30:	08105da7 	.word	0x08105da7
 8105d34:	08105db9 	.word	0x08105db9
 8105d38:	08105db9 	.word	0x08105db9
 8105d3c:	08105db9 	.word	0x08105db9
 8105d40:	08105db9 	.word	0x08105db9
 8105d44:	08105db9 	.word	0x08105db9
 8105d48:	08105db9 	.word	0x08105db9
 8105d4c:	08105db9 	.word	0x08105db9
 8105d50:	08105dbf 	.word	0x08105dbf
 8105d54:	08105db9 	.word	0x08105db9
 8105d58:	08105db9 	.word	0x08105db9
 8105d5c:	08105db9 	.word	0x08105db9
 8105d60:	08105db9 	.word	0x08105db9
 8105d64:	08105db9 	.word	0x08105db9
 8105d68:	08105db9 	.word	0x08105db9
 8105d6c:	08105db9 	.word	0x08105db9
 8105d70:	08105dbf 	.word	0x08105dbf
 8105d74:	08105db9 	.word	0x08105db9
 8105d78:	08105db9 	.word	0x08105db9
 8105d7c:	08105db9 	.word	0x08105db9
 8105d80:	08105db9 	.word	0x08105db9
 8105d84:	08105db9 	.word	0x08105db9
 8105d88:	08105db9 	.word	0x08105db9
 8105d8c:	08105db9 	.word	0x08105db9
 8105d90:	08105dbf 	.word	0x08105dbf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	3304      	adds	r3, #4
 8105d98:	2101      	movs	r1, #1
 8105d9a:	4618      	mov	r0, r3
 8105d9c:	f001 fc18 	bl	81075d0 <RCCEx_PLL2_Config>
 8105da0:	4603      	mov	r3, r0
 8105da2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105da4:	e00c      	b.n	8105dc0 <HAL_RCCEx_PeriphCLKConfig+0x890>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	3324      	adds	r3, #36	; 0x24
 8105daa:	2101      	movs	r1, #1
 8105dac:	4618      	mov	r0, r3
 8105dae:	f001 fcc1 	bl	8107734 <RCCEx_PLL3_Config>
 8105db2:	4603      	mov	r3, r0
 8105db4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8105db6:	e003      	b.n	8105dc0 <HAL_RCCEx_PeriphCLKConfig+0x890>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105db8:	2301      	movs	r3, #1
 8105dba:	75fb      	strb	r3, [r7, #23]
      break;
 8105dbc:	e000      	b.n	8105dc0 <HAL_RCCEx_PeriphCLKConfig+0x890>
      break;
 8105dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105dc0:	7dfb      	ldrb	r3, [r7, #23]
 8105dc2:	2b00      	cmp	r3, #0
 8105dc4:	d109      	bne.n	8105dda <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105dc6:	4b96      	ldr	r3, [pc, #600]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8105dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105dca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105dd2:	4993      	ldr	r1, [pc, #588]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8105dd4:	4313      	orrs	r3, r2
 8105dd6:	654b      	str	r3, [r1, #84]	; 0x54
 8105dd8:	e001      	b.n	8105dde <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dda:	7dfb      	ldrb	r3, [r7, #23]
 8105ddc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105dde:	687b      	ldr	r3, [r7, #4]
 8105de0:	681b      	ldr	r3, [r3, #0]
 8105de2:	f003 0302 	and.w	r3, r3, #2
 8105de6:	2b00      	cmp	r3, #0
 8105de8:	d037      	beq.n	8105e5a <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105dee:	2b05      	cmp	r3, #5
 8105df0:	d820      	bhi.n	8105e34 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8105df2:	a201      	add	r2, pc, #4	; (adr r2, 8105df8 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8105df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105df8:	08105e3b 	.word	0x08105e3b
 8105dfc:	08105e11 	.word	0x08105e11
 8105e00:	08105e23 	.word	0x08105e23
 8105e04:	08105e3b 	.word	0x08105e3b
 8105e08:	08105e3b 	.word	0x08105e3b
 8105e0c:	08105e3b 	.word	0x08105e3b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105e10:	687b      	ldr	r3, [r7, #4]
 8105e12:	3304      	adds	r3, #4
 8105e14:	2101      	movs	r1, #1
 8105e16:	4618      	mov	r0, r3
 8105e18:	f001 fbda 	bl	81075d0 <RCCEx_PLL2_Config>
 8105e1c:	4603      	mov	r3, r0
 8105e1e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8105e20:	e00c      	b.n	8105e3c <HAL_RCCEx_PeriphCLKConfig+0x90c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	3324      	adds	r3, #36	; 0x24
 8105e26:	2101      	movs	r1, #1
 8105e28:	4618      	mov	r0, r3
 8105e2a:	f001 fc83 	bl	8107734 <RCCEx_PLL3_Config>
 8105e2e:	4603      	mov	r3, r0
 8105e30:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8105e32:	e003      	b.n	8105e3c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105e34:	2301      	movs	r3, #1
 8105e36:	75fb      	strb	r3, [r7, #23]
      break;
 8105e38:	e000      	b.n	8105e3c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      break;
 8105e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e3c:	7dfb      	ldrb	r3, [r7, #23]
 8105e3e:	2b00      	cmp	r3, #0
 8105e40:	d109      	bne.n	8105e56 <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8105e42:	4b77      	ldr	r3, [pc, #476]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8105e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105e46:	f023 0207 	bic.w	r2, r3, #7
 8105e4a:	687b      	ldr	r3, [r7, #4]
 8105e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105e4e:	4974      	ldr	r1, [pc, #464]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8105e50:	4313      	orrs	r3, r2
 8105e52:	654b      	str	r3, [r1, #84]	; 0x54
 8105e54:	e001      	b.n	8105e5a <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e56:	7dfb      	ldrb	r3, [r7, #23]
 8105e58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	681b      	ldr	r3, [r3, #0]
 8105e5e:	f003 0304 	and.w	r3, r3, #4
 8105e62:	2b00      	cmp	r3, #0
 8105e64:	d03a      	beq.n	8105edc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105e6c:	2b05      	cmp	r3, #5
 8105e6e:	d821      	bhi.n	8105eb4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8105e70:	a201      	add	r2, pc, #4	; (adr r2, 8105e78 <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8105e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e76:	bf00      	nop
 8105e78:	08105ebb 	.word	0x08105ebb
 8105e7c:	08105e91 	.word	0x08105e91
 8105e80:	08105ea3 	.word	0x08105ea3
 8105e84:	08105ebb 	.word	0x08105ebb
 8105e88:	08105ebb 	.word	0x08105ebb
 8105e8c:	08105ebb 	.word	0x08105ebb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	3304      	adds	r3, #4
 8105e94:	2101      	movs	r1, #1
 8105e96:	4618      	mov	r0, r3
 8105e98:	f001 fb9a 	bl	81075d0 <RCCEx_PLL2_Config>
 8105e9c:	4603      	mov	r3, r0
 8105e9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8105ea0:	e00c      	b.n	8105ebc <HAL_RCCEx_PeriphCLKConfig+0x98c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105ea2:	687b      	ldr	r3, [r7, #4]
 8105ea4:	3324      	adds	r3, #36	; 0x24
 8105ea6:	2101      	movs	r1, #1
 8105ea8:	4618      	mov	r0, r3
 8105eaa:	f001 fc43 	bl	8107734 <RCCEx_PLL3_Config>
 8105eae:	4603      	mov	r3, r0
 8105eb0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8105eb2:	e003      	b.n	8105ebc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105eb4:	2301      	movs	r3, #1
 8105eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8105eb8:	e000      	b.n	8105ebc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      break;
 8105eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105ebc:	7dfb      	ldrb	r3, [r7, #23]
 8105ebe:	2b00      	cmp	r3, #0
 8105ec0:	d10a      	bne.n	8105ed8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8105ec2:	4b57      	ldr	r3, [pc, #348]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8105ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ec6:	f023 0207 	bic.w	r2, r3, #7
 8105eca:	687b      	ldr	r3, [r7, #4]
 8105ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105ed0:	4953      	ldr	r1, [pc, #332]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8105ed2:	4313      	orrs	r3, r2
 8105ed4:	658b      	str	r3, [r1, #88]	; 0x58
 8105ed6:	e001      	b.n	8105edc <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ed8:	7dfb      	ldrb	r3, [r7, #23]
 8105eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105edc:	687b      	ldr	r3, [r7, #4]
 8105ede:	681b      	ldr	r3, [r3, #0]
 8105ee0:	f003 0320 	and.w	r3, r3, #32
 8105ee4:	2b00      	cmp	r3, #0
 8105ee6:	d04b      	beq.n	8105f80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8105ee8:	687b      	ldr	r3, [r7, #4]
 8105eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105ef2:	d02e      	beq.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8105ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105ef8:	d828      	bhi.n	8105f4c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8105efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105efe:	d02a      	beq.n	8105f56 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8105f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105f04:	d822      	bhi.n	8105f4c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8105f06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105f0a:	d026      	beq.n	8105f5a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8105f0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105f10:	d81c      	bhi.n	8105f4c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8105f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f16:	d010      	beq.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8105f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f1c:	d816      	bhi.n	8105f4c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8105f1e:	2b00      	cmp	r3, #0
 8105f20:	d01d      	beq.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8105f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105f26:	d111      	bne.n	8105f4c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105f28:	687b      	ldr	r3, [r7, #4]
 8105f2a:	3304      	adds	r3, #4
 8105f2c:	2100      	movs	r1, #0
 8105f2e:	4618      	mov	r0, r3
 8105f30:	f001 fb4e 	bl	81075d0 <RCCEx_PLL2_Config>
 8105f34:	4603      	mov	r3, r0
 8105f36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8105f38:	e012      	b.n	8105f60 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	3324      	adds	r3, #36	; 0x24
 8105f3e:	2102      	movs	r1, #2
 8105f40:	4618      	mov	r0, r3
 8105f42:	f001 fbf7 	bl	8107734 <RCCEx_PLL3_Config>
 8105f46:	4603      	mov	r3, r0
 8105f48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8105f4a:	e009      	b.n	8105f60 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105f4c:	2301      	movs	r3, #1
 8105f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8105f50:	e006      	b.n	8105f60 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8105f52:	bf00      	nop
 8105f54:	e004      	b.n	8105f60 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8105f56:	bf00      	nop
 8105f58:	e002      	b.n	8105f60 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8105f5a:	bf00      	nop
 8105f5c:	e000      	b.n	8105f60 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8105f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105f60:	7dfb      	ldrb	r3, [r7, #23]
 8105f62:	2b00      	cmp	r3, #0
 8105f64:	d10a      	bne.n	8105f7c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105f66:	4b2e      	ldr	r3, [pc, #184]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8105f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105f6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105f74:	492a      	ldr	r1, [pc, #168]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8105f76:	4313      	orrs	r3, r2
 8105f78:	654b      	str	r3, [r1, #84]	; 0x54
 8105f7a:	e001      	b.n	8105f80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f7c:	7dfb      	ldrb	r3, [r7, #23]
 8105f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	681b      	ldr	r3, [r3, #0]
 8105f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105f88:	2b00      	cmp	r3, #0
 8105f8a:	d04d      	beq.n	8106028 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105f92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105f96:	d02e      	beq.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8105f98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105f9c:	d828      	bhi.n	8105ff0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8105f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105fa2:	d02a      	beq.n	8105ffa <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8105fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105fa8:	d822      	bhi.n	8105ff0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8105faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105fae:	d026      	beq.n	8105ffe <HAL_RCCEx_PeriphCLKConfig+0xace>
 8105fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105fb4:	d81c      	bhi.n	8105ff0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8105fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105fba:	d010      	beq.n	8105fde <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8105fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105fc0:	d816      	bhi.n	8105ff0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8105fc2:	2b00      	cmp	r3, #0
 8105fc4:	d01d      	beq.n	8106002 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8105fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8105fca:	d111      	bne.n	8105ff0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	3304      	adds	r3, #4
 8105fd0:	2100      	movs	r1, #0
 8105fd2:	4618      	mov	r0, r3
 8105fd4:	f001 fafc 	bl	81075d0 <RCCEx_PLL2_Config>
 8105fd8:	4603      	mov	r3, r0
 8105fda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105fdc:	e012      	b.n	8106004 <HAL_RCCEx_PeriphCLKConfig+0xad4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105fde:	687b      	ldr	r3, [r7, #4]
 8105fe0:	3324      	adds	r3, #36	; 0x24
 8105fe2:	2102      	movs	r1, #2
 8105fe4:	4618      	mov	r0, r3
 8105fe6:	f001 fba5 	bl	8107734 <RCCEx_PLL3_Config>
 8105fea:	4603      	mov	r3, r0
 8105fec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8105fee:	e009      	b.n	8106004 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105ff0:	2301      	movs	r3, #1
 8105ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8105ff4:	e006      	b.n	8106004 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8105ff6:	bf00      	nop
 8105ff8:	e004      	b.n	8106004 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8105ffa:	bf00      	nop
 8105ffc:	e002      	b.n	8106004 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8105ffe:	bf00      	nop
 8106000:	e000      	b.n	8106004 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8106002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106004:	7dfb      	ldrb	r3, [r7, #23]
 8106006:	2b00      	cmp	r3, #0
 8106008:	d10c      	bne.n	8106024 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810600a:	4b05      	ldr	r3, [pc, #20]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 810600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810600e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8106012:	687b      	ldr	r3, [r7, #4]
 8106014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106018:	4901      	ldr	r1, [pc, #4]	; (8106020 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 810601a:	4313      	orrs	r3, r2
 810601c:	658b      	str	r3, [r1, #88]	; 0x58
 810601e:	e003      	b.n	8106028 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8106020:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106024:	7dfb      	ldrb	r3, [r7, #23]
 8106026:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106028:	687b      	ldr	r3, [r7, #4]
 810602a:	681b      	ldr	r3, [r3, #0]
 810602c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106030:	2b00      	cmp	r3, #0
 8106032:	d04b      	beq.n	81060cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8106034:	687b      	ldr	r3, [r7, #4]
 8106036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810603a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810603e:	d02e      	beq.n	810609e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8106040:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106044:	d828      	bhi.n	8106098 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8106046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810604a:	d02a      	beq.n	81060a2 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 810604c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106050:	d822      	bhi.n	8106098 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8106052:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106056:	d026      	beq.n	81060a6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8106058:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810605c:	d81c      	bhi.n	8106098 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 810605e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106062:	d010      	beq.n	8106086 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8106064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106068:	d816      	bhi.n	8106098 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 810606a:	2b00      	cmp	r3, #0
 810606c:	d01d      	beq.n	81060aa <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 810606e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106072:	d111      	bne.n	8106098 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106074:	687b      	ldr	r3, [r7, #4]
 8106076:	3304      	adds	r3, #4
 8106078:	2100      	movs	r1, #0
 810607a:	4618      	mov	r0, r3
 810607c:	f001 faa8 	bl	81075d0 <RCCEx_PLL2_Config>
 8106080:	4603      	mov	r3, r0
 8106082:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106084:	e012      	b.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	3324      	adds	r3, #36	; 0x24
 810608a:	2102      	movs	r1, #2
 810608c:	4618      	mov	r0, r3
 810608e:	f001 fb51 	bl	8107734 <RCCEx_PLL3_Config>
 8106092:	4603      	mov	r3, r0
 8106094:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8106096:	e009      	b.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106098:	2301      	movs	r3, #1
 810609a:	75fb      	strb	r3, [r7, #23]
      break;
 810609c:	e006      	b.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 810609e:	bf00      	nop
 81060a0:	e004      	b.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 81060a2:	bf00      	nop
 81060a4:	e002      	b.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 81060a6:	bf00      	nop
 81060a8:	e000      	b.n	81060ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 81060aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81060ac:	7dfb      	ldrb	r3, [r7, #23]
 81060ae:	2b00      	cmp	r3, #0
 81060b0:	d10a      	bne.n	81060c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81060b2:	4b9e      	ldr	r3, [pc, #632]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81060b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81060b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81060ba:	687b      	ldr	r3, [r7, #4]
 81060bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81060c0:	499a      	ldr	r1, [pc, #616]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81060c2:	4313      	orrs	r3, r2
 81060c4:	658b      	str	r3, [r1, #88]	; 0x58
 81060c6:	e001      	b.n	81060cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060c8:	7dfb      	ldrb	r3, [r7, #23]
 81060ca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	681b      	ldr	r3, [r3, #0]
 81060d0:	f003 0308 	and.w	r3, r3, #8
 81060d4:	2b00      	cmp	r3, #0
 81060d6:	d01a      	beq.n	810610e <HAL_RCCEx_PeriphCLKConfig+0xbde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81060de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81060e2:	d10a      	bne.n	81060fa <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	3324      	adds	r3, #36	; 0x24
 81060e8:	2102      	movs	r1, #2
 81060ea:	4618      	mov	r0, r3
 81060ec:	f001 fb22 	bl	8107734 <RCCEx_PLL3_Config>
 81060f0:	4603      	mov	r3, r0
 81060f2:	2b00      	cmp	r3, #0
 81060f4:	d001      	beq.n	81060fa <HAL_RCCEx_PeriphCLKConfig+0xbca>
        {
          status = HAL_ERROR;
 81060f6:	2301      	movs	r3, #1
 81060f8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81060fa:	4b8c      	ldr	r3, [pc, #560]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81060fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81060fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8106102:	687b      	ldr	r3, [r7, #4]
 8106104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106108:	4988      	ldr	r1, [pc, #544]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 810610a:	4313      	orrs	r3, r2
 810610c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	681b      	ldr	r3, [r3, #0]
 8106112:	f003 0310 	and.w	r3, r3, #16
 8106116:	2b00      	cmp	r3, #0
 8106118:	d01a      	beq.n	8106150 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106124:	d10a      	bne.n	810613c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	3324      	adds	r3, #36	; 0x24
 810612a:	2102      	movs	r1, #2
 810612c:	4618      	mov	r0, r3
 810612e:	f001 fb01 	bl	8107734 <RCCEx_PLL3_Config>
 8106132:	4603      	mov	r3, r0
 8106134:	2b00      	cmp	r3, #0
 8106136:	d001      	beq.n	810613c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        status = HAL_ERROR;
 8106138:	2301      	movs	r3, #1
 810613a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810613c:	4b7b      	ldr	r3, [pc, #492]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 810613e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810614a:	4978      	ldr	r1, [pc, #480]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 810614c:	4313      	orrs	r3, r2
 810614e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106150:	687b      	ldr	r3, [r7, #4]
 8106152:	681b      	ldr	r3, [r3, #0]
 8106154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8106158:	2b00      	cmp	r3, #0
 810615a:	d034      	beq.n	81061c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810615c:	687b      	ldr	r3, [r7, #4]
 810615e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8106162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106166:	d01d      	beq.n	81061a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8106168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810616c:	d817      	bhi.n	810619e <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 810616e:	2b00      	cmp	r3, #0
 8106170:	d003      	beq.n	810617a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 8106172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106176:	d009      	beq.n	810618c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8106178:	e011      	b.n	810619e <HAL_RCCEx_PeriphCLKConfig+0xc6e>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810617a:	687b      	ldr	r3, [r7, #4]
 810617c:	3304      	adds	r3, #4
 810617e:	2100      	movs	r1, #0
 8106180:	4618      	mov	r0, r3
 8106182:	f001 fa25 	bl	81075d0 <RCCEx_PLL2_Config>
 8106186:	4603      	mov	r3, r0
 8106188:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810618a:	e00c      	b.n	81061a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810618c:	687b      	ldr	r3, [r7, #4]
 810618e:	3324      	adds	r3, #36	; 0x24
 8106190:	2102      	movs	r1, #2
 8106192:	4618      	mov	r0, r3
 8106194:	f001 face 	bl	8107734 <RCCEx_PLL3_Config>
 8106198:	4603      	mov	r3, r0
 810619a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810619c:	e003      	b.n	81061a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810619e:	2301      	movs	r3, #1
 81061a0:	75fb      	strb	r3, [r7, #23]
      break;
 81061a2:	e000      	b.n	81061a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
      break;
 81061a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81061a6:	7dfb      	ldrb	r3, [r7, #23]
 81061a8:	2b00      	cmp	r3, #0
 81061aa:	d10a      	bne.n	81061c2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81061ac:	4b5f      	ldr	r3, [pc, #380]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81061ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81061b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81061b4:	687b      	ldr	r3, [r7, #4]
 81061b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81061ba:	495c      	ldr	r1, [pc, #368]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81061bc:	4313      	orrs	r3, r2
 81061be:	658b      	str	r3, [r1, #88]	; 0x58
 81061c0:	e001      	b.n	81061c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061c2:	7dfb      	ldrb	r3, [r7, #23]
 81061c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81061c6:	687b      	ldr	r3, [r7, #4]
 81061c8:	681b      	ldr	r3, [r3, #0]
 81061ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81061ce:	2b00      	cmp	r3, #0
 81061d0:	d033      	beq.n	810623a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81061d2:	687b      	ldr	r3, [r7, #4]
 81061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81061d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81061dc:	d01c      	beq.n	8106218 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81061de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81061e2:	d816      	bhi.n	8106212 <HAL_RCCEx_PeriphCLKConfig+0xce2>
 81061e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81061e8:	d003      	beq.n	81061f2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 81061ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81061ee:	d007      	beq.n	8106200 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 81061f0:	e00f      	b.n	8106212 <HAL_RCCEx_PeriphCLKConfig+0xce2>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81061f2:	4b4e      	ldr	r3, [pc, #312]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81061f6:	4a4d      	ldr	r2, [pc, #308]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81061f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81061fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81061fe:	e00c      	b.n	810621a <HAL_RCCEx_PeriphCLKConfig+0xcea>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	3324      	adds	r3, #36	; 0x24
 8106204:	2101      	movs	r1, #1
 8106206:	4618      	mov	r0, r3
 8106208:	f001 fa94 	bl	8107734 <RCCEx_PLL3_Config>
 810620c:	4603      	mov	r3, r0
 810620e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8106210:	e003      	b.n	810621a <HAL_RCCEx_PeriphCLKConfig+0xcea>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106212:	2301      	movs	r3, #1
 8106214:	75fb      	strb	r3, [r7, #23]
      break;
 8106216:	e000      	b.n	810621a <HAL_RCCEx_PeriphCLKConfig+0xcea>
      break;
 8106218:	bf00      	nop
    }

    if(ret == HAL_OK)
 810621a:	7dfb      	ldrb	r3, [r7, #23]
 810621c:	2b00      	cmp	r3, #0
 810621e:	d10a      	bne.n	8106236 <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106220:	4b42      	ldr	r3, [pc, #264]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8106222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106224:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810622e:	493f      	ldr	r1, [pc, #252]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8106230:	4313      	orrs	r3, r2
 8106232:	654b      	str	r3, [r1, #84]	; 0x54
 8106234:	e001      	b.n	810623a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106236:	7dfb      	ldrb	r3, [r7, #23]
 8106238:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810623a:	687b      	ldr	r3, [r7, #4]
 810623c:	681b      	ldr	r3, [r3, #0]
 810623e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106242:	2b00      	cmp	r3, #0
 8106244:	d029      	beq.n	810629a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810624a:	2b00      	cmp	r3, #0
 810624c:	d003      	beq.n	8106256 <HAL_RCCEx_PeriphCLKConfig+0xd26>
 810624e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106252:	d007      	beq.n	8106264 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8106254:	e00f      	b.n	8106276 <HAL_RCCEx_PeriphCLKConfig+0xd46>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106256:	4b35      	ldr	r3, [pc, #212]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8106258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810625a:	4a34      	ldr	r2, [pc, #208]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 810625c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106260:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106262:	e00b      	b.n	810627c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106264:	687b      	ldr	r3, [r7, #4]
 8106266:	3304      	adds	r3, #4
 8106268:	2102      	movs	r1, #2
 810626a:	4618      	mov	r0, r3
 810626c:	f001 f9b0 	bl	81075d0 <RCCEx_PLL2_Config>
 8106270:	4603      	mov	r3, r0
 8106272:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106274:	e002      	b.n	810627c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    default:
      ret = HAL_ERROR;
 8106276:	2301      	movs	r3, #1
 8106278:	75fb      	strb	r3, [r7, #23]
      break;
 810627a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810627c:	7dfb      	ldrb	r3, [r7, #23]
 810627e:	2b00      	cmp	r3, #0
 8106280:	d109      	bne.n	8106296 <HAL_RCCEx_PeriphCLKConfig+0xd66>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106282:	4b2a      	ldr	r3, [pc, #168]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8106284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106286:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810628e:	4927      	ldr	r1, [pc, #156]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8106290:	4313      	orrs	r3, r2
 8106292:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106294:	e001      	b.n	810629a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106296:	7dfb      	ldrb	r3, [r7, #23]
 8106298:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810629a:	687b      	ldr	r3, [r7, #4]
 810629c:	681b      	ldr	r3, [r3, #0]
 810629e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81062a2:	2b00      	cmp	r3, #0
 81062a4:	d00a      	beq.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81062a6:	687b      	ldr	r3, [r7, #4]
 81062a8:	3324      	adds	r3, #36	; 0x24
 81062aa:	2102      	movs	r1, #2
 81062ac:	4618      	mov	r0, r3
 81062ae:	f001 fa41 	bl	8107734 <RCCEx_PLL3_Config>
 81062b2:	4603      	mov	r3, r0
 81062b4:	2b00      	cmp	r3, #0
 81062b6:	d001      	beq.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    {
      status=HAL_ERROR;
 81062b8:	2301      	movs	r3, #1
 81062ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	681b      	ldr	r3, [r3, #0]
 81062c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81062c4:	2b00      	cmp	r3, #0
 81062c6:	d035      	beq.n	8106334 <HAL_RCCEx_PeriphCLKConfig+0xe04>
  {

    switch(PeriphClkInit->RngClockSelection)
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81062ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81062d2:	d017      	beq.n	8106304 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 81062d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81062d8:	d811      	bhi.n	81062fe <HAL_RCCEx_PeriphCLKConfig+0xdce>
 81062da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81062de:	d013      	beq.n	8106308 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 81062e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81062e4:	d80b      	bhi.n	81062fe <HAL_RCCEx_PeriphCLKConfig+0xdce>
 81062e6:	2b00      	cmp	r3, #0
 81062e8:	d010      	beq.n	810630c <HAL_RCCEx_PeriphCLKConfig+0xddc>
 81062ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81062ee:	d106      	bne.n	81062fe <HAL_RCCEx_PeriphCLKConfig+0xdce>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81062f0:	4b0e      	ldr	r3, [pc, #56]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062f4:	4a0d      	ldr	r2, [pc, #52]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81062f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81062fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81062fc:	e007      	b.n	810630e <HAL_RCCEx_PeriphCLKConfig+0xdde>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81062fe:	2301      	movs	r3, #1
 8106300:	75fb      	strb	r3, [r7, #23]
      break;
 8106302:	e004      	b.n	810630e <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8106304:	bf00      	nop
 8106306:	e002      	b.n	810630e <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8106308:	bf00      	nop
 810630a:	e000      	b.n	810630e <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 810630c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810630e:	7dfb      	ldrb	r3, [r7, #23]
 8106310:	2b00      	cmp	r3, #0
 8106312:	d10d      	bne.n	8106330 <HAL_RCCEx_PeriphCLKConfig+0xe00>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106314:	4b05      	ldr	r3, [pc, #20]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8106316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106322:	4902      	ldr	r1, [pc, #8]	; (810632c <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8106324:	4313      	orrs	r3, r2
 8106326:	654b      	str	r3, [r1, #84]	; 0x54
 8106328:	e004      	b.n	8106334 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 810632a:	bf00      	nop
 810632c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106330:	7dfb      	ldrb	r3, [r7, #23]
 8106332:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	681b      	ldr	r3, [r3, #0]
 8106338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810633c:	2b00      	cmp	r3, #0
 810633e:	d008      	beq.n	8106352 <HAL_RCCEx_PeriphCLKConfig+0xe22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106340:	4b31      	ldr	r3, [pc, #196]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8106342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106344:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8106348:	687b      	ldr	r3, [r7, #4]
 810634a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810634c:	492e      	ldr	r1, [pc, #184]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810634e:	4313      	orrs	r3, r2
 8106350:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106352:	687b      	ldr	r3, [r7, #4]
 8106354:	681b      	ldr	r3, [r3, #0]
 8106356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810635a:	2b00      	cmp	r3, #0
 810635c:	d009      	beq.n	8106372 <HAL_RCCEx_PeriphCLKConfig+0xe42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810635e:	4b2a      	ldr	r3, [pc, #168]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8106360:	691b      	ldr	r3, [r3, #16]
 8106362:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8106366:	687b      	ldr	r3, [r7, #4]
 8106368:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810636c:	4926      	ldr	r1, [pc, #152]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810636e:	4313      	orrs	r3, r2
 8106370:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810637a:	2b00      	cmp	r3, #0
 810637c:	d008      	beq.n	8106390 <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810637e:	4b22      	ldr	r3, [pc, #136]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8106380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106382:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810638a:	491f      	ldr	r1, [pc, #124]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810638c:	4313      	orrs	r3, r2
 810638e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106390:	687b      	ldr	r3, [r7, #4]
 8106392:	681b      	ldr	r3, [r3, #0]
 8106394:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8106398:	2b00      	cmp	r3, #0
 810639a:	d00d      	beq.n	81063b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810639c:	4b1a      	ldr	r3, [pc, #104]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810639e:	691b      	ldr	r3, [r3, #16]
 81063a0:	4a19      	ldr	r2, [pc, #100]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81063a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81063a6:	6113      	str	r3, [r2, #16]
 81063a8:	4b17      	ldr	r3, [pc, #92]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81063aa:	691a      	ldr	r2, [r3, #16]
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81063b2:	4915      	ldr	r1, [pc, #84]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81063b4:	4313      	orrs	r3, r2
 81063b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	681b      	ldr	r3, [r3, #0]
 81063bc:	2b00      	cmp	r3, #0
 81063be:	da08      	bge.n	81063d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81063c0:	4b11      	ldr	r3, [pc, #68]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81063c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81063c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81063cc:	490e      	ldr	r1, [pc, #56]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81063ce:	4313      	orrs	r3, r2
 81063d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	681b      	ldr	r3, [r3, #0]
 81063d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81063da:	2b00      	cmp	r3, #0
 81063dc:	d009      	beq.n	81063f2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81063de:	4b0a      	ldr	r3, [pc, #40]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81063e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81063e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81063ec:	4906      	ldr	r1, [pc, #24]	; (8106408 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81063ee:	4313      	orrs	r3, r2
 81063f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81063f2:	7dbb      	ldrb	r3, [r7, #22]
 81063f4:	2b00      	cmp	r3, #0
 81063f6:	d101      	bne.n	81063fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    return HAL_OK;
 81063f8:	2300      	movs	r3, #0
 81063fa:	e000      	b.n	81063fe <HAL_RCCEx_PeriphCLKConfig+0xece>
  }
  return HAL_ERROR;
 81063fc:	2301      	movs	r3, #1
}
 81063fe:	4618      	mov	r0, r3
 8106400:	3718      	adds	r7, #24
 8106402:	46bd      	mov	sp, r7
 8106404:	bd80      	pop	{r7, pc}
 8106406:	bf00      	nop
 8106408:	58024400 	.word	0x58024400

0810640c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 810640c:	b580      	push	{r7, lr}
 810640e:	b090      	sub	sp, #64	; 0x40
 8106410:	af00      	add	r7, sp, #0
 8106412:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810641a:	f040 8095 	bne.w	8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 810641e:	4b97      	ldr	r3, [pc, #604]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106422:	f003 0307 	and.w	r3, r3, #7
 8106426:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810642a:	2b04      	cmp	r3, #4
 810642c:	f200 8088 	bhi.w	8106540 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8106430:	a201      	add	r2, pc, #4	; (adr r2, 8106438 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8106432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106436:	bf00      	nop
 8106438:	0810644d 	.word	0x0810644d
 810643c:	08106475 	.word	0x08106475
 8106440:	0810649d 	.word	0x0810649d
 8106444:	08106539 	.word	0x08106539
 8106448:	081064c5 	.word	0x081064c5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810644c:	4b8b      	ldr	r3, [pc, #556]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810644e:	681b      	ldr	r3, [r3, #0]
 8106450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106458:	d108      	bne.n	810646c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810645a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810645e:	4618      	mov	r0, r3
 8106460:	f000 ff64 	bl	810732c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8106464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106466:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106468:	f000 bc94 	b.w	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810646c:	2300      	movs	r3, #0
 810646e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106470:	f000 bc90 	b.w	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106474:	4b81      	ldr	r3, [pc, #516]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106476:	681b      	ldr	r3, [r3, #0]
 8106478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810647c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106480:	d108      	bne.n	8106494 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106482:	f107 0318 	add.w	r3, r7, #24
 8106486:	4618      	mov	r0, r3
 8106488:	f000 fca8 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810648c:	69bb      	ldr	r3, [r7, #24]
 810648e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106490:	f000 bc80 	b.w	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106494:	2300      	movs	r3, #0
 8106496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106498:	f000 bc7c 	b.w	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810649c:	4b77      	ldr	r3, [pc, #476]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81064a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81064a8:	d108      	bne.n	81064bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81064aa:	f107 030c 	add.w	r3, r7, #12
 81064ae:	4618      	mov	r0, r3
 81064b0:	f000 fde8 	bl	8107084 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81064b4:	68fb      	ldr	r3, [r7, #12]
 81064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81064b8:	f000 bc6c 	b.w	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81064bc:	2300      	movs	r3, #0
 81064be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81064c0:	f000 bc68 	b.w	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81064c4:	4b6d      	ldr	r3, [pc, #436]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81064c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81064c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81064cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81064ce:	4b6b      	ldr	r3, [pc, #428]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81064d0:	681b      	ldr	r3, [r3, #0]
 81064d2:	f003 0304 	and.w	r3, r3, #4
 81064d6:	2b04      	cmp	r3, #4
 81064d8:	d10c      	bne.n	81064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 81064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81064dc:	2b00      	cmp	r3, #0
 81064de:	d109      	bne.n	81064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81064e0:	4b66      	ldr	r3, [pc, #408]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81064e2:	681b      	ldr	r3, [r3, #0]
 81064e4:	08db      	lsrs	r3, r3, #3
 81064e6:	f003 0303 	and.w	r3, r3, #3
 81064ea:	4a65      	ldr	r2, [pc, #404]	; (8106680 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 81064ec:	fa22 f303 	lsr.w	r3, r2, r3
 81064f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81064f2:	e01f      	b.n	8106534 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81064f4:	4b61      	ldr	r3, [pc, #388]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81064f6:	681b      	ldr	r3, [r3, #0]
 81064f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81064fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106500:	d106      	bne.n	8106510 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8106502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106508:	d102      	bne.n	8106510 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810650a:	4b5e      	ldr	r3, [pc, #376]	; (8106684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 810650c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810650e:	e011      	b.n	8106534 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106510:	4b5a      	ldr	r3, [pc, #360]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106512:	681b      	ldr	r3, [r3, #0]
 8106514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810651c:	d106      	bne.n	810652c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 810651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106524:	d102      	bne.n	810652c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106526:	4b58      	ldr	r3, [pc, #352]	; (8106688 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8106528:	63fb      	str	r3, [r7, #60]	; 0x3c
 810652a:	e003      	b.n	8106534 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810652c:	2300      	movs	r3, #0
 810652e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106530:	f000 bc30 	b.w	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106534:	f000 bc2e 	b.w	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106538:	4b54      	ldr	r3, [pc, #336]	; (810668c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 810653a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810653c:	f000 bc2a 	b.w	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106540:	2300      	movs	r3, #0
 8106542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106544:	f000 bc26 	b.w	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810654e:	f040 809f 	bne.w	8106690 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8106552:	4b4a      	ldr	r3, [pc, #296]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106556:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810655a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 810655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810655e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106562:	d04d      	beq.n	8106600 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8106564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810656a:	f200 8084 	bhi.w	8106676 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106570:	2bc0      	cmp	r3, #192	; 0xc0
 8106572:	d07d      	beq.n	8106670 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8106574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106576:	2bc0      	cmp	r3, #192	; 0xc0
 8106578:	d87d      	bhi.n	8106676 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810657c:	2b80      	cmp	r3, #128	; 0x80
 810657e:	d02d      	beq.n	81065dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8106580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106582:	2b80      	cmp	r3, #128	; 0x80
 8106584:	d877      	bhi.n	8106676 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8106586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106588:	2b00      	cmp	r3, #0
 810658a:	d003      	beq.n	8106594 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 810658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810658e:	2b40      	cmp	r3, #64	; 0x40
 8106590:	d012      	beq.n	81065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8106592:	e070      	b.n	8106676 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106594:	4b39      	ldr	r3, [pc, #228]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106596:	681b      	ldr	r3, [r3, #0]
 8106598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810659c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81065a0:	d107      	bne.n	81065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81065a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81065a6:	4618      	mov	r0, r3
 81065a8:	f000 fec0 	bl	810732c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81065b0:	e3f0      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81065b2:	2300      	movs	r3, #0
 81065b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81065b6:	e3ed      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81065b8:	4b30      	ldr	r3, [pc, #192]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81065ba:	681b      	ldr	r3, [r3, #0]
 81065bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81065c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81065c4:	d107      	bne.n	81065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81065c6:	f107 0318 	add.w	r3, r7, #24
 81065ca:	4618      	mov	r0, r3
 81065cc:	f000 fc06 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81065d0:	69bb      	ldr	r3, [r7, #24]
 81065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81065d4:	e3de      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81065d6:	2300      	movs	r3, #0
 81065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81065da:	e3db      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81065dc:	4b27      	ldr	r3, [pc, #156]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81065de:	681b      	ldr	r3, [r3, #0]
 81065e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81065e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81065e8:	d107      	bne.n	81065fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81065ea:	f107 030c 	add.w	r3, r7, #12
 81065ee:	4618      	mov	r0, r3
 81065f0:	f000 fd48 	bl	8107084 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81065f4:	68fb      	ldr	r3, [r7, #12]
 81065f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81065f8:	e3cc      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81065fa:	2300      	movs	r3, #0
 81065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81065fe:	e3c9      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106600:	4b1e      	ldr	r3, [pc, #120]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106604:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106608:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810660a:	4b1c      	ldr	r3, [pc, #112]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	f003 0304 	and.w	r3, r3, #4
 8106612:	2b04      	cmp	r3, #4
 8106614:	d10c      	bne.n	8106630 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8106616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106618:	2b00      	cmp	r3, #0
 810661a:	d109      	bne.n	8106630 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810661c:	4b17      	ldr	r3, [pc, #92]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810661e:	681b      	ldr	r3, [r3, #0]
 8106620:	08db      	lsrs	r3, r3, #3
 8106622:	f003 0303 	and.w	r3, r3, #3
 8106626:	4a16      	ldr	r2, [pc, #88]	; (8106680 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8106628:	fa22 f303 	lsr.w	r3, r2, r3
 810662c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810662e:	e01e      	b.n	810666e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106630:	4b12      	ldr	r3, [pc, #72]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8106632:	681b      	ldr	r3, [r3, #0]
 8106634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810663c:	d106      	bne.n	810664c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 810663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106644:	d102      	bne.n	810664c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106646:	4b0f      	ldr	r3, [pc, #60]	; (8106684 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8106648:	63fb      	str	r3, [r7, #60]	; 0x3c
 810664a:	e010      	b.n	810666e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810664c:	4b0b      	ldr	r3, [pc, #44]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810664e:	681b      	ldr	r3, [r3, #0]
 8106650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106658:	d106      	bne.n	8106668 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 810665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810665c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106660:	d102      	bne.n	8106668 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106662:	4b09      	ldr	r3, [pc, #36]	; (8106688 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8106664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106666:	e002      	b.n	810666e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106668:	2300      	movs	r3, #0
 810666a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810666c:	e392      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 810666e:	e391      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106670:	4b06      	ldr	r3, [pc, #24]	; (810668c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8106672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106674:	e38e      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106676:	2300      	movs	r3, #0
 8106678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810667a:	e38b      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 810667c:	58024400 	.word	0x58024400
 8106680:	03d09000 	.word	0x03d09000
 8106684:	003d0900 	.word	0x003d0900
 8106688:	017d7840 	.word	0x017d7840
 810668c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106696:	f040 809c 	bne.w	81067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 810669a:	4b9d      	ldr	r3, [pc, #628]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810669c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810669e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 81066a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 81066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81066aa:	d054      	beq.n	8106756 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 81066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81066b2:	f200 808b 	bhi.w	81067cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 81066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81066bc:	f000 8083 	beq.w	81067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 81066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81066c6:	f200 8081 	bhi.w	81067cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 81066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81066d0:	d02f      	beq.n	8106732 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 81066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81066d8:	d878      	bhi.n	81067cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 81066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066dc:	2b00      	cmp	r3, #0
 81066de:	d004      	beq.n	81066ea <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 81066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81066e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81066e6:	d012      	beq.n	810670e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 81066e8:	e070      	b.n	81067cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81066ea:	4b89      	ldr	r3, [pc, #548]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81066ec:	681b      	ldr	r3, [r3, #0]
 81066ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81066f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81066f6:	d107      	bne.n	8106708 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81066f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81066fc:	4618      	mov	r0, r3
 81066fe:	f000 fe15 	bl	810732c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106704:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106706:	e345      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106708:	2300      	movs	r3, #0
 810670a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810670c:	e342      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810670e:	4b80      	ldr	r3, [pc, #512]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106710:	681b      	ldr	r3, [r3, #0]
 8106712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810671a:	d107      	bne.n	810672c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810671c:	f107 0318 	add.w	r3, r7, #24
 8106720:	4618      	mov	r0, r3
 8106722:	f000 fb5b 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106726:	69bb      	ldr	r3, [r7, #24]
 8106728:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810672a:	e333      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810672c:	2300      	movs	r3, #0
 810672e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106730:	e330      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106732:	4b77      	ldr	r3, [pc, #476]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106734:	681b      	ldr	r3, [r3, #0]
 8106736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810673a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810673e:	d107      	bne.n	8106750 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106740:	f107 030c 	add.w	r3, r7, #12
 8106744:	4618      	mov	r0, r3
 8106746:	f000 fc9d 	bl	8107084 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810674a:	68fb      	ldr	r3, [r7, #12]
 810674c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810674e:	e321      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106750:	2300      	movs	r3, #0
 8106752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106754:	e31e      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106756:	4b6e      	ldr	r3, [pc, #440]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810675a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810675e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106760:	4b6b      	ldr	r3, [pc, #428]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106762:	681b      	ldr	r3, [r3, #0]
 8106764:	f003 0304 	and.w	r3, r3, #4
 8106768:	2b04      	cmp	r3, #4
 810676a:	d10c      	bne.n	8106786 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 810676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810676e:	2b00      	cmp	r3, #0
 8106770:	d109      	bne.n	8106786 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106772:	4b67      	ldr	r3, [pc, #412]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106774:	681b      	ldr	r3, [r3, #0]
 8106776:	08db      	lsrs	r3, r3, #3
 8106778:	f003 0303 	and.w	r3, r3, #3
 810677c:	4a65      	ldr	r2, [pc, #404]	; (8106914 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 810677e:	fa22 f303 	lsr.w	r3, r2, r3
 8106782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106784:	e01e      	b.n	81067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106786:	4b62      	ldr	r3, [pc, #392]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106788:	681b      	ldr	r3, [r3, #0]
 810678a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810678e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106792:	d106      	bne.n	81067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8106794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810679a:	d102      	bne.n	81067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810679c:	4b5e      	ldr	r3, [pc, #376]	; (8106918 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 810679e:	63fb      	str	r3, [r7, #60]	; 0x3c
 81067a0:	e010      	b.n	81067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81067a2:	4b5b      	ldr	r3, [pc, #364]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81067a4:	681b      	ldr	r3, [r3, #0]
 81067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81067aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81067ae:	d106      	bne.n	81067be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 81067b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81067b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81067b6:	d102      	bne.n	81067be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81067b8:	4b58      	ldr	r3, [pc, #352]	; (810691c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 81067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 81067bc:	e002      	b.n	81067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81067be:	2300      	movs	r3, #0
 81067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81067c2:	e2e7      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81067c4:	e2e6      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81067c6:	4b56      	ldr	r3, [pc, #344]	; (8106920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 81067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81067ca:	e2e3      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 81067cc:	2300      	movs	r3, #0
 81067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81067d0:	e2e0      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81067d8:	f040 80a7 	bne.w	810692a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 81067dc:	4b4c      	ldr	r3, [pc, #304]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81067de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067e0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 81067e4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 81067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81067ec:	d055      	beq.n	810689a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 81067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81067f4:	f200 8096 	bhi.w	8106924 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 81067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81067fe:	f000 8084 	beq.w	810690a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8106802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106804:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106808:	f200 808c 	bhi.w	8106924 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 810680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810680e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106812:	d030      	beq.n	8106876 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8106814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810681a:	f200 8083 	bhi.w	8106924 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 810681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106820:	2b00      	cmp	r3, #0
 8106822:	d004      	beq.n	810682e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8106824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106826:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810682a:	d012      	beq.n	8106852 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 810682c:	e07a      	b.n	8106924 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810682e:	4b38      	ldr	r3, [pc, #224]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106830:	681b      	ldr	r3, [r3, #0]
 8106832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810683a:	d107      	bne.n	810684c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810683c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106840:	4618      	mov	r0, r3
 8106842:	f000 fd73 	bl	810732c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106848:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810684a:	e2a3      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810684c:	2300      	movs	r3, #0
 810684e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106850:	e2a0      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106852:	4b2f      	ldr	r3, [pc, #188]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106854:	681b      	ldr	r3, [r3, #0]
 8106856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810685a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810685e:	d107      	bne.n	8106870 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106860:	f107 0318 	add.w	r3, r7, #24
 8106864:	4618      	mov	r0, r3
 8106866:	f000 fab9 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810686a:	69bb      	ldr	r3, [r7, #24]
 810686c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 810686e:	e291      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106870:	2300      	movs	r3, #0
 8106872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106874:	e28e      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106876:	4b26      	ldr	r3, [pc, #152]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8106878:	681b      	ldr	r3, [r3, #0]
 810687a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810687e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106882:	d107      	bne.n	8106894 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106884:	f107 030c 	add.w	r3, r7, #12
 8106888:	4618      	mov	r0, r3
 810688a:	f000 fbfb 	bl	8107084 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810688e:	68fb      	ldr	r3, [r7, #12]
 8106890:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106892:	e27f      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106894:	2300      	movs	r3, #0
 8106896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106898:	e27c      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810689a:	4b1d      	ldr	r3, [pc, #116]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 810689c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810689e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81068a2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81068a4:	4b1a      	ldr	r3, [pc, #104]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81068a6:	681b      	ldr	r3, [r3, #0]
 81068a8:	f003 0304 	and.w	r3, r3, #4
 81068ac:	2b04      	cmp	r3, #4
 81068ae:	d10c      	bne.n	81068ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 81068b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81068b2:	2b00      	cmp	r3, #0
 81068b4:	d109      	bne.n	81068ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81068b6:	4b16      	ldr	r3, [pc, #88]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81068b8:	681b      	ldr	r3, [r3, #0]
 81068ba:	08db      	lsrs	r3, r3, #3
 81068bc:	f003 0303 	and.w	r3, r3, #3
 81068c0:	4a14      	ldr	r2, [pc, #80]	; (8106914 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 81068c2:	fa22 f303 	lsr.w	r3, r2, r3
 81068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81068c8:	e01e      	b.n	8106908 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81068ca:	4b11      	ldr	r3, [pc, #68]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81068cc:	681b      	ldr	r3, [r3, #0]
 81068ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81068d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81068d6:	d106      	bne.n	81068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 81068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81068da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81068de:	d102      	bne.n	81068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81068e0:	4b0d      	ldr	r3, [pc, #52]	; (8106918 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 81068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81068e4:	e010      	b.n	8106908 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81068e6:	4b0a      	ldr	r3, [pc, #40]	; (8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 81068e8:	681b      	ldr	r3, [r3, #0]
 81068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81068ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81068f2:	d106      	bne.n	8106902 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 81068f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81068f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81068fa:	d102      	bne.n	8106902 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81068fc:	4b07      	ldr	r3, [pc, #28]	; (810691c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 81068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106900:	e002      	b.n	8106908 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106902:	2300      	movs	r3, #0
 8106904:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106906:	e245      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106908:	e244      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810690a:	4b05      	ldr	r3, [pc, #20]	; (8106920 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 810690c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810690e:	e241      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106910:	58024400 	.word	0x58024400
 8106914:	03d09000 	.word	0x03d09000
 8106918:	003d0900 	.word	0x003d0900
 810691c:	017d7840 	.word	0x017d7840
 8106920:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8106924:	2300      	movs	r3, #0
 8106926:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106928:	e234      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106930:	f040 809c 	bne.w	8106a6c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8106934:	4b9b      	ldr	r3, [pc, #620]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106938:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 810693c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106944:	d054      	beq.n	81069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8106946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810694c:	f200 808b 	bhi.w	8106a66 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106952:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106956:	f000 8083 	beq.w	8106a60 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 810695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810695c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106960:	f200 8081 	bhi.w	8106a66 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810696a:	d02f      	beq.n	81069cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 810696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810696e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106972:	d878      	bhi.n	8106a66 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8106974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106976:	2b00      	cmp	r3, #0
 8106978:	d004      	beq.n	8106984 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 810697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106980:	d012      	beq.n	81069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8106982:	e070      	b.n	8106a66 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106984:	4b87      	ldr	r3, [pc, #540]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106986:	681b      	ldr	r3, [r3, #0]
 8106988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810698c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106990:	d107      	bne.n	81069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106996:	4618      	mov	r0, r3
 8106998:	f000 fcc8 	bl	810732c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810699e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81069a0:	e1f8      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81069a2:	2300      	movs	r3, #0
 81069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81069a6:	e1f5      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81069a8:	4b7e      	ldr	r3, [pc, #504]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81069aa:	681b      	ldr	r3, [r3, #0]
 81069ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81069b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81069b4:	d107      	bne.n	81069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81069b6:	f107 0318 	add.w	r3, r7, #24
 81069ba:	4618      	mov	r0, r3
 81069bc:	f000 fa0e 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81069c0:	69bb      	ldr	r3, [r7, #24]
 81069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81069c4:	e1e6      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81069c6:	2300      	movs	r3, #0
 81069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81069ca:	e1e3      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81069cc:	4b75      	ldr	r3, [pc, #468]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81069d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81069d8:	d107      	bne.n	81069ea <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81069da:	f107 030c 	add.w	r3, r7, #12
 81069de:	4618      	mov	r0, r3
 81069e0:	f000 fb50 	bl	8107084 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81069e4:	68fb      	ldr	r3, [r7, #12]
 81069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81069e8:	e1d4      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81069ea:	2300      	movs	r3, #0
 81069ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81069ee:	e1d1      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81069f0:	4b6c      	ldr	r3, [pc, #432]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81069f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81069f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81069f8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81069fa:	4b6a      	ldr	r3, [pc, #424]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 81069fc:	681b      	ldr	r3, [r3, #0]
 81069fe:	f003 0304 	and.w	r3, r3, #4
 8106a02:	2b04      	cmp	r3, #4
 8106a04:	d10c      	bne.n	8106a20 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8106a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a08:	2b00      	cmp	r3, #0
 8106a0a:	d109      	bne.n	8106a20 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106a0c:	4b65      	ldr	r3, [pc, #404]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106a0e:	681b      	ldr	r3, [r3, #0]
 8106a10:	08db      	lsrs	r3, r3, #3
 8106a12:	f003 0303 	and.w	r3, r3, #3
 8106a16:	4a64      	ldr	r2, [pc, #400]	; (8106ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8106a18:	fa22 f303 	lsr.w	r3, r2, r3
 8106a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a1e:	e01e      	b.n	8106a5e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106a20:	4b60      	ldr	r3, [pc, #384]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106a2c:	d106      	bne.n	8106a3c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8106a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106a34:	d102      	bne.n	8106a3c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106a36:	4b5d      	ldr	r3, [pc, #372]	; (8106bac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8106a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a3a:	e010      	b.n	8106a5e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106a3c:	4b59      	ldr	r3, [pc, #356]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106a3e:	681b      	ldr	r3, [r3, #0]
 8106a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106a48:	d106      	bne.n	8106a58 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8106a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106a50:	d102      	bne.n	8106a58 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106a52:	4b57      	ldr	r3, [pc, #348]	; (8106bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8106a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a56:	e002      	b.n	8106a5e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106a58:	2300      	movs	r3, #0
 8106a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106a5c:	e19a      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106a5e:	e199      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106a60:	4b54      	ldr	r3, [pc, #336]	; (8106bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a64:	e196      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106a66:	2300      	movs	r3, #0
 8106a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a6a:	e193      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8106a72:	d173      	bne.n	8106b5c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8106a74:	4b4b      	ldr	r3, [pc, #300]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8106a7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106a84:	d02f      	beq.n	8106ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8106a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106a8c:	d863      	bhi.n	8106b56 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8106a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106a90:	2b00      	cmp	r3, #0
 8106a92:	d004      	beq.n	8106a9e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8106a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106a9a:	d012      	beq.n	8106ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8106a9c:	e05b      	b.n	8106b56 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106a9e:	4b41      	ldr	r3, [pc, #260]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106aa0:	681b      	ldr	r3, [r3, #0]
 8106aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106aaa:	d107      	bne.n	8106abc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106aac:	f107 0318 	add.w	r3, r7, #24
 8106ab0:	4618      	mov	r0, r3
 8106ab2:	f000 f993 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106ab6:	69bb      	ldr	r3, [r7, #24]
 8106ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106aba:	e16b      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106abc:	2300      	movs	r3, #0
 8106abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ac0:	e168      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106ac2:	4b38      	ldr	r3, [pc, #224]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106ac4:	681b      	ldr	r3, [r3, #0]
 8106ac6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106ace:	d107      	bne.n	8106ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106ad0:	f107 030c 	add.w	r3, r7, #12
 8106ad4:	4618      	mov	r0, r3
 8106ad6:	f000 fad5 	bl	8107084 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8106ada:	697b      	ldr	r3, [r7, #20]
 8106adc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106ade:	e159      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106ae0:	2300      	movs	r3, #0
 8106ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ae4:	e156      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106ae6:	4b2f      	ldr	r3, [pc, #188]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106aea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106aee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106af0:	4b2c      	ldr	r3, [pc, #176]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106af2:	681b      	ldr	r3, [r3, #0]
 8106af4:	f003 0304 	and.w	r3, r3, #4
 8106af8:	2b04      	cmp	r3, #4
 8106afa:	d10c      	bne.n	8106b16 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8106afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106afe:	2b00      	cmp	r3, #0
 8106b00:	d109      	bne.n	8106b16 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106b02:	4b28      	ldr	r3, [pc, #160]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106b04:	681b      	ldr	r3, [r3, #0]
 8106b06:	08db      	lsrs	r3, r3, #3
 8106b08:	f003 0303 	and.w	r3, r3, #3
 8106b0c:	4a26      	ldr	r2, [pc, #152]	; (8106ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8106b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8106b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106b14:	e01e      	b.n	8106b54 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106b16:	4b23      	ldr	r3, [pc, #140]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106b18:	681b      	ldr	r3, [r3, #0]
 8106b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106b22:	d106      	bne.n	8106b32 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8106b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106b2a:	d102      	bne.n	8106b32 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106b2c:	4b1f      	ldr	r3, [pc, #124]	; (8106bac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8106b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106b30:	e010      	b.n	8106b54 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106b32:	4b1c      	ldr	r3, [pc, #112]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106b34:	681b      	ldr	r3, [r3, #0]
 8106b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106b3e:	d106      	bne.n	8106b4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8106b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b46:	d102      	bne.n	8106b4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106b48:	4b19      	ldr	r3, [pc, #100]	; (8106bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8106b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106b4c:	e002      	b.n	8106b54 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106b4e:	2300      	movs	r3, #0
 8106b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106b52:	e11f      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106b54:	e11e      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106b56:	2300      	movs	r3, #0
 8106b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b5a:	e11b      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106b62:	d13e      	bne.n	8106be2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8106b64:	4b0f      	ldr	r3, [pc, #60]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106b6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106b70:	2b00      	cmp	r3, #0
 8106b72:	d004      	beq.n	8106b7e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8106b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106b7a:	d01d      	beq.n	8106bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8106b7c:	e02e      	b.n	8106bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106b7e:	4b09      	ldr	r3, [pc, #36]	; (8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8106b80:	681b      	ldr	r3, [r3, #0]
 8106b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106b86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106b8a:	d107      	bne.n	8106b9c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106b90:	4618      	mov	r0, r3
 8106b92:	f000 fbcb 	bl	810732c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106b9a:	e0fb      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106b9c:	2300      	movs	r3, #0
 8106b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ba0:	e0f8      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8106ba2:	bf00      	nop
 8106ba4:	58024400 	.word	0x58024400
 8106ba8:	03d09000 	.word	0x03d09000
 8106bac:	003d0900 	.word	0x003d0900
 8106bb0:	017d7840 	.word	0x017d7840
 8106bb4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106bb8:	4b79      	ldr	r3, [pc, #484]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106bba:	681b      	ldr	r3, [r3, #0]
 8106bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106bc4:	d107      	bne.n	8106bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106bc6:	f107 0318 	add.w	r3, r7, #24
 8106bca:	4618      	mov	r0, r3
 8106bcc:	f000 f906 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106bd0:	6a3b      	ldr	r3, [r7, #32]
 8106bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106bd4:	e0de      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106bd6:	2300      	movs	r3, #0
 8106bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106bda:	e0db      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8106bdc:	2300      	movs	r3, #0
 8106bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106be0:	e0d8      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106be8:	f040 8085 	bne.w	8106cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8106bec:	4b6c      	ldr	r3, [pc, #432]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106bf0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8106bf4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106bfc:	d06b      	beq.n	8106cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8106bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106c04:	d874      	bhi.n	8106cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8106c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106c0c:	d056      	beq.n	8106cbc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8106c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106c14:	d86c      	bhi.n	8106cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8106c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106c1c:	d03b      	beq.n	8106c96 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8106c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106c24:	d864      	bhi.n	8106cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8106c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106c2c:	d021      	beq.n	8106c72 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8106c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106c34:	d85c      	bhi.n	8106cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8106c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c38:	2b00      	cmp	r3, #0
 8106c3a:	d004      	beq.n	8106c46 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8106c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106c42:	d004      	beq.n	8106c4e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8106c44:	e054      	b.n	8106cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8106c46:	f000 f8b3 	bl	8106db0 <HAL_RCCEx_GetD3PCLK1Freq>
 8106c4a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8106c4c:	e0a2      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106c4e:	4b54      	ldr	r3, [pc, #336]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106c50:	681b      	ldr	r3, [r3, #0]
 8106c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106c5a:	d107      	bne.n	8106c6c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106c5c:	f107 0318 	add.w	r3, r7, #24
 8106c60:	4618      	mov	r0, r3
 8106c62:	f000 f8bb 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106c66:	69fb      	ldr	r3, [r7, #28]
 8106c68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106c6a:	e093      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106c6c:	2300      	movs	r3, #0
 8106c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c70:	e090      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106c72:	4b4b      	ldr	r3, [pc, #300]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106c74:	681b      	ldr	r3, [r3, #0]
 8106c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106c7e:	d107      	bne.n	8106c90 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106c80:	f107 030c 	add.w	r3, r7, #12
 8106c84:	4618      	mov	r0, r3
 8106c86:	f000 f9fd 	bl	8107084 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8106c8a:	693b      	ldr	r3, [r7, #16]
 8106c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106c8e:	e081      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106c90:	2300      	movs	r3, #0
 8106c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c94:	e07e      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106c96:	4b42      	ldr	r3, [pc, #264]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106c98:	681b      	ldr	r3, [r3, #0]
 8106c9a:	f003 0304 	and.w	r3, r3, #4
 8106c9e:	2b04      	cmp	r3, #4
 8106ca0:	d109      	bne.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106ca2:	4b3f      	ldr	r3, [pc, #252]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106ca4:	681b      	ldr	r3, [r3, #0]
 8106ca6:	08db      	lsrs	r3, r3, #3
 8106ca8:	f003 0303 	and.w	r3, r3, #3
 8106cac:	4a3d      	ldr	r2, [pc, #244]	; (8106da4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8106cae:	fa22 f303 	lsr.w	r3, r2, r3
 8106cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106cb4:	e06e      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106cb6:	2300      	movs	r3, #0
 8106cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cba:	e06b      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106cbc:	4b38      	ldr	r3, [pc, #224]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106cbe:	681b      	ldr	r3, [r3, #0]
 8106cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106cc8:	d102      	bne.n	8106cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8106cca:	4b37      	ldr	r3, [pc, #220]	; (8106da8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8106ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106cce:	e061      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8106cd0:	2300      	movs	r3, #0
 8106cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cd4:	e05e      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106cd6:	4b32      	ldr	r3, [pc, #200]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106cd8:	681b      	ldr	r3, [r3, #0]
 8106cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106ce2:	d102      	bne.n	8106cea <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8106ce4:	4b31      	ldr	r3, [pc, #196]	; (8106dac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8106ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106ce8:	e054      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106cea:	2300      	movs	r3, #0
 8106cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cee:	e051      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8106cf0:	2300      	movs	r3, #0
 8106cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cf4:	e04e      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106cfc:	d148      	bne.n	8106d90 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8106cfe:	4b28      	ldr	r3, [pc, #160]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106d02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106d06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106d0e:	d02a      	beq.n	8106d66 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8106d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106d16:	d838      	bhi.n	8106d8a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8106d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d1a:	2b00      	cmp	r3, #0
 8106d1c:	d004      	beq.n	8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8106d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106d24:	d00d      	beq.n	8106d42 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8106d26:	e030      	b.n	8106d8a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106d28:	4b1d      	ldr	r3, [pc, #116]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106d2a:	681b      	ldr	r3, [r3, #0]
 8106d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106d34:	d102      	bne.n	8106d3c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8106d36:	4b1d      	ldr	r3, [pc, #116]	; (8106dac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8106d38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106d3a:	e02b      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106d3c:	2300      	movs	r3, #0
 8106d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d40:	e028      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106d42:	4b17      	ldr	r3, [pc, #92]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106d44:	681b      	ldr	r3, [r3, #0]
 8106d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106d4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106d4e:	d107      	bne.n	8106d60 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106d54:	4618      	mov	r0, r3
 8106d56:	f000 fae9 	bl	810732c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106d5e:	e019      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106d60:	2300      	movs	r3, #0
 8106d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d64:	e016      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106d66:	4b0e      	ldr	r3, [pc, #56]	; (8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106d68:	681b      	ldr	r3, [r3, #0]
 8106d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106d72:	d107      	bne.n	8106d84 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106d74:	f107 0318 	add.w	r3, r7, #24
 8106d78:	4618      	mov	r0, r3
 8106d7a:	f000 f82f 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106d7e:	69fb      	ldr	r3, [r7, #28]
 8106d80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106d82:	e007      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8106d84:	2300      	movs	r3, #0
 8106d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d88:	e004      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8106d8a:	2300      	movs	r3, #0
 8106d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d8e:	e001      	b.n	8106d94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8106d90:	2300      	movs	r3, #0
 8106d92:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8106d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8106d96:	4618      	mov	r0, r3
 8106d98:	3740      	adds	r7, #64	; 0x40
 8106d9a:	46bd      	mov	sp, r7
 8106d9c:	bd80      	pop	{r7, pc}
 8106d9e:	bf00      	nop
 8106da0:	58024400 	.word	0x58024400
 8106da4:	03d09000 	.word	0x03d09000
 8106da8:	003d0900 	.word	0x003d0900
 8106dac:	017d7840 	.word	0x017d7840

08106db0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106db0:	b580      	push	{r7, lr}
 8106db2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106db4:	f7fe fb1c 	bl	81053f0 <HAL_RCC_GetHCLKFreq>
 8106db8:	4602      	mov	r2, r0
 8106dba:	4b06      	ldr	r3, [pc, #24]	; (8106dd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106dbc:	6a1b      	ldr	r3, [r3, #32]
 8106dbe:	091b      	lsrs	r3, r3, #4
 8106dc0:	f003 0307 	and.w	r3, r3, #7
 8106dc4:	4904      	ldr	r1, [pc, #16]	; (8106dd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106dc6:	5ccb      	ldrb	r3, [r1, r3]
 8106dc8:	f003 031f 	and.w	r3, r3, #31
 8106dcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106dd0:	4618      	mov	r0, r3
 8106dd2:	bd80      	pop	{r7, pc}
 8106dd4:	58024400 	.word	0x58024400
 8106dd8:	0810fcfc 	.word	0x0810fcfc

08106ddc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106ddc:	b480      	push	{r7}
 8106dde:	b089      	sub	sp, #36	; 0x24
 8106de0:	af00      	add	r7, sp, #0
 8106de2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106de4:	4ba1      	ldr	r3, [pc, #644]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106de8:	f003 0303 	and.w	r3, r3, #3
 8106dec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106dee:	4b9f      	ldr	r3, [pc, #636]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106df2:	0b1b      	lsrs	r3, r3, #12
 8106df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106df8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106dfa:	4b9c      	ldr	r3, [pc, #624]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106dfe:	091b      	lsrs	r3, r3, #4
 8106e00:	f003 0301 	and.w	r3, r3, #1
 8106e04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8106e06:	4b99      	ldr	r3, [pc, #612]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e0a:	08db      	lsrs	r3, r3, #3
 8106e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106e10:	693a      	ldr	r2, [r7, #16]
 8106e12:	fb02 f303 	mul.w	r3, r2, r3
 8106e16:	ee07 3a90 	vmov	s15, r3
 8106e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106e22:	697b      	ldr	r3, [r7, #20]
 8106e24:	2b00      	cmp	r3, #0
 8106e26:	f000 8111 	beq.w	810704c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8106e2a:	69bb      	ldr	r3, [r7, #24]
 8106e2c:	2b02      	cmp	r3, #2
 8106e2e:	f000 8083 	beq.w	8106f38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8106e32:	69bb      	ldr	r3, [r7, #24]
 8106e34:	2b02      	cmp	r3, #2
 8106e36:	f200 80a1 	bhi.w	8106f7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8106e3a:	69bb      	ldr	r3, [r7, #24]
 8106e3c:	2b00      	cmp	r3, #0
 8106e3e:	d003      	beq.n	8106e48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106e40:	69bb      	ldr	r3, [r7, #24]
 8106e42:	2b01      	cmp	r3, #1
 8106e44:	d056      	beq.n	8106ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8106e46:	e099      	b.n	8106f7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106e48:	4b88      	ldr	r3, [pc, #544]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106e4a:	681b      	ldr	r3, [r3, #0]
 8106e4c:	f003 0320 	and.w	r3, r3, #32
 8106e50:	2b00      	cmp	r3, #0
 8106e52:	d02d      	beq.n	8106eb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106e54:	4b85      	ldr	r3, [pc, #532]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106e56:	681b      	ldr	r3, [r3, #0]
 8106e58:	08db      	lsrs	r3, r3, #3
 8106e5a:	f003 0303 	and.w	r3, r3, #3
 8106e5e:	4a84      	ldr	r2, [pc, #528]	; (8107070 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8106e60:	fa22 f303 	lsr.w	r3, r2, r3
 8106e64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106e66:	68bb      	ldr	r3, [r7, #8]
 8106e68:	ee07 3a90 	vmov	s15, r3
 8106e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e70:	697b      	ldr	r3, [r7, #20]
 8106e72:	ee07 3a90 	vmov	s15, r3
 8106e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e7e:	4b7b      	ldr	r3, [pc, #492]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e86:	ee07 3a90 	vmov	s15, r3
 8106e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8106eae:	e087      	b.n	8106fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106eb0:	697b      	ldr	r3, [r7, #20]
 8106eb2:	ee07 3a90 	vmov	s15, r3
 8106eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106eba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107078 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8106ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ec2:	4b6a      	ldr	r3, [pc, #424]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106eca:	ee07 3a90 	vmov	s15, r3
 8106ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8106ed6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106eee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106ef2:	e065      	b.n	8106fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106ef4:	697b      	ldr	r3, [r7, #20]
 8106ef6:	ee07 3a90 	vmov	s15, r3
 8106efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106efe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810707c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106f06:	4b59      	ldr	r3, [pc, #356]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106f0e:	ee07 3a90 	vmov	s15, r3
 8106f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8106f1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106f32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106f36:	e043      	b.n	8106fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106f38:	697b      	ldr	r3, [r7, #20]
 8106f3a:	ee07 3a90 	vmov	s15, r3
 8106f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8106f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106f4a:	4b48      	ldr	r3, [pc, #288]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106f52:	ee07 3a90 	vmov	s15, r3
 8106f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8106f5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106f76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106f7a:	e021      	b.n	8106fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106f7c:	697b      	ldr	r3, [r7, #20]
 8106f7e:	ee07 3a90 	vmov	s15, r3
 8106f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810707c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106f8e:	4b37      	ldr	r3, [pc, #220]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106f96:	ee07 3a90 	vmov	s15, r3
 8106f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106fa2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106fba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106fbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106fc0:	4b2a      	ldr	r3, [pc, #168]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106fc4:	0a5b      	lsrs	r3, r3, #9
 8106fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106fca:	ee07 3a90 	vmov	s15, r3
 8106fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8106fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106fe6:	ee17 2a90 	vmov	r2, s15
 8106fea:	687b      	ldr	r3, [r7, #4]
 8106fec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106fee:	4b1f      	ldr	r3, [pc, #124]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106ff2:	0c1b      	lsrs	r3, r3, #16
 8106ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106ff8:	ee07 3a90 	vmov	s15, r3
 8106ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107004:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107008:	edd7 6a07 	vldr	s13, [r7, #28]
 810700c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107014:	ee17 2a90 	vmov	r2, s15
 8107018:	687b      	ldr	r3, [r7, #4]
 810701a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810701c:	4b13      	ldr	r3, [pc, #76]	; (810706c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107020:	0e1b      	lsrs	r3, r3, #24
 8107022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107026:	ee07 3a90 	vmov	s15, r3
 810702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810702e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107032:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107036:	edd7 6a07 	vldr	s13, [r7, #28]
 810703a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810703e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107042:	ee17 2a90 	vmov	r2, s15
 8107046:	687b      	ldr	r3, [r7, #4]
 8107048:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810704a:	e008      	b.n	810705e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	2200      	movs	r2, #0
 8107050:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107052:	687b      	ldr	r3, [r7, #4]
 8107054:	2200      	movs	r2, #0
 8107056:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	2200      	movs	r2, #0
 810705c:	609a      	str	r2, [r3, #8]
}
 810705e:	bf00      	nop
 8107060:	3724      	adds	r7, #36	; 0x24
 8107062:	46bd      	mov	sp, r7
 8107064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107068:	4770      	bx	lr
 810706a:	bf00      	nop
 810706c:	58024400 	.word	0x58024400
 8107070:	03d09000 	.word	0x03d09000
 8107074:	46000000 	.word	0x46000000
 8107078:	4c742400 	.word	0x4c742400
 810707c:	4a742400 	.word	0x4a742400
 8107080:	4bbebc20 	.word	0x4bbebc20

08107084 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8107084:	b480      	push	{r7}
 8107086:	b089      	sub	sp, #36	; 0x24
 8107088:	af00      	add	r7, sp, #0
 810708a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810708c:	4ba1      	ldr	r3, [pc, #644]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107090:	f003 0303 	and.w	r3, r3, #3
 8107094:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8107096:	4b9f      	ldr	r3, [pc, #636]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810709a:	0d1b      	lsrs	r3, r3, #20
 810709c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81070a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81070a2:	4b9c      	ldr	r3, [pc, #624]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81070a6:	0a1b      	lsrs	r3, r3, #8
 81070a8:	f003 0301 	and.w	r3, r3, #1
 81070ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81070ae:	4b99      	ldr	r3, [pc, #612]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81070b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81070b2:	08db      	lsrs	r3, r3, #3
 81070b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81070b8:	693a      	ldr	r2, [r7, #16]
 81070ba:	fb02 f303 	mul.w	r3, r2, r3
 81070be:	ee07 3a90 	vmov	s15, r3
 81070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81070c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81070ca:	697b      	ldr	r3, [r7, #20]
 81070cc:	2b00      	cmp	r3, #0
 81070ce:	f000 8111 	beq.w	81072f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81070d2:	69bb      	ldr	r3, [r7, #24]
 81070d4:	2b02      	cmp	r3, #2
 81070d6:	f000 8083 	beq.w	81071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81070da:	69bb      	ldr	r3, [r7, #24]
 81070dc:	2b02      	cmp	r3, #2
 81070de:	f200 80a1 	bhi.w	8107224 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81070e2:	69bb      	ldr	r3, [r7, #24]
 81070e4:	2b00      	cmp	r3, #0
 81070e6:	d003      	beq.n	81070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81070e8:	69bb      	ldr	r3, [r7, #24]
 81070ea:	2b01      	cmp	r3, #1
 81070ec:	d056      	beq.n	810719c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81070ee:	e099      	b.n	8107224 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81070f0:	4b88      	ldr	r3, [pc, #544]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81070f2:	681b      	ldr	r3, [r3, #0]
 81070f4:	f003 0320 	and.w	r3, r3, #32
 81070f8:	2b00      	cmp	r3, #0
 81070fa:	d02d      	beq.n	8107158 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81070fc:	4b85      	ldr	r3, [pc, #532]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81070fe:	681b      	ldr	r3, [r3, #0]
 8107100:	08db      	lsrs	r3, r3, #3
 8107102:	f003 0303 	and.w	r3, r3, #3
 8107106:	4a84      	ldr	r2, [pc, #528]	; (8107318 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107108:	fa22 f303 	lsr.w	r3, r2, r3
 810710c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810710e:	68bb      	ldr	r3, [r7, #8]
 8107110:	ee07 3a90 	vmov	s15, r3
 8107114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107118:	697b      	ldr	r3, [r7, #20]
 810711a:	ee07 3a90 	vmov	s15, r3
 810711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107126:	4b7b      	ldr	r3, [pc, #492]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810712a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810712e:	ee07 3a90 	vmov	s15, r3
 8107132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107136:	ed97 6a03 	vldr	s12, [r7, #12]
 810713a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810731c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810713e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810714a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107152:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8107156:	e087      	b.n	8107268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107158:	697b      	ldr	r3, [r7, #20]
 810715a:	ee07 3a90 	vmov	s15, r3
 810715e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107162:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107320 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8107166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810716a:	4b6a      	ldr	r3, [pc, #424]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810716e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107172:	ee07 3a90 	vmov	s15, r3
 8107176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810717a:	ed97 6a03 	vldr	s12, [r7, #12]
 810717e:	eddf 5a67 	vldr	s11, [pc, #412]	; 810731c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810718a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810718e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107196:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810719a:	e065      	b.n	8107268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810719c:	697b      	ldr	r3, [r7, #20]
 810719e:	ee07 3a90 	vmov	s15, r3
 81071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107324 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81071aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81071ae:	4b59      	ldr	r3, [pc, #356]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81071b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81071b6:	ee07 3a90 	vmov	s15, r3
 81071ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81071be:	ed97 6a03 	vldr	s12, [r7, #12]
 81071c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 810731c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81071c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81071ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81071ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81071d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81071d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81071da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81071de:	e043      	b.n	8107268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81071e0:	697b      	ldr	r3, [r7, #20]
 81071e2:	ee07 3a90 	vmov	s15, r3
 81071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81071f2:	4b48      	ldr	r3, [pc, #288]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81071fa:	ee07 3a90 	vmov	s15, r3
 81071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107202:	ed97 6a03 	vldr	s12, [r7, #12]
 8107206:	eddf 5a45 	vldr	s11, [pc, #276]	; 810731c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810720a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810720e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810721e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107222:	e021      	b.n	8107268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107224:	697b      	ldr	r3, [r7, #20]
 8107226:	ee07 3a90 	vmov	s15, r3
 810722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810722e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107324 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107236:	4b37      	ldr	r3, [pc, #220]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810723a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810723e:	ee07 3a90 	vmov	s15, r3
 8107242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107246:	ed97 6a03 	vldr	s12, [r7, #12]
 810724a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810731c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810724e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810725a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810725e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107266:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8107268:	4b2a      	ldr	r3, [pc, #168]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810726c:	0a5b      	lsrs	r3, r3, #9
 810726e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107272:	ee07 3a90 	vmov	s15, r3
 8107276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810727a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810727e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107282:	edd7 6a07 	vldr	s13, [r7, #28]
 8107286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810728a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810728e:	ee17 2a90 	vmov	r2, s15
 8107292:	687b      	ldr	r3, [r7, #4]
 8107294:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8107296:	4b1f      	ldr	r3, [pc, #124]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810729a:	0c1b      	lsrs	r3, r3, #16
 810729c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81072a0:	ee07 3a90 	vmov	s15, r3
 81072a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81072a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81072ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 81072b0:	edd7 6a07 	vldr	s13, [r7, #28]
 81072b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81072b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81072bc:	ee17 2a90 	vmov	r2, s15
 81072c0:	687b      	ldr	r3, [r7, #4]
 81072c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81072c4:	4b13      	ldr	r3, [pc, #76]	; (8107314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81072c8:	0e1b      	lsrs	r3, r3, #24
 81072ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81072ce:	ee07 3a90 	vmov	s15, r3
 81072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81072d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81072da:	ee37 7a87 	vadd.f32	s14, s15, s14
 81072de:	edd7 6a07 	vldr	s13, [r7, #28]
 81072e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81072e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81072ea:	ee17 2a90 	vmov	r2, s15
 81072ee:	687b      	ldr	r3, [r7, #4]
 81072f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81072f2:	e008      	b.n	8107306 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81072f4:	687b      	ldr	r3, [r7, #4]
 81072f6:	2200      	movs	r2, #0
 81072f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81072fa:	687b      	ldr	r3, [r7, #4]
 81072fc:	2200      	movs	r2, #0
 81072fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107300:	687b      	ldr	r3, [r7, #4]
 8107302:	2200      	movs	r2, #0
 8107304:	609a      	str	r2, [r3, #8]
}
 8107306:	bf00      	nop
 8107308:	3724      	adds	r7, #36	; 0x24
 810730a:	46bd      	mov	sp, r7
 810730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107310:	4770      	bx	lr
 8107312:	bf00      	nop
 8107314:	58024400 	.word	0x58024400
 8107318:	03d09000 	.word	0x03d09000
 810731c:	46000000 	.word	0x46000000
 8107320:	4c742400 	.word	0x4c742400
 8107324:	4a742400 	.word	0x4a742400
 8107328:	4bbebc20 	.word	0x4bbebc20

0810732c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 810732c:	b480      	push	{r7}
 810732e:	b089      	sub	sp, #36	; 0x24
 8107330:	af00      	add	r7, sp, #0
 8107332:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107334:	4ba0      	ldr	r3, [pc, #640]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107338:	f003 0303 	and.w	r3, r3, #3
 810733c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 810733e:	4b9e      	ldr	r3, [pc, #632]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107342:	091b      	lsrs	r3, r3, #4
 8107344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107348:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810734a:	4b9b      	ldr	r3, [pc, #620]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810734e:	f003 0301 	and.w	r3, r3, #1
 8107352:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8107354:	4b98      	ldr	r3, [pc, #608]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107358:	08db      	lsrs	r3, r3, #3
 810735a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810735e:	693a      	ldr	r2, [r7, #16]
 8107360:	fb02 f303 	mul.w	r3, r2, r3
 8107364:	ee07 3a90 	vmov	s15, r3
 8107368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810736c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8107370:	697b      	ldr	r3, [r7, #20]
 8107372:	2b00      	cmp	r3, #0
 8107374:	f000 8111 	beq.w	810759a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8107378:	69bb      	ldr	r3, [r7, #24]
 810737a:	2b02      	cmp	r3, #2
 810737c:	f000 8083 	beq.w	8107486 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8107380:	69bb      	ldr	r3, [r7, #24]
 8107382:	2b02      	cmp	r3, #2
 8107384:	f200 80a1 	bhi.w	81074ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8107388:	69bb      	ldr	r3, [r7, #24]
 810738a:	2b00      	cmp	r3, #0
 810738c:	d003      	beq.n	8107396 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810738e:	69bb      	ldr	r3, [r7, #24]
 8107390:	2b01      	cmp	r3, #1
 8107392:	d056      	beq.n	8107442 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8107394:	e099      	b.n	81074ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107396:	4b88      	ldr	r3, [pc, #544]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107398:	681b      	ldr	r3, [r3, #0]
 810739a:	f003 0320 	and.w	r3, r3, #32
 810739e:	2b00      	cmp	r3, #0
 81073a0:	d02d      	beq.n	81073fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81073a2:	4b85      	ldr	r3, [pc, #532]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81073a4:	681b      	ldr	r3, [r3, #0]
 81073a6:	08db      	lsrs	r3, r3, #3
 81073a8:	f003 0303 	and.w	r3, r3, #3
 81073ac:	4a83      	ldr	r2, [pc, #524]	; (81075bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81073ae:	fa22 f303 	lsr.w	r3, r2, r3
 81073b2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81073b4:	68bb      	ldr	r3, [r7, #8]
 81073b6:	ee07 3a90 	vmov	s15, r3
 81073ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81073be:	697b      	ldr	r3, [r7, #20]
 81073c0:	ee07 3a90 	vmov	s15, r3
 81073c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81073cc:	4b7a      	ldr	r3, [pc, #488]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81073ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81073d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81073d4:	ee07 3a90 	vmov	s15, r3
 81073d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81073dc:	ed97 6a03 	vldr	s12, [r7, #12]
 81073e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 81075c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81073e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81073e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81073ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81073f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81073f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81073f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81073fc:	e087      	b.n	810750e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81073fe:	697b      	ldr	r3, [r7, #20]
 8107400:	ee07 3a90 	vmov	s15, r3
 8107404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107408:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81075c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810740c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107410:	4b69      	ldr	r3, [pc, #420]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107418:	ee07 3a90 	vmov	s15, r3
 810741c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107420:	ed97 6a03 	vldr	s12, [r7, #12]
 8107424:	eddf 5a66 	vldr	s11, [pc, #408]	; 81075c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810742c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107438:	ee67 7a27 	vmul.f32	s15, s14, s15
 810743c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107440:	e065      	b.n	810750e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107442:	697b      	ldr	r3, [r7, #20]
 8107444:	ee07 3a90 	vmov	s15, r3
 8107448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810744c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81075c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107454:	4b58      	ldr	r3, [pc, #352]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810745c:	ee07 3a90 	vmov	s15, r3
 8107460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107464:	ed97 6a03 	vldr	s12, [r7, #12]
 8107468:	eddf 5a55 	vldr	s11, [pc, #340]	; 81075c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810746c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810747c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107480:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107484:	e043      	b.n	810750e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107486:	697b      	ldr	r3, [r7, #20]
 8107488:	ee07 3a90 	vmov	s15, r3
 810748c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107490:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81075cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8107494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107498:	4b47      	ldr	r3, [pc, #284]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810749c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81074a0:	ee07 3a90 	vmov	s15, r3
 81074a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074a8:	ed97 6a03 	vldr	s12, [r7, #12]
 81074ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 81075c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81074b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81074b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81074bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81074c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81074c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81074c8:	e021      	b.n	810750e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81074ca:	697b      	ldr	r3, [r7, #20]
 81074cc:	ee07 3a90 	vmov	s15, r3
 81074d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 81075c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81074d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81074dc:	4b36      	ldr	r3, [pc, #216]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81074de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81074e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81074e4:	ee07 3a90 	vmov	s15, r3
 81074e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074ec:	ed97 6a03 	vldr	s12, [r7, #12]
 81074f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 81075c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81074f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81074fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107508:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810750c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 810750e:	4b2a      	ldr	r3, [pc, #168]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107512:	0a5b      	lsrs	r3, r3, #9
 8107514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107518:	ee07 3a90 	vmov	s15, r3
 810751c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107524:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107528:	edd7 6a07 	vldr	s13, [r7, #28]
 810752c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107534:	ee17 2a90 	vmov	r2, s15
 8107538:	687b      	ldr	r3, [r7, #4]
 810753a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 810753c:	4b1e      	ldr	r3, [pc, #120]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107540:	0c1b      	lsrs	r3, r3, #16
 8107542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107546:	ee07 3a90 	vmov	s15, r3
 810754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810754e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107556:	edd7 6a07 	vldr	s13, [r7, #28]
 810755a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810755e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107562:	ee17 2a90 	vmov	r2, s15
 8107566:	687b      	ldr	r3, [r7, #4]
 8107568:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 810756a:	4b13      	ldr	r3, [pc, #76]	; (81075b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810756e:	0e1b      	lsrs	r3, r3, #24
 8107570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107574:	ee07 3a90 	vmov	s15, r3
 8107578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810757c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107584:	edd7 6a07 	vldr	s13, [r7, #28]
 8107588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810758c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107590:	ee17 2a90 	vmov	r2, s15
 8107594:	687b      	ldr	r3, [r7, #4]
 8107596:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8107598:	e008      	b.n	81075ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	2200      	movs	r2, #0
 810759e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	2200      	movs	r2, #0
 81075a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	2200      	movs	r2, #0
 81075aa:	609a      	str	r2, [r3, #8]
}
 81075ac:	bf00      	nop
 81075ae:	3724      	adds	r7, #36	; 0x24
 81075b0:	46bd      	mov	sp, r7
 81075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075b6:	4770      	bx	lr
 81075b8:	58024400 	.word	0x58024400
 81075bc:	03d09000 	.word	0x03d09000
 81075c0:	46000000 	.word	0x46000000
 81075c4:	4c742400 	.word	0x4c742400
 81075c8:	4a742400 	.word	0x4a742400
 81075cc:	4bbebc20 	.word	0x4bbebc20

081075d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81075d0:	b580      	push	{r7, lr}
 81075d2:	b084      	sub	sp, #16
 81075d4:	af00      	add	r7, sp, #0
 81075d6:	6078      	str	r0, [r7, #4]
 81075d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81075da:	2300      	movs	r3, #0
 81075dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81075de:	4b54      	ldr	r3, [pc, #336]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81075e2:	f003 0303 	and.w	r3, r3, #3
 81075e6:	2b03      	cmp	r3, #3
 81075e8:	d101      	bne.n	81075ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81075ea:	2301      	movs	r3, #1
 81075ec:	e09b      	b.n	8107726 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81075ee:	4b50      	ldr	r3, [pc, #320]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81075f0:	681b      	ldr	r3, [r3, #0]
 81075f2:	4a4f      	ldr	r2, [pc, #316]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81075f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81075f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81075fa:	f7fb f979 	bl	81028f0 <HAL_GetTick>
 81075fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107600:	e008      	b.n	8107614 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107602:	f7fb f975 	bl	81028f0 <HAL_GetTick>
 8107606:	4602      	mov	r2, r0
 8107608:	68bb      	ldr	r3, [r7, #8]
 810760a:	1ad3      	subs	r3, r2, r3
 810760c:	2b02      	cmp	r3, #2
 810760e:	d901      	bls.n	8107614 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107610:	2303      	movs	r3, #3
 8107612:	e088      	b.n	8107726 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107614:	4b46      	ldr	r3, [pc, #280]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 8107616:	681b      	ldr	r3, [r3, #0]
 8107618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810761c:	2b00      	cmp	r3, #0
 810761e:	d1f0      	bne.n	8107602 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107620:	4b43      	ldr	r3, [pc, #268]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 8107622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107624:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8107628:	687b      	ldr	r3, [r7, #4]
 810762a:	681b      	ldr	r3, [r3, #0]
 810762c:	031b      	lsls	r3, r3, #12
 810762e:	4940      	ldr	r1, [pc, #256]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 8107630:	4313      	orrs	r3, r2
 8107632:	628b      	str	r3, [r1, #40]	; 0x28
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	685b      	ldr	r3, [r3, #4]
 8107638:	3b01      	subs	r3, #1
 810763a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810763e:	687b      	ldr	r3, [r7, #4]
 8107640:	689b      	ldr	r3, [r3, #8]
 8107642:	3b01      	subs	r3, #1
 8107644:	025b      	lsls	r3, r3, #9
 8107646:	b29b      	uxth	r3, r3
 8107648:	431a      	orrs	r2, r3
 810764a:	687b      	ldr	r3, [r7, #4]
 810764c:	68db      	ldr	r3, [r3, #12]
 810764e:	3b01      	subs	r3, #1
 8107650:	041b      	lsls	r3, r3, #16
 8107652:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107656:	431a      	orrs	r2, r3
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	691b      	ldr	r3, [r3, #16]
 810765c:	3b01      	subs	r3, #1
 810765e:	061b      	lsls	r3, r3, #24
 8107660:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107664:	4932      	ldr	r1, [pc, #200]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 8107666:	4313      	orrs	r3, r2
 8107668:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810766a:	4b31      	ldr	r3, [pc, #196]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 810766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810766e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	695b      	ldr	r3, [r3, #20]
 8107676:	492e      	ldr	r1, [pc, #184]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 8107678:	4313      	orrs	r3, r2
 810767a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810767c:	4b2c      	ldr	r3, [pc, #176]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 810767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107680:	f023 0220 	bic.w	r2, r3, #32
 8107684:	687b      	ldr	r3, [r7, #4]
 8107686:	699b      	ldr	r3, [r3, #24]
 8107688:	4929      	ldr	r1, [pc, #164]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 810768a:	4313      	orrs	r3, r2
 810768c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810768e:	4b28      	ldr	r3, [pc, #160]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 8107690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107692:	4a27      	ldr	r2, [pc, #156]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 8107694:	f023 0310 	bic.w	r3, r3, #16
 8107698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810769a:	4b25      	ldr	r3, [pc, #148]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 810769c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810769e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81076a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81076a6:	687a      	ldr	r2, [r7, #4]
 81076a8:	69d2      	ldr	r2, [r2, #28]
 81076aa:	00d2      	lsls	r2, r2, #3
 81076ac:	4920      	ldr	r1, [pc, #128]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076ae:	4313      	orrs	r3, r2
 81076b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81076b2:	4b1f      	ldr	r3, [pc, #124]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81076b6:	4a1e      	ldr	r2, [pc, #120]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076b8:	f043 0310 	orr.w	r3, r3, #16
 81076bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81076be:	683b      	ldr	r3, [r7, #0]
 81076c0:	2b00      	cmp	r3, #0
 81076c2:	d106      	bne.n	81076d2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81076c4:	4b1a      	ldr	r3, [pc, #104]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81076c8:	4a19      	ldr	r2, [pc, #100]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81076ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 81076d0:	e00f      	b.n	81076f2 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81076d2:	683b      	ldr	r3, [r7, #0]
 81076d4:	2b01      	cmp	r3, #1
 81076d6:	d106      	bne.n	81076e6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81076d8:	4b15      	ldr	r3, [pc, #84]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81076dc:	4a14      	ldr	r2, [pc, #80]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81076e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81076e4:	e005      	b.n	81076f2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81076e6:	4b12      	ldr	r3, [pc, #72]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81076ea:	4a11      	ldr	r2, [pc, #68]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81076f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81076f2:	4b0f      	ldr	r3, [pc, #60]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076f4:	681b      	ldr	r3, [r3, #0]
 81076f6:	4a0e      	ldr	r2, [pc, #56]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 81076f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81076fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81076fe:	f7fb f8f7 	bl	81028f0 <HAL_GetTick>
 8107702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107704:	e008      	b.n	8107718 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107706:	f7fb f8f3 	bl	81028f0 <HAL_GetTick>
 810770a:	4602      	mov	r2, r0
 810770c:	68bb      	ldr	r3, [r7, #8]
 810770e:	1ad3      	subs	r3, r2, r3
 8107710:	2b02      	cmp	r3, #2
 8107712:	d901      	bls.n	8107718 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107714:	2303      	movs	r3, #3
 8107716:	e006      	b.n	8107726 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107718:	4b05      	ldr	r3, [pc, #20]	; (8107730 <RCCEx_PLL2_Config+0x160>)
 810771a:	681b      	ldr	r3, [r3, #0]
 810771c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107720:	2b00      	cmp	r3, #0
 8107722:	d0f0      	beq.n	8107706 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107724:	7bfb      	ldrb	r3, [r7, #15]
}
 8107726:	4618      	mov	r0, r3
 8107728:	3710      	adds	r7, #16
 810772a:	46bd      	mov	sp, r7
 810772c:	bd80      	pop	{r7, pc}
 810772e:	bf00      	nop
 8107730:	58024400 	.word	0x58024400

08107734 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107734:	b580      	push	{r7, lr}
 8107736:	b084      	sub	sp, #16
 8107738:	af00      	add	r7, sp, #0
 810773a:	6078      	str	r0, [r7, #4]
 810773c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810773e:	2300      	movs	r3, #0
 8107740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107742:	4b54      	ldr	r3, [pc, #336]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107746:	f003 0303 	and.w	r3, r3, #3
 810774a:	2b03      	cmp	r3, #3
 810774c:	d101      	bne.n	8107752 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810774e:	2301      	movs	r3, #1
 8107750:	e09b      	b.n	810788a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107752:	4b50      	ldr	r3, [pc, #320]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107754:	681b      	ldr	r3, [r3, #0]
 8107756:	4a4f      	ldr	r2, [pc, #316]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810775c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810775e:	f7fb f8c7 	bl	81028f0 <HAL_GetTick>
 8107762:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107764:	e008      	b.n	8107778 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107766:	f7fb f8c3 	bl	81028f0 <HAL_GetTick>
 810776a:	4602      	mov	r2, r0
 810776c:	68bb      	ldr	r3, [r7, #8]
 810776e:	1ad3      	subs	r3, r2, r3
 8107770:	2b02      	cmp	r3, #2
 8107772:	d901      	bls.n	8107778 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107774:	2303      	movs	r3, #3
 8107776:	e088      	b.n	810788a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107778:	4b46      	ldr	r3, [pc, #280]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 810777a:	681b      	ldr	r3, [r3, #0]
 810777c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107780:	2b00      	cmp	r3, #0
 8107782:	d1f0      	bne.n	8107766 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107784:	4b43      	ldr	r3, [pc, #268]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107788:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810778c:	687b      	ldr	r3, [r7, #4]
 810778e:	681b      	ldr	r3, [r3, #0]
 8107790:	051b      	lsls	r3, r3, #20
 8107792:	4940      	ldr	r1, [pc, #256]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107794:	4313      	orrs	r3, r2
 8107796:	628b      	str	r3, [r1, #40]	; 0x28
 8107798:	687b      	ldr	r3, [r7, #4]
 810779a:	685b      	ldr	r3, [r3, #4]
 810779c:	3b01      	subs	r3, #1
 810779e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81077a2:	687b      	ldr	r3, [r7, #4]
 81077a4:	689b      	ldr	r3, [r3, #8]
 81077a6:	3b01      	subs	r3, #1
 81077a8:	025b      	lsls	r3, r3, #9
 81077aa:	b29b      	uxth	r3, r3
 81077ac:	431a      	orrs	r2, r3
 81077ae:	687b      	ldr	r3, [r7, #4]
 81077b0:	68db      	ldr	r3, [r3, #12]
 81077b2:	3b01      	subs	r3, #1
 81077b4:	041b      	lsls	r3, r3, #16
 81077b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81077ba:	431a      	orrs	r2, r3
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	691b      	ldr	r3, [r3, #16]
 81077c0:	3b01      	subs	r3, #1
 81077c2:	061b      	lsls	r3, r3, #24
 81077c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81077c8:	4932      	ldr	r1, [pc, #200]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 81077ca:	4313      	orrs	r3, r2
 81077cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81077ce:	4b31      	ldr	r3, [pc, #196]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 81077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81077d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81077d6:	687b      	ldr	r3, [r7, #4]
 81077d8:	695b      	ldr	r3, [r3, #20]
 81077da:	492e      	ldr	r1, [pc, #184]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 81077dc:	4313      	orrs	r3, r2
 81077de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81077e0:	4b2c      	ldr	r3, [pc, #176]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 81077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81077e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81077e8:	687b      	ldr	r3, [r7, #4]
 81077ea:	699b      	ldr	r3, [r3, #24]
 81077ec:	4929      	ldr	r1, [pc, #164]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 81077ee:	4313      	orrs	r3, r2
 81077f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81077f2:	4b28      	ldr	r3, [pc, #160]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 81077f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81077f6:	4a27      	ldr	r2, [pc, #156]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 81077f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81077fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81077fe:	4b25      	ldr	r3, [pc, #148]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107806:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810780a:	687a      	ldr	r2, [r7, #4]
 810780c:	69d2      	ldr	r2, [r2, #28]
 810780e:	00d2      	lsls	r2, r2, #3
 8107810:	4920      	ldr	r1, [pc, #128]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107812:	4313      	orrs	r3, r2
 8107814:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107816:	4b1f      	ldr	r3, [pc, #124]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810781a:	4a1e      	ldr	r2, [pc, #120]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 810781c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107822:	683b      	ldr	r3, [r7, #0]
 8107824:	2b00      	cmp	r3, #0
 8107826:	d106      	bne.n	8107836 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107828:	4b1a      	ldr	r3, [pc, #104]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 810782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810782c:	4a19      	ldr	r2, [pc, #100]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 810782e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107832:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107834:	e00f      	b.n	8107856 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107836:	683b      	ldr	r3, [r7, #0]
 8107838:	2b01      	cmp	r3, #1
 810783a:	d106      	bne.n	810784a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810783c:	4b15      	ldr	r3, [pc, #84]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 810783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107840:	4a14      	ldr	r2, [pc, #80]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107842:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107848:	e005      	b.n	8107856 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810784a:	4b12      	ldr	r3, [pc, #72]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 810784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810784e:	4a11      	ldr	r2, [pc, #68]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107854:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107856:	4b0f      	ldr	r3, [pc, #60]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 8107858:	681b      	ldr	r3, [r3, #0]
 810785a:	4a0e      	ldr	r2, [pc, #56]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 810785c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107862:	f7fb f845 	bl	81028f0 <HAL_GetTick>
 8107866:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107868:	e008      	b.n	810787c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810786a:	f7fb f841 	bl	81028f0 <HAL_GetTick>
 810786e:	4602      	mov	r2, r0
 8107870:	68bb      	ldr	r3, [r7, #8]
 8107872:	1ad3      	subs	r3, r2, r3
 8107874:	2b02      	cmp	r3, #2
 8107876:	d901      	bls.n	810787c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107878:	2303      	movs	r3, #3
 810787a:	e006      	b.n	810788a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810787c:	4b05      	ldr	r3, [pc, #20]	; (8107894 <RCCEx_PLL3_Config+0x160>)
 810787e:	681b      	ldr	r3, [r3, #0]
 8107880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107884:	2b00      	cmp	r3, #0
 8107886:	d0f0      	beq.n	810786a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107888:	7bfb      	ldrb	r3, [r7, #15]
}
 810788a:	4618      	mov	r0, r3
 810788c:	3710      	adds	r7, #16
 810788e:	46bd      	mov	sp, r7
 8107890:	bd80      	pop	{r7, pc}
 8107892:	bf00      	nop
 8107894:	58024400 	.word	0x58024400

08107898 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8107898:	b580      	push	{r7, lr}
 810789a:	b084      	sub	sp, #16
 810789c:	af00      	add	r7, sp, #0
 810789e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 81078a0:	2301      	movs	r3, #1
 81078a2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 81078a4:	687b      	ldr	r3, [r7, #4]
 81078a6:	2b00      	cmp	r3, #0
 81078a8:	d069      	beq.n	810797e <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 81078aa:	687b      	ldr	r3, [r7, #4]
 81078ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 81078b0:	b2db      	uxtb	r3, r3
 81078b2:	2b00      	cmp	r3, #0
 81078b4:	d106      	bne.n	81078c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 81078b6:	687b      	ldr	r3, [r7, #4]
 81078b8:	2200      	movs	r2, #0
 81078ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 81078be:	6878      	ldr	r0, [r7, #4]
 81078c0:	f7f9 fde8 	bl	8101494 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 81078c4:	687b      	ldr	r3, [r7, #4]
 81078c6:	2202      	movs	r2, #2
 81078c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81078cc:	687b      	ldr	r3, [r7, #4]
 81078ce:	681b      	ldr	r3, [r3, #0]
 81078d0:	22ca      	movs	r2, #202	; 0xca
 81078d2:	625a      	str	r2, [r3, #36]	; 0x24
 81078d4:	687b      	ldr	r3, [r7, #4]
 81078d6:	681b      	ldr	r3, [r3, #0]
 81078d8:	2253      	movs	r2, #83	; 0x53
 81078da:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 81078dc:	6878      	ldr	r0, [r7, #4]
 81078de:	f000 f879 	bl	81079d4 <RTC_EnterInitMode>
 81078e2:	4603      	mov	r3, r0
 81078e4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 81078e6:	7bfb      	ldrb	r3, [r7, #15]
 81078e8:	2b00      	cmp	r3, #0
 81078ea:	d13d      	bne.n	8107968 <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 81078ec:	687b      	ldr	r3, [r7, #4]
 81078ee:	681b      	ldr	r3, [r3, #0]
 81078f0:	689b      	ldr	r3, [r3, #8]
 81078f2:	687a      	ldr	r2, [r7, #4]
 81078f4:	6812      	ldr	r2, [r2, #0]
 81078f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 81078fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81078fe:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	681b      	ldr	r3, [r3, #0]
 8107904:	6899      	ldr	r1, [r3, #8]
 8107906:	687b      	ldr	r3, [r7, #4]
 8107908:	685a      	ldr	r2, [r3, #4]
 810790a:	687b      	ldr	r3, [r7, #4]
 810790c:	691b      	ldr	r3, [r3, #16]
 810790e:	431a      	orrs	r2, r3
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	699b      	ldr	r3, [r3, #24]
 8107914:	431a      	orrs	r2, r3
 8107916:	687b      	ldr	r3, [r7, #4]
 8107918:	681b      	ldr	r3, [r3, #0]
 810791a:	430a      	orrs	r2, r1
 810791c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	689b      	ldr	r3, [r3, #8]
 8107922:	0419      	lsls	r1, r3, #16
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	68da      	ldr	r2, [r3, #12]
 8107928:	687b      	ldr	r3, [r7, #4]
 810792a:	681b      	ldr	r3, [r3, #0]
 810792c:	430a      	orrs	r2, r1
 810792e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8107930:	6878      	ldr	r0, [r7, #4]
 8107932:	f000 f883 	bl	8107a3c <RTC_ExitInitMode>
 8107936:	4603      	mov	r3, r0
 8107938:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 810793a:	7bfb      	ldrb	r3, [r7, #15]
 810793c:	2b00      	cmp	r3, #0
 810793e:	d113      	bne.n	8107968 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8107940:	687b      	ldr	r3, [r7, #4]
 8107942:	681b      	ldr	r3, [r3, #0]
 8107944:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107946:	687b      	ldr	r3, [r7, #4]
 8107948:	681b      	ldr	r3, [r3, #0]
 810794a:	f022 0203 	bic.w	r2, r2, #3
 810794e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	681b      	ldr	r3, [r3, #0]
 8107954:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8107956:	687b      	ldr	r3, [r7, #4]
 8107958:	69da      	ldr	r2, [r3, #28]
 810795a:	687b      	ldr	r3, [r7, #4]
 810795c:	695b      	ldr	r3, [r3, #20]
 810795e:	431a      	orrs	r2, r3
 8107960:	687b      	ldr	r3, [r7, #4]
 8107962:	681b      	ldr	r3, [r3, #0]
 8107964:	430a      	orrs	r2, r1
 8107966:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8107968:	687b      	ldr	r3, [r7, #4]
 810796a:	681b      	ldr	r3, [r3, #0]
 810796c:	22ff      	movs	r2, #255	; 0xff
 810796e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8107970:	7bfb      	ldrb	r3, [r7, #15]
 8107972:	2b00      	cmp	r3, #0
 8107974:	d103      	bne.n	810797e <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8107976:	687b      	ldr	r3, [r7, #4]
 8107978:	2201      	movs	r2, #1
 810797a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 810797e:	7bfb      	ldrb	r3, [r7, #15]
}
 8107980:	4618      	mov	r0, r3
 8107982:	3710      	adds	r7, #16
 8107984:	46bd      	mov	sp, r7
 8107986:	bd80      	pop	{r7, pc}

08107988 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8107988:	b580      	push	{r7, lr}
 810798a:	b084      	sub	sp, #16
 810798c:	af00      	add	r7, sp, #0
 810798e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8107990:	687b      	ldr	r3, [r7, #4]
 8107992:	681b      	ldr	r3, [r3, #0]
 8107994:	68da      	ldr	r2, [r3, #12]
 8107996:	687b      	ldr	r3, [r7, #4]
 8107998:	681b      	ldr	r3, [r3, #0]
 810799a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 810799e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 81079a0:	f7fa ffa6 	bl	81028f0 <HAL_GetTick>
 81079a4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81079a6:	e009      	b.n	81079bc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 81079a8:	f7fa ffa2 	bl	81028f0 <HAL_GetTick>
 81079ac:	4602      	mov	r2, r0
 81079ae:	68fb      	ldr	r3, [r7, #12]
 81079b0:	1ad3      	subs	r3, r2, r3
 81079b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81079b6:	d901      	bls.n	81079bc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 81079b8:	2303      	movs	r3, #3
 81079ba:	e007      	b.n	81079cc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81079bc:	687b      	ldr	r3, [r7, #4]
 81079be:	681b      	ldr	r3, [r3, #0]
 81079c0:	68db      	ldr	r3, [r3, #12]
 81079c2:	f003 0320 	and.w	r3, r3, #32
 81079c6:	2b00      	cmp	r3, #0
 81079c8:	d0ee      	beq.n	81079a8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 81079ca:	2300      	movs	r3, #0
}
 81079cc:	4618      	mov	r0, r3
 81079ce:	3710      	adds	r7, #16
 81079d0:	46bd      	mov	sp, r7
 81079d2:	bd80      	pop	{r7, pc}

081079d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 81079d4:	b580      	push	{r7, lr}
 81079d6:	b084      	sub	sp, #16
 81079d8:	af00      	add	r7, sp, #0
 81079da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81079dc:	2300      	movs	r3, #0
 81079de:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	681b      	ldr	r3, [r3, #0]
 81079e4:	68db      	ldr	r3, [r3, #12]
 81079e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81079ea:	2b00      	cmp	r3, #0
 81079ec:	d120      	bne.n	8107a30 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 81079ee:	687b      	ldr	r3, [r7, #4]
 81079f0:	681b      	ldr	r3, [r3, #0]
 81079f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81079f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 81079f8:	f7fa ff7a 	bl	81028f0 <HAL_GetTick>
 81079fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81079fe:	e00d      	b.n	8107a1c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8107a00:	f7fa ff76 	bl	81028f0 <HAL_GetTick>
 8107a04:	4602      	mov	r2, r0
 8107a06:	68bb      	ldr	r3, [r7, #8]
 8107a08:	1ad3      	subs	r3, r2, r3
 8107a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8107a0e:	d905      	bls.n	8107a1c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8107a10:	2303      	movs	r3, #3
 8107a12:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8107a14:	687b      	ldr	r3, [r7, #4]
 8107a16:	2203      	movs	r2, #3
 8107a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8107a1c:	687b      	ldr	r3, [r7, #4]
 8107a1e:	681b      	ldr	r3, [r3, #0]
 8107a20:	68db      	ldr	r3, [r3, #12]
 8107a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107a26:	2b00      	cmp	r3, #0
 8107a28:	d102      	bne.n	8107a30 <RTC_EnterInitMode+0x5c>
 8107a2a:	7bfb      	ldrb	r3, [r7, #15]
 8107a2c:	2b03      	cmp	r3, #3
 8107a2e:	d1e7      	bne.n	8107a00 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8107a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8107a32:	4618      	mov	r0, r3
 8107a34:	3710      	adds	r7, #16
 8107a36:	46bd      	mov	sp, r7
 8107a38:	bd80      	pop	{r7, pc}
	...

08107a3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8107a3c:	b580      	push	{r7, lr}
 8107a3e:	b084      	sub	sp, #16
 8107a40:	af00      	add	r7, sp, #0
 8107a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107a44:	2300      	movs	r3, #0
 8107a46:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8107a48:	4b1a      	ldr	r3, [pc, #104]	; (8107ab4 <RTC_ExitInitMode+0x78>)
 8107a4a:	68db      	ldr	r3, [r3, #12]
 8107a4c:	4a19      	ldr	r2, [pc, #100]	; (8107ab4 <RTC_ExitInitMode+0x78>)
 8107a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107a52:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8107a54:	4b17      	ldr	r3, [pc, #92]	; (8107ab4 <RTC_ExitInitMode+0x78>)
 8107a56:	689b      	ldr	r3, [r3, #8]
 8107a58:	f003 0320 	and.w	r3, r3, #32
 8107a5c:	2b00      	cmp	r3, #0
 8107a5e:	d10c      	bne.n	8107a7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8107a60:	6878      	ldr	r0, [r7, #4]
 8107a62:	f7ff ff91 	bl	8107988 <HAL_RTC_WaitForSynchro>
 8107a66:	4603      	mov	r3, r0
 8107a68:	2b00      	cmp	r3, #0
 8107a6a:	d01e      	beq.n	8107aaa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8107a6c:	687b      	ldr	r3, [r7, #4]
 8107a6e:	2203      	movs	r2, #3
 8107a70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8107a74:	2303      	movs	r3, #3
 8107a76:	73fb      	strb	r3, [r7, #15]
 8107a78:	e017      	b.n	8107aaa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8107a7a:	4b0e      	ldr	r3, [pc, #56]	; (8107ab4 <RTC_ExitInitMode+0x78>)
 8107a7c:	689b      	ldr	r3, [r3, #8]
 8107a7e:	4a0d      	ldr	r2, [pc, #52]	; (8107ab4 <RTC_ExitInitMode+0x78>)
 8107a80:	f023 0320 	bic.w	r3, r3, #32
 8107a84:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8107a86:	6878      	ldr	r0, [r7, #4]
 8107a88:	f7ff ff7e 	bl	8107988 <HAL_RTC_WaitForSynchro>
 8107a8c:	4603      	mov	r3, r0
 8107a8e:	2b00      	cmp	r3, #0
 8107a90:	d005      	beq.n	8107a9e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8107a92:	687b      	ldr	r3, [r7, #4]
 8107a94:	2203      	movs	r2, #3
 8107a96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8107a9a:	2303      	movs	r3, #3
 8107a9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8107a9e:	4b05      	ldr	r3, [pc, #20]	; (8107ab4 <RTC_ExitInitMode+0x78>)
 8107aa0:	689b      	ldr	r3, [r3, #8]
 8107aa2:	4a04      	ldr	r2, [pc, #16]	; (8107ab4 <RTC_ExitInitMode+0x78>)
 8107aa4:	f043 0320 	orr.w	r3, r3, #32
 8107aa8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8107aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8107aac:	4618      	mov	r0, r3
 8107aae:	3710      	adds	r7, #16
 8107ab0:	46bd      	mov	sp, r7
 8107ab2:	bd80      	pop	{r7, pc}
 8107ab4:	58004000 	.word	0x58004000

08107ab8 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 8107ab8:	b480      	push	{r7}
 8107aba:	b085      	sub	sp, #20
 8107abc:	af00      	add	r7, sp, #0
 8107abe:	6078      	str	r0, [r7, #4]
 8107ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8107ac8:	2b01      	cmp	r3, #1
 8107aca:	d101      	bne.n	8107ad0 <HAL_RTCEx_SetTamper+0x18>
 8107acc:	2302      	movs	r3, #2
 8107ace:	e0cc      	b.n	8107c6a <HAL_RTCEx_SetTamper+0x1b2>
 8107ad0:	687b      	ldr	r3, [r7, #4]
 8107ad2:	2201      	movs	r2, #1
 8107ad4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8107ad8:	687b      	ldr	r3, [r7, #4]
 8107ada:	2202      	movs	r2, #2
 8107adc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	681b      	ldr	r3, [r3, #0]
 8107ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107ae6:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8107ae8:	683b      	ldr	r3, [r7, #0]
 8107aea:	681b      	ldr	r3, [r3, #0]
 8107aec:	68fa      	ldr	r2, [r7, #12]
 8107aee:	4313      	orrs	r3, r2
 8107af0:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8107af2:	683b      	ldr	r3, [r7, #0]
 8107af4:	689b      	ldr	r3, [r3, #8]
 8107af6:	2b08      	cmp	r3, #8
 8107af8:	d003      	beq.n	8107b02 <HAL_RTCEx_SetTamper+0x4a>
 8107afa:	683b      	ldr	r3, [r7, #0]
 8107afc:	689b      	ldr	r3, [r3, #8]
 8107afe:	2b02      	cmp	r3, #2
 8107b00:	d106      	bne.n	8107b10 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8107b02:	683b      	ldr	r3, [r7, #0]
 8107b04:	681b      	ldr	r3, [r3, #0]
 8107b06:	005b      	lsls	r3, r3, #1
 8107b08:	68fa      	ldr	r2, [r7, #12]
 8107b0a:	4313      	orrs	r3, r2
 8107b0c:	60fb      	str	r3, [r7, #12]
 8107b0e:	e006      	b.n	8107b1e <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8107b10:	683b      	ldr	r3, [r7, #0]
 8107b12:	681b      	ldr	r3, [r3, #0]
 8107b14:	005b      	lsls	r3, r3, #1
 8107b16:	43db      	mvns	r3, r3
 8107b18:	68fa      	ldr	r2, [r7, #12]
 8107b1a:	4013      	ands	r3, r2
 8107b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8107b1e:	683b      	ldr	r3, [r7, #0]
 8107b20:	68db      	ldr	r3, [r3, #12]
 8107b22:	2b00      	cmp	r3, #0
 8107b24:	d01e      	beq.n	8107b64 <HAL_RTCEx_SetTamper+0xac>
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107b26:	683b      	ldr	r3, [r7, #0]
 8107b28:	681b      	ldr	r3, [r3, #0]
 8107b2a:	f003 0301 	and.w	r3, r3, #1
 8107b2e:	2b00      	cmp	r3, #0
 8107b30:	d003      	beq.n	8107b3a <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8107b32:	68fb      	ldr	r3, [r7, #12]
 8107b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107b38:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107b3a:	683b      	ldr	r3, [r7, #0]
 8107b3c:	681b      	ldr	r3, [r3, #0]
 8107b3e:	f003 0308 	and.w	r3, r3, #8
 8107b42:	2b00      	cmp	r3, #0
 8107b44:	d003      	beq.n	8107b4e <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8107b46:	68fb      	ldr	r3, [r7, #12]
 8107b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107b4c:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107b4e:	683b      	ldr	r3, [r7, #0]
 8107b50:	681b      	ldr	r3, [r3, #0]
 8107b52:	f003 0320 	and.w	r3, r3, #32
 8107b56:	2b00      	cmp	r3, #0
 8107b58:	d022      	beq.n	8107ba0 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8107b5a:	68fb      	ldr	r3, [r7, #12]
 8107b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107b60:	60fb      	str	r3, [r7, #12]
 8107b62:	e01d      	b.n	8107ba0 <HAL_RTCEx_SetTamper+0xe8>
#endif /* RTC_TAMPCR_TAMP3E */
  }
  else
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107b64:	683b      	ldr	r3, [r7, #0]
 8107b66:	681b      	ldr	r3, [r3, #0]
 8107b68:	f003 0301 	and.w	r3, r3, #1
 8107b6c:	2b00      	cmp	r3, #0
 8107b6e:	d003      	beq.n	8107b78 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8107b70:	68fb      	ldr	r3, [r7, #12]
 8107b72:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107b76:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107b78:	683b      	ldr	r3, [r7, #0]
 8107b7a:	681b      	ldr	r3, [r3, #0]
 8107b7c:	f003 0308 	and.w	r3, r3, #8
 8107b80:	2b00      	cmp	r3, #0
 8107b82:	d003      	beq.n	8107b8c <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8107b84:	68fb      	ldr	r3, [r7, #12]
 8107b86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8107b8a:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107b8c:	683b      	ldr	r3, [r7, #0]
 8107b8e:	681b      	ldr	r3, [r3, #0]
 8107b90:	f003 0320 	and.w	r3, r3, #32
 8107b94:	2b00      	cmp	r3, #0
 8107b96:	d003      	beq.n	8107ba0 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8107b98:	68fb      	ldr	r3, [r7, #12]
 8107b9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8107b9e:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP3E */
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8107ba0:	683b      	ldr	r3, [r7, #0]
 8107ba2:	691b      	ldr	r3, [r3, #16]
 8107ba4:	2b00      	cmp	r3, #0
 8107ba6:	d01e      	beq.n	8107be6 <HAL_RTCEx_SetTamper+0x12e>
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107ba8:	683b      	ldr	r3, [r7, #0]
 8107baa:	681b      	ldr	r3, [r3, #0]
 8107bac:	f003 0301 	and.w	r3, r3, #1
 8107bb0:	2b00      	cmp	r3, #0
 8107bb2:	d003      	beq.n	8107bbc <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8107bb4:	68fb      	ldr	r3, [r7, #12]
 8107bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8107bba:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107bbc:	683b      	ldr	r3, [r7, #0]
 8107bbe:	681b      	ldr	r3, [r3, #0]
 8107bc0:	f003 0308 	and.w	r3, r3, #8
 8107bc4:	2b00      	cmp	r3, #0
 8107bc6:	d003      	beq.n	8107bd0 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8107bc8:	68fb      	ldr	r3, [r7, #12]
 8107bca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107bce:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107bd0:	683b      	ldr	r3, [r7, #0]
 8107bd2:	681b      	ldr	r3, [r3, #0]
 8107bd4:	f003 0320 	and.w	r3, r3, #32
 8107bd8:	2b00      	cmp	r3, #0
 8107bda:	d022      	beq.n	8107c22 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8107bdc:	68fb      	ldr	r3, [r7, #12]
 8107bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107be2:	60fb      	str	r3, [r7, #12]
 8107be4:	e01d      	b.n	8107c22 <HAL_RTCEx_SetTamper+0x16a>
#endif /* RTC_TAMPCR_TAMP3E */
  }
  else
  {
#if defined(RTC_TAMPCR_TAMP1E)
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107be6:	683b      	ldr	r3, [r7, #0]
 8107be8:	681b      	ldr	r3, [r3, #0]
 8107bea:	f003 0301 	and.w	r3, r3, #1
 8107bee:	2b00      	cmp	r3, #0
 8107bf0:	d003      	beq.n	8107bfa <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8107bf2:	68fb      	ldr	r3, [r7, #12]
 8107bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8107bf8:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP1E */
#if defined(RTC_TAMPCR_TAMP2E)
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107bfa:	683b      	ldr	r3, [r7, #0]
 8107bfc:	681b      	ldr	r3, [r3, #0]
 8107bfe:	f003 0308 	and.w	r3, r3, #8
 8107c02:	2b00      	cmp	r3, #0
 8107c04:	d003      	beq.n	8107c0e <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8107c06:	68fb      	ldr	r3, [r7, #12]
 8107c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8107c0c:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP2E */
#if defined(RTC_TAMPCR_TAMP3E)
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107c0e:	683b      	ldr	r3, [r7, #0]
 8107c10:	681b      	ldr	r3, [r3, #0]
 8107c12:	f003 0320 	and.w	r3, r3, #32
 8107c16:	2b00      	cmp	r3, #0
 8107c18:	d003      	beq.n	8107c22 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8107c1a:	68fb      	ldr	r3, [r7, #12]
 8107c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107c20:	60fb      	str	r3, [r7, #12]
    }
#endif /* RTC_TAMPCR_TAMP3E */
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8107c22:	68fb      	ldr	r3, [r7, #12]
 8107c24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107c2c:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8107c2e:	683b      	ldr	r3, [r7, #0]
 8107c30:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8107c32:	683b      	ldr	r3, [r7, #0]
 8107c34:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8107c36:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8107c38:	683b      	ldr	r3, [r7, #0]
 8107c3a:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8107c3c:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8107c3e:	683b      	ldr	r3, [r7, #0]
 8107c40:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8107c42:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8107c44:	683b      	ldr	r3, [r7, #0]
 8107c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8107c48:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8107c4a:	68fa      	ldr	r2, [r7, #12]
 8107c4c:	4313      	orrs	r3, r2
 8107c4e:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	681b      	ldr	r3, [r3, #0]
 8107c54:	68fa      	ldr	r2, [r7, #12]
 8107c56:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8107c58:	687b      	ldr	r3, [r7, #4]
 8107c5a:	2201      	movs	r2, #1
 8107c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8107c60:	687b      	ldr	r3, [r7, #4]
 8107c62:	2200      	movs	r2, #0
 8107c64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8107c68:	2300      	movs	r3, #0
}
 8107c6a:	4618      	mov	r0, r3
 8107c6c:	3714      	adds	r7, #20
 8107c6e:	46bd      	mov	sp, r7
 8107c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c74:	4770      	bx	lr
	...

08107c78 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8107c78:	b580      	push	{r7, lr}
 8107c7a:	b08a      	sub	sp, #40	; 0x28
 8107c7c:	af00      	add	r7, sp, #0
 8107c7e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8107c80:	687b      	ldr	r3, [r7, #4]
 8107c82:	2b00      	cmp	r3, #0
 8107c84:	d101      	bne.n	8107c8a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8107c86:	2301      	movs	r3, #1
 8107c88:	e285      	b.n	8108196 <HAL_SAI_Init+0x51e>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8107c8a:	f7fa fe61 	bl	8102950 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8107c8e:	687b      	ldr	r3, [r7, #4]
 8107c90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8107c94:	2b01      	cmp	r3, #1
 8107c96:	d113      	bne.n	8107cc0 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	681b      	ldr	r3, [r3, #0]
 8107c9c:	4a94      	ldr	r2, [pc, #592]	; (8107ef0 <HAL_SAI_Init+0x278>)
 8107c9e:	4293      	cmp	r3, r2
 8107ca0:	d004      	beq.n	8107cac <HAL_SAI_Init+0x34>
 8107ca2:	687b      	ldr	r3, [r7, #4]
 8107ca4:	681b      	ldr	r3, [r3, #0]
 8107ca6:	4a93      	ldr	r2, [pc, #588]	; (8107ef4 <HAL_SAI_Init+0x27c>)
 8107ca8:	4293      	cmp	r3, r2
 8107caa:	d107      	bne.n	8107cbc <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8107cb0:	2b01      	cmp	r3, #1
 8107cb2:	d103      	bne.n	8107cbc <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8107cb8:	2b00      	cmp	r3, #0
 8107cba:	d001      	beq.n	8107cc0 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8107cbc:	2301      	movs	r3, #1
 8107cbe:	e26a      	b.n	8108196 <HAL_SAI_Init+0x51e>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8107cc0:	687b      	ldr	r3, [r7, #4]
 8107cc2:	681b      	ldr	r3, [r3, #0]
 8107cc4:	4a8a      	ldr	r2, [pc, #552]	; (8107ef0 <HAL_SAI_Init+0x278>)
 8107cc6:	4293      	cmp	r3, r2
 8107cc8:	d004      	beq.n	8107cd4 <HAL_SAI_Init+0x5c>
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	681b      	ldr	r3, [r3, #0]
 8107cce:	4a8a      	ldr	r2, [pc, #552]	; (8107ef8 <HAL_SAI_Init+0x280>)
 8107cd0:	4293      	cmp	r3, r2
 8107cd2:	d102      	bne.n	8107cda <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8107cd4:	4b89      	ldr	r3, [pc, #548]	; (8107efc <HAL_SAI_Init+0x284>)
 8107cd6:	61bb      	str	r3, [r7, #24]
 8107cd8:	e028      	b.n	8107d2c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	681b      	ldr	r3, [r3, #0]
 8107cde:	4a88      	ldr	r2, [pc, #544]	; (8107f00 <HAL_SAI_Init+0x288>)
 8107ce0:	4293      	cmp	r3, r2
 8107ce2:	d004      	beq.n	8107cee <HAL_SAI_Init+0x76>
 8107ce4:	687b      	ldr	r3, [r7, #4]
 8107ce6:	681b      	ldr	r3, [r3, #0]
 8107ce8:	4a86      	ldr	r2, [pc, #536]	; (8107f04 <HAL_SAI_Init+0x28c>)
 8107cea:	4293      	cmp	r3, r2
 8107cec:	d102      	bne.n	8107cf4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8107cee:	4b86      	ldr	r3, [pc, #536]	; (8107f08 <HAL_SAI_Init+0x290>)
 8107cf0:	61bb      	str	r3, [r7, #24]
 8107cf2:	e01b      	b.n	8107d2c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8107cf4:	687b      	ldr	r3, [r7, #4]
 8107cf6:	681b      	ldr	r3, [r3, #0]
 8107cf8:	4a84      	ldr	r2, [pc, #528]	; (8107f0c <HAL_SAI_Init+0x294>)
 8107cfa:	4293      	cmp	r3, r2
 8107cfc:	d004      	beq.n	8107d08 <HAL_SAI_Init+0x90>
 8107cfe:	687b      	ldr	r3, [r7, #4]
 8107d00:	681b      	ldr	r3, [r3, #0]
 8107d02:	4a83      	ldr	r2, [pc, #524]	; (8107f10 <HAL_SAI_Init+0x298>)
 8107d04:	4293      	cmp	r3, r2
 8107d06:	d102      	bne.n	8107d0e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8107d08:	4b82      	ldr	r3, [pc, #520]	; (8107f14 <HAL_SAI_Init+0x29c>)
 8107d0a:	61bb      	str	r3, [r7, #24]
 8107d0c:	e00e      	b.n	8107d2c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8107d0e:	687b      	ldr	r3, [r7, #4]
 8107d10:	681b      	ldr	r3, [r3, #0]
 8107d12:	4a78      	ldr	r2, [pc, #480]	; (8107ef4 <HAL_SAI_Init+0x27c>)
 8107d14:	4293      	cmp	r3, r2
 8107d16:	d004      	beq.n	8107d22 <HAL_SAI_Init+0xaa>
 8107d18:	687b      	ldr	r3, [r7, #4]
 8107d1a:	681b      	ldr	r3, [r3, #0]
 8107d1c:	4a7e      	ldr	r2, [pc, #504]	; (8107f18 <HAL_SAI_Init+0x2a0>)
 8107d1e:	4293      	cmp	r3, r2
 8107d20:	d102      	bne.n	8107d28 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8107d22:	4b7e      	ldr	r3, [pc, #504]	; (8107f1c <HAL_SAI_Init+0x2a4>)
 8107d24:	61bb      	str	r3, [r7, #24]
 8107d26:	e001      	b.n	8107d2c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8107d28:	2301      	movs	r3, #1
 8107d2a:	e234      	b.n	8108196 <HAL_SAI_Init+0x51e>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8107d2c:	687b      	ldr	r3, [r7, #4]
 8107d2e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8107d32:	b2db      	uxtb	r3, r3
 8107d34:	2b00      	cmp	r3, #0
 8107d36:	d106      	bne.n	8107d46 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	2200      	movs	r2, #0
 8107d3c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8107d40:	6878      	ldr	r0, [r7, #4]
 8107d42:	f7f9 fc73 	bl	810162c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8107d46:	6878      	ldr	r0, [r7, #4]
 8107d48:	f000 fa36 	bl	81081b8 <SAI_Disable>
 8107d4c:	4603      	mov	r3, r0
 8107d4e:	2b00      	cmp	r3, #0
 8107d50:	d001      	beq.n	8107d56 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8107d52:	2301      	movs	r3, #1
 8107d54:	e21f      	b.n	8108196 <HAL_SAI_Init+0x51e>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8107d56:	687b      	ldr	r3, [r7, #4]
 8107d58:	2202      	movs	r2, #2
 8107d5a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8107d5e:	687b      	ldr	r3, [r7, #4]
 8107d60:	68db      	ldr	r3, [r3, #12]
 8107d62:	2b02      	cmp	r3, #2
 8107d64:	d00c      	beq.n	8107d80 <HAL_SAI_Init+0x108>
 8107d66:	2b02      	cmp	r3, #2
 8107d68:	d80d      	bhi.n	8107d86 <HAL_SAI_Init+0x10e>
 8107d6a:	2b00      	cmp	r3, #0
 8107d6c:	d002      	beq.n	8107d74 <HAL_SAI_Init+0xfc>
 8107d6e:	2b01      	cmp	r3, #1
 8107d70:	d003      	beq.n	8107d7a <HAL_SAI_Init+0x102>
 8107d72:	e008      	b.n	8107d86 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8107d74:	2300      	movs	r3, #0
 8107d76:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107d78:	e008      	b.n	8107d8c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8107d7a:	2310      	movs	r3, #16
 8107d7c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107d7e:	e005      	b.n	8107d8c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8107d80:	2320      	movs	r3, #32
 8107d82:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107d84:	e002      	b.n	8107d8c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8107d86:	2300      	movs	r3, #0
 8107d88:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107d8a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	689b      	ldr	r3, [r3, #8]
 8107d90:	2b05      	cmp	r3, #5
 8107d92:	d832      	bhi.n	8107dfa <HAL_SAI_Init+0x182>
 8107d94:	a201      	add	r2, pc, #4	; (adr r2, 8107d9c <HAL_SAI_Init+0x124>)
 8107d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107d9a:	bf00      	nop
 8107d9c:	08107db5 	.word	0x08107db5
 8107da0:	08107dbb 	.word	0x08107dbb
 8107da4:	08107dc3 	.word	0x08107dc3
 8107da8:	08107dcb 	.word	0x08107dcb
 8107dac:	08107ddb 	.word	0x08107ddb
 8107db0:	08107deb 	.word	0x08107deb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8107db4:	2300      	movs	r3, #0
 8107db6:	61fb      	str	r3, [r7, #28]
      break;
 8107db8:	e022      	b.n	8107e00 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8107dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8107dbe:	61fb      	str	r3, [r7, #28]
      break;
 8107dc0:	e01e      	b.n	8107e00 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107dc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107dc6:	61fb      	str	r3, [r7, #28]
      break;
 8107dc8:	e01a      	b.n	8107e00 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107dca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107dce:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8107dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107dd2:	f043 0301 	orr.w	r3, r3, #1
 8107dd6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107dd8:	e012      	b.n	8107e00 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107dde:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8107de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107de2:	f043 0302 	orr.w	r3, r3, #2
 8107de6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107de8:	e00a      	b.n	8107e00 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107dea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107dee:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8107df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107df2:	f043 0303 	orr.w	r3, r3, #3
 8107df6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107df8:	e002      	b.n	8107e00 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8107dfa:	2300      	movs	r3, #0
 8107dfc:	61fb      	str	r3, [r7, #28]
      break;
 8107dfe:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8107e00:	69bb      	ldr	r3, [r7, #24]
 8107e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8107e04:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8107e06:	687b      	ldr	r3, [r7, #4]
 8107e08:	6a1b      	ldr	r3, [r3, #32]
 8107e0a:	2b00      	cmp	r3, #0
 8107e0c:	f000 80ba 	beq.w	8107f84 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8107e10:	2300      	movs	r3, #0
 8107e12:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8107e14:	687b      	ldr	r3, [r7, #4]
 8107e16:	681b      	ldr	r3, [r3, #0]
 8107e18:	4a35      	ldr	r2, [pc, #212]	; (8107ef0 <HAL_SAI_Init+0x278>)
 8107e1a:	4293      	cmp	r3, r2
 8107e1c:	d004      	beq.n	8107e28 <HAL_SAI_Init+0x1b0>
 8107e1e:	687b      	ldr	r3, [r7, #4]
 8107e20:	681b      	ldr	r3, [r3, #0]
 8107e22:	4a35      	ldr	r2, [pc, #212]	; (8107ef8 <HAL_SAI_Init+0x280>)
 8107e24:	4293      	cmp	r3, r2
 8107e26:	d104      	bne.n	8107e32 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8107e28:	f44f 7080 	mov.w	r0, #256	; 0x100
 8107e2c:	f7fe faee 	bl	810640c <HAL_RCCEx_GetPeriphCLKFreq>
 8107e30:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8107e32:	687b      	ldr	r3, [r7, #4]
 8107e34:	681b      	ldr	r3, [r3, #0]
 8107e36:	4a32      	ldr	r2, [pc, #200]	; (8107f00 <HAL_SAI_Init+0x288>)
 8107e38:	4293      	cmp	r3, r2
 8107e3a:	d004      	beq.n	8107e46 <HAL_SAI_Init+0x1ce>
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	681b      	ldr	r3, [r3, #0]
 8107e40:	4a30      	ldr	r2, [pc, #192]	; (8107f04 <HAL_SAI_Init+0x28c>)
 8107e42:	4293      	cmp	r3, r2
 8107e44:	d104      	bne.n	8107e50 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8107e46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8107e4a:	f7fe fadf 	bl	810640c <HAL_RCCEx_GetPeriphCLKFreq>
 8107e4e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8107e50:	687b      	ldr	r3, [r7, #4]
 8107e52:	681b      	ldr	r3, [r3, #0]
 8107e54:	4a2d      	ldr	r2, [pc, #180]	; (8107f0c <HAL_SAI_Init+0x294>)
 8107e56:	4293      	cmp	r3, r2
 8107e58:	d004      	beq.n	8107e64 <HAL_SAI_Init+0x1ec>
 8107e5a:	687b      	ldr	r3, [r7, #4]
 8107e5c:	681b      	ldr	r3, [r3, #0]
 8107e5e:	4a2c      	ldr	r2, [pc, #176]	; (8107f10 <HAL_SAI_Init+0x298>)
 8107e60:	4293      	cmp	r3, r2
 8107e62:	d104      	bne.n	8107e6e <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8107e64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8107e68:	f7fe fad0 	bl	810640c <HAL_RCCEx_GetPeriphCLKFreq>
 8107e6c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8107e6e:	687b      	ldr	r3, [r7, #4]
 8107e70:	681b      	ldr	r3, [r3, #0]
 8107e72:	4a20      	ldr	r2, [pc, #128]	; (8107ef4 <HAL_SAI_Init+0x27c>)
 8107e74:	4293      	cmp	r3, r2
 8107e76:	d104      	bne.n	8107e82 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8107e78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8107e7c:	f7fe fac6 	bl	810640c <HAL_RCCEx_GetPeriphCLKFreq>
 8107e80:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8107e82:	687b      	ldr	r3, [r7, #4]
 8107e84:	681b      	ldr	r3, [r3, #0]
 8107e86:	4a24      	ldr	r2, [pc, #144]	; (8107f18 <HAL_SAI_Init+0x2a0>)
 8107e88:	4293      	cmp	r3, r2
 8107e8a:	d104      	bne.n	8107e96 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8107e8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8107e90:	f7fe fabc 	bl	810640c <HAL_RCCEx_GetPeriphCLKFreq>
 8107e94:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8107e96:	687b      	ldr	r3, [r7, #4]
 8107e98:	699b      	ldr	r3, [r3, #24]
 8107e9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8107e9e:	d120      	bne.n	8107ee2 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8107ea0:	687b      	ldr	r3, [r7, #4]
 8107ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107ea4:	2b04      	cmp	r3, #4
 8107ea6:	d102      	bne.n	8107eae <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8107ea8:	2340      	movs	r3, #64	; 0x40
 8107eaa:	60fb      	str	r3, [r7, #12]
 8107eac:	e00a      	b.n	8107ec4 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8107eae:	687b      	ldr	r3, [r7, #4]
 8107eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107eb2:	2b08      	cmp	r3, #8
 8107eb4:	d103      	bne.n	8107ebe <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8107eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8107eba:	60fb      	str	r3, [r7, #12]
 8107ebc:	e002      	b.n	8107ec4 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8107ebe:	687b      	ldr	r3, [r7, #4]
 8107ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107ec2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8107ec4:	697a      	ldr	r2, [r7, #20]
 8107ec6:	4613      	mov	r3, r2
 8107ec8:	009b      	lsls	r3, r3, #2
 8107eca:	4413      	add	r3, r2
 8107ecc:	005b      	lsls	r3, r3, #1
 8107ece:	4619      	mov	r1, r3
 8107ed0:	687b      	ldr	r3, [r7, #4]
 8107ed2:	6a1b      	ldr	r3, [r3, #32]
 8107ed4:	68fa      	ldr	r2, [r7, #12]
 8107ed6:	fb02 f303 	mul.w	r3, r2, r3
 8107eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8107ede:	613b      	str	r3, [r7, #16]
 8107ee0:	e02f      	b.n	8107f42 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8107ee2:	687b      	ldr	r3, [r7, #4]
 8107ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107eea:	d119      	bne.n	8107f20 <HAL_SAI_Init+0x2a8>
 8107eec:	2302      	movs	r3, #2
 8107eee:	e018      	b.n	8107f22 <HAL_SAI_Init+0x2aa>
 8107ef0:	40015804 	.word	0x40015804
 8107ef4:	58005404 	.word	0x58005404
 8107ef8:	40015824 	.word	0x40015824
 8107efc:	40015800 	.word	0x40015800
 8107f00:	40015c04 	.word	0x40015c04
 8107f04:	40015c24 	.word	0x40015c24
 8107f08:	40015c00 	.word	0x40015c00
 8107f0c:	40016004 	.word	0x40016004
 8107f10:	40016024 	.word	0x40016024
 8107f14:	40016000 	.word	0x40016000
 8107f18:	58005424 	.word	0x58005424
 8107f1c:	58005400 	.word	0x58005400
 8107f20:	2301      	movs	r3, #1
 8107f22:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8107f24:	697a      	ldr	r2, [r7, #20]
 8107f26:	4613      	mov	r3, r2
 8107f28:	009b      	lsls	r3, r3, #2
 8107f2a:	4413      	add	r3, r2
 8107f2c:	005b      	lsls	r3, r3, #1
 8107f2e:	4619      	mov	r1, r3
 8107f30:	687b      	ldr	r3, [r7, #4]
 8107f32:	6a1b      	ldr	r3, [r3, #32]
 8107f34:	68ba      	ldr	r2, [r7, #8]
 8107f36:	fb02 f303 	mul.w	r3, r2, r3
 8107f3a:	021b      	lsls	r3, r3, #8
 8107f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8107f40:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8107f42:	693b      	ldr	r3, [r7, #16]
 8107f44:	4a96      	ldr	r2, [pc, #600]	; (81081a0 <HAL_SAI_Init+0x528>)
 8107f46:	fba2 2303 	umull	r2, r3, r2, r3
 8107f4a:	08da      	lsrs	r2, r3, #3
 8107f4c:	687b      	ldr	r3, [r7, #4]
 8107f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8107f50:	6939      	ldr	r1, [r7, #16]
 8107f52:	4b93      	ldr	r3, [pc, #588]	; (81081a0 <HAL_SAI_Init+0x528>)
 8107f54:	fba3 2301 	umull	r2, r3, r3, r1
 8107f58:	08da      	lsrs	r2, r3, #3
 8107f5a:	4613      	mov	r3, r2
 8107f5c:	009b      	lsls	r3, r3, #2
 8107f5e:	4413      	add	r3, r2
 8107f60:	005b      	lsls	r3, r3, #1
 8107f62:	1aca      	subs	r2, r1, r3
 8107f64:	2a08      	cmp	r2, #8
 8107f66:	d904      	bls.n	8107f72 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f6c:	1c5a      	adds	r2, r3, #1
 8107f6e:	687b      	ldr	r3, [r7, #4]
 8107f70:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8107f72:	687b      	ldr	r3, [r7, #4]
 8107f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107f76:	2b04      	cmp	r3, #4
 8107f78:	d104      	bne.n	8107f84 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8107f7a:	687b      	ldr	r3, [r7, #4]
 8107f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f7e:	085a      	lsrs	r2, r3, #1
 8107f80:	687b      	ldr	r3, [r7, #4]
 8107f82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	685b      	ldr	r3, [r3, #4]
 8107f88:	2b00      	cmp	r3, #0
 8107f8a:	d003      	beq.n	8107f94 <HAL_SAI_Init+0x31c>
 8107f8c:	687b      	ldr	r3, [r7, #4]
 8107f8e:	685b      	ldr	r3, [r3, #4]
 8107f90:	2b02      	cmp	r3, #2
 8107f92:	d109      	bne.n	8107fa8 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8107f94:	687b      	ldr	r3, [r7, #4]
 8107f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107f98:	2b01      	cmp	r3, #1
 8107f9a:	d101      	bne.n	8107fa0 <HAL_SAI_Init+0x328>
 8107f9c:	2300      	movs	r3, #0
 8107f9e:	e001      	b.n	8107fa4 <HAL_SAI_Init+0x32c>
 8107fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8107fa4:	623b      	str	r3, [r7, #32]
 8107fa6:	e008      	b.n	8107fba <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107fac:	2b01      	cmp	r3, #1
 8107fae:	d102      	bne.n	8107fb6 <HAL_SAI_Init+0x33e>
 8107fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8107fb4:	e000      	b.n	8107fb8 <HAL_SAI_Init+0x340>
 8107fb6:	2300      	movs	r3, #0
 8107fb8:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8107fba:	f7fa fcc9 	bl	8102950 <HAL_GetREVID>
 8107fbe:	4603      	mov	r3, r0
 8107fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107fc4:	d331      	bcc.n	810802a <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8107fc6:	687b      	ldr	r3, [r7, #4]
 8107fc8:	681b      	ldr	r3, [r3, #0]
 8107fca:	6819      	ldr	r1, [r3, #0]
 8107fcc:	687b      	ldr	r3, [r7, #4]
 8107fce:	681a      	ldr	r2, [r3, #0]
 8107fd0:	4b74      	ldr	r3, [pc, #464]	; (81081a4 <HAL_SAI_Init+0x52c>)
 8107fd2:	400b      	ands	r3, r1
 8107fd4:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107fd6:	687b      	ldr	r3, [r7, #4]
 8107fd8:	681b      	ldr	r3, [r3, #0]
 8107fda:	6819      	ldr	r1, [r3, #0]
 8107fdc:	687b      	ldr	r3, [r7, #4]
 8107fde:	685a      	ldr	r2, [r3, #4]
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107fe4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107fea:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107fec:	687b      	ldr	r3, [r7, #4]
 8107fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107ff0:	431a      	orrs	r2, r3
 8107ff2:	6a3b      	ldr	r3, [r7, #32]
 8107ff4:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8107ff6:	69fb      	ldr	r3, [r7, #28]
 8107ff8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107ffa:	687b      	ldr	r3, [r7, #4]
 8107ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8107ffe:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108000:	687b      	ldr	r3, [r7, #4]
 8108002:	695b      	ldr	r3, [r3, #20]
 8108004:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108006:	687b      	ldr	r3, [r7, #4]
 8108008:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810800a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108010:	051b      	lsls	r3, r3, #20
 8108012:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108018:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	691b      	ldr	r3, [r3, #16]
 810801e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	681b      	ldr	r3, [r3, #0]
 8108024:	430a      	orrs	r2, r1
 8108026:	601a      	str	r2, [r3, #0]
 8108028:	e02d      	b.n	8108086 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	681b      	ldr	r3, [r3, #0]
 810802e:	6819      	ldr	r1, [r3, #0]
 8108030:	687b      	ldr	r3, [r7, #4]
 8108032:	681a      	ldr	r2, [r3, #0]
 8108034:	4b5c      	ldr	r3, [pc, #368]	; (81081a8 <HAL_SAI_Init+0x530>)
 8108036:	400b      	ands	r3, r1
 8108038:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810803a:	687b      	ldr	r3, [r7, #4]
 810803c:	681b      	ldr	r3, [r3, #0]
 810803e:	6819      	ldr	r1, [r3, #0]
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	685a      	ldr	r2, [r3, #4]
 8108044:	687b      	ldr	r3, [r7, #4]
 8108046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108048:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810804e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108050:	687b      	ldr	r3, [r7, #4]
 8108052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108054:	431a      	orrs	r2, r3
 8108056:	6a3b      	ldr	r3, [r7, #32]
 8108058:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 810805a:	69fb      	ldr	r3, [r7, #28]
 810805c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810805e:	687b      	ldr	r3, [r7, #4]
 8108060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8108062:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108064:	687b      	ldr	r3, [r7, #4]
 8108066:	695b      	ldr	r3, [r3, #20]
 8108068:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810806a:	687b      	ldr	r3, [r7, #4]
 810806c:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810806e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108074:	051b      	lsls	r3, r3, #20
 8108076:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810807c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810807e:	687b      	ldr	r3, [r7, #4]
 8108080:	681b      	ldr	r3, [r3, #0]
 8108082:	430a      	orrs	r2, r1
 8108084:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8108086:	687b      	ldr	r3, [r7, #4]
 8108088:	681b      	ldr	r3, [r3, #0]
 810808a:	685b      	ldr	r3, [r3, #4]
 810808c:	687a      	ldr	r2, [r7, #4]
 810808e:	6812      	ldr	r2, [r2, #0]
 8108090:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8108094:	f023 030f 	bic.w	r3, r3, #15
 8108098:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 810809a:	687b      	ldr	r3, [r7, #4]
 810809c:	681b      	ldr	r3, [r3, #0]
 810809e:	6859      	ldr	r1, [r3, #4]
 81080a0:	687b      	ldr	r3, [r7, #4]
 81080a2:	69da      	ldr	r2, [r3, #28]
 81080a4:	687b      	ldr	r3, [r7, #4]
 81080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81080a8:	431a      	orrs	r2, r3
 81080aa:	687b      	ldr	r3, [r7, #4]
 81080ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81080ae:	431a      	orrs	r2, r3
 81080b0:	687b      	ldr	r3, [r7, #4]
 81080b2:	681b      	ldr	r3, [r3, #0]
 81080b4:	430a      	orrs	r2, r1
 81080b6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 81080b8:	687b      	ldr	r3, [r7, #4]
 81080ba:	681b      	ldr	r3, [r3, #0]
 81080bc:	6899      	ldr	r1, [r3, #8]
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	681a      	ldr	r2, [r3, #0]
 81080c2:	4b3a      	ldr	r3, [pc, #232]	; (81081ac <HAL_SAI_Init+0x534>)
 81080c4:	400b      	ands	r3, r1
 81080c6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81080c8:	687b      	ldr	r3, [r7, #4]
 81080ca:	681b      	ldr	r3, [r3, #0]
 81080cc:	6899      	ldr	r1, [r3, #8]
 81080ce:	687b      	ldr	r3, [r7, #4]
 81080d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81080d2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81080d8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 81080de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 81080e0:	687b      	ldr	r3, [r7, #4]
 81080e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 81080e4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 81080e6:	687b      	ldr	r3, [r7, #4]
 81080e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81080ea:	3b01      	subs	r3, #1
 81080ec:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 81080ee:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81080f0:	687b      	ldr	r3, [r7, #4]
 81080f2:	681b      	ldr	r3, [r3, #0]
 81080f4:	430a      	orrs	r2, r1
 81080f6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	681b      	ldr	r3, [r3, #0]
 81080fc:	68d9      	ldr	r1, [r3, #12]
 81080fe:	687b      	ldr	r3, [r7, #4]
 8108100:	681a      	ldr	r2, [r3, #0]
 8108102:	f24f 0320 	movw	r3, #61472	; 0xf020
 8108106:	400b      	ands	r3, r1
 8108108:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810810a:	687b      	ldr	r3, [r7, #4]
 810810c:	681b      	ldr	r3, [r3, #0]
 810810e:	68d9      	ldr	r1, [r3, #12]
 8108110:	687b      	ldr	r3, [r7, #4]
 8108112:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8108114:	687b      	ldr	r3, [r7, #4]
 8108116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108118:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 810811a:	687b      	ldr	r3, [r7, #4]
 810811c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810811e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8108120:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8108122:	687b      	ldr	r3, [r7, #4]
 8108124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108126:	3b01      	subs	r3, #1
 8108128:	021b      	lsls	r3, r3, #8
 810812a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810812c:	687b      	ldr	r3, [r7, #4]
 810812e:	681b      	ldr	r3, [r3, #0]
 8108130:	430a      	orrs	r2, r1
 8108132:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8108134:	687b      	ldr	r3, [r7, #4]
 8108136:	681b      	ldr	r3, [r3, #0]
 8108138:	4a1d      	ldr	r2, [pc, #116]	; (81081b0 <HAL_SAI_Init+0x538>)
 810813a:	4293      	cmp	r3, r2
 810813c:	d004      	beq.n	8108148 <HAL_SAI_Init+0x4d0>
 810813e:	687b      	ldr	r3, [r7, #4]
 8108140:	681b      	ldr	r3, [r3, #0]
 8108142:	4a1c      	ldr	r2, [pc, #112]	; (81081b4 <HAL_SAI_Init+0x53c>)
 8108144:	4293      	cmp	r3, r2
 8108146:	d119      	bne.n	810817c <HAL_SAI_Init+0x504>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8108148:	69bb      	ldr	r3, [r7, #24]
 810814a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810814c:	f023 0201 	bic.w	r2, r3, #1
 8108150:	69bb      	ldr	r3, [r7, #24]
 8108152:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8108154:	687b      	ldr	r3, [r7, #4]
 8108156:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810815a:	2b01      	cmp	r3, #1
 810815c:	d10e      	bne.n	810817c <HAL_SAI_Init+0x504>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 810815e:	687b      	ldr	r3, [r7, #4]
 8108160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108166:	3b01      	subs	r3, #1
 8108168:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 810816a:	431a      	orrs	r2, r3
 810816c:	69bb      	ldr	r3, [r7, #24]
 810816e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8108170:	69bb      	ldr	r3, [r7, #24]
 8108172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108174:	f043 0201 	orr.w	r2, r3, #1
 8108178:	69bb      	ldr	r3, [r7, #24]
 810817a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 810817c:	687b      	ldr	r3, [r7, #4]
 810817e:	2200      	movs	r2, #0
 8108180:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8108184:	687b      	ldr	r3, [r7, #4]
 8108186:	2201      	movs	r2, #1
 8108188:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 810818c:	687b      	ldr	r3, [r7, #4]
 810818e:	2200      	movs	r2, #0
 8108190:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8108194:	2300      	movs	r3, #0
}
 8108196:	4618      	mov	r0, r3
 8108198:	3728      	adds	r7, #40	; 0x28
 810819a:	46bd      	mov	sp, r7
 810819c:	bd80      	pop	{r7, pc}
 810819e:	bf00      	nop
 81081a0:	cccccccd 	.word	0xcccccccd
 81081a4:	f005c010 	.word	0xf005c010
 81081a8:	f805c010 	.word	0xf805c010
 81081ac:	fff88000 	.word	0xfff88000
 81081b0:	40015804 	.word	0x40015804
 81081b4:	58005404 	.word	0x58005404

081081b8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 81081b8:	b480      	push	{r7}
 81081ba:	b085      	sub	sp, #20
 81081bc:	af00      	add	r7, sp, #0
 81081be:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 81081c0:	4b18      	ldr	r3, [pc, #96]	; (8108224 <SAI_Disable+0x6c>)
 81081c2:	681b      	ldr	r3, [r3, #0]
 81081c4:	4a18      	ldr	r2, [pc, #96]	; (8108228 <SAI_Disable+0x70>)
 81081c6:	fba2 2303 	umull	r2, r3, r2, r3
 81081ca:	0b1b      	lsrs	r3, r3, #12
 81081cc:	009b      	lsls	r3, r3, #2
 81081ce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 81081d0:	2300      	movs	r3, #0
 81081d2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 81081d4:	687b      	ldr	r3, [r7, #4]
 81081d6:	681b      	ldr	r3, [r3, #0]
 81081d8:	681a      	ldr	r2, [r3, #0]
 81081da:	687b      	ldr	r3, [r7, #4]
 81081dc:	681b      	ldr	r3, [r3, #0]
 81081de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 81081e2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 81081e4:	68fb      	ldr	r3, [r7, #12]
 81081e6:	2b00      	cmp	r3, #0
 81081e8:	d10a      	bne.n	8108200 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 81081ea:	687b      	ldr	r3, [r7, #4]
 81081ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81081f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81081f4:	687b      	ldr	r3, [r7, #4]
 81081f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 81081fa:	2303      	movs	r3, #3
 81081fc:	72fb      	strb	r3, [r7, #11]
      break;
 81081fe:	e009      	b.n	8108214 <SAI_Disable+0x5c>
    }
    count--;
 8108200:	68fb      	ldr	r3, [r7, #12]
 8108202:	3b01      	subs	r3, #1
 8108204:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	681b      	ldr	r3, [r3, #0]
 810820a:	681b      	ldr	r3, [r3, #0]
 810820c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8108210:	2b00      	cmp	r3, #0
 8108212:	d1e7      	bne.n	81081e4 <SAI_Disable+0x2c>

  return status;
 8108214:	7afb      	ldrb	r3, [r7, #11]
}
 8108216:	4618      	mov	r0, r3
 8108218:	3714      	adds	r7, #20
 810821a:	46bd      	mov	sp, r7
 810821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108220:	4770      	bx	lr
 8108222:	bf00      	nop
 8108224:	10000000 	.word	0x10000000
 8108228:	95cbec1b 	.word	0x95cbec1b

0810822c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 810822c:	b580      	push	{r7, lr}
 810822e:	b08a      	sub	sp, #40	; 0x28
 8108230:	af00      	add	r7, sp, #0
 8108232:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8108234:	687b      	ldr	r3, [r7, #4]
 8108236:	2b00      	cmp	r3, #0
 8108238:	d101      	bne.n	810823e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 810823a:	2301      	movs	r3, #1
 810823c:	e075      	b.n	810832a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 810823e:	687b      	ldr	r3, [r7, #4]
 8108240:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8108244:	b2db      	uxtb	r3, r3
 8108246:	2b00      	cmp	r3, #0
 8108248:	d105      	bne.n	8108256 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 810824a:	687b      	ldr	r3, [r7, #4]
 810824c:	2200      	movs	r2, #0
 810824e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8108250:	6878      	ldr	r0, [r7, #4]
 8108252:	f7f9 fac1 	bl	81017d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8108256:	687b      	ldr	r3, [r7, #4]
 8108258:	2204      	movs	r2, #4
 810825a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 810825e:	6878      	ldr	r0, [r7, #4]
 8108260:	f000 f868 	bl	8108334 <HAL_SD_InitCard>
 8108264:	4603      	mov	r3, r0
 8108266:	2b00      	cmp	r3, #0
 8108268:	d001      	beq.n	810826e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 810826a:	2301      	movs	r3, #1
 810826c:	e05d      	b.n	810832a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 810826e:	f107 0308 	add.w	r3, r7, #8
 8108272:	4619      	mov	r1, r3
 8108274:	6878      	ldr	r0, [r7, #4]
 8108276:	f000 fa97 	bl	81087a8 <HAL_SD_GetCardStatus>
 810827a:	4603      	mov	r3, r0
 810827c:	2b00      	cmp	r3, #0
 810827e:	d001      	beq.n	8108284 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8108280:	2301      	movs	r3, #1
 8108282:	e052      	b.n	810832a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8108284:	7e3b      	ldrb	r3, [r7, #24]
 8108286:	b2db      	uxtb	r3, r3
 8108288:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 810828a:	7e7b      	ldrb	r3, [r7, #25]
 810828c:	b2db      	uxtb	r3, r3
 810828e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8108290:	687b      	ldr	r3, [r7, #4]
 8108292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108294:	2b01      	cmp	r3, #1
 8108296:	d10a      	bne.n	81082ae <HAL_SD_Init+0x82>
 8108298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810829a:	2b00      	cmp	r3, #0
 810829c:	d102      	bne.n	81082a4 <HAL_SD_Init+0x78>
 810829e:	6a3b      	ldr	r3, [r7, #32]
 81082a0:	2b00      	cmp	r3, #0
 81082a2:	d004      	beq.n	81082ae <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81082aa:	659a      	str	r2, [r3, #88]	; 0x58
 81082ac:	e00b      	b.n	81082c6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81082ae:	687b      	ldr	r3, [r7, #4]
 81082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81082b2:	2b01      	cmp	r3, #1
 81082b4:	d104      	bne.n	81082c0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 81082bc:	659a      	str	r2, [r3, #88]	; 0x58
 81082be:	e002      	b.n	81082c6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 81082c0:	687b      	ldr	r3, [r7, #4]
 81082c2:	2200      	movs	r2, #0
 81082c4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 81082c6:	687b      	ldr	r3, [r7, #4]
 81082c8:	68db      	ldr	r3, [r3, #12]
 81082ca:	4619      	mov	r1, r3
 81082cc:	6878      	ldr	r0, [r7, #4]
 81082ce:	f000 fb29 	bl	8108924 <HAL_SD_ConfigWideBusOperation>
 81082d2:	4603      	mov	r3, r0
 81082d4:	2b00      	cmp	r3, #0
 81082d6:	d001      	beq.n	81082dc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 81082d8:	2301      	movs	r3, #1
 81082da:	e026      	b.n	810832a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 81082dc:	f7fa fb08 	bl	81028f0 <HAL_GetTick>
 81082e0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 81082e2:	e011      	b.n	8108308 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 81082e4:	f7fa fb04 	bl	81028f0 <HAL_GetTick>
 81082e8:	4602      	mov	r2, r0
 81082ea:	69fb      	ldr	r3, [r7, #28]
 81082ec:	1ad3      	subs	r3, r2, r3
 81082ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81082f2:	d109      	bne.n	8108308 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 81082f4:	687b      	ldr	r3, [r7, #4]
 81082f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81082fa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 81082fc:	687b      	ldr	r3, [r7, #4]
 81082fe:	2201      	movs	r2, #1
 8108300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8108304:	2303      	movs	r3, #3
 8108306:	e010      	b.n	810832a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8108308:	6878      	ldr	r0, [r7, #4]
 810830a:	f000 fc1d 	bl	8108b48 <HAL_SD_GetCardState>
 810830e:	4603      	mov	r3, r0
 8108310:	2b04      	cmp	r3, #4
 8108312:	d1e7      	bne.n	81082e4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8108314:	687b      	ldr	r3, [r7, #4]
 8108316:	2200      	movs	r2, #0
 8108318:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 810831a:	687b      	ldr	r3, [r7, #4]
 810831c:	2200      	movs	r2, #0
 810831e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8108320:	687b      	ldr	r3, [r7, #4]
 8108322:	2201      	movs	r2, #1
 8108324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8108328:	2300      	movs	r3, #0
}
 810832a:	4618      	mov	r0, r3
 810832c:	3728      	adds	r7, #40	; 0x28
 810832e:	46bd      	mov	sp, r7
 8108330:	bd80      	pop	{r7, pc}
	...

08108334 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8108334:	b590      	push	{r4, r7, lr}
 8108336:	b08d      	sub	sp, #52	; 0x34
 8108338:	af02      	add	r7, sp, #8
 810833a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 810833c:	2300      	movs	r3, #0
 810833e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8108340:	2300      	movs	r3, #0
 8108342:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8108344:	2300      	movs	r3, #0
 8108346:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8108348:	2300      	movs	r3, #0
 810834a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 810834c:	2300      	movs	r3, #0
 810834e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8108350:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8108354:	f7fe f85a 	bl	810640c <HAL_RCCEx_GetPeriphCLKFreq>
 8108358:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 810835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810835c:	2b00      	cmp	r3, #0
 810835e:	d109      	bne.n	8108374 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108360:	687b      	ldr	r3, [r7, #4]
 8108362:	2201      	movs	r2, #1
 8108364:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8108368:	687b      	ldr	r3, [r7, #4]
 810836a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 810836e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8108370:	2301      	movs	r3, #1
 8108372:	e06a      	b.n	810844a <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8108374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108376:	0a1b      	lsrs	r3, r3, #8
 8108378:	4a36      	ldr	r2, [pc, #216]	; (8108454 <HAL_SD_InitCard+0x120>)
 810837a:	fba2 2303 	umull	r2, r3, r2, r3
 810837e:	091b      	lsrs	r3, r3, #4
 8108380:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8108382:	687b      	ldr	r3, [r7, #4]
 8108384:	681c      	ldr	r4, [r3, #0]
 8108386:	466a      	mov	r2, sp
 8108388:	f107 0318 	add.w	r3, r7, #24
 810838c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8108390:	e882 0003 	stmia.w	r2, {r0, r1}
 8108394:	f107 030c 	add.w	r3, r7, #12
 8108398:	cb0e      	ldmia	r3, {r1, r2, r3}
 810839a:	4620      	mov	r0, r4
 810839c:	f003 fc58 	bl	810bc50 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 81083a0:	687b      	ldr	r3, [r7, #4]
 81083a2:	681b      	ldr	r3, [r3, #0]
 81083a4:	4618      	mov	r0, r3
 81083a6:	f003 fc8a 	bl	810bcbe <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 81083aa:	69fb      	ldr	r3, [r7, #28]
 81083ac:	005b      	lsls	r3, r3, #1
 81083ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81083b0:	fbb2 f3f3 	udiv	r3, r2, r3
 81083b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 81083b6:	4a28      	ldr	r2, [pc, #160]	; (8108458 <HAL_SD_InitCard+0x124>)
 81083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81083ba:	fbb2 f3f3 	udiv	r3, r2, r3
 81083be:	3301      	adds	r3, #1
 81083c0:	4618      	mov	r0, r3
 81083c2:	f7fa faa1 	bl	8102908 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 81083c6:	6878      	ldr	r0, [r7, #4]
 81083c8:	f000 fcac 	bl	8108d24 <SD_PowerON>
 81083cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81083ce:	6a3b      	ldr	r3, [r7, #32]
 81083d0:	2b00      	cmp	r3, #0
 81083d2:	d00b      	beq.n	81083ec <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 81083d4:	687b      	ldr	r3, [r7, #4]
 81083d6:	2201      	movs	r2, #1
 81083d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 81083dc:	687b      	ldr	r3, [r7, #4]
 81083de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81083e0:	6a3b      	ldr	r3, [r7, #32]
 81083e2:	431a      	orrs	r2, r3
 81083e4:	687b      	ldr	r3, [r7, #4]
 81083e6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 81083e8:	2301      	movs	r3, #1
 81083ea:	e02e      	b.n	810844a <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 81083ec:	6878      	ldr	r0, [r7, #4]
 81083ee:	f000 fbcb 	bl	8108b88 <SD_InitCard>
 81083f2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81083f4:	6a3b      	ldr	r3, [r7, #32]
 81083f6:	2b00      	cmp	r3, #0
 81083f8:	d00b      	beq.n	8108412 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	2201      	movs	r2, #1
 81083fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8108402:	687b      	ldr	r3, [r7, #4]
 8108404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108406:	6a3b      	ldr	r3, [r7, #32]
 8108408:	431a      	orrs	r2, r3
 810840a:	687b      	ldr	r3, [r7, #4]
 810840c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810840e:	2301      	movs	r3, #1
 8108410:	e01b      	b.n	810844a <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108412:	687b      	ldr	r3, [r7, #4]
 8108414:	681b      	ldr	r3, [r3, #0]
 8108416:	f44f 7100 	mov.w	r1, #512	; 0x200
 810841a:	4618      	mov	r0, r3
 810841c:	f003 fce4 	bl	810bde8 <SDMMC_CmdBlockLength>
 8108420:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108422:	6a3b      	ldr	r3, [r7, #32]
 8108424:	2b00      	cmp	r3, #0
 8108426:	d00f      	beq.n	8108448 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108428:	687b      	ldr	r3, [r7, #4]
 810842a:	681b      	ldr	r3, [r3, #0]
 810842c:	4a0b      	ldr	r2, [pc, #44]	; (810845c <HAL_SD_InitCard+0x128>)
 810842e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8108430:	687b      	ldr	r3, [r7, #4]
 8108432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108434:	6a3b      	ldr	r3, [r7, #32]
 8108436:	431a      	orrs	r2, r3
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	2201      	movs	r2, #1
 8108440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8108444:	2301      	movs	r3, #1
 8108446:	e000      	b.n	810844a <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8108448:	2300      	movs	r3, #0
}
 810844a:	4618      	mov	r0, r3
 810844c:	372c      	adds	r7, #44	; 0x2c
 810844e:	46bd      	mov	sp, r7
 8108450:	bd90      	pop	{r4, r7, pc}
 8108452:	bf00      	nop
 8108454:	014f8b59 	.word	0x014f8b59
 8108458:	00012110 	.word	0x00012110
 810845c:	1fe00fff 	.word	0x1fe00fff

08108460 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8108460:	b480      	push	{r7}
 8108462:	b083      	sub	sp, #12
 8108464:	af00      	add	r7, sp, #0
 8108466:	6078      	str	r0, [r7, #4]
 8108468:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 810846a:	687b      	ldr	r3, [r7, #4]
 810846c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810846e:	0f9b      	lsrs	r3, r3, #30
 8108470:	b2da      	uxtb	r2, r3
 8108472:	683b      	ldr	r3, [r7, #0]
 8108474:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8108476:	687b      	ldr	r3, [r7, #4]
 8108478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810847a:	0e9b      	lsrs	r3, r3, #26
 810847c:	b2db      	uxtb	r3, r3
 810847e:	f003 030f 	and.w	r3, r3, #15
 8108482:	b2da      	uxtb	r2, r3
 8108484:	683b      	ldr	r3, [r7, #0]
 8108486:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8108488:	687b      	ldr	r3, [r7, #4]
 810848a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810848c:	0e1b      	lsrs	r3, r3, #24
 810848e:	b2db      	uxtb	r3, r3
 8108490:	f003 0303 	and.w	r3, r3, #3
 8108494:	b2da      	uxtb	r2, r3
 8108496:	683b      	ldr	r3, [r7, #0]
 8108498:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 810849a:	687b      	ldr	r3, [r7, #4]
 810849c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810849e:	0c1b      	lsrs	r3, r3, #16
 81084a0:	b2da      	uxtb	r2, r3
 81084a2:	683b      	ldr	r3, [r7, #0]
 81084a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 81084a6:	687b      	ldr	r3, [r7, #4]
 81084a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81084aa:	0a1b      	lsrs	r3, r3, #8
 81084ac:	b2da      	uxtb	r2, r3
 81084ae:	683b      	ldr	r3, [r7, #0]
 81084b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 81084b2:	687b      	ldr	r3, [r7, #4]
 81084b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81084b6:	b2da      	uxtb	r2, r3
 81084b8:	683b      	ldr	r3, [r7, #0]
 81084ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81084c0:	0d1b      	lsrs	r3, r3, #20
 81084c2:	b29a      	uxth	r2, r3
 81084c4:	683b      	ldr	r3, [r7, #0]
 81084c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 81084c8:	687b      	ldr	r3, [r7, #4]
 81084ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81084cc:	0c1b      	lsrs	r3, r3, #16
 81084ce:	b2db      	uxtb	r3, r3
 81084d0:	f003 030f 	and.w	r3, r3, #15
 81084d4:	b2da      	uxtb	r2, r3
 81084d6:	683b      	ldr	r3, [r7, #0]
 81084d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 81084da:	687b      	ldr	r3, [r7, #4]
 81084dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81084de:	0bdb      	lsrs	r3, r3, #15
 81084e0:	b2db      	uxtb	r3, r3
 81084e2:	f003 0301 	and.w	r3, r3, #1
 81084e6:	b2da      	uxtb	r2, r3
 81084e8:	683b      	ldr	r3, [r7, #0]
 81084ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 81084ec:	687b      	ldr	r3, [r7, #4]
 81084ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81084f0:	0b9b      	lsrs	r3, r3, #14
 81084f2:	b2db      	uxtb	r3, r3
 81084f4:	f003 0301 	and.w	r3, r3, #1
 81084f8:	b2da      	uxtb	r2, r3
 81084fa:	683b      	ldr	r3, [r7, #0]
 81084fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 81084fe:	687b      	ldr	r3, [r7, #4]
 8108500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108502:	0b5b      	lsrs	r3, r3, #13
 8108504:	b2db      	uxtb	r3, r3
 8108506:	f003 0301 	and.w	r3, r3, #1
 810850a:	b2da      	uxtb	r2, r3
 810850c:	683b      	ldr	r3, [r7, #0]
 810850e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8108510:	687b      	ldr	r3, [r7, #4]
 8108512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108514:	0b1b      	lsrs	r3, r3, #12
 8108516:	b2db      	uxtb	r3, r3
 8108518:	f003 0301 	and.w	r3, r3, #1
 810851c:	b2da      	uxtb	r2, r3
 810851e:	683b      	ldr	r3, [r7, #0]
 8108520:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8108522:	683b      	ldr	r3, [r7, #0]
 8108524:	2200      	movs	r2, #0
 8108526:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8108528:	687b      	ldr	r3, [r7, #4]
 810852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810852c:	2b00      	cmp	r3, #0
 810852e:	d163      	bne.n	81085f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8108530:	687b      	ldr	r3, [r7, #4]
 8108532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108534:	009a      	lsls	r2, r3, #2
 8108536:	f640 73fc 	movw	r3, #4092	; 0xffc
 810853a:	4013      	ands	r3, r2
 810853c:	687a      	ldr	r2, [r7, #4]
 810853e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8108540:	0f92      	lsrs	r2, r2, #30
 8108542:	431a      	orrs	r2, r3
 8108544:	683b      	ldr	r3, [r7, #0]
 8108546:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8108548:	687b      	ldr	r3, [r7, #4]
 810854a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810854c:	0edb      	lsrs	r3, r3, #27
 810854e:	b2db      	uxtb	r3, r3
 8108550:	f003 0307 	and.w	r3, r3, #7
 8108554:	b2da      	uxtb	r2, r3
 8108556:	683b      	ldr	r3, [r7, #0]
 8108558:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 810855a:	687b      	ldr	r3, [r7, #4]
 810855c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810855e:	0e1b      	lsrs	r3, r3, #24
 8108560:	b2db      	uxtb	r3, r3
 8108562:	f003 0307 	and.w	r3, r3, #7
 8108566:	b2da      	uxtb	r2, r3
 8108568:	683b      	ldr	r3, [r7, #0]
 810856a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 810856c:	687b      	ldr	r3, [r7, #4]
 810856e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108570:	0d5b      	lsrs	r3, r3, #21
 8108572:	b2db      	uxtb	r3, r3
 8108574:	f003 0307 	and.w	r3, r3, #7
 8108578:	b2da      	uxtb	r2, r3
 810857a:	683b      	ldr	r3, [r7, #0]
 810857c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 810857e:	687b      	ldr	r3, [r7, #4]
 8108580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108582:	0c9b      	lsrs	r3, r3, #18
 8108584:	b2db      	uxtb	r3, r3
 8108586:	f003 0307 	and.w	r3, r3, #7
 810858a:	b2da      	uxtb	r2, r3
 810858c:	683b      	ldr	r3, [r7, #0]
 810858e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8108590:	687b      	ldr	r3, [r7, #4]
 8108592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108594:	0bdb      	lsrs	r3, r3, #15
 8108596:	b2db      	uxtb	r3, r3
 8108598:	f003 0307 	and.w	r3, r3, #7
 810859c:	b2da      	uxtb	r2, r3
 810859e:	683b      	ldr	r3, [r7, #0]
 81085a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 81085a2:	683b      	ldr	r3, [r7, #0]
 81085a4:	691b      	ldr	r3, [r3, #16]
 81085a6:	1c5a      	adds	r2, r3, #1
 81085a8:	687b      	ldr	r3, [r7, #4]
 81085aa:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 81085ac:	683b      	ldr	r3, [r7, #0]
 81085ae:	7e1b      	ldrb	r3, [r3, #24]
 81085b0:	b2db      	uxtb	r3, r3
 81085b2:	f003 0307 	and.w	r3, r3, #7
 81085b6:	3302      	adds	r3, #2
 81085b8:	2201      	movs	r2, #1
 81085ba:	fa02 f303 	lsl.w	r3, r2, r3
 81085be:	687a      	ldr	r2, [r7, #4]
 81085c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 81085c2:	fb03 f202 	mul.w	r2, r3, r2
 81085c6:	687b      	ldr	r3, [r7, #4]
 81085c8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 81085ca:	683b      	ldr	r3, [r7, #0]
 81085cc:	7a1b      	ldrb	r3, [r3, #8]
 81085ce:	b2db      	uxtb	r3, r3
 81085d0:	f003 030f 	and.w	r3, r3, #15
 81085d4:	2201      	movs	r2, #1
 81085d6:	409a      	lsls	r2, r3
 81085d8:	687b      	ldr	r3, [r7, #4]
 81085da:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 81085dc:	687b      	ldr	r3, [r7, #4]
 81085de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81085e0:	687a      	ldr	r2, [r7, #4]
 81085e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 81085e4:	0a52      	lsrs	r2, r2, #9
 81085e6:	fb03 f202 	mul.w	r2, r3, r2
 81085ea:	687b      	ldr	r3, [r7, #4]
 81085ec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 81085ee:	687b      	ldr	r3, [r7, #4]
 81085f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 81085f4:	655a      	str	r2, [r3, #84]	; 0x54
 81085f6:	e031      	b.n	810865c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81085f8:	687b      	ldr	r3, [r7, #4]
 81085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085fc:	2b01      	cmp	r3, #1
 81085fe:	d11d      	bne.n	810863c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8108600:	687b      	ldr	r3, [r7, #4]
 8108602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108604:	041b      	lsls	r3, r3, #16
 8108606:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 810860a:	687b      	ldr	r3, [r7, #4]
 810860c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810860e:	0c1b      	lsrs	r3, r3, #16
 8108610:	431a      	orrs	r2, r3
 8108612:	683b      	ldr	r3, [r7, #0]
 8108614:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8108616:	683b      	ldr	r3, [r7, #0]
 8108618:	691b      	ldr	r3, [r3, #16]
 810861a:	3301      	adds	r3, #1
 810861c:	029a      	lsls	r2, r3, #10
 810861e:	687b      	ldr	r3, [r7, #4]
 8108620:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8108622:	687b      	ldr	r3, [r7, #4]
 8108624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108626:	687b      	ldr	r3, [r7, #4]
 8108628:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 810862a:	687b      	ldr	r3, [r7, #4]
 810862c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8108630:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8108632:	687b      	ldr	r3, [r7, #4]
 8108634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108636:	687b      	ldr	r3, [r7, #4]
 8108638:	655a      	str	r2, [r3, #84]	; 0x54
 810863a:	e00f      	b.n	810865c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810863c:	687b      	ldr	r3, [r7, #4]
 810863e:	681b      	ldr	r3, [r3, #0]
 8108640:	4a58      	ldr	r2, [pc, #352]	; (81087a4 <HAL_SD_GetCardCSD+0x344>)
 8108642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108648:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810864c:	687b      	ldr	r3, [r7, #4]
 810864e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	2201      	movs	r2, #1
 8108654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8108658:	2301      	movs	r3, #1
 810865a:	e09d      	b.n	8108798 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108660:	0b9b      	lsrs	r3, r3, #14
 8108662:	b2db      	uxtb	r3, r3
 8108664:	f003 0301 	and.w	r3, r3, #1
 8108668:	b2da      	uxtb	r2, r3
 810866a:	683b      	ldr	r3, [r7, #0]
 810866c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 810866e:	687b      	ldr	r3, [r7, #4]
 8108670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108672:	09db      	lsrs	r3, r3, #7
 8108674:	b2db      	uxtb	r3, r3
 8108676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810867a:	b2da      	uxtb	r2, r3
 810867c:	683b      	ldr	r3, [r7, #0]
 810867e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8108680:	687b      	ldr	r3, [r7, #4]
 8108682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108684:	b2db      	uxtb	r3, r3
 8108686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810868a:	b2da      	uxtb	r2, r3
 810868c:	683b      	ldr	r3, [r7, #0]
 810868e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8108690:	687b      	ldr	r3, [r7, #4]
 8108692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108694:	0fdb      	lsrs	r3, r3, #31
 8108696:	b2da      	uxtb	r2, r3
 8108698:	683b      	ldr	r3, [r7, #0]
 810869a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 810869c:	687b      	ldr	r3, [r7, #4]
 810869e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81086a0:	0f5b      	lsrs	r3, r3, #29
 81086a2:	b2db      	uxtb	r3, r3
 81086a4:	f003 0303 	and.w	r3, r3, #3
 81086a8:	b2da      	uxtb	r2, r3
 81086aa:	683b      	ldr	r3, [r7, #0]
 81086ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 81086ae:	687b      	ldr	r3, [r7, #4]
 81086b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81086b2:	0e9b      	lsrs	r3, r3, #26
 81086b4:	b2db      	uxtb	r3, r3
 81086b6:	f003 0307 	and.w	r3, r3, #7
 81086ba:	b2da      	uxtb	r2, r3
 81086bc:	683b      	ldr	r3, [r7, #0]
 81086be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 81086c0:	687b      	ldr	r3, [r7, #4]
 81086c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81086c4:	0d9b      	lsrs	r3, r3, #22
 81086c6:	b2db      	uxtb	r3, r3
 81086c8:	f003 030f 	and.w	r3, r3, #15
 81086cc:	b2da      	uxtb	r2, r3
 81086ce:	683b      	ldr	r3, [r7, #0]
 81086d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 81086d2:	687b      	ldr	r3, [r7, #4]
 81086d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81086d6:	0d5b      	lsrs	r3, r3, #21
 81086d8:	b2db      	uxtb	r3, r3
 81086da:	f003 0301 	and.w	r3, r3, #1
 81086de:	b2da      	uxtb	r2, r3
 81086e0:	683b      	ldr	r3, [r7, #0]
 81086e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 81086e6:	683b      	ldr	r3, [r7, #0]
 81086e8:	2200      	movs	r2, #0
 81086ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 81086ee:	687b      	ldr	r3, [r7, #4]
 81086f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81086f2:	0c1b      	lsrs	r3, r3, #16
 81086f4:	b2db      	uxtb	r3, r3
 81086f6:	f003 0301 	and.w	r3, r3, #1
 81086fa:	b2da      	uxtb	r2, r3
 81086fc:	683b      	ldr	r3, [r7, #0]
 81086fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8108702:	687b      	ldr	r3, [r7, #4]
 8108704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108706:	0bdb      	lsrs	r3, r3, #15
 8108708:	b2db      	uxtb	r3, r3
 810870a:	f003 0301 	and.w	r3, r3, #1
 810870e:	b2da      	uxtb	r2, r3
 8108710:	683b      	ldr	r3, [r7, #0]
 8108712:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8108716:	687b      	ldr	r3, [r7, #4]
 8108718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810871a:	0b9b      	lsrs	r3, r3, #14
 810871c:	b2db      	uxtb	r3, r3
 810871e:	f003 0301 	and.w	r3, r3, #1
 8108722:	b2da      	uxtb	r2, r3
 8108724:	683b      	ldr	r3, [r7, #0]
 8108726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 810872a:	687b      	ldr	r3, [r7, #4]
 810872c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810872e:	0b5b      	lsrs	r3, r3, #13
 8108730:	b2db      	uxtb	r3, r3
 8108732:	f003 0301 	and.w	r3, r3, #1
 8108736:	b2da      	uxtb	r2, r3
 8108738:	683b      	ldr	r3, [r7, #0]
 810873a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 810873e:	687b      	ldr	r3, [r7, #4]
 8108740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108742:	0b1b      	lsrs	r3, r3, #12
 8108744:	b2db      	uxtb	r3, r3
 8108746:	f003 0301 	and.w	r3, r3, #1
 810874a:	b2da      	uxtb	r2, r3
 810874c:	683b      	ldr	r3, [r7, #0]
 810874e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8108752:	687b      	ldr	r3, [r7, #4]
 8108754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108756:	0a9b      	lsrs	r3, r3, #10
 8108758:	b2db      	uxtb	r3, r3
 810875a:	f003 0303 	and.w	r3, r3, #3
 810875e:	b2da      	uxtb	r2, r3
 8108760:	683b      	ldr	r3, [r7, #0]
 8108762:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8108766:	687b      	ldr	r3, [r7, #4]
 8108768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810876a:	0a1b      	lsrs	r3, r3, #8
 810876c:	b2db      	uxtb	r3, r3
 810876e:	f003 0303 	and.w	r3, r3, #3
 8108772:	b2da      	uxtb	r2, r3
 8108774:	683b      	ldr	r3, [r7, #0]
 8108776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 810877a:	687b      	ldr	r3, [r7, #4]
 810877c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810877e:	085b      	lsrs	r3, r3, #1
 8108780:	b2db      	uxtb	r3, r3
 8108782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108786:	b2da      	uxtb	r2, r3
 8108788:	683b      	ldr	r3, [r7, #0]
 810878a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 810878e:	683b      	ldr	r3, [r7, #0]
 8108790:	2201      	movs	r2, #1
 8108792:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8108796:	2300      	movs	r3, #0
}
 8108798:	4618      	mov	r0, r3
 810879a:	370c      	adds	r7, #12
 810879c:	46bd      	mov	sp, r7
 810879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087a2:	4770      	bx	lr
 81087a4:	1fe00fff 	.word	0x1fe00fff

081087a8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 81087a8:	b580      	push	{r7, lr}
 81087aa:	b094      	sub	sp, #80	; 0x50
 81087ac:	af00      	add	r7, sp, #0
 81087ae:	6078      	str	r0, [r7, #4]
 81087b0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 81087b2:	2300      	movs	r3, #0
 81087b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 81087b8:	687b      	ldr	r3, [r7, #4]
 81087ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81087be:	b2db      	uxtb	r3, r3
 81087c0:	2b03      	cmp	r3, #3
 81087c2:	d101      	bne.n	81087c8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 81087c4:	2301      	movs	r3, #1
 81087c6:	e0a7      	b.n	8108918 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 81087c8:	f107 0308 	add.w	r3, r7, #8
 81087cc:	4619      	mov	r1, r3
 81087ce:	6878      	ldr	r0, [r7, #4]
 81087d0:	f000 fb36 	bl	8108e40 <SD_SendSDStatus>
 81087d4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 81087d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81087d8:	2b00      	cmp	r3, #0
 81087da:	d011      	beq.n	8108800 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81087dc:	687b      	ldr	r3, [r7, #4]
 81087de:	681b      	ldr	r3, [r3, #0]
 81087e0:	4a4f      	ldr	r2, [pc, #316]	; (8108920 <HAL_SD_GetCardStatus+0x178>)
 81087e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 81087e4:	687b      	ldr	r3, [r7, #4]
 81087e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81087e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81087ea:	431a      	orrs	r2, r3
 81087ec:	687b      	ldr	r3, [r7, #4]
 81087ee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 81087f0:	687b      	ldr	r3, [r7, #4]
 81087f2:	2201      	movs	r2, #1
 81087f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 81087f8:	2301      	movs	r3, #1
 81087fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 81087fe:	e070      	b.n	81088e2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8108800:	68bb      	ldr	r3, [r7, #8]
 8108802:	099b      	lsrs	r3, r3, #6
 8108804:	b2db      	uxtb	r3, r3
 8108806:	f003 0303 	and.w	r3, r3, #3
 810880a:	b2da      	uxtb	r2, r3
 810880c:	683b      	ldr	r3, [r7, #0]
 810880e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8108810:	68bb      	ldr	r3, [r7, #8]
 8108812:	095b      	lsrs	r3, r3, #5
 8108814:	b2db      	uxtb	r3, r3
 8108816:	f003 0301 	and.w	r3, r3, #1
 810881a:	b2da      	uxtb	r2, r3
 810881c:	683b      	ldr	r3, [r7, #0]
 810881e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8108820:	68bb      	ldr	r3, [r7, #8]
 8108822:	0a1b      	lsrs	r3, r3, #8
 8108824:	b29b      	uxth	r3, r3
 8108826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810882a:	b29a      	uxth	r2, r3
 810882c:	68bb      	ldr	r3, [r7, #8]
 810882e:	0e1b      	lsrs	r3, r3, #24
 8108830:	b29b      	uxth	r3, r3
 8108832:	4313      	orrs	r3, r2
 8108834:	b29a      	uxth	r2, r3
 8108836:	683b      	ldr	r3, [r7, #0]
 8108838:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810883a:	68fb      	ldr	r3, [r7, #12]
 810883c:	061a      	lsls	r2, r3, #24
 810883e:	68fb      	ldr	r3, [r7, #12]
 8108840:	021b      	lsls	r3, r3, #8
 8108842:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8108846:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108848:	68fb      	ldr	r3, [r7, #12]
 810884a:	0a1b      	lsrs	r3, r3, #8
 810884c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108850:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108852:	68fb      	ldr	r3, [r7, #12]
 8108854:	0e1b      	lsrs	r3, r3, #24
 8108856:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108858:	683b      	ldr	r3, [r7, #0]
 810885a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 810885c:	693b      	ldr	r3, [r7, #16]
 810885e:	b2da      	uxtb	r2, r3
 8108860:	683b      	ldr	r3, [r7, #0]
 8108862:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8108864:	693b      	ldr	r3, [r7, #16]
 8108866:	0a1b      	lsrs	r3, r3, #8
 8108868:	b2da      	uxtb	r2, r3
 810886a:	683b      	ldr	r3, [r7, #0]
 810886c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 810886e:	693b      	ldr	r3, [r7, #16]
 8108870:	0d1b      	lsrs	r3, r3, #20
 8108872:	b2db      	uxtb	r3, r3
 8108874:	f003 030f 	and.w	r3, r3, #15
 8108878:	b2da      	uxtb	r2, r3
 810887a:	683b      	ldr	r3, [r7, #0]
 810887c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 810887e:	693b      	ldr	r3, [r7, #16]
 8108880:	0c1b      	lsrs	r3, r3, #16
 8108882:	b29b      	uxth	r3, r3
 8108884:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8108888:	b29a      	uxth	r2, r3
 810888a:	697b      	ldr	r3, [r7, #20]
 810888c:	b29b      	uxth	r3, r3
 810888e:	b2db      	uxtb	r3, r3
 8108890:	b29b      	uxth	r3, r3
 8108892:	4313      	orrs	r3, r2
 8108894:	b29a      	uxth	r2, r3
 8108896:	683b      	ldr	r3, [r7, #0]
 8108898:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 810889a:	697b      	ldr	r3, [r7, #20]
 810889c:	0a9b      	lsrs	r3, r3, #10
 810889e:	b2db      	uxtb	r3, r3
 81088a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81088a4:	b2da      	uxtb	r2, r3
 81088a6:	683b      	ldr	r3, [r7, #0]
 81088a8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 81088aa:	697b      	ldr	r3, [r7, #20]
 81088ac:	0a1b      	lsrs	r3, r3, #8
 81088ae:	b2db      	uxtb	r3, r3
 81088b0:	f003 0303 	and.w	r3, r3, #3
 81088b4:	b2da      	uxtb	r2, r3
 81088b6:	683b      	ldr	r3, [r7, #0]
 81088b8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 81088ba:	697b      	ldr	r3, [r7, #20]
 81088bc:	091b      	lsrs	r3, r3, #4
 81088be:	b2db      	uxtb	r3, r3
 81088c0:	f003 030f 	and.w	r3, r3, #15
 81088c4:	b2da      	uxtb	r2, r3
 81088c6:	683b      	ldr	r3, [r7, #0]
 81088c8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 81088ca:	697b      	ldr	r3, [r7, #20]
 81088cc:	b2db      	uxtb	r3, r3
 81088ce:	f003 030f 	and.w	r3, r3, #15
 81088d2:	b2da      	uxtb	r2, r3
 81088d4:	683b      	ldr	r3, [r7, #0]
 81088d6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 81088d8:	69bb      	ldr	r3, [r7, #24]
 81088da:	0e1b      	lsrs	r3, r3, #24
 81088dc:	b2da      	uxtb	r2, r3
 81088de:	683b      	ldr	r3, [r7, #0]
 81088e0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 81088e2:	687b      	ldr	r3, [r7, #4]
 81088e4:	681b      	ldr	r3, [r3, #0]
 81088e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 81088ea:	4618      	mov	r0, r3
 81088ec:	f003 fa7c 	bl	810bde8 <SDMMC_CmdBlockLength>
 81088f0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 81088f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81088f4:	2b00      	cmp	r3, #0
 81088f6:	d00d      	beq.n	8108914 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81088f8:	687b      	ldr	r3, [r7, #4]
 81088fa:	681b      	ldr	r3, [r3, #0]
 81088fc:	4a08      	ldr	r2, [pc, #32]	; (8108920 <HAL_SD_GetCardStatus+0x178>)
 81088fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8108900:	687b      	ldr	r3, [r7, #4]
 8108902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108904:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108906:	687b      	ldr	r3, [r7, #4]
 8108908:	2201      	movs	r2, #1
 810890a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 810890e:	2301      	movs	r3, #1
 8108910:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8108914:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8108918:	4618      	mov	r0, r3
 810891a:	3750      	adds	r7, #80	; 0x50
 810891c:	46bd      	mov	sp, r7
 810891e:	bd80      	pop	{r7, pc}
 8108920:	1fe00fff 	.word	0x1fe00fff

08108924 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8108924:	b590      	push	{r4, r7, lr}
 8108926:	b08d      	sub	sp, #52	; 0x34
 8108928:	af02      	add	r7, sp, #8
 810892a:	6078      	str	r0, [r7, #4]
 810892c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 810892e:	2300      	movs	r3, #0
 8108930:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8108932:	2300      	movs	r3, #0
 8108934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	2203      	movs	r2, #3
 810893c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108944:	2b03      	cmp	r3, #3
 8108946:	d02e      	beq.n	81089a6 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8108948:	683b      	ldr	r3, [r7, #0]
 810894a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810894e:	d106      	bne.n	810895e <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108950:	687b      	ldr	r3, [r7, #4]
 8108952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108954:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8108958:	687b      	ldr	r3, [r7, #4]
 810895a:	635a      	str	r2, [r3, #52]	; 0x34
 810895c:	e029      	b.n	81089b2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 810895e:	683b      	ldr	r3, [r7, #0]
 8108960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108964:	d10a      	bne.n	810897c <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8108966:	6878      	ldr	r0, [r7, #4]
 8108968:	f000 fb62 	bl	8109030 <SD_WideBus_Enable>
 810896c:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 810896e:	687b      	ldr	r3, [r7, #4]
 8108970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108972:	69fb      	ldr	r3, [r7, #28]
 8108974:	431a      	orrs	r2, r3
 8108976:	687b      	ldr	r3, [r7, #4]
 8108978:	635a      	str	r2, [r3, #52]	; 0x34
 810897a:	e01a      	b.n	81089b2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 810897c:	683b      	ldr	r3, [r7, #0]
 810897e:	2b00      	cmp	r3, #0
 8108980:	d10a      	bne.n	8108998 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8108982:	6878      	ldr	r0, [r7, #4]
 8108984:	f000 fb9f 	bl	81090c6 <SD_WideBus_Disable>
 8108988:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 810898a:	687b      	ldr	r3, [r7, #4]
 810898c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810898e:	69fb      	ldr	r3, [r7, #28]
 8108990:	431a      	orrs	r2, r3
 8108992:	687b      	ldr	r3, [r7, #4]
 8108994:	635a      	str	r2, [r3, #52]	; 0x34
 8108996:	e00c      	b.n	81089b2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8108998:	687b      	ldr	r3, [r7, #4]
 810899a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810899c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 81089a0:	687b      	ldr	r3, [r7, #4]
 81089a2:	635a      	str	r2, [r3, #52]	; 0x34
 81089a4:	e005      	b.n	81089b2 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81089a6:	687b      	ldr	r3, [r7, #4]
 81089a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81089aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81089ae:	687b      	ldr	r3, [r7, #4]
 81089b0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 81089b2:	687b      	ldr	r3, [r7, #4]
 81089b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81089b6:	2b00      	cmp	r3, #0
 81089b8:	d007      	beq.n	81089ca <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81089ba:	687b      	ldr	r3, [r7, #4]
 81089bc:	681b      	ldr	r3, [r3, #0]
 81089be:	4a5e      	ldr	r2, [pc, #376]	; (8108b38 <HAL_SD_ConfigWideBusOperation+0x214>)
 81089c0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 81089c2:	2301      	movs	r3, #1
 81089c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 81089c8:	e094      	b.n	8108af4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 81089ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 81089ce:	f7fd fd1d 	bl	810640c <HAL_RCCEx_GetPeriphCLKFreq>
 81089d2:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 81089d4:	6a3b      	ldr	r3, [r7, #32]
 81089d6:	2b00      	cmp	r3, #0
 81089d8:	f000 8083 	beq.w	8108ae2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 81089dc:	687b      	ldr	r3, [r7, #4]
 81089de:	685b      	ldr	r3, [r3, #4]
 81089e0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 81089e2:	687b      	ldr	r3, [r7, #4]
 81089e4:	689b      	ldr	r3, [r3, #8]
 81089e6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 81089e8:	683b      	ldr	r3, [r7, #0]
 81089ea:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 81089ec:	687b      	ldr	r3, [r7, #4]
 81089ee:	691b      	ldr	r3, [r3, #16]
 81089f0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 81089f2:	687b      	ldr	r3, [r7, #4]
 81089f4:	695a      	ldr	r2, [r3, #20]
 81089f6:	6a3b      	ldr	r3, [r7, #32]
 81089f8:	4950      	ldr	r1, [pc, #320]	; (8108b3c <HAL_SD_ConfigWideBusOperation+0x218>)
 81089fa:	fba1 1303 	umull	r1, r3, r1, r3
 81089fe:	0e1b      	lsrs	r3, r3, #24
 8108a00:	429a      	cmp	r2, r3
 8108a02:	d303      	bcc.n	8108a0c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8108a04:	687b      	ldr	r3, [r7, #4]
 8108a06:	695b      	ldr	r3, [r3, #20]
 8108a08:	61bb      	str	r3, [r7, #24]
 8108a0a:	e05a      	b.n	8108ac2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8108a0c:	687b      	ldr	r3, [r7, #4]
 8108a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108a14:	d103      	bne.n	8108a1e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8108a16:	687b      	ldr	r3, [r7, #4]
 8108a18:	695b      	ldr	r3, [r3, #20]
 8108a1a:	61bb      	str	r3, [r7, #24]
 8108a1c:	e051      	b.n	8108ac2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8108a1e:	687b      	ldr	r3, [r7, #4]
 8108a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108a26:	d126      	bne.n	8108a76 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8108a28:	687b      	ldr	r3, [r7, #4]
 8108a2a:	695b      	ldr	r3, [r3, #20]
 8108a2c:	2b00      	cmp	r3, #0
 8108a2e:	d10e      	bne.n	8108a4e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8108a30:	6a3b      	ldr	r3, [r7, #32]
 8108a32:	4a43      	ldr	r2, [pc, #268]	; (8108b40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8108a34:	4293      	cmp	r3, r2
 8108a36:	d906      	bls.n	8108a46 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8108a38:	6a3b      	ldr	r3, [r7, #32]
 8108a3a:	4a40      	ldr	r2, [pc, #256]	; (8108b3c <HAL_SD_ConfigWideBusOperation+0x218>)
 8108a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8108a40:	0e5b      	lsrs	r3, r3, #25
 8108a42:	61bb      	str	r3, [r7, #24]
 8108a44:	e03d      	b.n	8108ac2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108a46:	687b      	ldr	r3, [r7, #4]
 8108a48:	695b      	ldr	r3, [r3, #20]
 8108a4a:	61bb      	str	r3, [r7, #24]
 8108a4c:	e039      	b.n	8108ac2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8108a4e:	687b      	ldr	r3, [r7, #4]
 8108a50:	695b      	ldr	r3, [r3, #20]
 8108a52:	005b      	lsls	r3, r3, #1
 8108a54:	6a3a      	ldr	r2, [r7, #32]
 8108a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8108a5a:	4a39      	ldr	r2, [pc, #228]	; (8108b40 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8108a5c:	4293      	cmp	r3, r2
 8108a5e:	d906      	bls.n	8108a6e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8108a60:	6a3b      	ldr	r3, [r7, #32]
 8108a62:	4a36      	ldr	r2, [pc, #216]	; (8108b3c <HAL_SD_ConfigWideBusOperation+0x218>)
 8108a64:	fba2 2303 	umull	r2, r3, r2, r3
 8108a68:	0e5b      	lsrs	r3, r3, #25
 8108a6a:	61bb      	str	r3, [r7, #24]
 8108a6c:	e029      	b.n	8108ac2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108a6e:	687b      	ldr	r3, [r7, #4]
 8108a70:	695b      	ldr	r3, [r3, #20]
 8108a72:	61bb      	str	r3, [r7, #24]
 8108a74:	e025      	b.n	8108ac2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8108a76:	687b      	ldr	r3, [r7, #4]
 8108a78:	695b      	ldr	r3, [r3, #20]
 8108a7a:	2b00      	cmp	r3, #0
 8108a7c:	d10e      	bne.n	8108a9c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8108a7e:	6a3b      	ldr	r3, [r7, #32]
 8108a80:	4a30      	ldr	r2, [pc, #192]	; (8108b44 <HAL_SD_ConfigWideBusOperation+0x220>)
 8108a82:	4293      	cmp	r3, r2
 8108a84:	d906      	bls.n	8108a94 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8108a86:	6a3b      	ldr	r3, [r7, #32]
 8108a88:	4a2c      	ldr	r2, [pc, #176]	; (8108b3c <HAL_SD_ConfigWideBusOperation+0x218>)
 8108a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8108a8e:	0e1b      	lsrs	r3, r3, #24
 8108a90:	61bb      	str	r3, [r7, #24]
 8108a92:	e016      	b.n	8108ac2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108a94:	687b      	ldr	r3, [r7, #4]
 8108a96:	695b      	ldr	r3, [r3, #20]
 8108a98:	61bb      	str	r3, [r7, #24]
 8108a9a:	e012      	b.n	8108ac2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8108a9c:	687b      	ldr	r3, [r7, #4]
 8108a9e:	695b      	ldr	r3, [r3, #20]
 8108aa0:	005b      	lsls	r3, r3, #1
 8108aa2:	6a3a      	ldr	r2, [r7, #32]
 8108aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8108aa8:	4a26      	ldr	r2, [pc, #152]	; (8108b44 <HAL_SD_ConfigWideBusOperation+0x220>)
 8108aaa:	4293      	cmp	r3, r2
 8108aac:	d906      	bls.n	8108abc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8108aae:	6a3b      	ldr	r3, [r7, #32]
 8108ab0:	4a22      	ldr	r2, [pc, #136]	; (8108b3c <HAL_SD_ConfigWideBusOperation+0x218>)
 8108ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8108ab6:	0e1b      	lsrs	r3, r3, #24
 8108ab8:	61bb      	str	r3, [r7, #24]
 8108aba:	e002      	b.n	8108ac2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108abc:	687b      	ldr	r3, [r7, #4]
 8108abe:	695b      	ldr	r3, [r3, #20]
 8108ac0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8108ac2:	687b      	ldr	r3, [r7, #4]
 8108ac4:	681c      	ldr	r4, [r3, #0]
 8108ac6:	466a      	mov	r2, sp
 8108ac8:	f107 0314 	add.w	r3, r7, #20
 8108acc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8108ad0:	e882 0003 	stmia.w	r2, {r0, r1}
 8108ad4:	f107 0308 	add.w	r3, r7, #8
 8108ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8108ada:	4620      	mov	r0, r4
 8108adc:	f003 f8b8 	bl	810bc50 <SDMMC_Init>
 8108ae0:	e008      	b.n	8108af4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8108ae2:	687b      	ldr	r3, [r7, #4]
 8108ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108ae6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8108aee:	2301      	movs	r3, #1
 8108af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108af4:	687b      	ldr	r3, [r7, #4]
 8108af6:	681b      	ldr	r3, [r3, #0]
 8108af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8108afc:	4618      	mov	r0, r3
 8108afe:	f003 f973 	bl	810bde8 <SDMMC_CmdBlockLength>
 8108b02:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108b04:	69fb      	ldr	r3, [r7, #28]
 8108b06:	2b00      	cmp	r3, #0
 8108b08:	d00c      	beq.n	8108b24 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108b0a:	687b      	ldr	r3, [r7, #4]
 8108b0c:	681b      	ldr	r3, [r3, #0]
 8108b0e:	4a0a      	ldr	r2, [pc, #40]	; (8108b38 <HAL_SD_ConfigWideBusOperation+0x214>)
 8108b10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108b16:	69fb      	ldr	r3, [r7, #28]
 8108b18:	431a      	orrs	r2, r3
 8108b1a:	687b      	ldr	r3, [r7, #4]
 8108b1c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8108b1e:	2301      	movs	r3, #1
 8108b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8108b24:	687b      	ldr	r3, [r7, #4]
 8108b26:	2201      	movs	r2, #1
 8108b28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8108b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8108b30:	4618      	mov	r0, r3
 8108b32:	372c      	adds	r7, #44	; 0x2c
 8108b34:	46bd      	mov	sp, r7
 8108b36:	bd90      	pop	{r4, r7, pc}
 8108b38:	1fe00fff 	.word	0x1fe00fff
 8108b3c:	55e63b89 	.word	0x55e63b89
 8108b40:	02faf080 	.word	0x02faf080
 8108b44:	017d7840 	.word	0x017d7840

08108b48 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8108b48:	b580      	push	{r7, lr}
 8108b4a:	b086      	sub	sp, #24
 8108b4c:	af00      	add	r7, sp, #0
 8108b4e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8108b50:	2300      	movs	r3, #0
 8108b52:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8108b54:	f107 030c 	add.w	r3, r7, #12
 8108b58:	4619      	mov	r1, r3
 8108b5a:	6878      	ldr	r0, [r7, #4]
 8108b5c:	f000 fa40 	bl	8108fe0 <SD_SendStatus>
 8108b60:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108b62:	697b      	ldr	r3, [r7, #20]
 8108b64:	2b00      	cmp	r3, #0
 8108b66:	d005      	beq.n	8108b74 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8108b68:	687b      	ldr	r3, [r7, #4]
 8108b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108b6c:	697b      	ldr	r3, [r7, #20]
 8108b6e:	431a      	orrs	r2, r3
 8108b70:	687b      	ldr	r3, [r7, #4]
 8108b72:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8108b74:	68fb      	ldr	r3, [r7, #12]
 8108b76:	0a5b      	lsrs	r3, r3, #9
 8108b78:	f003 030f 	and.w	r3, r3, #15
 8108b7c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8108b7e:	693b      	ldr	r3, [r7, #16]
}
 8108b80:	4618      	mov	r0, r3
 8108b82:	3718      	adds	r7, #24
 8108b84:	46bd      	mov	sp, r7
 8108b86:	bd80      	pop	{r7, pc}

08108b88 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8108b88:	b580      	push	{r7, lr}
 8108b8a:	b090      	sub	sp, #64	; 0x40
 8108b8c:	af00      	add	r7, sp, #0
 8108b8e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8108b90:	2300      	movs	r3, #0
 8108b92:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8108b94:	f7f9 feac 	bl	81028f0 <HAL_GetTick>
 8108b98:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8108b9a:	687b      	ldr	r3, [r7, #4]
 8108b9c:	681b      	ldr	r3, [r3, #0]
 8108b9e:	4618      	mov	r0, r3
 8108ba0:	f003 f89e 	bl	810bce0 <SDMMC_GetPowerState>
 8108ba4:	4603      	mov	r3, r0
 8108ba6:	2b00      	cmp	r3, #0
 8108ba8:	d102      	bne.n	8108bb0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8108baa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8108bae:	e0b5      	b.n	8108d1c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108bb0:	687b      	ldr	r3, [r7, #4]
 8108bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108bb4:	2b03      	cmp	r3, #3
 8108bb6:	d02e      	beq.n	8108c16 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8108bb8:	687b      	ldr	r3, [r7, #4]
 8108bba:	681b      	ldr	r3, [r3, #0]
 8108bbc:	4618      	mov	r0, r3
 8108bbe:	f003 fa1f 	bl	810c000 <SDMMC_CmdSendCID>
 8108bc2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8108bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108bc6:	2b00      	cmp	r3, #0
 8108bc8:	d001      	beq.n	8108bce <SD_InitCard+0x46>
    {
      return errorstate;
 8108bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108bcc:	e0a6      	b.n	8108d1c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8108bce:	687b      	ldr	r3, [r7, #4]
 8108bd0:	681b      	ldr	r3, [r3, #0]
 8108bd2:	2100      	movs	r1, #0
 8108bd4:	4618      	mov	r0, r3
 8108bd6:	f003 f8c8 	bl	810bd6a <SDMMC_GetResponse>
 8108bda:	4602      	mov	r2, r0
 8108bdc:	687b      	ldr	r3, [r7, #4]
 8108bde:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8108be0:	687b      	ldr	r3, [r7, #4]
 8108be2:	681b      	ldr	r3, [r3, #0]
 8108be4:	2104      	movs	r1, #4
 8108be6:	4618      	mov	r0, r3
 8108be8:	f003 f8bf 	bl	810bd6a <SDMMC_GetResponse>
 8108bec:	4602      	mov	r2, r0
 8108bee:	687b      	ldr	r3, [r7, #4]
 8108bf0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8108bf2:	687b      	ldr	r3, [r7, #4]
 8108bf4:	681b      	ldr	r3, [r3, #0]
 8108bf6:	2108      	movs	r1, #8
 8108bf8:	4618      	mov	r0, r3
 8108bfa:	f003 f8b6 	bl	810bd6a <SDMMC_GetResponse>
 8108bfe:	4602      	mov	r2, r0
 8108c00:	687b      	ldr	r3, [r7, #4]
 8108c02:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8108c04:	687b      	ldr	r3, [r7, #4]
 8108c06:	681b      	ldr	r3, [r3, #0]
 8108c08:	210c      	movs	r1, #12
 8108c0a:	4618      	mov	r0, r3
 8108c0c:	f003 f8ad 	bl	810bd6a <SDMMC_GetResponse>
 8108c10:	4602      	mov	r2, r0
 8108c12:	687b      	ldr	r3, [r7, #4]
 8108c14:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108c16:	687b      	ldr	r3, [r7, #4]
 8108c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108c1a:	2b03      	cmp	r3, #3
 8108c1c:	d01d      	beq.n	8108c5a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8108c1e:	e019      	b.n	8108c54 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8108c20:	687b      	ldr	r3, [r7, #4]
 8108c22:	681b      	ldr	r3, [r3, #0]
 8108c24:	f107 020a 	add.w	r2, r7, #10
 8108c28:	4611      	mov	r1, r2
 8108c2a:	4618      	mov	r0, r3
 8108c2c:	f003 fa27 	bl	810c07e <SDMMC_CmdSetRelAdd>
 8108c30:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8108c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108c34:	2b00      	cmp	r3, #0
 8108c36:	d001      	beq.n	8108c3c <SD_InitCard+0xb4>
      {
        return errorstate;
 8108c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108c3a:	e06f      	b.n	8108d1c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8108c3c:	f7f9 fe58 	bl	81028f0 <HAL_GetTick>
 8108c40:	4602      	mov	r2, r0
 8108c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108c44:	1ad3      	subs	r3, r2, r3
 8108c46:	f241 3287 	movw	r2, #4999	; 0x1387
 8108c4a:	4293      	cmp	r3, r2
 8108c4c:	d902      	bls.n	8108c54 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8108c4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8108c52:	e063      	b.n	8108d1c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8108c54:	897b      	ldrh	r3, [r7, #10]
 8108c56:	2b00      	cmp	r3, #0
 8108c58:	d0e2      	beq.n	8108c20 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8108c5a:	687b      	ldr	r3, [r7, #4]
 8108c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108c5e:	2b03      	cmp	r3, #3
 8108c60:	d036      	beq.n	8108cd0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8108c62:	897b      	ldrh	r3, [r7, #10]
 8108c64:	461a      	mov	r2, r3
 8108c66:	687b      	ldr	r3, [r7, #4]
 8108c68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8108c6a:	687b      	ldr	r3, [r7, #4]
 8108c6c:	681a      	ldr	r2, [r3, #0]
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108c72:	041b      	lsls	r3, r3, #16
 8108c74:	4619      	mov	r1, r3
 8108c76:	4610      	mov	r0, r2
 8108c78:	f003 f9e1 	bl	810c03e <SDMMC_CmdSendCSD>
 8108c7c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8108c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108c80:	2b00      	cmp	r3, #0
 8108c82:	d001      	beq.n	8108c88 <SD_InitCard+0x100>
    {
      return errorstate;
 8108c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108c86:	e049      	b.n	8108d1c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8108c88:	687b      	ldr	r3, [r7, #4]
 8108c8a:	681b      	ldr	r3, [r3, #0]
 8108c8c:	2100      	movs	r1, #0
 8108c8e:	4618      	mov	r0, r3
 8108c90:	f003 f86b 	bl	810bd6a <SDMMC_GetResponse>
 8108c94:	4602      	mov	r2, r0
 8108c96:	687b      	ldr	r3, [r7, #4]
 8108c98:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8108c9a:	687b      	ldr	r3, [r7, #4]
 8108c9c:	681b      	ldr	r3, [r3, #0]
 8108c9e:	2104      	movs	r1, #4
 8108ca0:	4618      	mov	r0, r3
 8108ca2:	f003 f862 	bl	810bd6a <SDMMC_GetResponse>
 8108ca6:	4602      	mov	r2, r0
 8108ca8:	687b      	ldr	r3, [r7, #4]
 8108caa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8108cac:	687b      	ldr	r3, [r7, #4]
 8108cae:	681b      	ldr	r3, [r3, #0]
 8108cb0:	2108      	movs	r1, #8
 8108cb2:	4618      	mov	r0, r3
 8108cb4:	f003 f859 	bl	810bd6a <SDMMC_GetResponse>
 8108cb8:	4602      	mov	r2, r0
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8108cbe:	687b      	ldr	r3, [r7, #4]
 8108cc0:	681b      	ldr	r3, [r3, #0]
 8108cc2:	210c      	movs	r1, #12
 8108cc4:	4618      	mov	r0, r3
 8108cc6:	f003 f850 	bl	810bd6a <SDMMC_GetResponse>
 8108cca:	4602      	mov	r2, r0
 8108ccc:	687b      	ldr	r3, [r7, #4]
 8108cce:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8108cd0:	687b      	ldr	r3, [r7, #4]
 8108cd2:	681b      	ldr	r3, [r3, #0]
 8108cd4:	2104      	movs	r1, #4
 8108cd6:	4618      	mov	r0, r3
 8108cd8:	f003 f847 	bl	810bd6a <SDMMC_GetResponse>
 8108cdc:	4603      	mov	r3, r0
 8108cde:	0d1a      	lsrs	r2, r3, #20
 8108ce0:	687b      	ldr	r3, [r7, #4]
 8108ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8108ce4:	f107 030c 	add.w	r3, r7, #12
 8108ce8:	4619      	mov	r1, r3
 8108cea:	6878      	ldr	r0, [r7, #4]
 8108cec:	f7ff fbb8 	bl	8108460 <HAL_SD_GetCardCSD>
 8108cf0:	4603      	mov	r3, r0
 8108cf2:	2b00      	cmp	r3, #0
 8108cf4:	d002      	beq.n	8108cfc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108cf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8108cfa:	e00f      	b.n	8108d1c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8108cfc:	687b      	ldr	r3, [r7, #4]
 8108cfe:	681a      	ldr	r2, [r3, #0]
 8108d00:	687b      	ldr	r3, [r7, #4]
 8108d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108d04:	041b      	lsls	r3, r3, #16
 8108d06:	4619      	mov	r1, r3
 8108d08:	4610      	mov	r0, r2
 8108d0a:	f003 f890 	bl	810be2e <SDMMC_CmdSelDesel>
 8108d0e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8108d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d12:	2b00      	cmp	r3, #0
 8108d14:	d001      	beq.n	8108d1a <SD_InitCard+0x192>
  {
    return errorstate;
 8108d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108d18:	e000      	b.n	8108d1c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8108d1a:	2300      	movs	r3, #0
}
 8108d1c:	4618      	mov	r0, r3
 8108d1e:	3740      	adds	r7, #64	; 0x40
 8108d20:	46bd      	mov	sp, r7
 8108d22:	bd80      	pop	{r7, pc}

08108d24 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8108d24:	b580      	push	{r7, lr}
 8108d26:	b086      	sub	sp, #24
 8108d28:	af00      	add	r7, sp, #0
 8108d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8108d2c:	2300      	movs	r3, #0
 8108d2e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8108d30:	2300      	movs	r3, #0
 8108d32:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8108d34:	2300      	movs	r3, #0
 8108d36:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8108d38:	687b      	ldr	r3, [r7, #4]
 8108d3a:	681b      	ldr	r3, [r3, #0]
 8108d3c:	4618      	mov	r0, r3
 8108d3e:	f003 f899 	bl	810be74 <SDMMC_CmdGoIdleState>
 8108d42:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108d44:	68fb      	ldr	r3, [r7, #12]
 8108d46:	2b00      	cmp	r3, #0
 8108d48:	d001      	beq.n	8108d4e <SD_PowerON+0x2a>
  {
    return errorstate;
 8108d4a:	68fb      	ldr	r3, [r7, #12]
 8108d4c:	e072      	b.n	8108e34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	681b      	ldr	r3, [r3, #0]
 8108d52:	4618      	mov	r0, r3
 8108d54:	f003 f8ac 	bl	810beb0 <SDMMC_CmdOperCond>
 8108d58:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8108d5a:	68fb      	ldr	r3, [r7, #12]
 8108d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8108d60:	d10d      	bne.n	8108d7e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8108d62:	687b      	ldr	r3, [r7, #4]
 8108d64:	2200      	movs	r2, #0
 8108d66:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8108d68:	687b      	ldr	r3, [r7, #4]
 8108d6a:	681b      	ldr	r3, [r3, #0]
 8108d6c:	4618      	mov	r0, r3
 8108d6e:	f003 f881 	bl	810be74 <SDMMC_CmdGoIdleState>
 8108d72:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8108d74:	68fb      	ldr	r3, [r7, #12]
 8108d76:	2b00      	cmp	r3, #0
 8108d78:	d004      	beq.n	8108d84 <SD_PowerON+0x60>
    {
      return errorstate;
 8108d7a:	68fb      	ldr	r3, [r7, #12]
 8108d7c:	e05a      	b.n	8108e34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8108d7e:	687b      	ldr	r3, [r7, #4]
 8108d80:	2201      	movs	r2, #1
 8108d82:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8108d84:	687b      	ldr	r3, [r7, #4]
 8108d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108d88:	2b01      	cmp	r3, #1
 8108d8a:	d137      	bne.n	8108dfc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8108d8c:	687b      	ldr	r3, [r7, #4]
 8108d8e:	681b      	ldr	r3, [r3, #0]
 8108d90:	2100      	movs	r1, #0
 8108d92:	4618      	mov	r0, r3
 8108d94:	f003 f8ac 	bl	810bef0 <SDMMC_CmdAppCommand>
 8108d98:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8108d9a:	68fb      	ldr	r3, [r7, #12]
 8108d9c:	2b00      	cmp	r3, #0
 8108d9e:	d02d      	beq.n	8108dfc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108da0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8108da4:	e046      	b.n	8108e34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8108da6:	687b      	ldr	r3, [r7, #4]
 8108da8:	681b      	ldr	r3, [r3, #0]
 8108daa:	2100      	movs	r1, #0
 8108dac:	4618      	mov	r0, r3
 8108dae:	f003 f89f 	bl	810bef0 <SDMMC_CmdAppCommand>
 8108db2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8108db4:	68fb      	ldr	r3, [r7, #12]
 8108db6:	2b00      	cmp	r3, #0
 8108db8:	d001      	beq.n	8108dbe <SD_PowerON+0x9a>
    {
      return errorstate;
 8108dba:	68fb      	ldr	r3, [r7, #12]
 8108dbc:	e03a      	b.n	8108e34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8108dbe:	687b      	ldr	r3, [r7, #4]
 8108dc0:	681b      	ldr	r3, [r3, #0]
 8108dc2:	491e      	ldr	r1, [pc, #120]	; (8108e3c <SD_PowerON+0x118>)
 8108dc4:	4618      	mov	r0, r3
 8108dc6:	f003 f8b6 	bl	810bf36 <SDMMC_CmdAppOperCommand>
 8108dca:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8108dcc:	68fb      	ldr	r3, [r7, #12]
 8108dce:	2b00      	cmp	r3, #0
 8108dd0:	d002      	beq.n	8108dd8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108dd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8108dd6:	e02d      	b.n	8108e34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8108dd8:	687b      	ldr	r3, [r7, #4]
 8108dda:	681b      	ldr	r3, [r3, #0]
 8108ddc:	2100      	movs	r1, #0
 8108dde:	4618      	mov	r0, r3
 8108de0:	f002 ffc3 	bl	810bd6a <SDMMC_GetResponse>
 8108de4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8108de6:	697b      	ldr	r3, [r7, #20]
 8108de8:	0fdb      	lsrs	r3, r3, #31
 8108dea:	2b01      	cmp	r3, #1
 8108dec:	d101      	bne.n	8108df2 <SD_PowerON+0xce>
 8108dee:	2301      	movs	r3, #1
 8108df0:	e000      	b.n	8108df4 <SD_PowerON+0xd0>
 8108df2:	2300      	movs	r3, #0
 8108df4:	613b      	str	r3, [r7, #16]

    count++;
 8108df6:	68bb      	ldr	r3, [r7, #8]
 8108df8:	3301      	adds	r3, #1
 8108dfa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8108dfc:	68bb      	ldr	r3, [r7, #8]
 8108dfe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8108e02:	4293      	cmp	r3, r2
 8108e04:	d802      	bhi.n	8108e0c <SD_PowerON+0xe8>
 8108e06:	693b      	ldr	r3, [r7, #16]
 8108e08:	2b00      	cmp	r3, #0
 8108e0a:	d0cc      	beq.n	8108da6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8108e0c:	68bb      	ldr	r3, [r7, #8]
 8108e0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8108e12:	4293      	cmp	r3, r2
 8108e14:	d902      	bls.n	8108e1c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8108e16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8108e1a:	e00b      	b.n	8108e34 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8108e1c:	687b      	ldr	r3, [r7, #4]
 8108e1e:	2200      	movs	r2, #0
 8108e20:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8108e22:	697b      	ldr	r3, [r7, #20]
 8108e24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8108e28:	2b00      	cmp	r3, #0
 8108e2a:	d002      	beq.n	8108e32 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	2201      	movs	r2, #1
 8108e30:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8108e32:	2300      	movs	r3, #0
}
 8108e34:	4618      	mov	r0, r3
 8108e36:	3718      	adds	r7, #24
 8108e38:	46bd      	mov	sp, r7
 8108e3a:	bd80      	pop	{r7, pc}
 8108e3c:	c1100000 	.word	0xc1100000

08108e40 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8108e40:	b580      	push	{r7, lr}
 8108e42:	b08c      	sub	sp, #48	; 0x30
 8108e44:	af00      	add	r7, sp, #0
 8108e46:	6078      	str	r0, [r7, #4]
 8108e48:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8108e4a:	f7f9 fd51 	bl	81028f0 <HAL_GetTick>
 8108e4e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8108e50:	683b      	ldr	r3, [r7, #0]
 8108e52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8108e54:	687b      	ldr	r3, [r7, #4]
 8108e56:	681b      	ldr	r3, [r3, #0]
 8108e58:	2100      	movs	r1, #0
 8108e5a:	4618      	mov	r0, r3
 8108e5c:	f002 ff85 	bl	810bd6a <SDMMC_GetResponse>
 8108e60:	4603      	mov	r3, r0
 8108e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108e6a:	d102      	bne.n	8108e72 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8108e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8108e70:	e0b0      	b.n	8108fd4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	681b      	ldr	r3, [r3, #0]
 8108e76:	2140      	movs	r1, #64	; 0x40
 8108e78:	4618      	mov	r0, r3
 8108e7a:	f002 ffb5 	bl	810bde8 <SDMMC_CmdBlockLength>
 8108e7e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108e80:	6a3b      	ldr	r3, [r7, #32]
 8108e82:	2b00      	cmp	r3, #0
 8108e84:	d005      	beq.n	8108e92 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8108e86:	687b      	ldr	r3, [r7, #4]
 8108e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108e8a:	687b      	ldr	r3, [r7, #4]
 8108e8c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8108e8e:	6a3b      	ldr	r3, [r7, #32]
 8108e90:	e0a0      	b.n	8108fd4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8108e92:	687b      	ldr	r3, [r7, #4]
 8108e94:	681a      	ldr	r2, [r3, #0]
 8108e96:	687b      	ldr	r3, [r7, #4]
 8108e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108e9a:	041b      	lsls	r3, r3, #16
 8108e9c:	4619      	mov	r1, r3
 8108e9e:	4610      	mov	r0, r2
 8108ea0:	f003 f826 	bl	810bef0 <SDMMC_CmdAppCommand>
 8108ea4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108ea6:	6a3b      	ldr	r3, [r7, #32]
 8108ea8:	2b00      	cmp	r3, #0
 8108eaa:	d005      	beq.n	8108eb8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8108eac:	687b      	ldr	r3, [r7, #4]
 8108eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108eb0:	687b      	ldr	r3, [r7, #4]
 8108eb2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8108eb4:	6a3b      	ldr	r3, [r7, #32]
 8108eb6:	e08d      	b.n	8108fd4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8108eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8108ebc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8108ebe:	2340      	movs	r3, #64	; 0x40
 8108ec0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8108ec2:	2360      	movs	r3, #96	; 0x60
 8108ec4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8108ec6:	2302      	movs	r3, #2
 8108ec8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8108eca:	2300      	movs	r3, #0
 8108ecc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8108ece:	2301      	movs	r3, #1
 8108ed0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8108ed2:	687b      	ldr	r3, [r7, #4]
 8108ed4:	681b      	ldr	r3, [r3, #0]
 8108ed6:	f107 0208 	add.w	r2, r7, #8
 8108eda:	4611      	mov	r1, r2
 8108edc:	4618      	mov	r0, r3
 8108ede:	f002 ff57 	bl	810bd90 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8108ee2:	687b      	ldr	r3, [r7, #4]
 8108ee4:	681b      	ldr	r3, [r3, #0]
 8108ee6:	4618      	mov	r0, r3
 8108ee8:	f003 f90e 	bl	810c108 <SDMMC_CmdStatusRegister>
 8108eec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108eee:	6a3b      	ldr	r3, [r7, #32]
 8108ef0:	2b00      	cmp	r3, #0
 8108ef2:	d02b      	beq.n	8108f4c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8108ef4:	687b      	ldr	r3, [r7, #4]
 8108ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108ef8:	687b      	ldr	r3, [r7, #4]
 8108efa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8108efc:	6a3b      	ldr	r3, [r7, #32]
 8108efe:	e069      	b.n	8108fd4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8108f00:	687b      	ldr	r3, [r7, #4]
 8108f02:	681b      	ldr	r3, [r3, #0]
 8108f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8108f0a:	2b00      	cmp	r3, #0
 8108f0c:	d013      	beq.n	8108f36 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8108f0e:	2300      	movs	r3, #0
 8108f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8108f12:	e00d      	b.n	8108f30 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8108f14:	687b      	ldr	r3, [r7, #4]
 8108f16:	681b      	ldr	r3, [r3, #0]
 8108f18:	4618      	mov	r0, r3
 8108f1a:	f002 fec3 	bl	810bca4 <SDMMC_ReadFIFO>
 8108f1e:	4602      	mov	r2, r0
 8108f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108f22:	601a      	str	r2, [r3, #0]
        pData++;
 8108f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108f26:	3304      	adds	r3, #4
 8108f28:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8108f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108f2c:	3301      	adds	r3, #1
 8108f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8108f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108f32:	2b07      	cmp	r3, #7
 8108f34:	d9ee      	bls.n	8108f14 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8108f36:	f7f9 fcdb 	bl	81028f0 <HAL_GetTick>
 8108f3a:	4602      	mov	r2, r0
 8108f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108f3e:	1ad3      	subs	r3, r2, r3
 8108f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108f44:	d102      	bne.n	8108f4c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8108f46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8108f4a:	e043      	b.n	8108fd4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8108f4c:	687b      	ldr	r3, [r7, #4]
 8108f4e:	681b      	ldr	r3, [r3, #0]
 8108f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f52:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8108f56:	2b00      	cmp	r3, #0
 8108f58:	d0d2      	beq.n	8108f00 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8108f5a:	687b      	ldr	r3, [r7, #4]
 8108f5c:	681b      	ldr	r3, [r3, #0]
 8108f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f60:	f003 0308 	and.w	r3, r3, #8
 8108f64:	2b00      	cmp	r3, #0
 8108f66:	d001      	beq.n	8108f6c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8108f68:	2308      	movs	r3, #8
 8108f6a:	e033      	b.n	8108fd4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8108f6c:	687b      	ldr	r3, [r7, #4]
 8108f6e:	681b      	ldr	r3, [r3, #0]
 8108f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f72:	f003 0302 	and.w	r3, r3, #2
 8108f76:	2b00      	cmp	r3, #0
 8108f78:	d001      	beq.n	8108f7e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8108f7a:	2302      	movs	r3, #2
 8108f7c:	e02a      	b.n	8108fd4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8108f7e:	687b      	ldr	r3, [r7, #4]
 8108f80:	681b      	ldr	r3, [r3, #0]
 8108f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f84:	f003 0320 	and.w	r3, r3, #32
 8108f88:	2b00      	cmp	r3, #0
 8108f8a:	d017      	beq.n	8108fbc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8108f8c:	2320      	movs	r3, #32
 8108f8e:	e021      	b.n	8108fd4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8108f90:	687b      	ldr	r3, [r7, #4]
 8108f92:	681b      	ldr	r3, [r3, #0]
 8108f94:	4618      	mov	r0, r3
 8108f96:	f002 fe85 	bl	810bca4 <SDMMC_ReadFIFO>
 8108f9a:	4602      	mov	r2, r0
 8108f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108f9e:	601a      	str	r2, [r3, #0]
    pData++;
 8108fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108fa2:	3304      	adds	r3, #4
 8108fa4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8108fa6:	f7f9 fca3 	bl	81028f0 <HAL_GetTick>
 8108faa:	4602      	mov	r2, r0
 8108fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108fae:	1ad3      	subs	r3, r2, r3
 8108fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108fb4:	d102      	bne.n	8108fbc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8108fb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8108fba:	e00b      	b.n	8108fd4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	681b      	ldr	r3, [r3, #0]
 8108fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8108fc6:	2b00      	cmp	r3, #0
 8108fc8:	d1e2      	bne.n	8108f90 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8108fca:	687b      	ldr	r3, [r7, #4]
 8108fcc:	681b      	ldr	r3, [r3, #0]
 8108fce:	4a03      	ldr	r2, [pc, #12]	; (8108fdc <SD_SendSDStatus+0x19c>)
 8108fd0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8108fd2:	2300      	movs	r3, #0
}
 8108fd4:	4618      	mov	r0, r3
 8108fd6:	3730      	adds	r7, #48	; 0x30
 8108fd8:	46bd      	mov	sp, r7
 8108fda:	bd80      	pop	{r7, pc}
 8108fdc:	18000f3a 	.word	0x18000f3a

08108fe0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8108fe0:	b580      	push	{r7, lr}
 8108fe2:	b084      	sub	sp, #16
 8108fe4:	af00      	add	r7, sp, #0
 8108fe6:	6078      	str	r0, [r7, #4]
 8108fe8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8108fea:	683b      	ldr	r3, [r7, #0]
 8108fec:	2b00      	cmp	r3, #0
 8108fee:	d102      	bne.n	8108ff6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8108ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8108ff4:	e018      	b.n	8109028 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8108ff6:	687b      	ldr	r3, [r7, #4]
 8108ff8:	681a      	ldr	r2, [r3, #0]
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108ffe:	041b      	lsls	r3, r3, #16
 8109000:	4619      	mov	r1, r3
 8109002:	4610      	mov	r0, r2
 8109004:	f003 f85d 	bl	810c0c2 <SDMMC_CmdSendStatus>
 8109008:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810900a:	68fb      	ldr	r3, [r7, #12]
 810900c:	2b00      	cmp	r3, #0
 810900e:	d001      	beq.n	8109014 <SD_SendStatus+0x34>
  {
    return errorstate;
 8109010:	68fb      	ldr	r3, [r7, #12]
 8109012:	e009      	b.n	8109028 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109014:	687b      	ldr	r3, [r7, #4]
 8109016:	681b      	ldr	r3, [r3, #0]
 8109018:	2100      	movs	r1, #0
 810901a:	4618      	mov	r0, r3
 810901c:	f002 fea5 	bl	810bd6a <SDMMC_GetResponse>
 8109020:	4602      	mov	r2, r0
 8109022:	683b      	ldr	r3, [r7, #0]
 8109024:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8109026:	2300      	movs	r3, #0
}
 8109028:	4618      	mov	r0, r3
 810902a:	3710      	adds	r7, #16
 810902c:	46bd      	mov	sp, r7
 810902e:	bd80      	pop	{r7, pc}

08109030 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8109030:	b580      	push	{r7, lr}
 8109032:	b086      	sub	sp, #24
 8109034:	af00      	add	r7, sp, #0
 8109036:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8109038:	2300      	movs	r3, #0
 810903a:	60fb      	str	r3, [r7, #12]
 810903c:	2300      	movs	r3, #0
 810903e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109040:	687b      	ldr	r3, [r7, #4]
 8109042:	681b      	ldr	r3, [r3, #0]
 8109044:	2100      	movs	r1, #0
 8109046:	4618      	mov	r0, r3
 8109048:	f002 fe8f 	bl	810bd6a <SDMMC_GetResponse>
 810904c:	4603      	mov	r3, r0
 810904e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109056:	d102      	bne.n	810905e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810905c:	e02f      	b.n	81090be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810905e:	f107 030c 	add.w	r3, r7, #12
 8109062:	4619      	mov	r1, r3
 8109064:	6878      	ldr	r0, [r7, #4]
 8109066:	f000 f879 	bl	810915c <SD_FindSCR>
 810906a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810906c:	697b      	ldr	r3, [r7, #20]
 810906e:	2b00      	cmp	r3, #0
 8109070:	d001      	beq.n	8109076 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8109072:	697b      	ldr	r3, [r7, #20]
 8109074:	e023      	b.n	81090be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8109076:	693b      	ldr	r3, [r7, #16]
 8109078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810907c:	2b00      	cmp	r3, #0
 810907e:	d01c      	beq.n	81090ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109080:	687b      	ldr	r3, [r7, #4]
 8109082:	681a      	ldr	r2, [r3, #0]
 8109084:	687b      	ldr	r3, [r7, #4]
 8109086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109088:	041b      	lsls	r3, r3, #16
 810908a:	4619      	mov	r1, r3
 810908c:	4610      	mov	r0, r2
 810908e:	f002 ff2f 	bl	810bef0 <SDMMC_CmdAppCommand>
 8109092:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109094:	697b      	ldr	r3, [r7, #20]
 8109096:	2b00      	cmp	r3, #0
 8109098:	d001      	beq.n	810909e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 810909a:	697b      	ldr	r3, [r7, #20]
 810909c:	e00f      	b.n	81090be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 810909e:	687b      	ldr	r3, [r7, #4]
 81090a0:	681b      	ldr	r3, [r3, #0]
 81090a2:	2102      	movs	r1, #2
 81090a4:	4618      	mov	r0, r3
 81090a6:	f002 ff66 	bl	810bf76 <SDMMC_CmdBusWidth>
 81090aa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81090ac:	697b      	ldr	r3, [r7, #20]
 81090ae:	2b00      	cmp	r3, #0
 81090b0:	d001      	beq.n	81090b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 81090b2:	697b      	ldr	r3, [r7, #20]
 81090b4:	e003      	b.n	81090be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 81090b6:	2300      	movs	r3, #0
 81090b8:	e001      	b.n	81090be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 81090ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 81090be:	4618      	mov	r0, r3
 81090c0:	3718      	adds	r7, #24
 81090c2:	46bd      	mov	sp, r7
 81090c4:	bd80      	pop	{r7, pc}

081090c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 81090c6:	b580      	push	{r7, lr}
 81090c8:	b086      	sub	sp, #24
 81090ca:	af00      	add	r7, sp, #0
 81090cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 81090ce:	2300      	movs	r3, #0
 81090d0:	60fb      	str	r3, [r7, #12]
 81090d2:	2300      	movs	r3, #0
 81090d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 81090d6:	687b      	ldr	r3, [r7, #4]
 81090d8:	681b      	ldr	r3, [r3, #0]
 81090da:	2100      	movs	r1, #0
 81090dc:	4618      	mov	r0, r3
 81090de:	f002 fe44 	bl	810bd6a <SDMMC_GetResponse>
 81090e2:	4603      	mov	r3, r0
 81090e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81090e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81090ec:	d102      	bne.n	81090f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 81090ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81090f2:	e02f      	b.n	8109154 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 81090f4:	f107 030c 	add.w	r3, r7, #12
 81090f8:	4619      	mov	r1, r3
 81090fa:	6878      	ldr	r0, [r7, #4]
 81090fc:	f000 f82e 	bl	810915c <SD_FindSCR>
 8109100:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109102:	697b      	ldr	r3, [r7, #20]
 8109104:	2b00      	cmp	r3, #0
 8109106:	d001      	beq.n	810910c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8109108:	697b      	ldr	r3, [r7, #20]
 810910a:	e023      	b.n	8109154 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810910c:	693b      	ldr	r3, [r7, #16]
 810910e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109112:	2b00      	cmp	r3, #0
 8109114:	d01c      	beq.n	8109150 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109116:	687b      	ldr	r3, [r7, #4]
 8109118:	681a      	ldr	r2, [r3, #0]
 810911a:	687b      	ldr	r3, [r7, #4]
 810911c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810911e:	041b      	lsls	r3, r3, #16
 8109120:	4619      	mov	r1, r3
 8109122:	4610      	mov	r0, r2
 8109124:	f002 fee4 	bl	810bef0 <SDMMC_CmdAppCommand>
 8109128:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810912a:	697b      	ldr	r3, [r7, #20]
 810912c:	2b00      	cmp	r3, #0
 810912e:	d001      	beq.n	8109134 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8109130:	697b      	ldr	r3, [r7, #20]
 8109132:	e00f      	b.n	8109154 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8109134:	687b      	ldr	r3, [r7, #4]
 8109136:	681b      	ldr	r3, [r3, #0]
 8109138:	2100      	movs	r1, #0
 810913a:	4618      	mov	r0, r3
 810913c:	f002 ff1b 	bl	810bf76 <SDMMC_CmdBusWidth>
 8109140:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109142:	697b      	ldr	r3, [r7, #20]
 8109144:	2b00      	cmp	r3, #0
 8109146:	d001      	beq.n	810914c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8109148:	697b      	ldr	r3, [r7, #20]
 810914a:	e003      	b.n	8109154 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810914c:	2300      	movs	r3, #0
 810914e:	e001      	b.n	8109154 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8109150:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8109154:	4618      	mov	r0, r3
 8109156:	3718      	adds	r7, #24
 8109158:	46bd      	mov	sp, r7
 810915a:	bd80      	pop	{r7, pc}

0810915c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 810915c:	b580      	push	{r7, lr}
 810915e:	b08e      	sub	sp, #56	; 0x38
 8109160:	af00      	add	r7, sp, #0
 8109162:	6078      	str	r0, [r7, #4]
 8109164:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8109166:	f7f9 fbc3 	bl	81028f0 <HAL_GetTick>
 810916a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 810916c:	2300      	movs	r3, #0
 810916e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8109170:	2300      	movs	r3, #0
 8109172:	60bb      	str	r3, [r7, #8]
 8109174:	2300      	movs	r3, #0
 8109176:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8109178:	683b      	ldr	r3, [r7, #0]
 810917a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 810917c:	687b      	ldr	r3, [r7, #4]
 810917e:	681b      	ldr	r3, [r3, #0]
 8109180:	2108      	movs	r1, #8
 8109182:	4618      	mov	r0, r3
 8109184:	f002 fe30 	bl	810bde8 <SDMMC_CmdBlockLength>
 8109188:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810918c:	2b00      	cmp	r3, #0
 810918e:	d001      	beq.n	8109194 <SD_FindSCR+0x38>
  {
    return errorstate;
 8109190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109192:	e0ad      	b.n	81092f0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8109194:	687b      	ldr	r3, [r7, #4]
 8109196:	681a      	ldr	r2, [r3, #0]
 8109198:	687b      	ldr	r3, [r7, #4]
 810919a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810919c:	041b      	lsls	r3, r3, #16
 810919e:	4619      	mov	r1, r3
 81091a0:	4610      	mov	r0, r2
 81091a2:	f002 fea5 	bl	810bef0 <SDMMC_CmdAppCommand>
 81091a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81091aa:	2b00      	cmp	r3, #0
 81091ac:	d001      	beq.n	81091b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 81091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81091b0:	e09e      	b.n	81092f0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81091b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81091b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 81091b8:	2308      	movs	r3, #8
 81091ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 81091bc:	2330      	movs	r3, #48	; 0x30
 81091be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81091c0:	2302      	movs	r3, #2
 81091c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81091c4:	2300      	movs	r3, #0
 81091c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 81091c8:	2301      	movs	r3, #1
 81091ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 81091cc:	687b      	ldr	r3, [r7, #4]
 81091ce:	681b      	ldr	r3, [r3, #0]
 81091d0:	f107 0210 	add.w	r2, r7, #16
 81091d4:	4611      	mov	r1, r2
 81091d6:	4618      	mov	r0, r3
 81091d8:	f002 fdda 	bl	810bd90 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 81091dc:	687b      	ldr	r3, [r7, #4]
 81091de:	681b      	ldr	r3, [r3, #0]
 81091e0:	4618      	mov	r0, r3
 81091e2:	f002 feeb 	bl	810bfbc <SDMMC_CmdSendSCR>
 81091e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81091ea:	2b00      	cmp	r3, #0
 81091ec:	d027      	beq.n	810923e <SD_FindSCR+0xe2>
  {
    return errorstate;
 81091ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81091f0:	e07e      	b.n	81092f0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 81091f2:	687b      	ldr	r3, [r7, #4]
 81091f4:	681b      	ldr	r3, [r3, #0]
 81091f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81091f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81091fc:	2b00      	cmp	r3, #0
 81091fe:	d113      	bne.n	8109228 <SD_FindSCR+0xcc>
 8109200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109202:	2b00      	cmp	r3, #0
 8109204:	d110      	bne.n	8109228 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8109206:	687b      	ldr	r3, [r7, #4]
 8109208:	681b      	ldr	r3, [r3, #0]
 810920a:	4618      	mov	r0, r3
 810920c:	f002 fd4a 	bl	810bca4 <SDMMC_ReadFIFO>
 8109210:	4603      	mov	r3, r0
 8109212:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8109214:	687b      	ldr	r3, [r7, #4]
 8109216:	681b      	ldr	r3, [r3, #0]
 8109218:	4618      	mov	r0, r3
 810921a:	f002 fd43 	bl	810bca4 <SDMMC_ReadFIFO>
 810921e:	4603      	mov	r3, r0
 8109220:	60fb      	str	r3, [r7, #12]
      index++;
 8109222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109224:	3301      	adds	r3, #1
 8109226:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8109228:	f7f9 fb62 	bl	81028f0 <HAL_GetTick>
 810922c:	4602      	mov	r2, r0
 810922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109230:	1ad3      	subs	r3, r2, r3
 8109232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109236:	d102      	bne.n	810923e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810923c:	e058      	b.n	81092f0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810923e:	687b      	ldr	r3, [r7, #4]
 8109240:	681b      	ldr	r3, [r3, #0]
 8109242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109244:	f240 532a 	movw	r3, #1322	; 0x52a
 8109248:	4013      	ands	r3, r2
 810924a:	2b00      	cmp	r3, #0
 810924c:	d0d1      	beq.n	81091f2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810924e:	687b      	ldr	r3, [r7, #4]
 8109250:	681b      	ldr	r3, [r3, #0]
 8109252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109254:	f003 0308 	and.w	r3, r3, #8
 8109258:	2b00      	cmp	r3, #0
 810925a:	d005      	beq.n	8109268 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	681b      	ldr	r3, [r3, #0]
 8109260:	2208      	movs	r2, #8
 8109262:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8109264:	2308      	movs	r3, #8
 8109266:	e043      	b.n	81092f0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8109268:	687b      	ldr	r3, [r7, #4]
 810926a:	681b      	ldr	r3, [r3, #0]
 810926c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810926e:	f003 0302 	and.w	r3, r3, #2
 8109272:	2b00      	cmp	r3, #0
 8109274:	d005      	beq.n	8109282 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8109276:	687b      	ldr	r3, [r7, #4]
 8109278:	681b      	ldr	r3, [r3, #0]
 810927a:	2202      	movs	r2, #2
 810927c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810927e:	2302      	movs	r3, #2
 8109280:	e036      	b.n	81092f0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8109282:	687b      	ldr	r3, [r7, #4]
 8109284:	681b      	ldr	r3, [r3, #0]
 8109286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109288:	f003 0320 	and.w	r3, r3, #32
 810928c:	2b00      	cmp	r3, #0
 810928e:	d005      	beq.n	810929c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	681b      	ldr	r3, [r3, #0]
 8109294:	2220      	movs	r2, #32
 8109296:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8109298:	2320      	movs	r3, #32
 810929a:	e029      	b.n	81092f0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810929c:	687b      	ldr	r3, [r7, #4]
 810929e:	681b      	ldr	r3, [r3, #0]
 81092a0:	4a15      	ldr	r2, [pc, #84]	; (81092f8 <SD_FindSCR+0x19c>)
 81092a2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 81092a4:	68fb      	ldr	r3, [r7, #12]
 81092a6:	061a      	lsls	r2, r3, #24
 81092a8:	68fb      	ldr	r3, [r7, #12]
 81092aa:	021b      	lsls	r3, r3, #8
 81092ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81092b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 81092b2:	68fb      	ldr	r3, [r7, #12]
 81092b4:	0a1b      	lsrs	r3, r3, #8
 81092b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 81092ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 81092bc:	68fb      	ldr	r3, [r7, #12]
 81092be:	0e1b      	lsrs	r3, r3, #24
 81092c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 81092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81092c4:	601a      	str	r2, [r3, #0]
    scr++;
 81092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81092c8:	3304      	adds	r3, #4
 81092ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 81092cc:	68bb      	ldr	r3, [r7, #8]
 81092ce:	061a      	lsls	r2, r3, #24
 81092d0:	68bb      	ldr	r3, [r7, #8]
 81092d2:	021b      	lsls	r3, r3, #8
 81092d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81092d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 81092da:	68bb      	ldr	r3, [r7, #8]
 81092dc:	0a1b      	lsrs	r3, r3, #8
 81092de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 81092e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 81092e4:	68bb      	ldr	r3, [r7, #8]
 81092e6:	0e1b      	lsrs	r3, r3, #24
 81092e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 81092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81092ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 81092ee:	2300      	movs	r3, #0
}
 81092f0:	4618      	mov	r0, r3
 81092f2:	3738      	adds	r7, #56	; 0x38
 81092f4:	46bd      	mov	sp, r7
 81092f6:	bd80      	pop	{r7, pc}
 81092f8:	18000f3a 	.word	0x18000f3a

081092fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 81092fc:	b580      	push	{r7, lr}
 81092fe:	b082      	sub	sp, #8
 8109300:	af00      	add	r7, sp, #0
 8109302:	6078      	str	r0, [r7, #4]
 8109304:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8109306:	687b      	ldr	r3, [r7, #4]
 8109308:	2b00      	cmp	r3, #0
 810930a:	d101      	bne.n	8109310 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 810930c:	2301      	movs	r3, #1
 810930e:	e02b      	b.n	8109368 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8109310:	687b      	ldr	r3, [r7, #4]
 8109312:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8109316:	b2db      	uxtb	r3, r3
 8109318:	2b00      	cmp	r3, #0
 810931a:	d106      	bne.n	810932a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	2200      	movs	r2, #0
 8109320:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8109324:	6878      	ldr	r0, [r7, #4]
 8109326:	f7f7 fcf9 	bl	8100d1c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 810932a:	687b      	ldr	r3, [r7, #4]
 810932c:	2202      	movs	r2, #2
 810932e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8109332:	687b      	ldr	r3, [r7, #4]
 8109334:	681a      	ldr	r2, [r3, #0]
 8109336:	687b      	ldr	r3, [r7, #4]
 8109338:	3304      	adds	r3, #4
 810933a:	4619      	mov	r1, r3
 810933c:	4610      	mov	r0, r2
 810933e:	f002 fbc1 	bl	810bac4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8109342:	687b      	ldr	r3, [r7, #4]
 8109344:	6818      	ldr	r0, [r3, #0]
 8109346:	687b      	ldr	r3, [r7, #4]
 8109348:	685b      	ldr	r3, [r3, #4]
 810934a:	461a      	mov	r2, r3
 810934c:	6839      	ldr	r1, [r7, #0]
 810934e:	f002 fc16 	bl	810bb7e <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8109352:	4b07      	ldr	r3, [pc, #28]	; (8109370 <HAL_SDRAM_Init+0x74>)
 8109354:	681b      	ldr	r3, [r3, #0]
 8109356:	4a06      	ldr	r2, [pc, #24]	; (8109370 <HAL_SDRAM_Init+0x74>)
 8109358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810935c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 810935e:	687b      	ldr	r3, [r7, #4]
 8109360:	2201      	movs	r2, #1
 8109362:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8109366:	2300      	movs	r3, #0
}
 8109368:	4618      	mov	r0, r3
 810936a:	3708      	adds	r7, #8
 810936c:	46bd      	mov	sp, r7
 810936e:	bd80      	pop	{r7, pc}
 8109370:	52004000 	.word	0x52004000

08109374 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8109374:	b580      	push	{r7, lr}
 8109376:	b084      	sub	sp, #16
 8109378:	af00      	add	r7, sp, #0
 810937a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 810937c:	687b      	ldr	r3, [r7, #4]
 810937e:	2b00      	cmp	r3, #0
 8109380:	d101      	bne.n	8109386 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8109382:	2301      	movs	r3, #1
 8109384:	e05e      	b.n	8109444 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8109386:	687b      	ldr	r3, [r7, #4]
 8109388:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 810938c:	b2db      	uxtb	r3, r3
 810938e:	2b00      	cmp	r3, #0
 8109390:	d106      	bne.n	81093a0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8109392:	687b      	ldr	r3, [r7, #4]
 8109394:	2200      	movs	r2, #0
 8109396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 810939a:	6878      	ldr	r0, [r7, #4]
 810939c:	f7f8 fae0 	bl	8101960 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 81093a0:	687b      	ldr	r3, [r7, #4]
 81093a2:	2202      	movs	r2, #2
 81093a4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 81093a8:	687b      	ldr	r3, [r7, #4]
 81093aa:	681b      	ldr	r3, [r3, #0]
 81093ac:	681a      	ldr	r2, [r3, #0]
 81093ae:	687b      	ldr	r3, [r7, #4]
 81093b0:	681b      	ldr	r3, [r3, #0]
 81093b2:	f022 0203 	bic.w	r2, r2, #3
 81093b6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	681b      	ldr	r3, [r3, #0]
 81093bc:	681b      	ldr	r3, [r3, #0]
 81093be:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 81093c0:	68fa      	ldr	r2, [r7, #12]
 81093c2:	4b22      	ldr	r3, [pc, #136]	; (810944c <HAL_SPDIFRX_Init+0xd8>)
 81093c4:	4013      	ands	r3, r2
 81093c6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 81093c8:	687b      	ldr	r3, [r7, #4]
 81093ca:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 81093cc:	687b      	ldr	r3, [r7, #4]
 81093ce:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 81093d0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 81093d2:	687b      	ldr	r3, [r7, #4]
 81093d4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 81093d6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 81093d8:	687b      	ldr	r3, [r7, #4]
 81093da:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 81093dc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 81093de:	687b      	ldr	r3, [r7, #4]
 81093e0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 81093e2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 81093e4:	687b      	ldr	r3, [r7, #4]
 81093e6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 81093e8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 81093ea:	687b      	ldr	r3, [r7, #4]
 81093ec:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 81093ee:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 81093f0:	687b      	ldr	r3, [r7, #4]
 81093f2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 81093f4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 81093f6:	687b      	ldr	r3, [r7, #4]
 81093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 81093fa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 81093fc:	687b      	ldr	r3, [r7, #4]
 81093fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8109400:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8109402:	68fa      	ldr	r2, [r7, #12]
 8109404:	4313      	orrs	r3, r2
 8109406:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8109408:	687b      	ldr	r3, [r7, #4]
 810940a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810940e:	2b01      	cmp	r3, #1
 8109410:	d103      	bne.n	810941a <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8109412:	68fb      	ldr	r3, [r7, #12]
 8109414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8109418:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 810941a:	687b      	ldr	r3, [r7, #4]
 810941c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8109420:	2b01      	cmp	r3, #1
 8109422:	d103      	bne.n	810942c <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8109424:	68fb      	ldr	r3, [r7, #12]
 8109426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810942a:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 810942c:	687b      	ldr	r3, [r7, #4]
 810942e:	681b      	ldr	r3, [r3, #0]
 8109430:	68fa      	ldr	r2, [r7, #12]
 8109432:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8109434:	687b      	ldr	r3, [r7, #4]
 8109436:	2200      	movs	r2, #0
 8109438:	64da      	str	r2, [r3, #76]	; 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	2201      	movs	r2, #1
 810943e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8109442:	2300      	movs	r3, #0
}
 8109444:	4618      	mov	r0, r3
 8109446:	3710      	adds	r7, #16
 8109448:	46bd      	mov	sp, r7
 810944a:	bd80      	pop	{r7, pc}
 810944c:	ffc88407 	.word	0xffc88407

08109450 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8109450:	b580      	push	{r7, lr}
 8109452:	b084      	sub	sp, #16
 8109454:	af00      	add	r7, sp, #0
 8109456:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	2b00      	cmp	r3, #0
 810945c:	d101      	bne.n	8109462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810945e:	2301      	movs	r3, #1
 8109460:	e0f1      	b.n	8109646 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8109462:	687b      	ldr	r3, [r7, #4]
 8109464:	2200      	movs	r2, #0
 8109466:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8109468:	687b      	ldr	r3, [r7, #4]
 810946a:	681b      	ldr	r3, [r3, #0]
 810946c:	4a78      	ldr	r2, [pc, #480]	; (8109650 <HAL_SPI_Init+0x200>)
 810946e:	4293      	cmp	r3, r2
 8109470:	d00f      	beq.n	8109492 <HAL_SPI_Init+0x42>
 8109472:	687b      	ldr	r3, [r7, #4]
 8109474:	681b      	ldr	r3, [r3, #0]
 8109476:	4a77      	ldr	r2, [pc, #476]	; (8109654 <HAL_SPI_Init+0x204>)
 8109478:	4293      	cmp	r3, r2
 810947a:	d00a      	beq.n	8109492 <HAL_SPI_Init+0x42>
 810947c:	687b      	ldr	r3, [r7, #4]
 810947e:	681b      	ldr	r3, [r3, #0]
 8109480:	4a75      	ldr	r2, [pc, #468]	; (8109658 <HAL_SPI_Init+0x208>)
 8109482:	4293      	cmp	r3, r2
 8109484:	d005      	beq.n	8109492 <HAL_SPI_Init+0x42>
 8109486:	687b      	ldr	r3, [r7, #4]
 8109488:	68db      	ldr	r3, [r3, #12]
 810948a:	2b0f      	cmp	r3, #15
 810948c:	d901      	bls.n	8109492 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810948e:	2301      	movs	r3, #1
 8109490:	e0d9      	b.n	8109646 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8109492:	6878      	ldr	r0, [r7, #4]
 8109494:	f000 f8e2 	bl	810965c <SPI_GetPacketSize>
 8109498:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810949a:	687b      	ldr	r3, [r7, #4]
 810949c:	681b      	ldr	r3, [r3, #0]
 810949e:	4a6c      	ldr	r2, [pc, #432]	; (8109650 <HAL_SPI_Init+0x200>)
 81094a0:	4293      	cmp	r3, r2
 81094a2:	d00c      	beq.n	81094be <HAL_SPI_Init+0x6e>
 81094a4:	687b      	ldr	r3, [r7, #4]
 81094a6:	681b      	ldr	r3, [r3, #0]
 81094a8:	4a6a      	ldr	r2, [pc, #424]	; (8109654 <HAL_SPI_Init+0x204>)
 81094aa:	4293      	cmp	r3, r2
 81094ac:	d007      	beq.n	81094be <HAL_SPI_Init+0x6e>
 81094ae:	687b      	ldr	r3, [r7, #4]
 81094b0:	681b      	ldr	r3, [r3, #0]
 81094b2:	4a69      	ldr	r2, [pc, #420]	; (8109658 <HAL_SPI_Init+0x208>)
 81094b4:	4293      	cmp	r3, r2
 81094b6:	d002      	beq.n	81094be <HAL_SPI_Init+0x6e>
 81094b8:	68fb      	ldr	r3, [r7, #12]
 81094ba:	2b08      	cmp	r3, #8
 81094bc:	d811      	bhi.n	81094e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81094c2:	4a63      	ldr	r2, [pc, #396]	; (8109650 <HAL_SPI_Init+0x200>)
 81094c4:	4293      	cmp	r3, r2
 81094c6:	d009      	beq.n	81094dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81094c8:	687b      	ldr	r3, [r7, #4]
 81094ca:	681b      	ldr	r3, [r3, #0]
 81094cc:	4a61      	ldr	r2, [pc, #388]	; (8109654 <HAL_SPI_Init+0x204>)
 81094ce:	4293      	cmp	r3, r2
 81094d0:	d004      	beq.n	81094dc <HAL_SPI_Init+0x8c>
 81094d2:	687b      	ldr	r3, [r7, #4]
 81094d4:	681b      	ldr	r3, [r3, #0]
 81094d6:	4a60      	ldr	r2, [pc, #384]	; (8109658 <HAL_SPI_Init+0x208>)
 81094d8:	4293      	cmp	r3, r2
 81094da:	d104      	bne.n	81094e6 <HAL_SPI_Init+0x96>
 81094dc:	68fb      	ldr	r3, [r7, #12]
 81094de:	2b10      	cmp	r3, #16
 81094e0:	d901      	bls.n	81094e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81094e2:	2301      	movs	r3, #1
 81094e4:	e0af      	b.n	8109646 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81094e6:	687b      	ldr	r3, [r7, #4]
 81094e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81094ec:	b2db      	uxtb	r3, r3
 81094ee:	2b00      	cmp	r3, #0
 81094f0:	d106      	bne.n	8109500 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81094f2:	687b      	ldr	r3, [r7, #4]
 81094f4:	2200      	movs	r2, #0
 81094f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81094fa:	6878      	ldr	r0, [r7, #4]
 81094fc:	f7f8 fb3a 	bl	8101b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8109500:	687b      	ldr	r3, [r7, #4]
 8109502:	2202      	movs	r2, #2
 8109504:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	681b      	ldr	r3, [r3, #0]
 810950c:	681a      	ldr	r2, [r3, #0]
 810950e:	687b      	ldr	r3, [r7, #4]
 8109510:	681b      	ldr	r3, [r3, #0]
 8109512:	f022 0201 	bic.w	r2, r2, #1
 8109516:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8109518:	687b      	ldr	r3, [r7, #4]
 810951a:	681b      	ldr	r3, [r3, #0]
 810951c:	689b      	ldr	r3, [r3, #8]
 810951e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8109522:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8109524:	687b      	ldr	r3, [r7, #4]
 8109526:	699b      	ldr	r3, [r3, #24]
 8109528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810952c:	d119      	bne.n	8109562 <HAL_SPI_Init+0x112>
 810952e:	687b      	ldr	r3, [r7, #4]
 8109530:	685b      	ldr	r3, [r3, #4]
 8109532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109536:	d103      	bne.n	8109540 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109538:	687b      	ldr	r3, [r7, #4]
 810953a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810953c:	2b00      	cmp	r3, #0
 810953e:	d008      	beq.n	8109552 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109544:	2b00      	cmp	r3, #0
 8109546:	d10c      	bne.n	8109562 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8109548:	687b      	ldr	r3, [r7, #4]
 810954a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810954c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109550:	d107      	bne.n	8109562 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	681b      	ldr	r3, [r3, #0]
 8109556:	681a      	ldr	r2, [r3, #0]
 8109558:	687b      	ldr	r3, [r7, #4]
 810955a:	681b      	ldr	r3, [r3, #0]
 810955c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8109560:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	69da      	ldr	r2, [r3, #28]
 8109566:	687b      	ldr	r3, [r7, #4]
 8109568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810956a:	431a      	orrs	r2, r3
 810956c:	68bb      	ldr	r3, [r7, #8]
 810956e:	431a      	orrs	r2, r3
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109574:	ea42 0103 	orr.w	r1, r2, r3
 8109578:	687b      	ldr	r3, [r7, #4]
 810957a:	68da      	ldr	r2, [r3, #12]
 810957c:	687b      	ldr	r3, [r7, #4]
 810957e:	681b      	ldr	r3, [r3, #0]
 8109580:	430a      	orrs	r2, r1
 8109582:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8109584:	687b      	ldr	r3, [r7, #4]
 8109586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109588:	687b      	ldr	r3, [r7, #4]
 810958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810958c:	431a      	orrs	r2, r3
 810958e:	687b      	ldr	r3, [r7, #4]
 8109590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109592:	431a      	orrs	r2, r3
 8109594:	687b      	ldr	r3, [r7, #4]
 8109596:	699b      	ldr	r3, [r3, #24]
 8109598:	431a      	orrs	r2, r3
 810959a:	687b      	ldr	r3, [r7, #4]
 810959c:	691b      	ldr	r3, [r3, #16]
 810959e:	431a      	orrs	r2, r3
 81095a0:	687b      	ldr	r3, [r7, #4]
 81095a2:	695b      	ldr	r3, [r3, #20]
 81095a4:	431a      	orrs	r2, r3
 81095a6:	687b      	ldr	r3, [r7, #4]
 81095a8:	6a1b      	ldr	r3, [r3, #32]
 81095aa:	431a      	orrs	r2, r3
 81095ac:	687b      	ldr	r3, [r7, #4]
 81095ae:	685b      	ldr	r3, [r3, #4]
 81095b0:	431a      	orrs	r2, r3
 81095b2:	687b      	ldr	r3, [r7, #4]
 81095b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81095b6:	431a      	orrs	r2, r3
 81095b8:	687b      	ldr	r3, [r7, #4]
 81095ba:	689b      	ldr	r3, [r3, #8]
 81095bc:	431a      	orrs	r2, r3
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81095c2:	ea42 0103 	orr.w	r1, r2, r3
 81095c6:	687b      	ldr	r3, [r7, #4]
 81095c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81095ca:	687b      	ldr	r3, [r7, #4]
 81095cc:	681b      	ldr	r3, [r3, #0]
 81095ce:	430a      	orrs	r2, r1
 81095d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81095d2:	687b      	ldr	r3, [r7, #4]
 81095d4:	685b      	ldr	r3, [r3, #4]
 81095d6:	2b00      	cmp	r3, #0
 81095d8:	d113      	bne.n	8109602 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	681b      	ldr	r3, [r3, #0]
 81095de:	689b      	ldr	r3, [r3, #8]
 81095e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81095e4:	687b      	ldr	r3, [r7, #4]
 81095e6:	681b      	ldr	r3, [r3, #0]
 81095e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81095ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81095ee:	687b      	ldr	r3, [r7, #4]
 81095f0:	681b      	ldr	r3, [r3, #0]
 81095f2:	689b      	ldr	r3, [r3, #8]
 81095f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81095f8:	687b      	ldr	r3, [r7, #4]
 81095fa:	681b      	ldr	r3, [r3, #0]
 81095fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8109600:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8109602:	687b      	ldr	r3, [r7, #4]
 8109604:	681b      	ldr	r3, [r3, #0]
 8109606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8109608:	687b      	ldr	r3, [r7, #4]
 810960a:	681b      	ldr	r3, [r3, #0]
 810960c:	f022 0201 	bic.w	r2, r2, #1
 8109610:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8109612:	687b      	ldr	r3, [r7, #4]
 8109614:	685b      	ldr	r3, [r3, #4]
 8109616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810961a:	2b00      	cmp	r3, #0
 810961c:	d00a      	beq.n	8109634 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810961e:	687b      	ldr	r3, [r7, #4]
 8109620:	681b      	ldr	r3, [r3, #0]
 8109622:	68db      	ldr	r3, [r3, #12]
 8109624:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810962c:	687b      	ldr	r3, [r7, #4]
 810962e:	681b      	ldr	r3, [r3, #0]
 8109630:	430a      	orrs	r2, r1
 8109632:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8109634:	687b      	ldr	r3, [r7, #4]
 8109636:	2200      	movs	r2, #0
 8109638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810963c:	687b      	ldr	r3, [r7, #4]
 810963e:	2201      	movs	r2, #1
 8109640:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8109644:	2300      	movs	r3, #0
}
 8109646:	4618      	mov	r0, r3
 8109648:	3710      	adds	r7, #16
 810964a:	46bd      	mov	sp, r7
 810964c:	bd80      	pop	{r7, pc}
 810964e:	bf00      	nop
 8109650:	40013000 	.word	0x40013000
 8109654:	40003800 	.word	0x40003800
 8109658:	40003c00 	.word	0x40003c00

0810965c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810965c:	b480      	push	{r7}
 810965e:	b085      	sub	sp, #20
 8109660:	af00      	add	r7, sp, #0
 8109662:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8109664:	687b      	ldr	r3, [r7, #4]
 8109666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109668:	095b      	lsrs	r3, r3, #5
 810966a:	3301      	adds	r3, #1
 810966c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810966e:	687b      	ldr	r3, [r7, #4]
 8109670:	68db      	ldr	r3, [r3, #12]
 8109672:	3301      	adds	r3, #1
 8109674:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8109676:	68bb      	ldr	r3, [r7, #8]
 8109678:	3307      	adds	r3, #7
 810967a:	08db      	lsrs	r3, r3, #3
 810967c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810967e:	68bb      	ldr	r3, [r7, #8]
 8109680:	68fa      	ldr	r2, [r7, #12]
 8109682:	fb02 f303 	mul.w	r3, r2, r3
}
 8109686:	4618      	mov	r0, r3
 8109688:	3714      	adds	r7, #20
 810968a:	46bd      	mov	sp, r7
 810968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109690:	4770      	bx	lr

08109692 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8109692:	b580      	push	{r7, lr}
 8109694:	b082      	sub	sp, #8
 8109696:	af00      	add	r7, sp, #0
 8109698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810969a:	687b      	ldr	r3, [r7, #4]
 810969c:	2b00      	cmp	r3, #0
 810969e:	d101      	bne.n	81096a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81096a0:	2301      	movs	r3, #1
 81096a2:	e049      	b.n	8109738 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81096a4:	687b      	ldr	r3, [r7, #4]
 81096a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81096aa:	b2db      	uxtb	r3, r3
 81096ac:	2b00      	cmp	r3, #0
 81096ae:	d106      	bne.n	81096be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81096b0:	687b      	ldr	r3, [r7, #4]
 81096b2:	2200      	movs	r2, #0
 81096b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81096b8:	6878      	ldr	r0, [r7, #4]
 81096ba:	f7f8 fd17 	bl	81020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81096be:	687b      	ldr	r3, [r7, #4]
 81096c0:	2202      	movs	r2, #2
 81096c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81096c6:	687b      	ldr	r3, [r7, #4]
 81096c8:	681a      	ldr	r2, [r3, #0]
 81096ca:	687b      	ldr	r3, [r7, #4]
 81096cc:	3304      	adds	r3, #4
 81096ce:	4619      	mov	r1, r3
 81096d0:	4610      	mov	r0, r2
 81096d2:	f000 fbc3 	bl	8109e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81096d6:	687b      	ldr	r3, [r7, #4]
 81096d8:	2201      	movs	r2, #1
 81096da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81096de:	687b      	ldr	r3, [r7, #4]
 81096e0:	2201      	movs	r2, #1
 81096e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81096e6:	687b      	ldr	r3, [r7, #4]
 81096e8:	2201      	movs	r2, #1
 81096ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81096ee:	687b      	ldr	r3, [r7, #4]
 81096f0:	2201      	movs	r2, #1
 81096f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81096f6:	687b      	ldr	r3, [r7, #4]
 81096f8:	2201      	movs	r2, #1
 81096fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81096fe:	687b      	ldr	r3, [r7, #4]
 8109700:	2201      	movs	r2, #1
 8109702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8109706:	687b      	ldr	r3, [r7, #4]
 8109708:	2201      	movs	r2, #1
 810970a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	2201      	movs	r2, #1
 8109712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109716:	687b      	ldr	r3, [r7, #4]
 8109718:	2201      	movs	r2, #1
 810971a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810971e:	687b      	ldr	r3, [r7, #4]
 8109720:	2201      	movs	r2, #1
 8109722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8109726:	687b      	ldr	r3, [r7, #4]
 8109728:	2201      	movs	r2, #1
 810972a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810972e:	687b      	ldr	r3, [r7, #4]
 8109730:	2201      	movs	r2, #1
 8109732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8109736:	2300      	movs	r3, #0
}
 8109738:	4618      	mov	r0, r3
 810973a:	3708      	adds	r7, #8
 810973c:	46bd      	mov	sp, r7
 810973e:	bd80      	pop	{r7, pc}

08109740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8109740:	b480      	push	{r7}
 8109742:	b085      	sub	sp, #20
 8109744:	af00      	add	r7, sp, #0
 8109746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8109748:	687b      	ldr	r3, [r7, #4]
 810974a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810974e:	b2db      	uxtb	r3, r3
 8109750:	2b01      	cmp	r3, #1
 8109752:	d001      	beq.n	8109758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8109754:	2301      	movs	r3, #1
 8109756:	e054      	b.n	8109802 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109758:	687b      	ldr	r3, [r7, #4]
 810975a:	2202      	movs	r2, #2
 810975c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8109760:	687b      	ldr	r3, [r7, #4]
 8109762:	681b      	ldr	r3, [r3, #0]
 8109764:	68da      	ldr	r2, [r3, #12]
 8109766:	687b      	ldr	r3, [r7, #4]
 8109768:	681b      	ldr	r3, [r3, #0]
 810976a:	f042 0201 	orr.w	r2, r2, #1
 810976e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109770:	687b      	ldr	r3, [r7, #4]
 8109772:	681b      	ldr	r3, [r3, #0]
 8109774:	4a26      	ldr	r2, [pc, #152]	; (8109810 <HAL_TIM_Base_Start_IT+0xd0>)
 8109776:	4293      	cmp	r3, r2
 8109778:	d022      	beq.n	81097c0 <HAL_TIM_Base_Start_IT+0x80>
 810977a:	687b      	ldr	r3, [r7, #4]
 810977c:	681b      	ldr	r3, [r3, #0]
 810977e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109782:	d01d      	beq.n	81097c0 <HAL_TIM_Base_Start_IT+0x80>
 8109784:	687b      	ldr	r3, [r7, #4]
 8109786:	681b      	ldr	r3, [r3, #0]
 8109788:	4a22      	ldr	r2, [pc, #136]	; (8109814 <HAL_TIM_Base_Start_IT+0xd4>)
 810978a:	4293      	cmp	r3, r2
 810978c:	d018      	beq.n	81097c0 <HAL_TIM_Base_Start_IT+0x80>
 810978e:	687b      	ldr	r3, [r7, #4]
 8109790:	681b      	ldr	r3, [r3, #0]
 8109792:	4a21      	ldr	r2, [pc, #132]	; (8109818 <HAL_TIM_Base_Start_IT+0xd8>)
 8109794:	4293      	cmp	r3, r2
 8109796:	d013      	beq.n	81097c0 <HAL_TIM_Base_Start_IT+0x80>
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	681b      	ldr	r3, [r3, #0]
 810979c:	4a1f      	ldr	r2, [pc, #124]	; (810981c <HAL_TIM_Base_Start_IT+0xdc>)
 810979e:	4293      	cmp	r3, r2
 81097a0:	d00e      	beq.n	81097c0 <HAL_TIM_Base_Start_IT+0x80>
 81097a2:	687b      	ldr	r3, [r7, #4]
 81097a4:	681b      	ldr	r3, [r3, #0]
 81097a6:	4a1e      	ldr	r2, [pc, #120]	; (8109820 <HAL_TIM_Base_Start_IT+0xe0>)
 81097a8:	4293      	cmp	r3, r2
 81097aa:	d009      	beq.n	81097c0 <HAL_TIM_Base_Start_IT+0x80>
 81097ac:	687b      	ldr	r3, [r7, #4]
 81097ae:	681b      	ldr	r3, [r3, #0]
 81097b0:	4a1c      	ldr	r2, [pc, #112]	; (8109824 <HAL_TIM_Base_Start_IT+0xe4>)
 81097b2:	4293      	cmp	r3, r2
 81097b4:	d004      	beq.n	81097c0 <HAL_TIM_Base_Start_IT+0x80>
 81097b6:	687b      	ldr	r3, [r7, #4]
 81097b8:	681b      	ldr	r3, [r3, #0]
 81097ba:	4a1b      	ldr	r2, [pc, #108]	; (8109828 <HAL_TIM_Base_Start_IT+0xe8>)
 81097bc:	4293      	cmp	r3, r2
 81097be:	d115      	bne.n	81097ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81097c0:	687b      	ldr	r3, [r7, #4]
 81097c2:	681b      	ldr	r3, [r3, #0]
 81097c4:	689a      	ldr	r2, [r3, #8]
 81097c6:	4b19      	ldr	r3, [pc, #100]	; (810982c <HAL_TIM_Base_Start_IT+0xec>)
 81097c8:	4013      	ands	r3, r2
 81097ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81097cc:	68fb      	ldr	r3, [r7, #12]
 81097ce:	2b06      	cmp	r3, #6
 81097d0:	d015      	beq.n	81097fe <HAL_TIM_Base_Start_IT+0xbe>
 81097d2:	68fb      	ldr	r3, [r7, #12]
 81097d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81097d8:	d011      	beq.n	81097fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81097da:	687b      	ldr	r3, [r7, #4]
 81097dc:	681b      	ldr	r3, [r3, #0]
 81097de:	681a      	ldr	r2, [r3, #0]
 81097e0:	687b      	ldr	r3, [r7, #4]
 81097e2:	681b      	ldr	r3, [r3, #0]
 81097e4:	f042 0201 	orr.w	r2, r2, #1
 81097e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81097ea:	e008      	b.n	81097fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81097ec:	687b      	ldr	r3, [r7, #4]
 81097ee:	681b      	ldr	r3, [r3, #0]
 81097f0:	681a      	ldr	r2, [r3, #0]
 81097f2:	687b      	ldr	r3, [r7, #4]
 81097f4:	681b      	ldr	r3, [r3, #0]
 81097f6:	f042 0201 	orr.w	r2, r2, #1
 81097fa:	601a      	str	r2, [r3, #0]
 81097fc:	e000      	b.n	8109800 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81097fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8109800:	2300      	movs	r3, #0
}
 8109802:	4618      	mov	r0, r3
 8109804:	3714      	adds	r7, #20
 8109806:	46bd      	mov	sp, r7
 8109808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810980c:	4770      	bx	lr
 810980e:	bf00      	nop
 8109810:	40010000 	.word	0x40010000
 8109814:	40000400 	.word	0x40000400
 8109818:	40000800 	.word	0x40000800
 810981c:	40000c00 	.word	0x40000c00
 8109820:	40010400 	.word	0x40010400
 8109824:	40001800 	.word	0x40001800
 8109828:	40014000 	.word	0x40014000
 810982c:	00010007 	.word	0x00010007

08109830 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8109830:	b580      	push	{r7, lr}
 8109832:	b082      	sub	sp, #8
 8109834:	af00      	add	r7, sp, #0
 8109836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109838:	687b      	ldr	r3, [r7, #4]
 810983a:	2b00      	cmp	r3, #0
 810983c:	d101      	bne.n	8109842 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 810983e:	2301      	movs	r3, #1
 8109840:	e049      	b.n	81098d6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109842:	687b      	ldr	r3, [r7, #4]
 8109844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8109848:	b2db      	uxtb	r3, r3
 810984a:	2b00      	cmp	r3, #0
 810984c:	d106      	bne.n	810985c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810984e:	687b      	ldr	r3, [r7, #4]
 8109850:	2200      	movs	r2, #0
 8109852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8109856:	6878      	ldr	r0, [r7, #4]
 8109858:	f7f8 fc26 	bl	81020a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810985c:	687b      	ldr	r3, [r7, #4]
 810985e:	2202      	movs	r2, #2
 8109860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8109864:	687b      	ldr	r3, [r7, #4]
 8109866:	681a      	ldr	r2, [r3, #0]
 8109868:	687b      	ldr	r3, [r7, #4]
 810986a:	3304      	adds	r3, #4
 810986c:	4619      	mov	r1, r3
 810986e:	4610      	mov	r0, r2
 8109870:	f000 faf4 	bl	8109e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109874:	687b      	ldr	r3, [r7, #4]
 8109876:	2201      	movs	r2, #1
 8109878:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810987c:	687b      	ldr	r3, [r7, #4]
 810987e:	2201      	movs	r2, #1
 8109880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8109884:	687b      	ldr	r3, [r7, #4]
 8109886:	2201      	movs	r2, #1
 8109888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810988c:	687b      	ldr	r3, [r7, #4]
 810988e:	2201      	movs	r2, #1
 8109890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8109894:	687b      	ldr	r3, [r7, #4]
 8109896:	2201      	movs	r2, #1
 8109898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810989c:	687b      	ldr	r3, [r7, #4]
 810989e:	2201      	movs	r2, #1
 81098a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81098a4:	687b      	ldr	r3, [r7, #4]
 81098a6:	2201      	movs	r2, #1
 81098a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81098ac:	687b      	ldr	r3, [r7, #4]
 81098ae:	2201      	movs	r2, #1
 81098b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81098b4:	687b      	ldr	r3, [r7, #4]
 81098b6:	2201      	movs	r2, #1
 81098b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81098bc:	687b      	ldr	r3, [r7, #4]
 81098be:	2201      	movs	r2, #1
 81098c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81098c4:	687b      	ldr	r3, [r7, #4]
 81098c6:	2201      	movs	r2, #1
 81098c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81098cc:	687b      	ldr	r3, [r7, #4]
 81098ce:	2201      	movs	r2, #1
 81098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81098d4:	2300      	movs	r3, #0
}
 81098d6:	4618      	mov	r0, r3
 81098d8:	3708      	adds	r7, #8
 81098da:	46bd      	mov	sp, r7
 81098dc:	bd80      	pop	{r7, pc}

081098de <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 81098de:	b580      	push	{r7, lr}
 81098e0:	b082      	sub	sp, #8
 81098e2:	af00      	add	r7, sp, #0
 81098e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81098e6:	687b      	ldr	r3, [r7, #4]
 81098e8:	2b00      	cmp	r3, #0
 81098ea:	d101      	bne.n	81098f0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 81098ec:	2301      	movs	r3, #1
 81098ee:	e049      	b.n	8109984 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81098f0:	687b      	ldr	r3, [r7, #4]
 81098f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81098f6:	b2db      	uxtb	r3, r3
 81098f8:	2b00      	cmp	r3, #0
 81098fa:	d106      	bne.n	810990a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81098fc:	687b      	ldr	r3, [r7, #4]
 81098fe:	2200      	movs	r2, #0
 8109900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8109904:	6878      	ldr	r0, [r7, #4]
 8109906:	f000 f841 	bl	810998c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810990a:	687b      	ldr	r3, [r7, #4]
 810990c:	2202      	movs	r2, #2
 810990e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8109912:	687b      	ldr	r3, [r7, #4]
 8109914:	681a      	ldr	r2, [r3, #0]
 8109916:	687b      	ldr	r3, [r7, #4]
 8109918:	3304      	adds	r3, #4
 810991a:	4619      	mov	r1, r3
 810991c:	4610      	mov	r0, r2
 810991e:	f000 fa9d 	bl	8109e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109922:	687b      	ldr	r3, [r7, #4]
 8109924:	2201      	movs	r2, #1
 8109926:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810992a:	687b      	ldr	r3, [r7, #4]
 810992c:	2201      	movs	r2, #1
 810992e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8109932:	687b      	ldr	r3, [r7, #4]
 8109934:	2201      	movs	r2, #1
 8109936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810993a:	687b      	ldr	r3, [r7, #4]
 810993c:	2201      	movs	r2, #1
 810993e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8109942:	687b      	ldr	r3, [r7, #4]
 8109944:	2201      	movs	r2, #1
 8109946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810994a:	687b      	ldr	r3, [r7, #4]
 810994c:	2201      	movs	r2, #1
 810994e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8109952:	687b      	ldr	r3, [r7, #4]
 8109954:	2201      	movs	r2, #1
 8109956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810995a:	687b      	ldr	r3, [r7, #4]
 810995c:	2201      	movs	r2, #1
 810995e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109962:	687b      	ldr	r3, [r7, #4]
 8109964:	2201      	movs	r2, #1
 8109966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810996a:	687b      	ldr	r3, [r7, #4]
 810996c:	2201      	movs	r2, #1
 810996e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8109972:	687b      	ldr	r3, [r7, #4]
 8109974:	2201      	movs	r2, #1
 8109976:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810997a:	687b      	ldr	r3, [r7, #4]
 810997c:	2201      	movs	r2, #1
 810997e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8109982:	2300      	movs	r3, #0
}
 8109984:	4618      	mov	r0, r3
 8109986:	3708      	adds	r7, #8
 8109988:	46bd      	mov	sp, r7
 810998a:	bd80      	pop	{r7, pc}

0810998c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 810998c:	b480      	push	{r7}
 810998e:	b083      	sub	sp, #12
 8109990:	af00      	add	r7, sp, #0
 8109992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8109994:	bf00      	nop
 8109996:	370c      	adds	r7, #12
 8109998:	46bd      	mov	sp, r7
 810999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810999e:	4770      	bx	lr

081099a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81099a0:	b580      	push	{r7, lr}
 81099a2:	b082      	sub	sp, #8
 81099a4:	af00      	add	r7, sp, #0
 81099a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81099a8:	687b      	ldr	r3, [r7, #4]
 81099aa:	681b      	ldr	r3, [r3, #0]
 81099ac:	691b      	ldr	r3, [r3, #16]
 81099ae:	f003 0302 	and.w	r3, r3, #2
 81099b2:	2b02      	cmp	r3, #2
 81099b4:	d122      	bne.n	81099fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81099b6:	687b      	ldr	r3, [r7, #4]
 81099b8:	681b      	ldr	r3, [r3, #0]
 81099ba:	68db      	ldr	r3, [r3, #12]
 81099bc:	f003 0302 	and.w	r3, r3, #2
 81099c0:	2b02      	cmp	r3, #2
 81099c2:	d11b      	bne.n	81099fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81099c4:	687b      	ldr	r3, [r7, #4]
 81099c6:	681b      	ldr	r3, [r3, #0]
 81099c8:	f06f 0202 	mvn.w	r2, #2
 81099cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81099ce:	687b      	ldr	r3, [r7, #4]
 81099d0:	2201      	movs	r2, #1
 81099d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81099d4:	687b      	ldr	r3, [r7, #4]
 81099d6:	681b      	ldr	r3, [r3, #0]
 81099d8:	699b      	ldr	r3, [r3, #24]
 81099da:	f003 0303 	and.w	r3, r3, #3
 81099de:	2b00      	cmp	r3, #0
 81099e0:	d003      	beq.n	81099ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81099e2:	6878      	ldr	r0, [r7, #4]
 81099e4:	f000 fa1c 	bl	8109e20 <HAL_TIM_IC_CaptureCallback>
 81099e8:	e005      	b.n	81099f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81099ea:	6878      	ldr	r0, [r7, #4]
 81099ec:	f000 fa0e 	bl	8109e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81099f0:	6878      	ldr	r0, [r7, #4]
 81099f2:	f000 fa1f 	bl	8109e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81099f6:	687b      	ldr	r3, [r7, #4]
 81099f8:	2200      	movs	r2, #0
 81099fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81099fc:	687b      	ldr	r3, [r7, #4]
 81099fe:	681b      	ldr	r3, [r3, #0]
 8109a00:	691b      	ldr	r3, [r3, #16]
 8109a02:	f003 0304 	and.w	r3, r3, #4
 8109a06:	2b04      	cmp	r3, #4
 8109a08:	d122      	bne.n	8109a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8109a0a:	687b      	ldr	r3, [r7, #4]
 8109a0c:	681b      	ldr	r3, [r3, #0]
 8109a0e:	68db      	ldr	r3, [r3, #12]
 8109a10:	f003 0304 	and.w	r3, r3, #4
 8109a14:	2b04      	cmp	r3, #4
 8109a16:	d11b      	bne.n	8109a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8109a18:	687b      	ldr	r3, [r7, #4]
 8109a1a:	681b      	ldr	r3, [r3, #0]
 8109a1c:	f06f 0204 	mvn.w	r2, #4
 8109a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8109a22:	687b      	ldr	r3, [r7, #4]
 8109a24:	2202      	movs	r2, #2
 8109a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8109a28:	687b      	ldr	r3, [r7, #4]
 8109a2a:	681b      	ldr	r3, [r3, #0]
 8109a2c:	699b      	ldr	r3, [r3, #24]
 8109a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8109a32:	2b00      	cmp	r3, #0
 8109a34:	d003      	beq.n	8109a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109a36:	6878      	ldr	r0, [r7, #4]
 8109a38:	f000 f9f2 	bl	8109e20 <HAL_TIM_IC_CaptureCallback>
 8109a3c:	e005      	b.n	8109a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109a3e:	6878      	ldr	r0, [r7, #4]
 8109a40:	f000 f9e4 	bl	8109e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109a44:	6878      	ldr	r0, [r7, #4]
 8109a46:	f000 f9f5 	bl	8109e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109a4a:	687b      	ldr	r3, [r7, #4]
 8109a4c:	2200      	movs	r2, #0
 8109a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8109a50:	687b      	ldr	r3, [r7, #4]
 8109a52:	681b      	ldr	r3, [r3, #0]
 8109a54:	691b      	ldr	r3, [r3, #16]
 8109a56:	f003 0308 	and.w	r3, r3, #8
 8109a5a:	2b08      	cmp	r3, #8
 8109a5c:	d122      	bne.n	8109aa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8109a5e:	687b      	ldr	r3, [r7, #4]
 8109a60:	681b      	ldr	r3, [r3, #0]
 8109a62:	68db      	ldr	r3, [r3, #12]
 8109a64:	f003 0308 	and.w	r3, r3, #8
 8109a68:	2b08      	cmp	r3, #8
 8109a6a:	d11b      	bne.n	8109aa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8109a6c:	687b      	ldr	r3, [r7, #4]
 8109a6e:	681b      	ldr	r3, [r3, #0]
 8109a70:	f06f 0208 	mvn.w	r2, #8
 8109a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8109a76:	687b      	ldr	r3, [r7, #4]
 8109a78:	2204      	movs	r2, #4
 8109a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8109a7c:	687b      	ldr	r3, [r7, #4]
 8109a7e:	681b      	ldr	r3, [r3, #0]
 8109a80:	69db      	ldr	r3, [r3, #28]
 8109a82:	f003 0303 	and.w	r3, r3, #3
 8109a86:	2b00      	cmp	r3, #0
 8109a88:	d003      	beq.n	8109a92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109a8a:	6878      	ldr	r0, [r7, #4]
 8109a8c:	f000 f9c8 	bl	8109e20 <HAL_TIM_IC_CaptureCallback>
 8109a90:	e005      	b.n	8109a9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109a92:	6878      	ldr	r0, [r7, #4]
 8109a94:	f000 f9ba 	bl	8109e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109a98:	6878      	ldr	r0, [r7, #4]
 8109a9a:	f000 f9cb 	bl	8109e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109a9e:	687b      	ldr	r3, [r7, #4]
 8109aa0:	2200      	movs	r2, #0
 8109aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8109aa4:	687b      	ldr	r3, [r7, #4]
 8109aa6:	681b      	ldr	r3, [r3, #0]
 8109aa8:	691b      	ldr	r3, [r3, #16]
 8109aaa:	f003 0310 	and.w	r3, r3, #16
 8109aae:	2b10      	cmp	r3, #16
 8109ab0:	d122      	bne.n	8109af8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8109ab2:	687b      	ldr	r3, [r7, #4]
 8109ab4:	681b      	ldr	r3, [r3, #0]
 8109ab6:	68db      	ldr	r3, [r3, #12]
 8109ab8:	f003 0310 	and.w	r3, r3, #16
 8109abc:	2b10      	cmp	r3, #16
 8109abe:	d11b      	bne.n	8109af8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8109ac0:	687b      	ldr	r3, [r7, #4]
 8109ac2:	681b      	ldr	r3, [r3, #0]
 8109ac4:	f06f 0210 	mvn.w	r2, #16
 8109ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	2208      	movs	r2, #8
 8109ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8109ad0:	687b      	ldr	r3, [r7, #4]
 8109ad2:	681b      	ldr	r3, [r3, #0]
 8109ad4:	69db      	ldr	r3, [r3, #28]
 8109ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8109ada:	2b00      	cmp	r3, #0
 8109adc:	d003      	beq.n	8109ae6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8109ade:	6878      	ldr	r0, [r7, #4]
 8109ae0:	f000 f99e 	bl	8109e20 <HAL_TIM_IC_CaptureCallback>
 8109ae4:	e005      	b.n	8109af2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109ae6:	6878      	ldr	r0, [r7, #4]
 8109ae8:	f000 f990 	bl	8109e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109aec:	6878      	ldr	r0, [r7, #4]
 8109aee:	f000 f9a1 	bl	8109e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	2200      	movs	r2, #0
 8109af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8109af8:	687b      	ldr	r3, [r7, #4]
 8109afa:	681b      	ldr	r3, [r3, #0]
 8109afc:	691b      	ldr	r3, [r3, #16]
 8109afe:	f003 0301 	and.w	r3, r3, #1
 8109b02:	2b01      	cmp	r3, #1
 8109b04:	d10e      	bne.n	8109b24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8109b06:	687b      	ldr	r3, [r7, #4]
 8109b08:	681b      	ldr	r3, [r3, #0]
 8109b0a:	68db      	ldr	r3, [r3, #12]
 8109b0c:	f003 0301 	and.w	r3, r3, #1
 8109b10:	2b01      	cmp	r3, #1
 8109b12:	d107      	bne.n	8109b24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8109b14:	687b      	ldr	r3, [r7, #4]
 8109b16:	681b      	ldr	r3, [r3, #0]
 8109b18:	f06f 0201 	mvn.w	r2, #1
 8109b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8109b1e:	6878      	ldr	r0, [r7, #4]
 8109b20:	f7f7 fb00 	bl	8101124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8109b24:	687b      	ldr	r3, [r7, #4]
 8109b26:	681b      	ldr	r3, [r3, #0]
 8109b28:	691b      	ldr	r3, [r3, #16]
 8109b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109b2e:	2b80      	cmp	r3, #128	; 0x80
 8109b30:	d10e      	bne.n	8109b50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8109b32:	687b      	ldr	r3, [r7, #4]
 8109b34:	681b      	ldr	r3, [r3, #0]
 8109b36:	68db      	ldr	r3, [r3, #12]
 8109b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109b3c:	2b80      	cmp	r3, #128	; 0x80
 8109b3e:	d107      	bne.n	8109b50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8109b40:	687b      	ldr	r3, [r7, #4]
 8109b42:	681b      	ldr	r3, [r3, #0]
 8109b44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8109b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8109b4a:	6878      	ldr	r0, [r7, #4]
 8109b4c:	f000 ff36 	bl	810a9bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8109b50:	687b      	ldr	r3, [r7, #4]
 8109b52:	681b      	ldr	r3, [r3, #0]
 8109b54:	691b      	ldr	r3, [r3, #16]
 8109b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109b5e:	d10e      	bne.n	8109b7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8109b60:	687b      	ldr	r3, [r7, #4]
 8109b62:	681b      	ldr	r3, [r3, #0]
 8109b64:	68db      	ldr	r3, [r3, #12]
 8109b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109b6a:	2b80      	cmp	r3, #128	; 0x80
 8109b6c:	d107      	bne.n	8109b7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8109b6e:	687b      	ldr	r3, [r7, #4]
 8109b70:	681b      	ldr	r3, [r3, #0]
 8109b72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8109b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8109b78:	6878      	ldr	r0, [r7, #4]
 8109b7a:	f000 ff29 	bl	810a9d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8109b7e:	687b      	ldr	r3, [r7, #4]
 8109b80:	681b      	ldr	r3, [r3, #0]
 8109b82:	691b      	ldr	r3, [r3, #16]
 8109b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109b88:	2b40      	cmp	r3, #64	; 0x40
 8109b8a:	d10e      	bne.n	8109baa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8109b8c:	687b      	ldr	r3, [r7, #4]
 8109b8e:	681b      	ldr	r3, [r3, #0]
 8109b90:	68db      	ldr	r3, [r3, #12]
 8109b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109b96:	2b40      	cmp	r3, #64	; 0x40
 8109b98:	d107      	bne.n	8109baa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8109b9a:	687b      	ldr	r3, [r7, #4]
 8109b9c:	681b      	ldr	r3, [r3, #0]
 8109b9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8109ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8109ba4:	6878      	ldr	r0, [r7, #4]
 8109ba6:	f000 f94f 	bl	8109e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8109baa:	687b      	ldr	r3, [r7, #4]
 8109bac:	681b      	ldr	r3, [r3, #0]
 8109bae:	691b      	ldr	r3, [r3, #16]
 8109bb0:	f003 0320 	and.w	r3, r3, #32
 8109bb4:	2b20      	cmp	r3, #32
 8109bb6:	d10e      	bne.n	8109bd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8109bb8:	687b      	ldr	r3, [r7, #4]
 8109bba:	681b      	ldr	r3, [r3, #0]
 8109bbc:	68db      	ldr	r3, [r3, #12]
 8109bbe:	f003 0320 	and.w	r3, r3, #32
 8109bc2:	2b20      	cmp	r3, #32
 8109bc4:	d107      	bne.n	8109bd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8109bc6:	687b      	ldr	r3, [r7, #4]
 8109bc8:	681b      	ldr	r3, [r3, #0]
 8109bca:	f06f 0220 	mvn.w	r2, #32
 8109bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8109bd0:	6878      	ldr	r0, [r7, #4]
 8109bd2:	f000 fee9 	bl	810a9a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8109bd6:	bf00      	nop
 8109bd8:	3708      	adds	r7, #8
 8109bda:	46bd      	mov	sp, r7
 8109bdc:	bd80      	pop	{r7, pc}
	...

08109be0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8109be0:	b580      	push	{r7, lr}
 8109be2:	b086      	sub	sp, #24
 8109be4:	af00      	add	r7, sp, #0
 8109be6:	60f8      	str	r0, [r7, #12]
 8109be8:	60b9      	str	r1, [r7, #8]
 8109bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109bec:	2300      	movs	r3, #0
 8109bee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8109bf0:	68fb      	ldr	r3, [r7, #12]
 8109bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109bf6:	2b01      	cmp	r3, #1
 8109bf8:	d101      	bne.n	8109bfe <HAL_TIM_OC_ConfigChannel+0x1e>
 8109bfa:	2302      	movs	r3, #2
 8109bfc:	e066      	b.n	8109ccc <HAL_TIM_OC_ConfigChannel+0xec>
 8109bfe:	68fb      	ldr	r3, [r7, #12]
 8109c00:	2201      	movs	r2, #1
 8109c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8109c06:	687b      	ldr	r3, [r7, #4]
 8109c08:	2b14      	cmp	r3, #20
 8109c0a:	d857      	bhi.n	8109cbc <HAL_TIM_OC_ConfigChannel+0xdc>
 8109c0c:	a201      	add	r2, pc, #4	; (adr r2, 8109c14 <HAL_TIM_OC_ConfigChannel+0x34>)
 8109c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109c12:	bf00      	nop
 8109c14:	08109c69 	.word	0x08109c69
 8109c18:	08109cbd 	.word	0x08109cbd
 8109c1c:	08109cbd 	.word	0x08109cbd
 8109c20:	08109cbd 	.word	0x08109cbd
 8109c24:	08109c77 	.word	0x08109c77
 8109c28:	08109cbd 	.word	0x08109cbd
 8109c2c:	08109cbd 	.word	0x08109cbd
 8109c30:	08109cbd 	.word	0x08109cbd
 8109c34:	08109c85 	.word	0x08109c85
 8109c38:	08109cbd 	.word	0x08109cbd
 8109c3c:	08109cbd 	.word	0x08109cbd
 8109c40:	08109cbd 	.word	0x08109cbd
 8109c44:	08109c93 	.word	0x08109c93
 8109c48:	08109cbd 	.word	0x08109cbd
 8109c4c:	08109cbd 	.word	0x08109cbd
 8109c50:	08109cbd 	.word	0x08109cbd
 8109c54:	08109ca1 	.word	0x08109ca1
 8109c58:	08109cbd 	.word	0x08109cbd
 8109c5c:	08109cbd 	.word	0x08109cbd
 8109c60:	08109cbd 	.word	0x08109cbd
 8109c64:	08109caf 	.word	0x08109caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8109c68:	68fb      	ldr	r3, [r7, #12]
 8109c6a:	681b      	ldr	r3, [r3, #0]
 8109c6c:	68b9      	ldr	r1, [r7, #8]
 8109c6e:	4618      	mov	r0, r3
 8109c70:	f000 f98e 	bl	8109f90 <TIM_OC1_SetConfig>
      break;
 8109c74:	e025      	b.n	8109cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8109c76:	68fb      	ldr	r3, [r7, #12]
 8109c78:	681b      	ldr	r3, [r3, #0]
 8109c7a:	68b9      	ldr	r1, [r7, #8]
 8109c7c:	4618      	mov	r0, r3
 8109c7e:	f000 fa17 	bl	810a0b0 <TIM_OC2_SetConfig>
      break;
 8109c82:	e01e      	b.n	8109cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8109c84:	68fb      	ldr	r3, [r7, #12]
 8109c86:	681b      	ldr	r3, [r3, #0]
 8109c88:	68b9      	ldr	r1, [r7, #8]
 8109c8a:	4618      	mov	r0, r3
 8109c8c:	f000 fa9a 	bl	810a1c4 <TIM_OC3_SetConfig>
      break;
 8109c90:	e017      	b.n	8109cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8109c92:	68fb      	ldr	r3, [r7, #12]
 8109c94:	681b      	ldr	r3, [r3, #0]
 8109c96:	68b9      	ldr	r1, [r7, #8]
 8109c98:	4618      	mov	r0, r3
 8109c9a:	f000 fb1b 	bl	810a2d4 <TIM_OC4_SetConfig>
      break;
 8109c9e:	e010      	b.n	8109cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8109ca0:	68fb      	ldr	r3, [r7, #12]
 8109ca2:	681b      	ldr	r3, [r3, #0]
 8109ca4:	68b9      	ldr	r1, [r7, #8]
 8109ca6:	4618      	mov	r0, r3
 8109ca8:	f000 fb7e 	bl	810a3a8 <TIM_OC5_SetConfig>
      break;
 8109cac:	e009      	b.n	8109cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8109cae:	68fb      	ldr	r3, [r7, #12]
 8109cb0:	681b      	ldr	r3, [r3, #0]
 8109cb2:	68b9      	ldr	r1, [r7, #8]
 8109cb4:	4618      	mov	r0, r3
 8109cb6:	f000 fbdb 	bl	810a470 <TIM_OC6_SetConfig>
      break;
 8109cba:	e002      	b.n	8109cc2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8109cbc:	2301      	movs	r3, #1
 8109cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8109cc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8109cc2:	68fb      	ldr	r3, [r7, #12]
 8109cc4:	2200      	movs	r2, #0
 8109cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8109cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8109ccc:	4618      	mov	r0, r3
 8109cce:	3718      	adds	r7, #24
 8109cd0:	46bd      	mov	sp, r7
 8109cd2:	bd80      	pop	{r7, pc}

08109cd4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8109cd4:	b580      	push	{r7, lr}
 8109cd6:	b086      	sub	sp, #24
 8109cd8:	af00      	add	r7, sp, #0
 8109cda:	60f8      	str	r0, [r7, #12]
 8109cdc:	60b9      	str	r1, [r7, #8]
 8109cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109ce0:	2300      	movs	r3, #0
 8109ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8109ce4:	68fb      	ldr	r3, [r7, #12]
 8109ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8109cea:	2b01      	cmp	r3, #1
 8109cec:	d101      	bne.n	8109cf2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8109cee:	2302      	movs	r3, #2
 8109cf0:	e088      	b.n	8109e04 <HAL_TIM_IC_ConfigChannel+0x130>
 8109cf2:	68fb      	ldr	r3, [r7, #12]
 8109cf4:	2201      	movs	r2, #1
 8109cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8109cfa:	687b      	ldr	r3, [r7, #4]
 8109cfc:	2b00      	cmp	r3, #0
 8109cfe:	d11b      	bne.n	8109d38 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8109d00:	68fb      	ldr	r3, [r7, #12]
 8109d02:	6818      	ldr	r0, [r3, #0]
 8109d04:	68bb      	ldr	r3, [r7, #8]
 8109d06:	6819      	ldr	r1, [r3, #0]
 8109d08:	68bb      	ldr	r3, [r7, #8]
 8109d0a:	685a      	ldr	r2, [r3, #4]
 8109d0c:	68bb      	ldr	r3, [r7, #8]
 8109d0e:	68db      	ldr	r3, [r3, #12]
 8109d10:	f000 fc14 	bl	810a53c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8109d14:	68fb      	ldr	r3, [r7, #12]
 8109d16:	681b      	ldr	r3, [r3, #0]
 8109d18:	699a      	ldr	r2, [r3, #24]
 8109d1a:	68fb      	ldr	r3, [r7, #12]
 8109d1c:	681b      	ldr	r3, [r3, #0]
 8109d1e:	f022 020c 	bic.w	r2, r2, #12
 8109d22:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8109d24:	68fb      	ldr	r3, [r7, #12]
 8109d26:	681b      	ldr	r3, [r3, #0]
 8109d28:	6999      	ldr	r1, [r3, #24]
 8109d2a:	68bb      	ldr	r3, [r7, #8]
 8109d2c:	689a      	ldr	r2, [r3, #8]
 8109d2e:	68fb      	ldr	r3, [r7, #12]
 8109d30:	681b      	ldr	r3, [r3, #0]
 8109d32:	430a      	orrs	r2, r1
 8109d34:	619a      	str	r2, [r3, #24]
 8109d36:	e060      	b.n	8109dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8109d38:	687b      	ldr	r3, [r7, #4]
 8109d3a:	2b04      	cmp	r3, #4
 8109d3c:	d11c      	bne.n	8109d78 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8109d3e:	68fb      	ldr	r3, [r7, #12]
 8109d40:	6818      	ldr	r0, [r3, #0]
 8109d42:	68bb      	ldr	r3, [r7, #8]
 8109d44:	6819      	ldr	r1, [r3, #0]
 8109d46:	68bb      	ldr	r3, [r7, #8]
 8109d48:	685a      	ldr	r2, [r3, #4]
 8109d4a:	68bb      	ldr	r3, [r7, #8]
 8109d4c:	68db      	ldr	r3, [r3, #12]
 8109d4e:	f000 fc69 	bl	810a624 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8109d52:	68fb      	ldr	r3, [r7, #12]
 8109d54:	681b      	ldr	r3, [r3, #0]
 8109d56:	699a      	ldr	r2, [r3, #24]
 8109d58:	68fb      	ldr	r3, [r7, #12]
 8109d5a:	681b      	ldr	r3, [r3, #0]
 8109d5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8109d60:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8109d62:	68fb      	ldr	r3, [r7, #12]
 8109d64:	681b      	ldr	r3, [r3, #0]
 8109d66:	6999      	ldr	r1, [r3, #24]
 8109d68:	68bb      	ldr	r3, [r7, #8]
 8109d6a:	689b      	ldr	r3, [r3, #8]
 8109d6c:	021a      	lsls	r2, r3, #8
 8109d6e:	68fb      	ldr	r3, [r7, #12]
 8109d70:	681b      	ldr	r3, [r3, #0]
 8109d72:	430a      	orrs	r2, r1
 8109d74:	619a      	str	r2, [r3, #24]
 8109d76:	e040      	b.n	8109dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8109d78:	687b      	ldr	r3, [r7, #4]
 8109d7a:	2b08      	cmp	r3, #8
 8109d7c:	d11b      	bne.n	8109db6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8109d7e:	68fb      	ldr	r3, [r7, #12]
 8109d80:	6818      	ldr	r0, [r3, #0]
 8109d82:	68bb      	ldr	r3, [r7, #8]
 8109d84:	6819      	ldr	r1, [r3, #0]
 8109d86:	68bb      	ldr	r3, [r7, #8]
 8109d88:	685a      	ldr	r2, [r3, #4]
 8109d8a:	68bb      	ldr	r3, [r7, #8]
 8109d8c:	68db      	ldr	r3, [r3, #12]
 8109d8e:	f000 fc86 	bl	810a69e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8109d92:	68fb      	ldr	r3, [r7, #12]
 8109d94:	681b      	ldr	r3, [r3, #0]
 8109d96:	69da      	ldr	r2, [r3, #28]
 8109d98:	68fb      	ldr	r3, [r7, #12]
 8109d9a:	681b      	ldr	r3, [r3, #0]
 8109d9c:	f022 020c 	bic.w	r2, r2, #12
 8109da0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8109da2:	68fb      	ldr	r3, [r7, #12]
 8109da4:	681b      	ldr	r3, [r3, #0]
 8109da6:	69d9      	ldr	r1, [r3, #28]
 8109da8:	68bb      	ldr	r3, [r7, #8]
 8109daa:	689a      	ldr	r2, [r3, #8]
 8109dac:	68fb      	ldr	r3, [r7, #12]
 8109dae:	681b      	ldr	r3, [r3, #0]
 8109db0:	430a      	orrs	r2, r1
 8109db2:	61da      	str	r2, [r3, #28]
 8109db4:	e021      	b.n	8109dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8109db6:	687b      	ldr	r3, [r7, #4]
 8109db8:	2b0c      	cmp	r3, #12
 8109dba:	d11c      	bne.n	8109df6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8109dbc:	68fb      	ldr	r3, [r7, #12]
 8109dbe:	6818      	ldr	r0, [r3, #0]
 8109dc0:	68bb      	ldr	r3, [r7, #8]
 8109dc2:	6819      	ldr	r1, [r3, #0]
 8109dc4:	68bb      	ldr	r3, [r7, #8]
 8109dc6:	685a      	ldr	r2, [r3, #4]
 8109dc8:	68bb      	ldr	r3, [r7, #8]
 8109dca:	68db      	ldr	r3, [r3, #12]
 8109dcc:	f000 fca3 	bl	810a716 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8109dd0:	68fb      	ldr	r3, [r7, #12]
 8109dd2:	681b      	ldr	r3, [r3, #0]
 8109dd4:	69da      	ldr	r2, [r3, #28]
 8109dd6:	68fb      	ldr	r3, [r7, #12]
 8109dd8:	681b      	ldr	r3, [r3, #0]
 8109dda:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8109dde:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8109de0:	68fb      	ldr	r3, [r7, #12]
 8109de2:	681b      	ldr	r3, [r3, #0]
 8109de4:	69d9      	ldr	r1, [r3, #28]
 8109de6:	68bb      	ldr	r3, [r7, #8]
 8109de8:	689b      	ldr	r3, [r3, #8]
 8109dea:	021a      	lsls	r2, r3, #8
 8109dec:	68fb      	ldr	r3, [r7, #12]
 8109dee:	681b      	ldr	r3, [r3, #0]
 8109df0:	430a      	orrs	r2, r1
 8109df2:	61da      	str	r2, [r3, #28]
 8109df4:	e001      	b.n	8109dfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8109df6:	2301      	movs	r3, #1
 8109df8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8109dfa:	68fb      	ldr	r3, [r7, #12]
 8109dfc:	2200      	movs	r2, #0
 8109dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8109e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8109e04:	4618      	mov	r0, r3
 8109e06:	3718      	adds	r7, #24
 8109e08:	46bd      	mov	sp, r7
 8109e0a:	bd80      	pop	{r7, pc}

08109e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8109e0c:	b480      	push	{r7}
 8109e0e:	b083      	sub	sp, #12
 8109e10:	af00      	add	r7, sp, #0
 8109e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8109e14:	bf00      	nop
 8109e16:	370c      	adds	r7, #12
 8109e18:	46bd      	mov	sp, r7
 8109e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e1e:	4770      	bx	lr

08109e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8109e20:	b480      	push	{r7}
 8109e22:	b083      	sub	sp, #12
 8109e24:	af00      	add	r7, sp, #0
 8109e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8109e28:	bf00      	nop
 8109e2a:	370c      	adds	r7, #12
 8109e2c:	46bd      	mov	sp, r7
 8109e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e32:	4770      	bx	lr

08109e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8109e34:	b480      	push	{r7}
 8109e36:	b083      	sub	sp, #12
 8109e38:	af00      	add	r7, sp, #0
 8109e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8109e3c:	bf00      	nop
 8109e3e:	370c      	adds	r7, #12
 8109e40:	46bd      	mov	sp, r7
 8109e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e46:	4770      	bx	lr

08109e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8109e48:	b480      	push	{r7}
 8109e4a:	b083      	sub	sp, #12
 8109e4c:	af00      	add	r7, sp, #0
 8109e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8109e50:	bf00      	nop
 8109e52:	370c      	adds	r7, #12
 8109e54:	46bd      	mov	sp, r7
 8109e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e5a:	4770      	bx	lr

08109e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8109e5c:	b480      	push	{r7}
 8109e5e:	b085      	sub	sp, #20
 8109e60:	af00      	add	r7, sp, #0
 8109e62:	6078      	str	r0, [r7, #4]
 8109e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109e66:	687b      	ldr	r3, [r7, #4]
 8109e68:	681b      	ldr	r3, [r3, #0]
 8109e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8109e6c:	687b      	ldr	r3, [r7, #4]
 8109e6e:	4a40      	ldr	r2, [pc, #256]	; (8109f70 <TIM_Base_SetConfig+0x114>)
 8109e70:	4293      	cmp	r3, r2
 8109e72:	d013      	beq.n	8109e9c <TIM_Base_SetConfig+0x40>
 8109e74:	687b      	ldr	r3, [r7, #4]
 8109e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109e7a:	d00f      	beq.n	8109e9c <TIM_Base_SetConfig+0x40>
 8109e7c:	687b      	ldr	r3, [r7, #4]
 8109e7e:	4a3d      	ldr	r2, [pc, #244]	; (8109f74 <TIM_Base_SetConfig+0x118>)
 8109e80:	4293      	cmp	r3, r2
 8109e82:	d00b      	beq.n	8109e9c <TIM_Base_SetConfig+0x40>
 8109e84:	687b      	ldr	r3, [r7, #4]
 8109e86:	4a3c      	ldr	r2, [pc, #240]	; (8109f78 <TIM_Base_SetConfig+0x11c>)
 8109e88:	4293      	cmp	r3, r2
 8109e8a:	d007      	beq.n	8109e9c <TIM_Base_SetConfig+0x40>
 8109e8c:	687b      	ldr	r3, [r7, #4]
 8109e8e:	4a3b      	ldr	r2, [pc, #236]	; (8109f7c <TIM_Base_SetConfig+0x120>)
 8109e90:	4293      	cmp	r3, r2
 8109e92:	d003      	beq.n	8109e9c <TIM_Base_SetConfig+0x40>
 8109e94:	687b      	ldr	r3, [r7, #4]
 8109e96:	4a3a      	ldr	r2, [pc, #232]	; (8109f80 <TIM_Base_SetConfig+0x124>)
 8109e98:	4293      	cmp	r3, r2
 8109e9a:	d108      	bne.n	8109eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8109e9c:	68fb      	ldr	r3, [r7, #12]
 8109e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109ea4:	683b      	ldr	r3, [r7, #0]
 8109ea6:	685b      	ldr	r3, [r3, #4]
 8109ea8:	68fa      	ldr	r2, [r7, #12]
 8109eaa:	4313      	orrs	r3, r2
 8109eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8109eae:	687b      	ldr	r3, [r7, #4]
 8109eb0:	4a2f      	ldr	r2, [pc, #188]	; (8109f70 <TIM_Base_SetConfig+0x114>)
 8109eb2:	4293      	cmp	r3, r2
 8109eb4:	d01f      	beq.n	8109ef6 <TIM_Base_SetConfig+0x9a>
 8109eb6:	687b      	ldr	r3, [r7, #4]
 8109eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109ebc:	d01b      	beq.n	8109ef6 <TIM_Base_SetConfig+0x9a>
 8109ebe:	687b      	ldr	r3, [r7, #4]
 8109ec0:	4a2c      	ldr	r2, [pc, #176]	; (8109f74 <TIM_Base_SetConfig+0x118>)
 8109ec2:	4293      	cmp	r3, r2
 8109ec4:	d017      	beq.n	8109ef6 <TIM_Base_SetConfig+0x9a>
 8109ec6:	687b      	ldr	r3, [r7, #4]
 8109ec8:	4a2b      	ldr	r2, [pc, #172]	; (8109f78 <TIM_Base_SetConfig+0x11c>)
 8109eca:	4293      	cmp	r3, r2
 8109ecc:	d013      	beq.n	8109ef6 <TIM_Base_SetConfig+0x9a>
 8109ece:	687b      	ldr	r3, [r7, #4]
 8109ed0:	4a2a      	ldr	r2, [pc, #168]	; (8109f7c <TIM_Base_SetConfig+0x120>)
 8109ed2:	4293      	cmp	r3, r2
 8109ed4:	d00f      	beq.n	8109ef6 <TIM_Base_SetConfig+0x9a>
 8109ed6:	687b      	ldr	r3, [r7, #4]
 8109ed8:	4a29      	ldr	r2, [pc, #164]	; (8109f80 <TIM_Base_SetConfig+0x124>)
 8109eda:	4293      	cmp	r3, r2
 8109edc:	d00b      	beq.n	8109ef6 <TIM_Base_SetConfig+0x9a>
 8109ede:	687b      	ldr	r3, [r7, #4]
 8109ee0:	4a28      	ldr	r2, [pc, #160]	; (8109f84 <TIM_Base_SetConfig+0x128>)
 8109ee2:	4293      	cmp	r3, r2
 8109ee4:	d007      	beq.n	8109ef6 <TIM_Base_SetConfig+0x9a>
 8109ee6:	687b      	ldr	r3, [r7, #4]
 8109ee8:	4a27      	ldr	r2, [pc, #156]	; (8109f88 <TIM_Base_SetConfig+0x12c>)
 8109eea:	4293      	cmp	r3, r2
 8109eec:	d003      	beq.n	8109ef6 <TIM_Base_SetConfig+0x9a>
 8109eee:	687b      	ldr	r3, [r7, #4]
 8109ef0:	4a26      	ldr	r2, [pc, #152]	; (8109f8c <TIM_Base_SetConfig+0x130>)
 8109ef2:	4293      	cmp	r3, r2
 8109ef4:	d108      	bne.n	8109f08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109ef6:	68fb      	ldr	r3, [r7, #12]
 8109ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109efe:	683b      	ldr	r3, [r7, #0]
 8109f00:	68db      	ldr	r3, [r3, #12]
 8109f02:	68fa      	ldr	r2, [r7, #12]
 8109f04:	4313      	orrs	r3, r2
 8109f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109f08:	68fb      	ldr	r3, [r7, #12]
 8109f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8109f0e:	683b      	ldr	r3, [r7, #0]
 8109f10:	695b      	ldr	r3, [r3, #20]
 8109f12:	4313      	orrs	r3, r2
 8109f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8109f16:	687b      	ldr	r3, [r7, #4]
 8109f18:	68fa      	ldr	r2, [r7, #12]
 8109f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109f1c:	683b      	ldr	r3, [r7, #0]
 8109f1e:	689a      	ldr	r2, [r3, #8]
 8109f20:	687b      	ldr	r3, [r7, #4]
 8109f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8109f24:	683b      	ldr	r3, [r7, #0]
 8109f26:	681a      	ldr	r2, [r3, #0]
 8109f28:	687b      	ldr	r3, [r7, #4]
 8109f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109f2c:	687b      	ldr	r3, [r7, #4]
 8109f2e:	4a10      	ldr	r2, [pc, #64]	; (8109f70 <TIM_Base_SetConfig+0x114>)
 8109f30:	4293      	cmp	r3, r2
 8109f32:	d00f      	beq.n	8109f54 <TIM_Base_SetConfig+0xf8>
 8109f34:	687b      	ldr	r3, [r7, #4]
 8109f36:	4a12      	ldr	r2, [pc, #72]	; (8109f80 <TIM_Base_SetConfig+0x124>)
 8109f38:	4293      	cmp	r3, r2
 8109f3a:	d00b      	beq.n	8109f54 <TIM_Base_SetConfig+0xf8>
 8109f3c:	687b      	ldr	r3, [r7, #4]
 8109f3e:	4a11      	ldr	r2, [pc, #68]	; (8109f84 <TIM_Base_SetConfig+0x128>)
 8109f40:	4293      	cmp	r3, r2
 8109f42:	d007      	beq.n	8109f54 <TIM_Base_SetConfig+0xf8>
 8109f44:	687b      	ldr	r3, [r7, #4]
 8109f46:	4a10      	ldr	r2, [pc, #64]	; (8109f88 <TIM_Base_SetConfig+0x12c>)
 8109f48:	4293      	cmp	r3, r2
 8109f4a:	d003      	beq.n	8109f54 <TIM_Base_SetConfig+0xf8>
 8109f4c:	687b      	ldr	r3, [r7, #4]
 8109f4e:	4a0f      	ldr	r2, [pc, #60]	; (8109f8c <TIM_Base_SetConfig+0x130>)
 8109f50:	4293      	cmp	r3, r2
 8109f52:	d103      	bne.n	8109f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8109f54:	683b      	ldr	r3, [r7, #0]
 8109f56:	691a      	ldr	r2, [r3, #16]
 8109f58:	687b      	ldr	r3, [r7, #4]
 8109f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8109f5c:	687b      	ldr	r3, [r7, #4]
 8109f5e:	2201      	movs	r2, #1
 8109f60:	615a      	str	r2, [r3, #20]
}
 8109f62:	bf00      	nop
 8109f64:	3714      	adds	r7, #20
 8109f66:	46bd      	mov	sp, r7
 8109f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f6c:	4770      	bx	lr
 8109f6e:	bf00      	nop
 8109f70:	40010000 	.word	0x40010000
 8109f74:	40000400 	.word	0x40000400
 8109f78:	40000800 	.word	0x40000800
 8109f7c:	40000c00 	.word	0x40000c00
 8109f80:	40010400 	.word	0x40010400
 8109f84:	40014000 	.word	0x40014000
 8109f88:	40014400 	.word	0x40014400
 8109f8c:	40014800 	.word	0x40014800

08109f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8109f90:	b480      	push	{r7}
 8109f92:	b087      	sub	sp, #28
 8109f94:	af00      	add	r7, sp, #0
 8109f96:	6078      	str	r0, [r7, #4]
 8109f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8109f9a:	687b      	ldr	r3, [r7, #4]
 8109f9c:	6a1b      	ldr	r3, [r3, #32]
 8109f9e:	f023 0201 	bic.w	r2, r3, #1
 8109fa2:	687b      	ldr	r3, [r7, #4]
 8109fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109fa6:	687b      	ldr	r3, [r7, #4]
 8109fa8:	6a1b      	ldr	r3, [r3, #32]
 8109faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109fac:	687b      	ldr	r3, [r7, #4]
 8109fae:	685b      	ldr	r3, [r3, #4]
 8109fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8109fb2:	687b      	ldr	r3, [r7, #4]
 8109fb4:	699b      	ldr	r3, [r3, #24]
 8109fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8109fb8:	68fb      	ldr	r3, [r7, #12]
 8109fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8109fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8109fc4:	68fb      	ldr	r3, [r7, #12]
 8109fc6:	f023 0303 	bic.w	r3, r3, #3
 8109fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109fcc:	683b      	ldr	r3, [r7, #0]
 8109fce:	681b      	ldr	r3, [r3, #0]
 8109fd0:	68fa      	ldr	r2, [r7, #12]
 8109fd2:	4313      	orrs	r3, r2
 8109fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8109fd6:	697b      	ldr	r3, [r7, #20]
 8109fd8:	f023 0302 	bic.w	r3, r3, #2
 8109fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8109fde:	683b      	ldr	r3, [r7, #0]
 8109fe0:	689b      	ldr	r3, [r3, #8]
 8109fe2:	697a      	ldr	r2, [r7, #20]
 8109fe4:	4313      	orrs	r3, r2
 8109fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8109fe8:	687b      	ldr	r3, [r7, #4]
 8109fea:	4a2c      	ldr	r2, [pc, #176]	; (810a09c <TIM_OC1_SetConfig+0x10c>)
 8109fec:	4293      	cmp	r3, r2
 8109fee:	d00f      	beq.n	810a010 <TIM_OC1_SetConfig+0x80>
 8109ff0:	687b      	ldr	r3, [r7, #4]
 8109ff2:	4a2b      	ldr	r2, [pc, #172]	; (810a0a0 <TIM_OC1_SetConfig+0x110>)
 8109ff4:	4293      	cmp	r3, r2
 8109ff6:	d00b      	beq.n	810a010 <TIM_OC1_SetConfig+0x80>
 8109ff8:	687b      	ldr	r3, [r7, #4]
 8109ffa:	4a2a      	ldr	r2, [pc, #168]	; (810a0a4 <TIM_OC1_SetConfig+0x114>)
 8109ffc:	4293      	cmp	r3, r2
 8109ffe:	d007      	beq.n	810a010 <TIM_OC1_SetConfig+0x80>
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	4a29      	ldr	r2, [pc, #164]	; (810a0a8 <TIM_OC1_SetConfig+0x118>)
 810a004:	4293      	cmp	r3, r2
 810a006:	d003      	beq.n	810a010 <TIM_OC1_SetConfig+0x80>
 810a008:	687b      	ldr	r3, [r7, #4]
 810a00a:	4a28      	ldr	r2, [pc, #160]	; (810a0ac <TIM_OC1_SetConfig+0x11c>)
 810a00c:	4293      	cmp	r3, r2
 810a00e:	d10c      	bne.n	810a02a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810a010:	697b      	ldr	r3, [r7, #20]
 810a012:	f023 0308 	bic.w	r3, r3, #8
 810a016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810a018:	683b      	ldr	r3, [r7, #0]
 810a01a:	68db      	ldr	r3, [r3, #12]
 810a01c:	697a      	ldr	r2, [r7, #20]
 810a01e:	4313      	orrs	r3, r2
 810a020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810a022:	697b      	ldr	r3, [r7, #20]
 810a024:	f023 0304 	bic.w	r3, r3, #4
 810a028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	4a1b      	ldr	r2, [pc, #108]	; (810a09c <TIM_OC1_SetConfig+0x10c>)
 810a02e:	4293      	cmp	r3, r2
 810a030:	d00f      	beq.n	810a052 <TIM_OC1_SetConfig+0xc2>
 810a032:	687b      	ldr	r3, [r7, #4]
 810a034:	4a1a      	ldr	r2, [pc, #104]	; (810a0a0 <TIM_OC1_SetConfig+0x110>)
 810a036:	4293      	cmp	r3, r2
 810a038:	d00b      	beq.n	810a052 <TIM_OC1_SetConfig+0xc2>
 810a03a:	687b      	ldr	r3, [r7, #4]
 810a03c:	4a19      	ldr	r2, [pc, #100]	; (810a0a4 <TIM_OC1_SetConfig+0x114>)
 810a03e:	4293      	cmp	r3, r2
 810a040:	d007      	beq.n	810a052 <TIM_OC1_SetConfig+0xc2>
 810a042:	687b      	ldr	r3, [r7, #4]
 810a044:	4a18      	ldr	r2, [pc, #96]	; (810a0a8 <TIM_OC1_SetConfig+0x118>)
 810a046:	4293      	cmp	r3, r2
 810a048:	d003      	beq.n	810a052 <TIM_OC1_SetConfig+0xc2>
 810a04a:	687b      	ldr	r3, [r7, #4]
 810a04c:	4a17      	ldr	r2, [pc, #92]	; (810a0ac <TIM_OC1_SetConfig+0x11c>)
 810a04e:	4293      	cmp	r3, r2
 810a050:	d111      	bne.n	810a076 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810a052:	693b      	ldr	r3, [r7, #16]
 810a054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810a05a:	693b      	ldr	r3, [r7, #16]
 810a05c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810a060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810a062:	683b      	ldr	r3, [r7, #0]
 810a064:	695b      	ldr	r3, [r3, #20]
 810a066:	693a      	ldr	r2, [r7, #16]
 810a068:	4313      	orrs	r3, r2
 810a06a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810a06c:	683b      	ldr	r3, [r7, #0]
 810a06e:	699b      	ldr	r3, [r3, #24]
 810a070:	693a      	ldr	r2, [r7, #16]
 810a072:	4313      	orrs	r3, r2
 810a074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a076:	687b      	ldr	r3, [r7, #4]
 810a078:	693a      	ldr	r2, [r7, #16]
 810a07a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a07c:	687b      	ldr	r3, [r7, #4]
 810a07e:	68fa      	ldr	r2, [r7, #12]
 810a080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810a082:	683b      	ldr	r3, [r7, #0]
 810a084:	685a      	ldr	r2, [r3, #4]
 810a086:	687b      	ldr	r3, [r7, #4]
 810a088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a08a:	687b      	ldr	r3, [r7, #4]
 810a08c:	697a      	ldr	r2, [r7, #20]
 810a08e:	621a      	str	r2, [r3, #32]
}
 810a090:	bf00      	nop
 810a092:	371c      	adds	r7, #28
 810a094:	46bd      	mov	sp, r7
 810a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a09a:	4770      	bx	lr
 810a09c:	40010000 	.word	0x40010000
 810a0a0:	40010400 	.word	0x40010400
 810a0a4:	40014000 	.word	0x40014000
 810a0a8:	40014400 	.word	0x40014400
 810a0ac:	40014800 	.word	0x40014800

0810a0b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810a0b0:	b480      	push	{r7}
 810a0b2:	b087      	sub	sp, #28
 810a0b4:	af00      	add	r7, sp, #0
 810a0b6:	6078      	str	r0, [r7, #4]
 810a0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a0ba:	687b      	ldr	r3, [r7, #4]
 810a0bc:	6a1b      	ldr	r3, [r3, #32]
 810a0be:	f023 0210 	bic.w	r2, r3, #16
 810a0c2:	687b      	ldr	r3, [r7, #4]
 810a0c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a0c6:	687b      	ldr	r3, [r7, #4]
 810a0c8:	6a1b      	ldr	r3, [r3, #32]
 810a0ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a0cc:	687b      	ldr	r3, [r7, #4]
 810a0ce:	685b      	ldr	r3, [r3, #4]
 810a0d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a0d2:	687b      	ldr	r3, [r7, #4]
 810a0d4:	699b      	ldr	r3, [r3, #24]
 810a0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810a0d8:	68fb      	ldr	r3, [r7, #12]
 810a0da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810a0de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810a0e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810a0e4:	68fb      	ldr	r3, [r7, #12]
 810a0e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a0ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a0ec:	683b      	ldr	r3, [r7, #0]
 810a0ee:	681b      	ldr	r3, [r3, #0]
 810a0f0:	021b      	lsls	r3, r3, #8
 810a0f2:	68fa      	ldr	r2, [r7, #12]
 810a0f4:	4313      	orrs	r3, r2
 810a0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810a0f8:	697b      	ldr	r3, [r7, #20]
 810a0fa:	f023 0320 	bic.w	r3, r3, #32
 810a0fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810a100:	683b      	ldr	r3, [r7, #0]
 810a102:	689b      	ldr	r3, [r3, #8]
 810a104:	011b      	lsls	r3, r3, #4
 810a106:	697a      	ldr	r2, [r7, #20]
 810a108:	4313      	orrs	r3, r2
 810a10a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810a10c:	687b      	ldr	r3, [r7, #4]
 810a10e:	4a28      	ldr	r2, [pc, #160]	; (810a1b0 <TIM_OC2_SetConfig+0x100>)
 810a110:	4293      	cmp	r3, r2
 810a112:	d003      	beq.n	810a11c <TIM_OC2_SetConfig+0x6c>
 810a114:	687b      	ldr	r3, [r7, #4]
 810a116:	4a27      	ldr	r2, [pc, #156]	; (810a1b4 <TIM_OC2_SetConfig+0x104>)
 810a118:	4293      	cmp	r3, r2
 810a11a:	d10d      	bne.n	810a138 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810a11c:	697b      	ldr	r3, [r7, #20]
 810a11e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810a122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810a124:	683b      	ldr	r3, [r7, #0]
 810a126:	68db      	ldr	r3, [r3, #12]
 810a128:	011b      	lsls	r3, r3, #4
 810a12a:	697a      	ldr	r2, [r7, #20]
 810a12c:	4313      	orrs	r3, r2
 810a12e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810a130:	697b      	ldr	r3, [r7, #20]
 810a132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810a136:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a138:	687b      	ldr	r3, [r7, #4]
 810a13a:	4a1d      	ldr	r2, [pc, #116]	; (810a1b0 <TIM_OC2_SetConfig+0x100>)
 810a13c:	4293      	cmp	r3, r2
 810a13e:	d00f      	beq.n	810a160 <TIM_OC2_SetConfig+0xb0>
 810a140:	687b      	ldr	r3, [r7, #4]
 810a142:	4a1c      	ldr	r2, [pc, #112]	; (810a1b4 <TIM_OC2_SetConfig+0x104>)
 810a144:	4293      	cmp	r3, r2
 810a146:	d00b      	beq.n	810a160 <TIM_OC2_SetConfig+0xb0>
 810a148:	687b      	ldr	r3, [r7, #4]
 810a14a:	4a1b      	ldr	r2, [pc, #108]	; (810a1b8 <TIM_OC2_SetConfig+0x108>)
 810a14c:	4293      	cmp	r3, r2
 810a14e:	d007      	beq.n	810a160 <TIM_OC2_SetConfig+0xb0>
 810a150:	687b      	ldr	r3, [r7, #4]
 810a152:	4a1a      	ldr	r2, [pc, #104]	; (810a1bc <TIM_OC2_SetConfig+0x10c>)
 810a154:	4293      	cmp	r3, r2
 810a156:	d003      	beq.n	810a160 <TIM_OC2_SetConfig+0xb0>
 810a158:	687b      	ldr	r3, [r7, #4]
 810a15a:	4a19      	ldr	r2, [pc, #100]	; (810a1c0 <TIM_OC2_SetConfig+0x110>)
 810a15c:	4293      	cmp	r3, r2
 810a15e:	d113      	bne.n	810a188 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810a160:	693b      	ldr	r3, [r7, #16]
 810a162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810a166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810a168:	693b      	ldr	r3, [r7, #16]
 810a16a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810a16e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810a170:	683b      	ldr	r3, [r7, #0]
 810a172:	695b      	ldr	r3, [r3, #20]
 810a174:	009b      	lsls	r3, r3, #2
 810a176:	693a      	ldr	r2, [r7, #16]
 810a178:	4313      	orrs	r3, r2
 810a17a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810a17c:	683b      	ldr	r3, [r7, #0]
 810a17e:	699b      	ldr	r3, [r3, #24]
 810a180:	009b      	lsls	r3, r3, #2
 810a182:	693a      	ldr	r2, [r7, #16]
 810a184:	4313      	orrs	r3, r2
 810a186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a188:	687b      	ldr	r3, [r7, #4]
 810a18a:	693a      	ldr	r2, [r7, #16]
 810a18c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a18e:	687b      	ldr	r3, [r7, #4]
 810a190:	68fa      	ldr	r2, [r7, #12]
 810a192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810a194:	683b      	ldr	r3, [r7, #0]
 810a196:	685a      	ldr	r2, [r3, #4]
 810a198:	687b      	ldr	r3, [r7, #4]
 810a19a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a19c:	687b      	ldr	r3, [r7, #4]
 810a19e:	697a      	ldr	r2, [r7, #20]
 810a1a0:	621a      	str	r2, [r3, #32]
}
 810a1a2:	bf00      	nop
 810a1a4:	371c      	adds	r7, #28
 810a1a6:	46bd      	mov	sp, r7
 810a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1ac:	4770      	bx	lr
 810a1ae:	bf00      	nop
 810a1b0:	40010000 	.word	0x40010000
 810a1b4:	40010400 	.word	0x40010400
 810a1b8:	40014000 	.word	0x40014000
 810a1bc:	40014400 	.word	0x40014400
 810a1c0:	40014800 	.word	0x40014800

0810a1c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810a1c4:	b480      	push	{r7}
 810a1c6:	b087      	sub	sp, #28
 810a1c8:	af00      	add	r7, sp, #0
 810a1ca:	6078      	str	r0, [r7, #4]
 810a1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810a1ce:	687b      	ldr	r3, [r7, #4]
 810a1d0:	6a1b      	ldr	r3, [r3, #32]
 810a1d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810a1d6:	687b      	ldr	r3, [r7, #4]
 810a1d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a1da:	687b      	ldr	r3, [r7, #4]
 810a1dc:	6a1b      	ldr	r3, [r3, #32]
 810a1de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a1e0:	687b      	ldr	r3, [r7, #4]
 810a1e2:	685b      	ldr	r3, [r3, #4]
 810a1e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a1e6:	687b      	ldr	r3, [r7, #4]
 810a1e8:	69db      	ldr	r3, [r3, #28]
 810a1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810a1ec:	68fb      	ldr	r3, [r7, #12]
 810a1ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810a1f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810a1f8:	68fb      	ldr	r3, [r7, #12]
 810a1fa:	f023 0303 	bic.w	r3, r3, #3
 810a1fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a200:	683b      	ldr	r3, [r7, #0]
 810a202:	681b      	ldr	r3, [r3, #0]
 810a204:	68fa      	ldr	r2, [r7, #12]
 810a206:	4313      	orrs	r3, r2
 810a208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810a20a:	697b      	ldr	r3, [r7, #20]
 810a20c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810a210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810a212:	683b      	ldr	r3, [r7, #0]
 810a214:	689b      	ldr	r3, [r3, #8]
 810a216:	021b      	lsls	r3, r3, #8
 810a218:	697a      	ldr	r2, [r7, #20]
 810a21a:	4313      	orrs	r3, r2
 810a21c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810a21e:	687b      	ldr	r3, [r7, #4]
 810a220:	4a27      	ldr	r2, [pc, #156]	; (810a2c0 <TIM_OC3_SetConfig+0xfc>)
 810a222:	4293      	cmp	r3, r2
 810a224:	d003      	beq.n	810a22e <TIM_OC3_SetConfig+0x6a>
 810a226:	687b      	ldr	r3, [r7, #4]
 810a228:	4a26      	ldr	r2, [pc, #152]	; (810a2c4 <TIM_OC3_SetConfig+0x100>)
 810a22a:	4293      	cmp	r3, r2
 810a22c:	d10d      	bne.n	810a24a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810a22e:	697b      	ldr	r3, [r7, #20]
 810a230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810a234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810a236:	683b      	ldr	r3, [r7, #0]
 810a238:	68db      	ldr	r3, [r3, #12]
 810a23a:	021b      	lsls	r3, r3, #8
 810a23c:	697a      	ldr	r2, [r7, #20]
 810a23e:	4313      	orrs	r3, r2
 810a240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810a242:	697b      	ldr	r3, [r7, #20]
 810a244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810a248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a24a:	687b      	ldr	r3, [r7, #4]
 810a24c:	4a1c      	ldr	r2, [pc, #112]	; (810a2c0 <TIM_OC3_SetConfig+0xfc>)
 810a24e:	4293      	cmp	r3, r2
 810a250:	d00f      	beq.n	810a272 <TIM_OC3_SetConfig+0xae>
 810a252:	687b      	ldr	r3, [r7, #4]
 810a254:	4a1b      	ldr	r2, [pc, #108]	; (810a2c4 <TIM_OC3_SetConfig+0x100>)
 810a256:	4293      	cmp	r3, r2
 810a258:	d00b      	beq.n	810a272 <TIM_OC3_SetConfig+0xae>
 810a25a:	687b      	ldr	r3, [r7, #4]
 810a25c:	4a1a      	ldr	r2, [pc, #104]	; (810a2c8 <TIM_OC3_SetConfig+0x104>)
 810a25e:	4293      	cmp	r3, r2
 810a260:	d007      	beq.n	810a272 <TIM_OC3_SetConfig+0xae>
 810a262:	687b      	ldr	r3, [r7, #4]
 810a264:	4a19      	ldr	r2, [pc, #100]	; (810a2cc <TIM_OC3_SetConfig+0x108>)
 810a266:	4293      	cmp	r3, r2
 810a268:	d003      	beq.n	810a272 <TIM_OC3_SetConfig+0xae>
 810a26a:	687b      	ldr	r3, [r7, #4]
 810a26c:	4a18      	ldr	r2, [pc, #96]	; (810a2d0 <TIM_OC3_SetConfig+0x10c>)
 810a26e:	4293      	cmp	r3, r2
 810a270:	d113      	bne.n	810a29a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810a272:	693b      	ldr	r3, [r7, #16]
 810a274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810a278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810a27a:	693b      	ldr	r3, [r7, #16]
 810a27c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810a280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810a282:	683b      	ldr	r3, [r7, #0]
 810a284:	695b      	ldr	r3, [r3, #20]
 810a286:	011b      	lsls	r3, r3, #4
 810a288:	693a      	ldr	r2, [r7, #16]
 810a28a:	4313      	orrs	r3, r2
 810a28c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810a28e:	683b      	ldr	r3, [r7, #0]
 810a290:	699b      	ldr	r3, [r3, #24]
 810a292:	011b      	lsls	r3, r3, #4
 810a294:	693a      	ldr	r2, [r7, #16]
 810a296:	4313      	orrs	r3, r2
 810a298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a29a:	687b      	ldr	r3, [r7, #4]
 810a29c:	693a      	ldr	r2, [r7, #16]
 810a29e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a2a0:	687b      	ldr	r3, [r7, #4]
 810a2a2:	68fa      	ldr	r2, [r7, #12]
 810a2a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810a2a6:	683b      	ldr	r3, [r7, #0]
 810a2a8:	685a      	ldr	r2, [r3, #4]
 810a2aa:	687b      	ldr	r3, [r7, #4]
 810a2ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a2ae:	687b      	ldr	r3, [r7, #4]
 810a2b0:	697a      	ldr	r2, [r7, #20]
 810a2b2:	621a      	str	r2, [r3, #32]
}
 810a2b4:	bf00      	nop
 810a2b6:	371c      	adds	r7, #28
 810a2b8:	46bd      	mov	sp, r7
 810a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a2be:	4770      	bx	lr
 810a2c0:	40010000 	.word	0x40010000
 810a2c4:	40010400 	.word	0x40010400
 810a2c8:	40014000 	.word	0x40014000
 810a2cc:	40014400 	.word	0x40014400
 810a2d0:	40014800 	.word	0x40014800

0810a2d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810a2d4:	b480      	push	{r7}
 810a2d6:	b087      	sub	sp, #28
 810a2d8:	af00      	add	r7, sp, #0
 810a2da:	6078      	str	r0, [r7, #4]
 810a2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810a2de:	687b      	ldr	r3, [r7, #4]
 810a2e0:	6a1b      	ldr	r3, [r3, #32]
 810a2e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810a2e6:	687b      	ldr	r3, [r7, #4]
 810a2e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a2ea:	687b      	ldr	r3, [r7, #4]
 810a2ec:	6a1b      	ldr	r3, [r3, #32]
 810a2ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a2f0:	687b      	ldr	r3, [r7, #4]
 810a2f2:	685b      	ldr	r3, [r3, #4]
 810a2f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810a2f6:	687b      	ldr	r3, [r7, #4]
 810a2f8:	69db      	ldr	r3, [r3, #28]
 810a2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810a2fc:	68fb      	ldr	r3, [r7, #12]
 810a2fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810a302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810a306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810a308:	68fb      	ldr	r3, [r7, #12]
 810a30a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a30e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a310:	683b      	ldr	r3, [r7, #0]
 810a312:	681b      	ldr	r3, [r3, #0]
 810a314:	021b      	lsls	r3, r3, #8
 810a316:	68fa      	ldr	r2, [r7, #12]
 810a318:	4313      	orrs	r3, r2
 810a31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810a31c:	693b      	ldr	r3, [r7, #16]
 810a31e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810a322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810a324:	683b      	ldr	r3, [r7, #0]
 810a326:	689b      	ldr	r3, [r3, #8]
 810a328:	031b      	lsls	r3, r3, #12
 810a32a:	693a      	ldr	r2, [r7, #16]
 810a32c:	4313      	orrs	r3, r2
 810a32e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a330:	687b      	ldr	r3, [r7, #4]
 810a332:	4a18      	ldr	r2, [pc, #96]	; (810a394 <TIM_OC4_SetConfig+0xc0>)
 810a334:	4293      	cmp	r3, r2
 810a336:	d00f      	beq.n	810a358 <TIM_OC4_SetConfig+0x84>
 810a338:	687b      	ldr	r3, [r7, #4]
 810a33a:	4a17      	ldr	r2, [pc, #92]	; (810a398 <TIM_OC4_SetConfig+0xc4>)
 810a33c:	4293      	cmp	r3, r2
 810a33e:	d00b      	beq.n	810a358 <TIM_OC4_SetConfig+0x84>
 810a340:	687b      	ldr	r3, [r7, #4]
 810a342:	4a16      	ldr	r2, [pc, #88]	; (810a39c <TIM_OC4_SetConfig+0xc8>)
 810a344:	4293      	cmp	r3, r2
 810a346:	d007      	beq.n	810a358 <TIM_OC4_SetConfig+0x84>
 810a348:	687b      	ldr	r3, [r7, #4]
 810a34a:	4a15      	ldr	r2, [pc, #84]	; (810a3a0 <TIM_OC4_SetConfig+0xcc>)
 810a34c:	4293      	cmp	r3, r2
 810a34e:	d003      	beq.n	810a358 <TIM_OC4_SetConfig+0x84>
 810a350:	687b      	ldr	r3, [r7, #4]
 810a352:	4a14      	ldr	r2, [pc, #80]	; (810a3a4 <TIM_OC4_SetConfig+0xd0>)
 810a354:	4293      	cmp	r3, r2
 810a356:	d109      	bne.n	810a36c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810a358:	697b      	ldr	r3, [r7, #20]
 810a35a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810a35e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810a360:	683b      	ldr	r3, [r7, #0]
 810a362:	695b      	ldr	r3, [r3, #20]
 810a364:	019b      	lsls	r3, r3, #6
 810a366:	697a      	ldr	r2, [r7, #20]
 810a368:	4313      	orrs	r3, r2
 810a36a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a36c:	687b      	ldr	r3, [r7, #4]
 810a36e:	697a      	ldr	r2, [r7, #20]
 810a370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810a372:	687b      	ldr	r3, [r7, #4]
 810a374:	68fa      	ldr	r2, [r7, #12]
 810a376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810a378:	683b      	ldr	r3, [r7, #0]
 810a37a:	685a      	ldr	r2, [r3, #4]
 810a37c:	687b      	ldr	r3, [r7, #4]
 810a37e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a380:	687b      	ldr	r3, [r7, #4]
 810a382:	693a      	ldr	r2, [r7, #16]
 810a384:	621a      	str	r2, [r3, #32]
}
 810a386:	bf00      	nop
 810a388:	371c      	adds	r7, #28
 810a38a:	46bd      	mov	sp, r7
 810a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a390:	4770      	bx	lr
 810a392:	bf00      	nop
 810a394:	40010000 	.word	0x40010000
 810a398:	40010400 	.word	0x40010400
 810a39c:	40014000 	.word	0x40014000
 810a3a0:	40014400 	.word	0x40014400
 810a3a4:	40014800 	.word	0x40014800

0810a3a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810a3a8:	b480      	push	{r7}
 810a3aa:	b087      	sub	sp, #28
 810a3ac:	af00      	add	r7, sp, #0
 810a3ae:	6078      	str	r0, [r7, #4]
 810a3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810a3b2:	687b      	ldr	r3, [r7, #4]
 810a3b4:	6a1b      	ldr	r3, [r3, #32]
 810a3b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810a3ba:	687b      	ldr	r3, [r7, #4]
 810a3bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a3be:	687b      	ldr	r3, [r7, #4]
 810a3c0:	6a1b      	ldr	r3, [r3, #32]
 810a3c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a3c4:	687b      	ldr	r3, [r7, #4]
 810a3c6:	685b      	ldr	r3, [r3, #4]
 810a3c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810a3ca:	687b      	ldr	r3, [r7, #4]
 810a3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810a3d0:	68fb      	ldr	r3, [r7, #12]
 810a3d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a3d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810a3da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a3dc:	683b      	ldr	r3, [r7, #0]
 810a3de:	681b      	ldr	r3, [r3, #0]
 810a3e0:	68fa      	ldr	r2, [r7, #12]
 810a3e2:	4313      	orrs	r3, r2
 810a3e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810a3e6:	693b      	ldr	r3, [r7, #16]
 810a3e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810a3ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810a3ee:	683b      	ldr	r3, [r7, #0]
 810a3f0:	689b      	ldr	r3, [r3, #8]
 810a3f2:	041b      	lsls	r3, r3, #16
 810a3f4:	693a      	ldr	r2, [r7, #16]
 810a3f6:	4313      	orrs	r3, r2
 810a3f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a3fa:	687b      	ldr	r3, [r7, #4]
 810a3fc:	4a17      	ldr	r2, [pc, #92]	; (810a45c <TIM_OC5_SetConfig+0xb4>)
 810a3fe:	4293      	cmp	r3, r2
 810a400:	d00f      	beq.n	810a422 <TIM_OC5_SetConfig+0x7a>
 810a402:	687b      	ldr	r3, [r7, #4]
 810a404:	4a16      	ldr	r2, [pc, #88]	; (810a460 <TIM_OC5_SetConfig+0xb8>)
 810a406:	4293      	cmp	r3, r2
 810a408:	d00b      	beq.n	810a422 <TIM_OC5_SetConfig+0x7a>
 810a40a:	687b      	ldr	r3, [r7, #4]
 810a40c:	4a15      	ldr	r2, [pc, #84]	; (810a464 <TIM_OC5_SetConfig+0xbc>)
 810a40e:	4293      	cmp	r3, r2
 810a410:	d007      	beq.n	810a422 <TIM_OC5_SetConfig+0x7a>
 810a412:	687b      	ldr	r3, [r7, #4]
 810a414:	4a14      	ldr	r2, [pc, #80]	; (810a468 <TIM_OC5_SetConfig+0xc0>)
 810a416:	4293      	cmp	r3, r2
 810a418:	d003      	beq.n	810a422 <TIM_OC5_SetConfig+0x7a>
 810a41a:	687b      	ldr	r3, [r7, #4]
 810a41c:	4a13      	ldr	r2, [pc, #76]	; (810a46c <TIM_OC5_SetConfig+0xc4>)
 810a41e:	4293      	cmp	r3, r2
 810a420:	d109      	bne.n	810a436 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810a422:	697b      	ldr	r3, [r7, #20]
 810a424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810a428:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810a42a:	683b      	ldr	r3, [r7, #0]
 810a42c:	695b      	ldr	r3, [r3, #20]
 810a42e:	021b      	lsls	r3, r3, #8
 810a430:	697a      	ldr	r2, [r7, #20]
 810a432:	4313      	orrs	r3, r2
 810a434:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a436:	687b      	ldr	r3, [r7, #4]
 810a438:	697a      	ldr	r2, [r7, #20]
 810a43a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810a43c:	687b      	ldr	r3, [r7, #4]
 810a43e:	68fa      	ldr	r2, [r7, #12]
 810a440:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810a442:	683b      	ldr	r3, [r7, #0]
 810a444:	685a      	ldr	r2, [r3, #4]
 810a446:	687b      	ldr	r3, [r7, #4]
 810a448:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a44a:	687b      	ldr	r3, [r7, #4]
 810a44c:	693a      	ldr	r2, [r7, #16]
 810a44e:	621a      	str	r2, [r3, #32]
}
 810a450:	bf00      	nop
 810a452:	371c      	adds	r7, #28
 810a454:	46bd      	mov	sp, r7
 810a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a45a:	4770      	bx	lr
 810a45c:	40010000 	.word	0x40010000
 810a460:	40010400 	.word	0x40010400
 810a464:	40014000 	.word	0x40014000
 810a468:	40014400 	.word	0x40014400
 810a46c:	40014800 	.word	0x40014800

0810a470 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810a470:	b480      	push	{r7}
 810a472:	b087      	sub	sp, #28
 810a474:	af00      	add	r7, sp, #0
 810a476:	6078      	str	r0, [r7, #4]
 810a478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810a47a:	687b      	ldr	r3, [r7, #4]
 810a47c:	6a1b      	ldr	r3, [r3, #32]
 810a47e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810a482:	687b      	ldr	r3, [r7, #4]
 810a484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a486:	687b      	ldr	r3, [r7, #4]
 810a488:	6a1b      	ldr	r3, [r3, #32]
 810a48a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a48c:	687b      	ldr	r3, [r7, #4]
 810a48e:	685b      	ldr	r3, [r3, #4]
 810a490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810a492:	687b      	ldr	r3, [r7, #4]
 810a494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810a498:	68fb      	ldr	r3, [r7, #12]
 810a49a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810a49e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810a4a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a4a4:	683b      	ldr	r3, [r7, #0]
 810a4a6:	681b      	ldr	r3, [r3, #0]
 810a4a8:	021b      	lsls	r3, r3, #8
 810a4aa:	68fa      	ldr	r2, [r7, #12]
 810a4ac:	4313      	orrs	r3, r2
 810a4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810a4b0:	693b      	ldr	r3, [r7, #16]
 810a4b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810a4b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810a4b8:	683b      	ldr	r3, [r7, #0]
 810a4ba:	689b      	ldr	r3, [r3, #8]
 810a4bc:	051b      	lsls	r3, r3, #20
 810a4be:	693a      	ldr	r2, [r7, #16]
 810a4c0:	4313      	orrs	r3, r2
 810a4c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a4c4:	687b      	ldr	r3, [r7, #4]
 810a4c6:	4a18      	ldr	r2, [pc, #96]	; (810a528 <TIM_OC6_SetConfig+0xb8>)
 810a4c8:	4293      	cmp	r3, r2
 810a4ca:	d00f      	beq.n	810a4ec <TIM_OC6_SetConfig+0x7c>
 810a4cc:	687b      	ldr	r3, [r7, #4]
 810a4ce:	4a17      	ldr	r2, [pc, #92]	; (810a52c <TIM_OC6_SetConfig+0xbc>)
 810a4d0:	4293      	cmp	r3, r2
 810a4d2:	d00b      	beq.n	810a4ec <TIM_OC6_SetConfig+0x7c>
 810a4d4:	687b      	ldr	r3, [r7, #4]
 810a4d6:	4a16      	ldr	r2, [pc, #88]	; (810a530 <TIM_OC6_SetConfig+0xc0>)
 810a4d8:	4293      	cmp	r3, r2
 810a4da:	d007      	beq.n	810a4ec <TIM_OC6_SetConfig+0x7c>
 810a4dc:	687b      	ldr	r3, [r7, #4]
 810a4de:	4a15      	ldr	r2, [pc, #84]	; (810a534 <TIM_OC6_SetConfig+0xc4>)
 810a4e0:	4293      	cmp	r3, r2
 810a4e2:	d003      	beq.n	810a4ec <TIM_OC6_SetConfig+0x7c>
 810a4e4:	687b      	ldr	r3, [r7, #4]
 810a4e6:	4a14      	ldr	r2, [pc, #80]	; (810a538 <TIM_OC6_SetConfig+0xc8>)
 810a4e8:	4293      	cmp	r3, r2
 810a4ea:	d109      	bne.n	810a500 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810a4ec:	697b      	ldr	r3, [r7, #20]
 810a4ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810a4f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810a4f4:	683b      	ldr	r3, [r7, #0]
 810a4f6:	695b      	ldr	r3, [r3, #20]
 810a4f8:	029b      	lsls	r3, r3, #10
 810a4fa:	697a      	ldr	r2, [r7, #20]
 810a4fc:	4313      	orrs	r3, r2
 810a4fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a500:	687b      	ldr	r3, [r7, #4]
 810a502:	697a      	ldr	r2, [r7, #20]
 810a504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810a506:	687b      	ldr	r3, [r7, #4]
 810a508:	68fa      	ldr	r2, [r7, #12]
 810a50a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810a50c:	683b      	ldr	r3, [r7, #0]
 810a50e:	685a      	ldr	r2, [r3, #4]
 810a510:	687b      	ldr	r3, [r7, #4]
 810a512:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a514:	687b      	ldr	r3, [r7, #4]
 810a516:	693a      	ldr	r2, [r7, #16]
 810a518:	621a      	str	r2, [r3, #32]
}
 810a51a:	bf00      	nop
 810a51c:	371c      	adds	r7, #28
 810a51e:	46bd      	mov	sp, r7
 810a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a524:	4770      	bx	lr
 810a526:	bf00      	nop
 810a528:	40010000 	.word	0x40010000
 810a52c:	40010400 	.word	0x40010400
 810a530:	40014000 	.word	0x40014000
 810a534:	40014400 	.word	0x40014400
 810a538:	40014800 	.word	0x40014800

0810a53c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810a53c:	b480      	push	{r7}
 810a53e:	b087      	sub	sp, #28
 810a540:	af00      	add	r7, sp, #0
 810a542:	60f8      	str	r0, [r7, #12]
 810a544:	60b9      	str	r1, [r7, #8]
 810a546:	607a      	str	r2, [r7, #4]
 810a548:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810a54a:	68fb      	ldr	r3, [r7, #12]
 810a54c:	6a1b      	ldr	r3, [r3, #32]
 810a54e:	f023 0201 	bic.w	r2, r3, #1
 810a552:	68fb      	ldr	r3, [r7, #12]
 810a554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810a556:	68fb      	ldr	r3, [r7, #12]
 810a558:	699b      	ldr	r3, [r3, #24]
 810a55a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810a55c:	68fb      	ldr	r3, [r7, #12]
 810a55e:	6a1b      	ldr	r3, [r3, #32]
 810a560:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810a562:	68fb      	ldr	r3, [r7, #12]
 810a564:	4a28      	ldr	r2, [pc, #160]	; (810a608 <TIM_TI1_SetConfig+0xcc>)
 810a566:	4293      	cmp	r3, r2
 810a568:	d01b      	beq.n	810a5a2 <TIM_TI1_SetConfig+0x66>
 810a56a:	68fb      	ldr	r3, [r7, #12]
 810a56c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a570:	d017      	beq.n	810a5a2 <TIM_TI1_SetConfig+0x66>
 810a572:	68fb      	ldr	r3, [r7, #12]
 810a574:	4a25      	ldr	r2, [pc, #148]	; (810a60c <TIM_TI1_SetConfig+0xd0>)
 810a576:	4293      	cmp	r3, r2
 810a578:	d013      	beq.n	810a5a2 <TIM_TI1_SetConfig+0x66>
 810a57a:	68fb      	ldr	r3, [r7, #12]
 810a57c:	4a24      	ldr	r2, [pc, #144]	; (810a610 <TIM_TI1_SetConfig+0xd4>)
 810a57e:	4293      	cmp	r3, r2
 810a580:	d00f      	beq.n	810a5a2 <TIM_TI1_SetConfig+0x66>
 810a582:	68fb      	ldr	r3, [r7, #12]
 810a584:	4a23      	ldr	r2, [pc, #140]	; (810a614 <TIM_TI1_SetConfig+0xd8>)
 810a586:	4293      	cmp	r3, r2
 810a588:	d00b      	beq.n	810a5a2 <TIM_TI1_SetConfig+0x66>
 810a58a:	68fb      	ldr	r3, [r7, #12]
 810a58c:	4a22      	ldr	r2, [pc, #136]	; (810a618 <TIM_TI1_SetConfig+0xdc>)
 810a58e:	4293      	cmp	r3, r2
 810a590:	d007      	beq.n	810a5a2 <TIM_TI1_SetConfig+0x66>
 810a592:	68fb      	ldr	r3, [r7, #12]
 810a594:	4a21      	ldr	r2, [pc, #132]	; (810a61c <TIM_TI1_SetConfig+0xe0>)
 810a596:	4293      	cmp	r3, r2
 810a598:	d003      	beq.n	810a5a2 <TIM_TI1_SetConfig+0x66>
 810a59a:	68fb      	ldr	r3, [r7, #12]
 810a59c:	4a20      	ldr	r2, [pc, #128]	; (810a620 <TIM_TI1_SetConfig+0xe4>)
 810a59e:	4293      	cmp	r3, r2
 810a5a0:	d101      	bne.n	810a5a6 <TIM_TI1_SetConfig+0x6a>
 810a5a2:	2301      	movs	r3, #1
 810a5a4:	e000      	b.n	810a5a8 <TIM_TI1_SetConfig+0x6c>
 810a5a6:	2300      	movs	r3, #0
 810a5a8:	2b00      	cmp	r3, #0
 810a5aa:	d008      	beq.n	810a5be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810a5ac:	697b      	ldr	r3, [r7, #20]
 810a5ae:	f023 0303 	bic.w	r3, r3, #3
 810a5b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 810a5b4:	697a      	ldr	r2, [r7, #20]
 810a5b6:	687b      	ldr	r3, [r7, #4]
 810a5b8:	4313      	orrs	r3, r2
 810a5ba:	617b      	str	r3, [r7, #20]
 810a5bc:	e003      	b.n	810a5c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810a5be:	697b      	ldr	r3, [r7, #20]
 810a5c0:	f043 0301 	orr.w	r3, r3, #1
 810a5c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810a5c6:	697b      	ldr	r3, [r7, #20]
 810a5c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810a5cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810a5ce:	683b      	ldr	r3, [r7, #0]
 810a5d0:	011b      	lsls	r3, r3, #4
 810a5d2:	b2db      	uxtb	r3, r3
 810a5d4:	697a      	ldr	r2, [r7, #20]
 810a5d6:	4313      	orrs	r3, r2
 810a5d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810a5da:	693b      	ldr	r3, [r7, #16]
 810a5dc:	f023 030a 	bic.w	r3, r3, #10
 810a5e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 810a5e2:	68bb      	ldr	r3, [r7, #8]
 810a5e4:	f003 030a 	and.w	r3, r3, #10
 810a5e8:	693a      	ldr	r2, [r7, #16]
 810a5ea:	4313      	orrs	r3, r2
 810a5ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810a5ee:	68fb      	ldr	r3, [r7, #12]
 810a5f0:	697a      	ldr	r2, [r7, #20]
 810a5f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810a5f4:	68fb      	ldr	r3, [r7, #12]
 810a5f6:	693a      	ldr	r2, [r7, #16]
 810a5f8:	621a      	str	r2, [r3, #32]
}
 810a5fa:	bf00      	nop
 810a5fc:	371c      	adds	r7, #28
 810a5fe:	46bd      	mov	sp, r7
 810a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a604:	4770      	bx	lr
 810a606:	bf00      	nop
 810a608:	40010000 	.word	0x40010000
 810a60c:	40000400 	.word	0x40000400
 810a610:	40000800 	.word	0x40000800
 810a614:	40000c00 	.word	0x40000c00
 810a618:	40010400 	.word	0x40010400
 810a61c:	40001800 	.word	0x40001800
 810a620:	40014000 	.word	0x40014000

0810a624 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810a624:	b480      	push	{r7}
 810a626:	b087      	sub	sp, #28
 810a628:	af00      	add	r7, sp, #0
 810a62a:	60f8      	str	r0, [r7, #12]
 810a62c:	60b9      	str	r1, [r7, #8]
 810a62e:	607a      	str	r2, [r7, #4]
 810a630:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a632:	68fb      	ldr	r3, [r7, #12]
 810a634:	6a1b      	ldr	r3, [r3, #32]
 810a636:	f023 0210 	bic.w	r2, r3, #16
 810a63a:	68fb      	ldr	r3, [r7, #12]
 810a63c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810a63e:	68fb      	ldr	r3, [r7, #12]
 810a640:	699b      	ldr	r3, [r3, #24]
 810a642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810a644:	68fb      	ldr	r3, [r7, #12]
 810a646:	6a1b      	ldr	r3, [r3, #32]
 810a648:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 810a64a:	697b      	ldr	r3, [r7, #20]
 810a64c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 810a652:	687b      	ldr	r3, [r7, #4]
 810a654:	021b      	lsls	r3, r3, #8
 810a656:	697a      	ldr	r2, [r7, #20]
 810a658:	4313      	orrs	r3, r2
 810a65a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810a65c:	697b      	ldr	r3, [r7, #20]
 810a65e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810a662:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 810a664:	683b      	ldr	r3, [r7, #0]
 810a666:	031b      	lsls	r3, r3, #12
 810a668:	b29b      	uxth	r3, r3
 810a66a:	697a      	ldr	r2, [r7, #20]
 810a66c:	4313      	orrs	r3, r2
 810a66e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810a670:	693b      	ldr	r3, [r7, #16]
 810a672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810a676:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 810a678:	68bb      	ldr	r3, [r7, #8]
 810a67a:	011b      	lsls	r3, r3, #4
 810a67c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 810a680:	693a      	ldr	r2, [r7, #16]
 810a682:	4313      	orrs	r3, r2
 810a684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810a686:	68fb      	ldr	r3, [r7, #12]
 810a688:	697a      	ldr	r2, [r7, #20]
 810a68a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810a68c:	68fb      	ldr	r3, [r7, #12]
 810a68e:	693a      	ldr	r2, [r7, #16]
 810a690:	621a      	str	r2, [r3, #32]
}
 810a692:	bf00      	nop
 810a694:	371c      	adds	r7, #28
 810a696:	46bd      	mov	sp, r7
 810a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a69c:	4770      	bx	lr

0810a69e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810a69e:	b480      	push	{r7}
 810a6a0:	b087      	sub	sp, #28
 810a6a2:	af00      	add	r7, sp, #0
 810a6a4:	60f8      	str	r0, [r7, #12]
 810a6a6:	60b9      	str	r1, [r7, #8]
 810a6a8:	607a      	str	r2, [r7, #4]
 810a6aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810a6ac:	68fb      	ldr	r3, [r7, #12]
 810a6ae:	6a1b      	ldr	r3, [r3, #32]
 810a6b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810a6b4:	68fb      	ldr	r3, [r7, #12]
 810a6b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810a6b8:	68fb      	ldr	r3, [r7, #12]
 810a6ba:	69db      	ldr	r3, [r3, #28]
 810a6bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810a6be:	68fb      	ldr	r3, [r7, #12]
 810a6c0:	6a1b      	ldr	r3, [r3, #32]
 810a6c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 810a6c4:	697b      	ldr	r3, [r7, #20]
 810a6c6:	f023 0303 	bic.w	r3, r3, #3
 810a6ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 810a6cc:	697a      	ldr	r2, [r7, #20]
 810a6ce:	687b      	ldr	r3, [r7, #4]
 810a6d0:	4313      	orrs	r3, r2
 810a6d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 810a6d4:	697b      	ldr	r3, [r7, #20]
 810a6d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810a6da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 810a6dc:	683b      	ldr	r3, [r7, #0]
 810a6de:	011b      	lsls	r3, r3, #4
 810a6e0:	b2db      	uxtb	r3, r3
 810a6e2:	697a      	ldr	r2, [r7, #20]
 810a6e4:	4313      	orrs	r3, r2
 810a6e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 810a6e8:	693b      	ldr	r3, [r7, #16]
 810a6ea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 810a6ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 810a6f0:	68bb      	ldr	r3, [r7, #8]
 810a6f2:	021b      	lsls	r3, r3, #8
 810a6f4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 810a6f8:	693a      	ldr	r2, [r7, #16]
 810a6fa:	4313      	orrs	r3, r2
 810a6fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810a6fe:	68fb      	ldr	r3, [r7, #12]
 810a700:	697a      	ldr	r2, [r7, #20]
 810a702:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 810a704:	68fb      	ldr	r3, [r7, #12]
 810a706:	693a      	ldr	r2, [r7, #16]
 810a708:	621a      	str	r2, [r3, #32]
}
 810a70a:	bf00      	nop
 810a70c:	371c      	adds	r7, #28
 810a70e:	46bd      	mov	sp, r7
 810a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a714:	4770      	bx	lr

0810a716 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810a716:	b480      	push	{r7}
 810a718:	b087      	sub	sp, #28
 810a71a:	af00      	add	r7, sp, #0
 810a71c:	60f8      	str	r0, [r7, #12]
 810a71e:	60b9      	str	r1, [r7, #8]
 810a720:	607a      	str	r2, [r7, #4]
 810a722:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810a724:	68fb      	ldr	r3, [r7, #12]
 810a726:	6a1b      	ldr	r3, [r3, #32]
 810a728:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810a72c:	68fb      	ldr	r3, [r7, #12]
 810a72e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810a730:	68fb      	ldr	r3, [r7, #12]
 810a732:	69db      	ldr	r3, [r3, #28]
 810a734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810a736:	68fb      	ldr	r3, [r7, #12]
 810a738:	6a1b      	ldr	r3, [r3, #32]
 810a73a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 810a73c:	697b      	ldr	r3, [r7, #20]
 810a73e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810a742:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 810a744:	687b      	ldr	r3, [r7, #4]
 810a746:	021b      	lsls	r3, r3, #8
 810a748:	697a      	ldr	r2, [r7, #20]
 810a74a:	4313      	orrs	r3, r2
 810a74c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810a74e:	697b      	ldr	r3, [r7, #20]
 810a750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810a754:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 810a756:	683b      	ldr	r3, [r7, #0]
 810a758:	031b      	lsls	r3, r3, #12
 810a75a:	b29b      	uxth	r3, r3
 810a75c:	697a      	ldr	r2, [r7, #20]
 810a75e:	4313      	orrs	r3, r2
 810a760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 810a762:	693b      	ldr	r3, [r7, #16]
 810a764:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 810a768:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 810a76a:	68bb      	ldr	r3, [r7, #8]
 810a76c:	031b      	lsls	r3, r3, #12
 810a76e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 810a772:	693a      	ldr	r2, [r7, #16]
 810a774:	4313      	orrs	r3, r2
 810a776:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810a778:	68fb      	ldr	r3, [r7, #12]
 810a77a:	697a      	ldr	r2, [r7, #20]
 810a77c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810a77e:	68fb      	ldr	r3, [r7, #12]
 810a780:	693a      	ldr	r2, [r7, #16]
 810a782:	621a      	str	r2, [r3, #32]
}
 810a784:	bf00      	nop
 810a786:	371c      	adds	r7, #28
 810a788:	46bd      	mov	sp, r7
 810a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a78e:	4770      	bx	lr

0810a790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810a790:	b480      	push	{r7}
 810a792:	b085      	sub	sp, #20
 810a794:	af00      	add	r7, sp, #0
 810a796:	6078      	str	r0, [r7, #4]
 810a798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810a79a:	687b      	ldr	r3, [r7, #4]
 810a79c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810a7a0:	2b01      	cmp	r3, #1
 810a7a2:	d101      	bne.n	810a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810a7a4:	2302      	movs	r3, #2
 810a7a6:	e06d      	b.n	810a884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810a7a8:	687b      	ldr	r3, [r7, #4]
 810a7aa:	2201      	movs	r2, #1
 810a7ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a7b0:	687b      	ldr	r3, [r7, #4]
 810a7b2:	2202      	movs	r2, #2
 810a7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810a7b8:	687b      	ldr	r3, [r7, #4]
 810a7ba:	681b      	ldr	r3, [r3, #0]
 810a7bc:	685b      	ldr	r3, [r3, #4]
 810a7be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810a7c0:	687b      	ldr	r3, [r7, #4]
 810a7c2:	681b      	ldr	r3, [r3, #0]
 810a7c4:	689b      	ldr	r3, [r3, #8]
 810a7c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810a7c8:	687b      	ldr	r3, [r7, #4]
 810a7ca:	681b      	ldr	r3, [r3, #0]
 810a7cc:	4a30      	ldr	r2, [pc, #192]	; (810a890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810a7ce:	4293      	cmp	r3, r2
 810a7d0:	d004      	beq.n	810a7dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810a7d2:	687b      	ldr	r3, [r7, #4]
 810a7d4:	681b      	ldr	r3, [r3, #0]
 810a7d6:	4a2f      	ldr	r2, [pc, #188]	; (810a894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810a7d8:	4293      	cmp	r3, r2
 810a7da:	d108      	bne.n	810a7ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810a7dc:	68fb      	ldr	r3, [r7, #12]
 810a7de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810a7e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810a7e4:	683b      	ldr	r3, [r7, #0]
 810a7e6:	685b      	ldr	r3, [r3, #4]
 810a7e8:	68fa      	ldr	r2, [r7, #12]
 810a7ea:	4313      	orrs	r3, r2
 810a7ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810a7ee:	68fb      	ldr	r3, [r7, #12]
 810a7f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810a7f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810a7f6:	683b      	ldr	r3, [r7, #0]
 810a7f8:	681b      	ldr	r3, [r3, #0]
 810a7fa:	68fa      	ldr	r2, [r7, #12]
 810a7fc:	4313      	orrs	r3, r2
 810a7fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810a800:	687b      	ldr	r3, [r7, #4]
 810a802:	681b      	ldr	r3, [r3, #0]
 810a804:	68fa      	ldr	r2, [r7, #12]
 810a806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810a808:	687b      	ldr	r3, [r7, #4]
 810a80a:	681b      	ldr	r3, [r3, #0]
 810a80c:	4a20      	ldr	r2, [pc, #128]	; (810a890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810a80e:	4293      	cmp	r3, r2
 810a810:	d022      	beq.n	810a858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a812:	687b      	ldr	r3, [r7, #4]
 810a814:	681b      	ldr	r3, [r3, #0]
 810a816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a81a:	d01d      	beq.n	810a858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a81c:	687b      	ldr	r3, [r7, #4]
 810a81e:	681b      	ldr	r3, [r3, #0]
 810a820:	4a1d      	ldr	r2, [pc, #116]	; (810a898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810a822:	4293      	cmp	r3, r2
 810a824:	d018      	beq.n	810a858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a826:	687b      	ldr	r3, [r7, #4]
 810a828:	681b      	ldr	r3, [r3, #0]
 810a82a:	4a1c      	ldr	r2, [pc, #112]	; (810a89c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810a82c:	4293      	cmp	r3, r2
 810a82e:	d013      	beq.n	810a858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a830:	687b      	ldr	r3, [r7, #4]
 810a832:	681b      	ldr	r3, [r3, #0]
 810a834:	4a1a      	ldr	r2, [pc, #104]	; (810a8a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810a836:	4293      	cmp	r3, r2
 810a838:	d00e      	beq.n	810a858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a83a:	687b      	ldr	r3, [r7, #4]
 810a83c:	681b      	ldr	r3, [r3, #0]
 810a83e:	4a15      	ldr	r2, [pc, #84]	; (810a894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810a840:	4293      	cmp	r3, r2
 810a842:	d009      	beq.n	810a858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a844:	687b      	ldr	r3, [r7, #4]
 810a846:	681b      	ldr	r3, [r3, #0]
 810a848:	4a16      	ldr	r2, [pc, #88]	; (810a8a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810a84a:	4293      	cmp	r3, r2
 810a84c:	d004      	beq.n	810a858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a84e:	687b      	ldr	r3, [r7, #4]
 810a850:	681b      	ldr	r3, [r3, #0]
 810a852:	4a15      	ldr	r2, [pc, #84]	; (810a8a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810a854:	4293      	cmp	r3, r2
 810a856:	d10c      	bne.n	810a872 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810a858:	68bb      	ldr	r3, [r7, #8]
 810a85a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810a85e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810a860:	683b      	ldr	r3, [r7, #0]
 810a862:	689b      	ldr	r3, [r3, #8]
 810a864:	68ba      	ldr	r2, [r7, #8]
 810a866:	4313      	orrs	r3, r2
 810a868:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810a86a:	687b      	ldr	r3, [r7, #4]
 810a86c:	681b      	ldr	r3, [r3, #0]
 810a86e:	68ba      	ldr	r2, [r7, #8]
 810a870:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810a872:	687b      	ldr	r3, [r7, #4]
 810a874:	2201      	movs	r2, #1
 810a876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810a87a:	687b      	ldr	r3, [r7, #4]
 810a87c:	2200      	movs	r2, #0
 810a87e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810a882:	2300      	movs	r3, #0
}
 810a884:	4618      	mov	r0, r3
 810a886:	3714      	adds	r7, #20
 810a888:	46bd      	mov	sp, r7
 810a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a88e:	4770      	bx	lr
 810a890:	40010000 	.word	0x40010000
 810a894:	40010400 	.word	0x40010400
 810a898:	40000400 	.word	0x40000400
 810a89c:	40000800 	.word	0x40000800
 810a8a0:	40000c00 	.word	0x40000c00
 810a8a4:	40001800 	.word	0x40001800
 810a8a8:	40014000 	.word	0x40014000

0810a8ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810a8ac:	b480      	push	{r7}
 810a8ae:	b085      	sub	sp, #20
 810a8b0:	af00      	add	r7, sp, #0
 810a8b2:	6078      	str	r0, [r7, #4]
 810a8b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810a8b6:	2300      	movs	r3, #0
 810a8b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810a8ba:	687b      	ldr	r3, [r7, #4]
 810a8bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810a8c0:	2b01      	cmp	r3, #1
 810a8c2:	d101      	bne.n	810a8c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810a8c4:	2302      	movs	r3, #2
 810a8c6:	e065      	b.n	810a994 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810a8c8:	687b      	ldr	r3, [r7, #4]
 810a8ca:	2201      	movs	r2, #1
 810a8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810a8d0:	68fb      	ldr	r3, [r7, #12]
 810a8d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810a8d6:	683b      	ldr	r3, [r7, #0]
 810a8d8:	68db      	ldr	r3, [r3, #12]
 810a8da:	4313      	orrs	r3, r2
 810a8dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810a8de:	68fb      	ldr	r3, [r7, #12]
 810a8e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810a8e4:	683b      	ldr	r3, [r7, #0]
 810a8e6:	689b      	ldr	r3, [r3, #8]
 810a8e8:	4313      	orrs	r3, r2
 810a8ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810a8ec:	68fb      	ldr	r3, [r7, #12]
 810a8ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810a8f2:	683b      	ldr	r3, [r7, #0]
 810a8f4:	685b      	ldr	r3, [r3, #4]
 810a8f6:	4313      	orrs	r3, r2
 810a8f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810a8fa:	68fb      	ldr	r3, [r7, #12]
 810a8fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810a900:	683b      	ldr	r3, [r7, #0]
 810a902:	681b      	ldr	r3, [r3, #0]
 810a904:	4313      	orrs	r3, r2
 810a906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810a908:	68fb      	ldr	r3, [r7, #12]
 810a90a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810a90e:	683b      	ldr	r3, [r7, #0]
 810a910:	691b      	ldr	r3, [r3, #16]
 810a912:	4313      	orrs	r3, r2
 810a914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810a916:	68fb      	ldr	r3, [r7, #12]
 810a918:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810a91c:	683b      	ldr	r3, [r7, #0]
 810a91e:	695b      	ldr	r3, [r3, #20]
 810a920:	4313      	orrs	r3, r2
 810a922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810a924:	68fb      	ldr	r3, [r7, #12]
 810a926:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810a92a:	683b      	ldr	r3, [r7, #0]
 810a92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a92e:	4313      	orrs	r3, r2
 810a930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810a932:	68fb      	ldr	r3, [r7, #12]
 810a934:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810a938:	683b      	ldr	r3, [r7, #0]
 810a93a:	699b      	ldr	r3, [r3, #24]
 810a93c:	041b      	lsls	r3, r3, #16
 810a93e:	4313      	orrs	r3, r2
 810a940:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810a942:	687b      	ldr	r3, [r7, #4]
 810a944:	681b      	ldr	r3, [r3, #0]
 810a946:	4a16      	ldr	r2, [pc, #88]	; (810a9a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810a948:	4293      	cmp	r3, r2
 810a94a:	d004      	beq.n	810a956 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810a94c:	687b      	ldr	r3, [r7, #4]
 810a94e:	681b      	ldr	r3, [r3, #0]
 810a950:	4a14      	ldr	r2, [pc, #80]	; (810a9a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810a952:	4293      	cmp	r3, r2
 810a954:	d115      	bne.n	810a982 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810a956:	68fb      	ldr	r3, [r7, #12]
 810a958:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810a95c:	683b      	ldr	r3, [r7, #0]
 810a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a960:	051b      	lsls	r3, r3, #20
 810a962:	4313      	orrs	r3, r2
 810a964:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810a966:	68fb      	ldr	r3, [r7, #12]
 810a968:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810a96c:	683b      	ldr	r3, [r7, #0]
 810a96e:	69db      	ldr	r3, [r3, #28]
 810a970:	4313      	orrs	r3, r2
 810a972:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810a974:	68fb      	ldr	r3, [r7, #12]
 810a976:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810a97a:	683b      	ldr	r3, [r7, #0]
 810a97c:	6a1b      	ldr	r3, [r3, #32]
 810a97e:	4313      	orrs	r3, r2
 810a980:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810a982:	687b      	ldr	r3, [r7, #4]
 810a984:	681b      	ldr	r3, [r3, #0]
 810a986:	68fa      	ldr	r2, [r7, #12]
 810a988:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810a98a:	687b      	ldr	r3, [r7, #4]
 810a98c:	2200      	movs	r2, #0
 810a98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810a992:	2300      	movs	r3, #0
}
 810a994:	4618      	mov	r0, r3
 810a996:	3714      	adds	r7, #20
 810a998:	46bd      	mov	sp, r7
 810a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a99e:	4770      	bx	lr
 810a9a0:	40010000 	.word	0x40010000
 810a9a4:	40010400 	.word	0x40010400

0810a9a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810a9a8:	b480      	push	{r7}
 810a9aa:	b083      	sub	sp, #12
 810a9ac:	af00      	add	r7, sp, #0
 810a9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810a9b0:	bf00      	nop
 810a9b2:	370c      	adds	r7, #12
 810a9b4:	46bd      	mov	sp, r7
 810a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9ba:	4770      	bx	lr

0810a9bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810a9bc:	b480      	push	{r7}
 810a9be:	b083      	sub	sp, #12
 810a9c0:	af00      	add	r7, sp, #0
 810a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810a9c4:	bf00      	nop
 810a9c6:	370c      	adds	r7, #12
 810a9c8:	46bd      	mov	sp, r7
 810a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9ce:	4770      	bx	lr

0810a9d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810a9d0:	b480      	push	{r7}
 810a9d2:	b083      	sub	sp, #12
 810a9d4:	af00      	add	r7, sp, #0
 810a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810a9d8:	bf00      	nop
 810a9da:	370c      	adds	r7, #12
 810a9dc:	46bd      	mov	sp, r7
 810a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9e2:	4770      	bx	lr

0810a9e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810a9e4:	b580      	push	{r7, lr}
 810a9e6:	b082      	sub	sp, #8
 810a9e8:	af00      	add	r7, sp, #0
 810a9ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810a9ec:	687b      	ldr	r3, [r7, #4]
 810a9ee:	2b00      	cmp	r3, #0
 810a9f0:	d101      	bne.n	810a9f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810a9f2:	2301      	movs	r3, #1
 810a9f4:	e042      	b.n	810aa7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810a9f6:	687b      	ldr	r3, [r7, #4]
 810a9f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a9fc:	2b00      	cmp	r3, #0
 810a9fe:	d106      	bne.n	810aa0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810aa00:	687b      	ldr	r3, [r7, #4]
 810aa02:	2200      	movs	r2, #0
 810aa04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810aa08:	6878      	ldr	r0, [r7, #4]
 810aa0a:	f7f7 fc3f 	bl	810228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810aa0e:	687b      	ldr	r3, [r7, #4]
 810aa10:	2224      	movs	r2, #36	; 0x24
 810aa12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810aa16:	687b      	ldr	r3, [r7, #4]
 810aa18:	681b      	ldr	r3, [r3, #0]
 810aa1a:	681a      	ldr	r2, [r3, #0]
 810aa1c:	687b      	ldr	r3, [r7, #4]
 810aa1e:	681b      	ldr	r3, [r3, #0]
 810aa20:	f022 0201 	bic.w	r2, r2, #1
 810aa24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810aa26:	6878      	ldr	r0, [r7, #4]
 810aa28:	f000 f82c 	bl	810aa84 <UART_SetConfig>
 810aa2c:	4603      	mov	r3, r0
 810aa2e:	2b01      	cmp	r3, #1
 810aa30:	d101      	bne.n	810aa36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810aa32:	2301      	movs	r3, #1
 810aa34:	e022      	b.n	810aa7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810aa36:	687b      	ldr	r3, [r7, #4]
 810aa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa3a:	2b00      	cmp	r3, #0
 810aa3c:	d002      	beq.n	810aa44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810aa3e:	6878      	ldr	r0, [r7, #4]
 810aa40:	f000 fd88 	bl	810b554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810aa44:	687b      	ldr	r3, [r7, #4]
 810aa46:	681b      	ldr	r3, [r3, #0]
 810aa48:	685a      	ldr	r2, [r3, #4]
 810aa4a:	687b      	ldr	r3, [r7, #4]
 810aa4c:	681b      	ldr	r3, [r3, #0]
 810aa4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810aa52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810aa54:	687b      	ldr	r3, [r7, #4]
 810aa56:	681b      	ldr	r3, [r3, #0]
 810aa58:	689a      	ldr	r2, [r3, #8]
 810aa5a:	687b      	ldr	r3, [r7, #4]
 810aa5c:	681b      	ldr	r3, [r3, #0]
 810aa5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810aa62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810aa64:	687b      	ldr	r3, [r7, #4]
 810aa66:	681b      	ldr	r3, [r3, #0]
 810aa68:	681a      	ldr	r2, [r3, #0]
 810aa6a:	687b      	ldr	r3, [r7, #4]
 810aa6c:	681b      	ldr	r3, [r3, #0]
 810aa6e:	f042 0201 	orr.w	r2, r2, #1
 810aa72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810aa74:	6878      	ldr	r0, [r7, #4]
 810aa76:	f000 fe0f 	bl	810b698 <UART_CheckIdleState>
 810aa7a:	4603      	mov	r3, r0
}
 810aa7c:	4618      	mov	r0, r3
 810aa7e:	3708      	adds	r7, #8
 810aa80:	46bd      	mov	sp, r7
 810aa82:	bd80      	pop	{r7, pc}

0810aa84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810aa84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810aa88:	b092      	sub	sp, #72	; 0x48
 810aa8a:	af00      	add	r7, sp, #0
 810aa8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810aa8e:	2300      	movs	r3, #0
 810aa90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810aa94:	697b      	ldr	r3, [r7, #20]
 810aa96:	689a      	ldr	r2, [r3, #8]
 810aa98:	697b      	ldr	r3, [r7, #20]
 810aa9a:	691b      	ldr	r3, [r3, #16]
 810aa9c:	431a      	orrs	r2, r3
 810aa9e:	697b      	ldr	r3, [r7, #20]
 810aaa0:	695b      	ldr	r3, [r3, #20]
 810aaa2:	431a      	orrs	r2, r3
 810aaa4:	697b      	ldr	r3, [r7, #20]
 810aaa6:	69db      	ldr	r3, [r3, #28]
 810aaa8:	4313      	orrs	r3, r2
 810aaaa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810aaac:	697b      	ldr	r3, [r7, #20]
 810aaae:	681b      	ldr	r3, [r3, #0]
 810aab0:	681a      	ldr	r2, [r3, #0]
 810aab2:	4bbd      	ldr	r3, [pc, #756]	; (810ada8 <UART_SetConfig+0x324>)
 810aab4:	4013      	ands	r3, r2
 810aab6:	697a      	ldr	r2, [r7, #20]
 810aab8:	6812      	ldr	r2, [r2, #0]
 810aaba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810aabc:	430b      	orrs	r3, r1
 810aabe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810aac0:	697b      	ldr	r3, [r7, #20]
 810aac2:	681b      	ldr	r3, [r3, #0]
 810aac4:	685b      	ldr	r3, [r3, #4]
 810aac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810aaca:	697b      	ldr	r3, [r7, #20]
 810aacc:	68da      	ldr	r2, [r3, #12]
 810aace:	697b      	ldr	r3, [r7, #20]
 810aad0:	681b      	ldr	r3, [r3, #0]
 810aad2:	430a      	orrs	r2, r1
 810aad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810aad6:	697b      	ldr	r3, [r7, #20]
 810aad8:	699b      	ldr	r3, [r3, #24]
 810aada:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810aadc:	697b      	ldr	r3, [r7, #20]
 810aade:	681b      	ldr	r3, [r3, #0]
 810aae0:	4ab2      	ldr	r2, [pc, #712]	; (810adac <UART_SetConfig+0x328>)
 810aae2:	4293      	cmp	r3, r2
 810aae4:	d004      	beq.n	810aaf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810aae6:	697b      	ldr	r3, [r7, #20]
 810aae8:	6a1b      	ldr	r3, [r3, #32]
 810aaea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810aaec:	4313      	orrs	r3, r2
 810aaee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810aaf0:	697b      	ldr	r3, [r7, #20]
 810aaf2:	681b      	ldr	r3, [r3, #0]
 810aaf4:	689b      	ldr	r3, [r3, #8]
 810aaf6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810aafa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810aafe:	697a      	ldr	r2, [r7, #20]
 810ab00:	6812      	ldr	r2, [r2, #0]
 810ab02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810ab04:	430b      	orrs	r3, r1
 810ab06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810ab08:	697b      	ldr	r3, [r7, #20]
 810ab0a:	681b      	ldr	r3, [r3, #0]
 810ab0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ab0e:	f023 010f 	bic.w	r1, r3, #15
 810ab12:	697b      	ldr	r3, [r7, #20]
 810ab14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810ab16:	697b      	ldr	r3, [r7, #20]
 810ab18:	681b      	ldr	r3, [r3, #0]
 810ab1a:	430a      	orrs	r2, r1
 810ab1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810ab1e:	697b      	ldr	r3, [r7, #20]
 810ab20:	681b      	ldr	r3, [r3, #0]
 810ab22:	4aa3      	ldr	r2, [pc, #652]	; (810adb0 <UART_SetConfig+0x32c>)
 810ab24:	4293      	cmp	r3, r2
 810ab26:	d177      	bne.n	810ac18 <UART_SetConfig+0x194>
 810ab28:	4ba2      	ldr	r3, [pc, #648]	; (810adb4 <UART_SetConfig+0x330>)
 810ab2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ab2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810ab30:	2b28      	cmp	r3, #40	; 0x28
 810ab32:	d86d      	bhi.n	810ac10 <UART_SetConfig+0x18c>
 810ab34:	a201      	add	r2, pc, #4	; (adr r2, 810ab3c <UART_SetConfig+0xb8>)
 810ab36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab3a:	bf00      	nop
 810ab3c:	0810abe1 	.word	0x0810abe1
 810ab40:	0810ac11 	.word	0x0810ac11
 810ab44:	0810ac11 	.word	0x0810ac11
 810ab48:	0810ac11 	.word	0x0810ac11
 810ab4c:	0810ac11 	.word	0x0810ac11
 810ab50:	0810ac11 	.word	0x0810ac11
 810ab54:	0810ac11 	.word	0x0810ac11
 810ab58:	0810ac11 	.word	0x0810ac11
 810ab5c:	0810abe9 	.word	0x0810abe9
 810ab60:	0810ac11 	.word	0x0810ac11
 810ab64:	0810ac11 	.word	0x0810ac11
 810ab68:	0810ac11 	.word	0x0810ac11
 810ab6c:	0810ac11 	.word	0x0810ac11
 810ab70:	0810ac11 	.word	0x0810ac11
 810ab74:	0810ac11 	.word	0x0810ac11
 810ab78:	0810ac11 	.word	0x0810ac11
 810ab7c:	0810abf1 	.word	0x0810abf1
 810ab80:	0810ac11 	.word	0x0810ac11
 810ab84:	0810ac11 	.word	0x0810ac11
 810ab88:	0810ac11 	.word	0x0810ac11
 810ab8c:	0810ac11 	.word	0x0810ac11
 810ab90:	0810ac11 	.word	0x0810ac11
 810ab94:	0810ac11 	.word	0x0810ac11
 810ab98:	0810ac11 	.word	0x0810ac11
 810ab9c:	0810abf9 	.word	0x0810abf9
 810aba0:	0810ac11 	.word	0x0810ac11
 810aba4:	0810ac11 	.word	0x0810ac11
 810aba8:	0810ac11 	.word	0x0810ac11
 810abac:	0810ac11 	.word	0x0810ac11
 810abb0:	0810ac11 	.word	0x0810ac11
 810abb4:	0810ac11 	.word	0x0810ac11
 810abb8:	0810ac11 	.word	0x0810ac11
 810abbc:	0810ac01 	.word	0x0810ac01
 810abc0:	0810ac11 	.word	0x0810ac11
 810abc4:	0810ac11 	.word	0x0810ac11
 810abc8:	0810ac11 	.word	0x0810ac11
 810abcc:	0810ac11 	.word	0x0810ac11
 810abd0:	0810ac11 	.word	0x0810ac11
 810abd4:	0810ac11 	.word	0x0810ac11
 810abd8:	0810ac11 	.word	0x0810ac11
 810abdc:	0810ac09 	.word	0x0810ac09
 810abe0:	2301      	movs	r3, #1
 810abe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810abe6:	e220      	b.n	810b02a <UART_SetConfig+0x5a6>
 810abe8:	2304      	movs	r3, #4
 810abea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810abee:	e21c      	b.n	810b02a <UART_SetConfig+0x5a6>
 810abf0:	2308      	movs	r3, #8
 810abf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810abf6:	e218      	b.n	810b02a <UART_SetConfig+0x5a6>
 810abf8:	2310      	movs	r3, #16
 810abfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810abfe:	e214      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac00:	2320      	movs	r3, #32
 810ac02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ac06:	e210      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac08:	2340      	movs	r3, #64	; 0x40
 810ac0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ac0e:	e20c      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac10:	2380      	movs	r3, #128	; 0x80
 810ac12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ac16:	e208      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac18:	697b      	ldr	r3, [r7, #20]
 810ac1a:	681b      	ldr	r3, [r3, #0]
 810ac1c:	4a66      	ldr	r2, [pc, #408]	; (810adb8 <UART_SetConfig+0x334>)
 810ac1e:	4293      	cmp	r3, r2
 810ac20:	d130      	bne.n	810ac84 <UART_SetConfig+0x200>
 810ac22:	4b64      	ldr	r3, [pc, #400]	; (810adb4 <UART_SetConfig+0x330>)
 810ac24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ac26:	f003 0307 	and.w	r3, r3, #7
 810ac2a:	2b05      	cmp	r3, #5
 810ac2c:	d826      	bhi.n	810ac7c <UART_SetConfig+0x1f8>
 810ac2e:	a201      	add	r2, pc, #4	; (adr r2, 810ac34 <UART_SetConfig+0x1b0>)
 810ac30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ac34:	0810ac4d 	.word	0x0810ac4d
 810ac38:	0810ac55 	.word	0x0810ac55
 810ac3c:	0810ac5d 	.word	0x0810ac5d
 810ac40:	0810ac65 	.word	0x0810ac65
 810ac44:	0810ac6d 	.word	0x0810ac6d
 810ac48:	0810ac75 	.word	0x0810ac75
 810ac4c:	2300      	movs	r3, #0
 810ac4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ac52:	e1ea      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac54:	2304      	movs	r3, #4
 810ac56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ac5a:	e1e6      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac5c:	2308      	movs	r3, #8
 810ac5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ac62:	e1e2      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac64:	2310      	movs	r3, #16
 810ac66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ac6a:	e1de      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac6c:	2320      	movs	r3, #32
 810ac6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ac72:	e1da      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac74:	2340      	movs	r3, #64	; 0x40
 810ac76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ac7a:	e1d6      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac7c:	2380      	movs	r3, #128	; 0x80
 810ac7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ac82:	e1d2      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ac84:	697b      	ldr	r3, [r7, #20]
 810ac86:	681b      	ldr	r3, [r3, #0]
 810ac88:	4a4c      	ldr	r2, [pc, #304]	; (810adbc <UART_SetConfig+0x338>)
 810ac8a:	4293      	cmp	r3, r2
 810ac8c:	d130      	bne.n	810acf0 <UART_SetConfig+0x26c>
 810ac8e:	4b49      	ldr	r3, [pc, #292]	; (810adb4 <UART_SetConfig+0x330>)
 810ac90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ac92:	f003 0307 	and.w	r3, r3, #7
 810ac96:	2b05      	cmp	r3, #5
 810ac98:	d826      	bhi.n	810ace8 <UART_SetConfig+0x264>
 810ac9a:	a201      	add	r2, pc, #4	; (adr r2, 810aca0 <UART_SetConfig+0x21c>)
 810ac9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aca0:	0810acb9 	.word	0x0810acb9
 810aca4:	0810acc1 	.word	0x0810acc1
 810aca8:	0810acc9 	.word	0x0810acc9
 810acac:	0810acd1 	.word	0x0810acd1
 810acb0:	0810acd9 	.word	0x0810acd9
 810acb4:	0810ace1 	.word	0x0810ace1
 810acb8:	2300      	movs	r3, #0
 810acba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810acbe:	e1b4      	b.n	810b02a <UART_SetConfig+0x5a6>
 810acc0:	2304      	movs	r3, #4
 810acc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810acc6:	e1b0      	b.n	810b02a <UART_SetConfig+0x5a6>
 810acc8:	2308      	movs	r3, #8
 810acca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810acce:	e1ac      	b.n	810b02a <UART_SetConfig+0x5a6>
 810acd0:	2310      	movs	r3, #16
 810acd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810acd6:	e1a8      	b.n	810b02a <UART_SetConfig+0x5a6>
 810acd8:	2320      	movs	r3, #32
 810acda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810acde:	e1a4      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ace0:	2340      	movs	r3, #64	; 0x40
 810ace2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ace6:	e1a0      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ace8:	2380      	movs	r3, #128	; 0x80
 810acea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810acee:	e19c      	b.n	810b02a <UART_SetConfig+0x5a6>
 810acf0:	697b      	ldr	r3, [r7, #20]
 810acf2:	681b      	ldr	r3, [r3, #0]
 810acf4:	4a32      	ldr	r2, [pc, #200]	; (810adc0 <UART_SetConfig+0x33c>)
 810acf6:	4293      	cmp	r3, r2
 810acf8:	d130      	bne.n	810ad5c <UART_SetConfig+0x2d8>
 810acfa:	4b2e      	ldr	r3, [pc, #184]	; (810adb4 <UART_SetConfig+0x330>)
 810acfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810acfe:	f003 0307 	and.w	r3, r3, #7
 810ad02:	2b05      	cmp	r3, #5
 810ad04:	d826      	bhi.n	810ad54 <UART_SetConfig+0x2d0>
 810ad06:	a201      	add	r2, pc, #4	; (adr r2, 810ad0c <UART_SetConfig+0x288>)
 810ad08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad0c:	0810ad25 	.word	0x0810ad25
 810ad10:	0810ad2d 	.word	0x0810ad2d
 810ad14:	0810ad35 	.word	0x0810ad35
 810ad18:	0810ad3d 	.word	0x0810ad3d
 810ad1c:	0810ad45 	.word	0x0810ad45
 810ad20:	0810ad4d 	.word	0x0810ad4d
 810ad24:	2300      	movs	r3, #0
 810ad26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ad2a:	e17e      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ad2c:	2304      	movs	r3, #4
 810ad2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ad32:	e17a      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ad34:	2308      	movs	r3, #8
 810ad36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ad3a:	e176      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ad3c:	2310      	movs	r3, #16
 810ad3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ad42:	e172      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ad44:	2320      	movs	r3, #32
 810ad46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ad4a:	e16e      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ad4c:	2340      	movs	r3, #64	; 0x40
 810ad4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ad52:	e16a      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ad54:	2380      	movs	r3, #128	; 0x80
 810ad56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ad5a:	e166      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ad5c:	697b      	ldr	r3, [r7, #20]
 810ad5e:	681b      	ldr	r3, [r3, #0]
 810ad60:	4a18      	ldr	r2, [pc, #96]	; (810adc4 <UART_SetConfig+0x340>)
 810ad62:	4293      	cmp	r3, r2
 810ad64:	d140      	bne.n	810ade8 <UART_SetConfig+0x364>
 810ad66:	4b13      	ldr	r3, [pc, #76]	; (810adb4 <UART_SetConfig+0x330>)
 810ad68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ad6a:	f003 0307 	and.w	r3, r3, #7
 810ad6e:	2b05      	cmp	r3, #5
 810ad70:	d836      	bhi.n	810ade0 <UART_SetConfig+0x35c>
 810ad72:	a201      	add	r2, pc, #4	; (adr r2, 810ad78 <UART_SetConfig+0x2f4>)
 810ad74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad78:	0810ad91 	.word	0x0810ad91
 810ad7c:	0810ad99 	.word	0x0810ad99
 810ad80:	0810ada1 	.word	0x0810ada1
 810ad84:	0810adc9 	.word	0x0810adc9
 810ad88:	0810add1 	.word	0x0810add1
 810ad8c:	0810add9 	.word	0x0810add9
 810ad90:	2300      	movs	r3, #0
 810ad92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ad96:	e148      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ad98:	2304      	movs	r3, #4
 810ad9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ad9e:	e144      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ada0:	2308      	movs	r3, #8
 810ada2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ada6:	e140      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ada8:	cfff69f3 	.word	0xcfff69f3
 810adac:	58000c00 	.word	0x58000c00
 810adb0:	40011000 	.word	0x40011000
 810adb4:	58024400 	.word	0x58024400
 810adb8:	40004400 	.word	0x40004400
 810adbc:	40004800 	.word	0x40004800
 810adc0:	40004c00 	.word	0x40004c00
 810adc4:	40005000 	.word	0x40005000
 810adc8:	2310      	movs	r3, #16
 810adca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810adce:	e12c      	b.n	810b02a <UART_SetConfig+0x5a6>
 810add0:	2320      	movs	r3, #32
 810add2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810add6:	e128      	b.n	810b02a <UART_SetConfig+0x5a6>
 810add8:	2340      	movs	r3, #64	; 0x40
 810adda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810adde:	e124      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ade0:	2380      	movs	r3, #128	; 0x80
 810ade2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ade6:	e120      	b.n	810b02a <UART_SetConfig+0x5a6>
 810ade8:	697b      	ldr	r3, [r7, #20]
 810adea:	681b      	ldr	r3, [r3, #0]
 810adec:	4acb      	ldr	r2, [pc, #812]	; (810b11c <UART_SetConfig+0x698>)
 810adee:	4293      	cmp	r3, r2
 810adf0:	d176      	bne.n	810aee0 <UART_SetConfig+0x45c>
 810adf2:	4bcb      	ldr	r3, [pc, #812]	; (810b120 <UART_SetConfig+0x69c>)
 810adf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810adf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810adfa:	2b28      	cmp	r3, #40	; 0x28
 810adfc:	d86c      	bhi.n	810aed8 <UART_SetConfig+0x454>
 810adfe:	a201      	add	r2, pc, #4	; (adr r2, 810ae04 <UART_SetConfig+0x380>)
 810ae00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ae04:	0810aea9 	.word	0x0810aea9
 810ae08:	0810aed9 	.word	0x0810aed9
 810ae0c:	0810aed9 	.word	0x0810aed9
 810ae10:	0810aed9 	.word	0x0810aed9
 810ae14:	0810aed9 	.word	0x0810aed9
 810ae18:	0810aed9 	.word	0x0810aed9
 810ae1c:	0810aed9 	.word	0x0810aed9
 810ae20:	0810aed9 	.word	0x0810aed9
 810ae24:	0810aeb1 	.word	0x0810aeb1
 810ae28:	0810aed9 	.word	0x0810aed9
 810ae2c:	0810aed9 	.word	0x0810aed9
 810ae30:	0810aed9 	.word	0x0810aed9
 810ae34:	0810aed9 	.word	0x0810aed9
 810ae38:	0810aed9 	.word	0x0810aed9
 810ae3c:	0810aed9 	.word	0x0810aed9
 810ae40:	0810aed9 	.word	0x0810aed9
 810ae44:	0810aeb9 	.word	0x0810aeb9
 810ae48:	0810aed9 	.word	0x0810aed9
 810ae4c:	0810aed9 	.word	0x0810aed9
 810ae50:	0810aed9 	.word	0x0810aed9
 810ae54:	0810aed9 	.word	0x0810aed9
 810ae58:	0810aed9 	.word	0x0810aed9
 810ae5c:	0810aed9 	.word	0x0810aed9
 810ae60:	0810aed9 	.word	0x0810aed9
 810ae64:	0810aec1 	.word	0x0810aec1
 810ae68:	0810aed9 	.word	0x0810aed9
 810ae6c:	0810aed9 	.word	0x0810aed9
 810ae70:	0810aed9 	.word	0x0810aed9
 810ae74:	0810aed9 	.word	0x0810aed9
 810ae78:	0810aed9 	.word	0x0810aed9
 810ae7c:	0810aed9 	.word	0x0810aed9
 810ae80:	0810aed9 	.word	0x0810aed9
 810ae84:	0810aec9 	.word	0x0810aec9
 810ae88:	0810aed9 	.word	0x0810aed9
 810ae8c:	0810aed9 	.word	0x0810aed9
 810ae90:	0810aed9 	.word	0x0810aed9
 810ae94:	0810aed9 	.word	0x0810aed9
 810ae98:	0810aed9 	.word	0x0810aed9
 810ae9c:	0810aed9 	.word	0x0810aed9
 810aea0:	0810aed9 	.word	0x0810aed9
 810aea4:	0810aed1 	.word	0x0810aed1
 810aea8:	2301      	movs	r3, #1
 810aeaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aeae:	e0bc      	b.n	810b02a <UART_SetConfig+0x5a6>
 810aeb0:	2304      	movs	r3, #4
 810aeb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aeb6:	e0b8      	b.n	810b02a <UART_SetConfig+0x5a6>
 810aeb8:	2308      	movs	r3, #8
 810aeba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aebe:	e0b4      	b.n	810b02a <UART_SetConfig+0x5a6>
 810aec0:	2310      	movs	r3, #16
 810aec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aec6:	e0b0      	b.n	810b02a <UART_SetConfig+0x5a6>
 810aec8:	2320      	movs	r3, #32
 810aeca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aece:	e0ac      	b.n	810b02a <UART_SetConfig+0x5a6>
 810aed0:	2340      	movs	r3, #64	; 0x40
 810aed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aed6:	e0a8      	b.n	810b02a <UART_SetConfig+0x5a6>
 810aed8:	2380      	movs	r3, #128	; 0x80
 810aeda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aede:	e0a4      	b.n	810b02a <UART_SetConfig+0x5a6>
 810aee0:	697b      	ldr	r3, [r7, #20]
 810aee2:	681b      	ldr	r3, [r3, #0]
 810aee4:	4a8f      	ldr	r2, [pc, #572]	; (810b124 <UART_SetConfig+0x6a0>)
 810aee6:	4293      	cmp	r3, r2
 810aee8:	d130      	bne.n	810af4c <UART_SetConfig+0x4c8>
 810aeea:	4b8d      	ldr	r3, [pc, #564]	; (810b120 <UART_SetConfig+0x69c>)
 810aeec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810aeee:	f003 0307 	and.w	r3, r3, #7
 810aef2:	2b05      	cmp	r3, #5
 810aef4:	d826      	bhi.n	810af44 <UART_SetConfig+0x4c0>
 810aef6:	a201      	add	r2, pc, #4	; (adr r2, 810aefc <UART_SetConfig+0x478>)
 810aef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aefc:	0810af15 	.word	0x0810af15
 810af00:	0810af1d 	.word	0x0810af1d
 810af04:	0810af25 	.word	0x0810af25
 810af08:	0810af2d 	.word	0x0810af2d
 810af0c:	0810af35 	.word	0x0810af35
 810af10:	0810af3d 	.word	0x0810af3d
 810af14:	2300      	movs	r3, #0
 810af16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af1a:	e086      	b.n	810b02a <UART_SetConfig+0x5a6>
 810af1c:	2304      	movs	r3, #4
 810af1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af22:	e082      	b.n	810b02a <UART_SetConfig+0x5a6>
 810af24:	2308      	movs	r3, #8
 810af26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af2a:	e07e      	b.n	810b02a <UART_SetConfig+0x5a6>
 810af2c:	2310      	movs	r3, #16
 810af2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af32:	e07a      	b.n	810b02a <UART_SetConfig+0x5a6>
 810af34:	2320      	movs	r3, #32
 810af36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af3a:	e076      	b.n	810b02a <UART_SetConfig+0x5a6>
 810af3c:	2340      	movs	r3, #64	; 0x40
 810af3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af42:	e072      	b.n	810b02a <UART_SetConfig+0x5a6>
 810af44:	2380      	movs	r3, #128	; 0x80
 810af46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af4a:	e06e      	b.n	810b02a <UART_SetConfig+0x5a6>
 810af4c:	697b      	ldr	r3, [r7, #20]
 810af4e:	681b      	ldr	r3, [r3, #0]
 810af50:	4a75      	ldr	r2, [pc, #468]	; (810b128 <UART_SetConfig+0x6a4>)
 810af52:	4293      	cmp	r3, r2
 810af54:	d130      	bne.n	810afb8 <UART_SetConfig+0x534>
 810af56:	4b72      	ldr	r3, [pc, #456]	; (810b120 <UART_SetConfig+0x69c>)
 810af58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810af5a:	f003 0307 	and.w	r3, r3, #7
 810af5e:	2b05      	cmp	r3, #5
 810af60:	d826      	bhi.n	810afb0 <UART_SetConfig+0x52c>
 810af62:	a201      	add	r2, pc, #4	; (adr r2, 810af68 <UART_SetConfig+0x4e4>)
 810af64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810af68:	0810af81 	.word	0x0810af81
 810af6c:	0810af89 	.word	0x0810af89
 810af70:	0810af91 	.word	0x0810af91
 810af74:	0810af99 	.word	0x0810af99
 810af78:	0810afa1 	.word	0x0810afa1
 810af7c:	0810afa9 	.word	0x0810afa9
 810af80:	2300      	movs	r3, #0
 810af82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af86:	e050      	b.n	810b02a <UART_SetConfig+0x5a6>
 810af88:	2304      	movs	r3, #4
 810af8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af8e:	e04c      	b.n	810b02a <UART_SetConfig+0x5a6>
 810af90:	2308      	movs	r3, #8
 810af92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af96:	e048      	b.n	810b02a <UART_SetConfig+0x5a6>
 810af98:	2310      	movs	r3, #16
 810af9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810af9e:	e044      	b.n	810b02a <UART_SetConfig+0x5a6>
 810afa0:	2320      	movs	r3, #32
 810afa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810afa6:	e040      	b.n	810b02a <UART_SetConfig+0x5a6>
 810afa8:	2340      	movs	r3, #64	; 0x40
 810afaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810afae:	e03c      	b.n	810b02a <UART_SetConfig+0x5a6>
 810afb0:	2380      	movs	r3, #128	; 0x80
 810afb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810afb6:	e038      	b.n	810b02a <UART_SetConfig+0x5a6>
 810afb8:	697b      	ldr	r3, [r7, #20]
 810afba:	681b      	ldr	r3, [r3, #0]
 810afbc:	4a5b      	ldr	r2, [pc, #364]	; (810b12c <UART_SetConfig+0x6a8>)
 810afbe:	4293      	cmp	r3, r2
 810afc0:	d130      	bne.n	810b024 <UART_SetConfig+0x5a0>
 810afc2:	4b57      	ldr	r3, [pc, #348]	; (810b120 <UART_SetConfig+0x69c>)
 810afc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810afc6:	f003 0307 	and.w	r3, r3, #7
 810afca:	2b05      	cmp	r3, #5
 810afcc:	d826      	bhi.n	810b01c <UART_SetConfig+0x598>
 810afce:	a201      	add	r2, pc, #4	; (adr r2, 810afd4 <UART_SetConfig+0x550>)
 810afd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810afd4:	0810afed 	.word	0x0810afed
 810afd8:	0810aff5 	.word	0x0810aff5
 810afdc:	0810affd 	.word	0x0810affd
 810afe0:	0810b005 	.word	0x0810b005
 810afe4:	0810b00d 	.word	0x0810b00d
 810afe8:	0810b015 	.word	0x0810b015
 810afec:	2302      	movs	r3, #2
 810afee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aff2:	e01a      	b.n	810b02a <UART_SetConfig+0x5a6>
 810aff4:	2304      	movs	r3, #4
 810aff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810affa:	e016      	b.n	810b02a <UART_SetConfig+0x5a6>
 810affc:	2308      	movs	r3, #8
 810affe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810b002:	e012      	b.n	810b02a <UART_SetConfig+0x5a6>
 810b004:	2310      	movs	r3, #16
 810b006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810b00a:	e00e      	b.n	810b02a <UART_SetConfig+0x5a6>
 810b00c:	2320      	movs	r3, #32
 810b00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810b012:	e00a      	b.n	810b02a <UART_SetConfig+0x5a6>
 810b014:	2340      	movs	r3, #64	; 0x40
 810b016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810b01a:	e006      	b.n	810b02a <UART_SetConfig+0x5a6>
 810b01c:	2380      	movs	r3, #128	; 0x80
 810b01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810b022:	e002      	b.n	810b02a <UART_SetConfig+0x5a6>
 810b024:	2380      	movs	r3, #128	; 0x80
 810b026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810b02a:	697b      	ldr	r3, [r7, #20]
 810b02c:	681b      	ldr	r3, [r3, #0]
 810b02e:	4a3f      	ldr	r2, [pc, #252]	; (810b12c <UART_SetConfig+0x6a8>)
 810b030:	4293      	cmp	r3, r2
 810b032:	f040 80f8 	bne.w	810b226 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810b036:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810b03a:	2b20      	cmp	r3, #32
 810b03c:	dc46      	bgt.n	810b0cc <UART_SetConfig+0x648>
 810b03e:	2b02      	cmp	r3, #2
 810b040:	f2c0 8082 	blt.w	810b148 <UART_SetConfig+0x6c4>
 810b044:	3b02      	subs	r3, #2
 810b046:	2b1e      	cmp	r3, #30
 810b048:	d87e      	bhi.n	810b148 <UART_SetConfig+0x6c4>
 810b04a:	a201      	add	r2, pc, #4	; (adr r2, 810b050 <UART_SetConfig+0x5cc>)
 810b04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b050:	0810b0d3 	.word	0x0810b0d3
 810b054:	0810b149 	.word	0x0810b149
 810b058:	0810b0db 	.word	0x0810b0db
 810b05c:	0810b149 	.word	0x0810b149
 810b060:	0810b149 	.word	0x0810b149
 810b064:	0810b149 	.word	0x0810b149
 810b068:	0810b0eb 	.word	0x0810b0eb
 810b06c:	0810b149 	.word	0x0810b149
 810b070:	0810b149 	.word	0x0810b149
 810b074:	0810b149 	.word	0x0810b149
 810b078:	0810b149 	.word	0x0810b149
 810b07c:	0810b149 	.word	0x0810b149
 810b080:	0810b149 	.word	0x0810b149
 810b084:	0810b149 	.word	0x0810b149
 810b088:	0810b0fb 	.word	0x0810b0fb
 810b08c:	0810b149 	.word	0x0810b149
 810b090:	0810b149 	.word	0x0810b149
 810b094:	0810b149 	.word	0x0810b149
 810b098:	0810b149 	.word	0x0810b149
 810b09c:	0810b149 	.word	0x0810b149
 810b0a0:	0810b149 	.word	0x0810b149
 810b0a4:	0810b149 	.word	0x0810b149
 810b0a8:	0810b149 	.word	0x0810b149
 810b0ac:	0810b149 	.word	0x0810b149
 810b0b0:	0810b149 	.word	0x0810b149
 810b0b4:	0810b149 	.word	0x0810b149
 810b0b8:	0810b149 	.word	0x0810b149
 810b0bc:	0810b149 	.word	0x0810b149
 810b0c0:	0810b149 	.word	0x0810b149
 810b0c4:	0810b149 	.word	0x0810b149
 810b0c8:	0810b13b 	.word	0x0810b13b
 810b0cc:	2b40      	cmp	r3, #64	; 0x40
 810b0ce:	d037      	beq.n	810b140 <UART_SetConfig+0x6bc>
 810b0d0:	e03a      	b.n	810b148 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b0d2:	f7fb fe6d 	bl	8106db0 <HAL_RCCEx_GetD3PCLK1Freq>
 810b0d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810b0d8:	e03c      	b.n	810b154 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b0da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b0de:	4618      	mov	r0, r3
 810b0e0:	f7fb fe7c 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b0e8:	e034      	b.n	810b154 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b0ea:	f107 0318 	add.w	r3, r7, #24
 810b0ee:	4618      	mov	r0, r3
 810b0f0:	f7fb ffc8 	bl	8107084 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b0f4:	69fb      	ldr	r3, [r7, #28]
 810b0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b0f8:	e02c      	b.n	810b154 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b0fa:	4b09      	ldr	r3, [pc, #36]	; (810b120 <UART_SetConfig+0x69c>)
 810b0fc:	681b      	ldr	r3, [r3, #0]
 810b0fe:	f003 0320 	and.w	r3, r3, #32
 810b102:	2b00      	cmp	r3, #0
 810b104:	d016      	beq.n	810b134 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b106:	4b06      	ldr	r3, [pc, #24]	; (810b120 <UART_SetConfig+0x69c>)
 810b108:	681b      	ldr	r3, [r3, #0]
 810b10a:	08db      	lsrs	r3, r3, #3
 810b10c:	f003 0303 	and.w	r3, r3, #3
 810b110:	4a07      	ldr	r2, [pc, #28]	; (810b130 <UART_SetConfig+0x6ac>)
 810b112:	fa22 f303 	lsr.w	r3, r2, r3
 810b116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b118:	e01c      	b.n	810b154 <UART_SetConfig+0x6d0>
 810b11a:	bf00      	nop
 810b11c:	40011400 	.word	0x40011400
 810b120:	58024400 	.word	0x58024400
 810b124:	40007800 	.word	0x40007800
 810b128:	40007c00 	.word	0x40007c00
 810b12c:	58000c00 	.word	0x58000c00
 810b130:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810b134:	4b9d      	ldr	r3, [pc, #628]	; (810b3ac <UART_SetConfig+0x928>)
 810b136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b138:	e00c      	b.n	810b154 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b13a:	4b9d      	ldr	r3, [pc, #628]	; (810b3b0 <UART_SetConfig+0x92c>)
 810b13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b13e:	e009      	b.n	810b154 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b146:	e005      	b.n	810b154 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810b148:	2300      	movs	r3, #0
 810b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810b14c:	2301      	movs	r3, #1
 810b14e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810b152:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810b154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b156:	2b00      	cmp	r3, #0
 810b158:	f000 81de 	beq.w	810b518 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810b15c:	697b      	ldr	r3, [r7, #20]
 810b15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b160:	4a94      	ldr	r2, [pc, #592]	; (810b3b4 <UART_SetConfig+0x930>)
 810b162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b166:	461a      	mov	r2, r3
 810b168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b16a:	fbb3 f3f2 	udiv	r3, r3, r2
 810b16e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b170:	697b      	ldr	r3, [r7, #20]
 810b172:	685a      	ldr	r2, [r3, #4]
 810b174:	4613      	mov	r3, r2
 810b176:	005b      	lsls	r3, r3, #1
 810b178:	4413      	add	r3, r2
 810b17a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810b17c:	429a      	cmp	r2, r3
 810b17e:	d305      	bcc.n	810b18c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810b180:	697b      	ldr	r3, [r7, #20]
 810b182:	685b      	ldr	r3, [r3, #4]
 810b184:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810b188:	429a      	cmp	r2, r3
 810b18a:	d903      	bls.n	810b194 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810b18c:	2301      	movs	r3, #1
 810b18e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810b192:	e1c1      	b.n	810b518 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b196:	2200      	movs	r2, #0
 810b198:	60bb      	str	r3, [r7, #8]
 810b19a:	60fa      	str	r2, [r7, #12]
 810b19c:	697b      	ldr	r3, [r7, #20]
 810b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b1a0:	4a84      	ldr	r2, [pc, #528]	; (810b3b4 <UART_SetConfig+0x930>)
 810b1a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b1a6:	b29b      	uxth	r3, r3
 810b1a8:	2200      	movs	r2, #0
 810b1aa:	603b      	str	r3, [r7, #0]
 810b1ac:	607a      	str	r2, [r7, #4]
 810b1ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b1b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810b1b6:	f7f5 f893 	bl	81002e0 <__aeabi_uldivmod>
 810b1ba:	4602      	mov	r2, r0
 810b1bc:	460b      	mov	r3, r1
 810b1be:	4610      	mov	r0, r2
 810b1c0:	4619      	mov	r1, r3
 810b1c2:	f04f 0200 	mov.w	r2, #0
 810b1c6:	f04f 0300 	mov.w	r3, #0
 810b1ca:	020b      	lsls	r3, r1, #8
 810b1cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810b1d0:	0202      	lsls	r2, r0, #8
 810b1d2:	6979      	ldr	r1, [r7, #20]
 810b1d4:	6849      	ldr	r1, [r1, #4]
 810b1d6:	0849      	lsrs	r1, r1, #1
 810b1d8:	2000      	movs	r0, #0
 810b1da:	460c      	mov	r4, r1
 810b1dc:	4605      	mov	r5, r0
 810b1de:	eb12 0804 	adds.w	r8, r2, r4
 810b1e2:	eb43 0905 	adc.w	r9, r3, r5
 810b1e6:	697b      	ldr	r3, [r7, #20]
 810b1e8:	685b      	ldr	r3, [r3, #4]
 810b1ea:	2200      	movs	r2, #0
 810b1ec:	469a      	mov	sl, r3
 810b1ee:	4693      	mov	fp, r2
 810b1f0:	4652      	mov	r2, sl
 810b1f2:	465b      	mov	r3, fp
 810b1f4:	4640      	mov	r0, r8
 810b1f6:	4649      	mov	r1, r9
 810b1f8:	f7f5 f872 	bl	81002e0 <__aeabi_uldivmod>
 810b1fc:	4602      	mov	r2, r0
 810b1fe:	460b      	mov	r3, r1
 810b200:	4613      	mov	r3, r2
 810b202:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810b20a:	d308      	bcc.n	810b21e <UART_SetConfig+0x79a>
 810b20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b20e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810b212:	d204      	bcs.n	810b21e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810b214:	697b      	ldr	r3, [r7, #20]
 810b216:	681b      	ldr	r3, [r3, #0]
 810b218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810b21a:	60da      	str	r2, [r3, #12]
 810b21c:	e17c      	b.n	810b518 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810b21e:	2301      	movs	r3, #1
 810b220:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810b224:	e178      	b.n	810b518 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810b226:	697b      	ldr	r3, [r7, #20]
 810b228:	69db      	ldr	r3, [r3, #28]
 810b22a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810b22e:	f040 80c5 	bne.w	810b3bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810b232:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810b236:	2b20      	cmp	r3, #32
 810b238:	dc48      	bgt.n	810b2cc <UART_SetConfig+0x848>
 810b23a:	2b00      	cmp	r3, #0
 810b23c:	db7b      	blt.n	810b336 <UART_SetConfig+0x8b2>
 810b23e:	2b20      	cmp	r3, #32
 810b240:	d879      	bhi.n	810b336 <UART_SetConfig+0x8b2>
 810b242:	a201      	add	r2, pc, #4	; (adr r2, 810b248 <UART_SetConfig+0x7c4>)
 810b244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b248:	0810b2d3 	.word	0x0810b2d3
 810b24c:	0810b2db 	.word	0x0810b2db
 810b250:	0810b337 	.word	0x0810b337
 810b254:	0810b337 	.word	0x0810b337
 810b258:	0810b2e3 	.word	0x0810b2e3
 810b25c:	0810b337 	.word	0x0810b337
 810b260:	0810b337 	.word	0x0810b337
 810b264:	0810b337 	.word	0x0810b337
 810b268:	0810b2f3 	.word	0x0810b2f3
 810b26c:	0810b337 	.word	0x0810b337
 810b270:	0810b337 	.word	0x0810b337
 810b274:	0810b337 	.word	0x0810b337
 810b278:	0810b337 	.word	0x0810b337
 810b27c:	0810b337 	.word	0x0810b337
 810b280:	0810b337 	.word	0x0810b337
 810b284:	0810b337 	.word	0x0810b337
 810b288:	0810b303 	.word	0x0810b303
 810b28c:	0810b337 	.word	0x0810b337
 810b290:	0810b337 	.word	0x0810b337
 810b294:	0810b337 	.word	0x0810b337
 810b298:	0810b337 	.word	0x0810b337
 810b29c:	0810b337 	.word	0x0810b337
 810b2a0:	0810b337 	.word	0x0810b337
 810b2a4:	0810b337 	.word	0x0810b337
 810b2a8:	0810b337 	.word	0x0810b337
 810b2ac:	0810b337 	.word	0x0810b337
 810b2b0:	0810b337 	.word	0x0810b337
 810b2b4:	0810b337 	.word	0x0810b337
 810b2b8:	0810b337 	.word	0x0810b337
 810b2bc:	0810b337 	.word	0x0810b337
 810b2c0:	0810b337 	.word	0x0810b337
 810b2c4:	0810b337 	.word	0x0810b337
 810b2c8:	0810b329 	.word	0x0810b329
 810b2cc:	2b40      	cmp	r3, #64	; 0x40
 810b2ce:	d02e      	beq.n	810b32e <UART_SetConfig+0x8aa>
 810b2d0:	e031      	b.n	810b336 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b2d2:	f7fa f8bf 	bl	8105454 <HAL_RCC_GetPCLK1Freq>
 810b2d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810b2d8:	e033      	b.n	810b342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b2da:	f7fa f8d1 	bl	8105480 <HAL_RCC_GetPCLK2Freq>
 810b2de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810b2e0:	e02f      	b.n	810b342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b2e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b2e6:	4618      	mov	r0, r3
 810b2e8:	f7fb fd78 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b2f0:	e027      	b.n	810b342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b2f2:	f107 0318 	add.w	r3, r7, #24
 810b2f6:	4618      	mov	r0, r3
 810b2f8:	f7fb fec4 	bl	8107084 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b2fc:	69fb      	ldr	r3, [r7, #28]
 810b2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b300:	e01f      	b.n	810b342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b302:	4b2d      	ldr	r3, [pc, #180]	; (810b3b8 <UART_SetConfig+0x934>)
 810b304:	681b      	ldr	r3, [r3, #0]
 810b306:	f003 0320 	and.w	r3, r3, #32
 810b30a:	2b00      	cmp	r3, #0
 810b30c:	d009      	beq.n	810b322 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b30e:	4b2a      	ldr	r3, [pc, #168]	; (810b3b8 <UART_SetConfig+0x934>)
 810b310:	681b      	ldr	r3, [r3, #0]
 810b312:	08db      	lsrs	r3, r3, #3
 810b314:	f003 0303 	and.w	r3, r3, #3
 810b318:	4a24      	ldr	r2, [pc, #144]	; (810b3ac <UART_SetConfig+0x928>)
 810b31a:	fa22 f303 	lsr.w	r3, r2, r3
 810b31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b320:	e00f      	b.n	810b342 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810b322:	4b22      	ldr	r3, [pc, #136]	; (810b3ac <UART_SetConfig+0x928>)
 810b324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b326:	e00c      	b.n	810b342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b328:	4b21      	ldr	r3, [pc, #132]	; (810b3b0 <UART_SetConfig+0x92c>)
 810b32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b32c:	e009      	b.n	810b342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b32e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b334:	e005      	b.n	810b342 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810b336:	2300      	movs	r3, #0
 810b338:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810b33a:	2301      	movs	r3, #1
 810b33c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810b340:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810b342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b344:	2b00      	cmp	r3, #0
 810b346:	f000 80e7 	beq.w	810b518 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b34a:	697b      	ldr	r3, [r7, #20]
 810b34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b34e:	4a19      	ldr	r2, [pc, #100]	; (810b3b4 <UART_SetConfig+0x930>)
 810b350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b354:	461a      	mov	r2, r3
 810b356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b358:	fbb3 f3f2 	udiv	r3, r3, r2
 810b35c:	005a      	lsls	r2, r3, #1
 810b35e:	697b      	ldr	r3, [r7, #20]
 810b360:	685b      	ldr	r3, [r3, #4]
 810b362:	085b      	lsrs	r3, r3, #1
 810b364:	441a      	add	r2, r3
 810b366:	697b      	ldr	r3, [r7, #20]
 810b368:	685b      	ldr	r3, [r3, #4]
 810b36a:	fbb2 f3f3 	udiv	r3, r2, r3
 810b36e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b372:	2b0f      	cmp	r3, #15
 810b374:	d916      	bls.n	810b3a4 <UART_SetConfig+0x920>
 810b376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b37c:	d212      	bcs.n	810b3a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810b37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b380:	b29b      	uxth	r3, r3
 810b382:	f023 030f 	bic.w	r3, r3, #15
 810b386:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810b388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b38a:	085b      	lsrs	r3, r3, #1
 810b38c:	b29b      	uxth	r3, r3
 810b38e:	f003 0307 	and.w	r3, r3, #7
 810b392:	b29a      	uxth	r2, r3
 810b394:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810b396:	4313      	orrs	r3, r2
 810b398:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810b39a:	697b      	ldr	r3, [r7, #20]
 810b39c:	681b      	ldr	r3, [r3, #0]
 810b39e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810b3a0:	60da      	str	r2, [r3, #12]
 810b3a2:	e0b9      	b.n	810b518 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810b3a4:	2301      	movs	r3, #1
 810b3a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810b3aa:	e0b5      	b.n	810b518 <UART_SetConfig+0xa94>
 810b3ac:	03d09000 	.word	0x03d09000
 810b3b0:	003d0900 	.word	0x003d0900
 810b3b4:	0810fd74 	.word	0x0810fd74
 810b3b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810b3bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810b3c0:	2b20      	cmp	r3, #32
 810b3c2:	dc49      	bgt.n	810b458 <UART_SetConfig+0x9d4>
 810b3c4:	2b00      	cmp	r3, #0
 810b3c6:	db7c      	blt.n	810b4c2 <UART_SetConfig+0xa3e>
 810b3c8:	2b20      	cmp	r3, #32
 810b3ca:	d87a      	bhi.n	810b4c2 <UART_SetConfig+0xa3e>
 810b3cc:	a201      	add	r2, pc, #4	; (adr r2, 810b3d4 <UART_SetConfig+0x950>)
 810b3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b3d2:	bf00      	nop
 810b3d4:	0810b45f 	.word	0x0810b45f
 810b3d8:	0810b467 	.word	0x0810b467
 810b3dc:	0810b4c3 	.word	0x0810b4c3
 810b3e0:	0810b4c3 	.word	0x0810b4c3
 810b3e4:	0810b46f 	.word	0x0810b46f
 810b3e8:	0810b4c3 	.word	0x0810b4c3
 810b3ec:	0810b4c3 	.word	0x0810b4c3
 810b3f0:	0810b4c3 	.word	0x0810b4c3
 810b3f4:	0810b47f 	.word	0x0810b47f
 810b3f8:	0810b4c3 	.word	0x0810b4c3
 810b3fc:	0810b4c3 	.word	0x0810b4c3
 810b400:	0810b4c3 	.word	0x0810b4c3
 810b404:	0810b4c3 	.word	0x0810b4c3
 810b408:	0810b4c3 	.word	0x0810b4c3
 810b40c:	0810b4c3 	.word	0x0810b4c3
 810b410:	0810b4c3 	.word	0x0810b4c3
 810b414:	0810b48f 	.word	0x0810b48f
 810b418:	0810b4c3 	.word	0x0810b4c3
 810b41c:	0810b4c3 	.word	0x0810b4c3
 810b420:	0810b4c3 	.word	0x0810b4c3
 810b424:	0810b4c3 	.word	0x0810b4c3
 810b428:	0810b4c3 	.word	0x0810b4c3
 810b42c:	0810b4c3 	.word	0x0810b4c3
 810b430:	0810b4c3 	.word	0x0810b4c3
 810b434:	0810b4c3 	.word	0x0810b4c3
 810b438:	0810b4c3 	.word	0x0810b4c3
 810b43c:	0810b4c3 	.word	0x0810b4c3
 810b440:	0810b4c3 	.word	0x0810b4c3
 810b444:	0810b4c3 	.word	0x0810b4c3
 810b448:	0810b4c3 	.word	0x0810b4c3
 810b44c:	0810b4c3 	.word	0x0810b4c3
 810b450:	0810b4c3 	.word	0x0810b4c3
 810b454:	0810b4b5 	.word	0x0810b4b5
 810b458:	2b40      	cmp	r3, #64	; 0x40
 810b45a:	d02e      	beq.n	810b4ba <UART_SetConfig+0xa36>
 810b45c:	e031      	b.n	810b4c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b45e:	f7f9 fff9 	bl	8105454 <HAL_RCC_GetPCLK1Freq>
 810b462:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810b464:	e033      	b.n	810b4ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b466:	f7fa f80b 	bl	8105480 <HAL_RCC_GetPCLK2Freq>
 810b46a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810b46c:	e02f      	b.n	810b4ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b46e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b472:	4618      	mov	r0, r3
 810b474:	f7fb fcb2 	bl	8106ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b47c:	e027      	b.n	810b4ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b47e:	f107 0318 	add.w	r3, r7, #24
 810b482:	4618      	mov	r0, r3
 810b484:	f7fb fdfe 	bl	8107084 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b488:	69fb      	ldr	r3, [r7, #28]
 810b48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b48c:	e01f      	b.n	810b4ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b48e:	4b2d      	ldr	r3, [pc, #180]	; (810b544 <UART_SetConfig+0xac0>)
 810b490:	681b      	ldr	r3, [r3, #0]
 810b492:	f003 0320 	and.w	r3, r3, #32
 810b496:	2b00      	cmp	r3, #0
 810b498:	d009      	beq.n	810b4ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b49a:	4b2a      	ldr	r3, [pc, #168]	; (810b544 <UART_SetConfig+0xac0>)
 810b49c:	681b      	ldr	r3, [r3, #0]
 810b49e:	08db      	lsrs	r3, r3, #3
 810b4a0:	f003 0303 	and.w	r3, r3, #3
 810b4a4:	4a28      	ldr	r2, [pc, #160]	; (810b548 <UART_SetConfig+0xac4>)
 810b4a6:	fa22 f303 	lsr.w	r3, r2, r3
 810b4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b4ac:	e00f      	b.n	810b4ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810b4ae:	4b26      	ldr	r3, [pc, #152]	; (810b548 <UART_SetConfig+0xac4>)
 810b4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b4b2:	e00c      	b.n	810b4ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b4b4:	4b25      	ldr	r3, [pc, #148]	; (810b54c <UART_SetConfig+0xac8>)
 810b4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b4b8:	e009      	b.n	810b4ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b4ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b4c0:	e005      	b.n	810b4ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810b4c2:	2300      	movs	r3, #0
 810b4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810b4c6:	2301      	movs	r3, #1
 810b4c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810b4cc:	bf00      	nop
    }

    if (pclk != 0U)
 810b4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b4d0:	2b00      	cmp	r3, #0
 810b4d2:	d021      	beq.n	810b518 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b4d4:	697b      	ldr	r3, [r7, #20]
 810b4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810b4d8:	4a1d      	ldr	r2, [pc, #116]	; (810b550 <UART_SetConfig+0xacc>)
 810b4da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b4de:	461a      	mov	r2, r3
 810b4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b4e2:	fbb3 f2f2 	udiv	r2, r3, r2
 810b4e6:	697b      	ldr	r3, [r7, #20]
 810b4e8:	685b      	ldr	r3, [r3, #4]
 810b4ea:	085b      	lsrs	r3, r3, #1
 810b4ec:	441a      	add	r2, r3
 810b4ee:	697b      	ldr	r3, [r7, #20]
 810b4f0:	685b      	ldr	r3, [r3, #4]
 810b4f2:	fbb2 f3f3 	udiv	r3, r2, r3
 810b4f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b4fa:	2b0f      	cmp	r3, #15
 810b4fc:	d909      	bls.n	810b512 <UART_SetConfig+0xa8e>
 810b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b504:	d205      	bcs.n	810b512 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b508:	b29a      	uxth	r2, r3
 810b50a:	697b      	ldr	r3, [r7, #20]
 810b50c:	681b      	ldr	r3, [r3, #0]
 810b50e:	60da      	str	r2, [r3, #12]
 810b510:	e002      	b.n	810b518 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810b512:	2301      	movs	r3, #1
 810b514:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810b518:	697b      	ldr	r3, [r7, #20]
 810b51a:	2201      	movs	r2, #1
 810b51c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810b520:	697b      	ldr	r3, [r7, #20]
 810b522:	2201      	movs	r2, #1
 810b524:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810b528:	697b      	ldr	r3, [r7, #20]
 810b52a:	2200      	movs	r2, #0
 810b52c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810b52e:	697b      	ldr	r3, [r7, #20]
 810b530:	2200      	movs	r2, #0
 810b532:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810b534:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810b538:	4618      	mov	r0, r3
 810b53a:	3748      	adds	r7, #72	; 0x48
 810b53c:	46bd      	mov	sp, r7
 810b53e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b542:	bf00      	nop
 810b544:	58024400 	.word	0x58024400
 810b548:	03d09000 	.word	0x03d09000
 810b54c:	003d0900 	.word	0x003d0900
 810b550:	0810fd74 	.word	0x0810fd74

0810b554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810b554:	b480      	push	{r7}
 810b556:	b083      	sub	sp, #12
 810b558:	af00      	add	r7, sp, #0
 810b55a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810b55c:	687b      	ldr	r3, [r7, #4]
 810b55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b560:	f003 0301 	and.w	r3, r3, #1
 810b564:	2b00      	cmp	r3, #0
 810b566:	d00a      	beq.n	810b57e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810b568:	687b      	ldr	r3, [r7, #4]
 810b56a:	681b      	ldr	r3, [r3, #0]
 810b56c:	685b      	ldr	r3, [r3, #4]
 810b56e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810b572:	687b      	ldr	r3, [r7, #4]
 810b574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b576:	687b      	ldr	r3, [r7, #4]
 810b578:	681b      	ldr	r3, [r3, #0]
 810b57a:	430a      	orrs	r2, r1
 810b57c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810b57e:	687b      	ldr	r3, [r7, #4]
 810b580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b582:	f003 0302 	and.w	r3, r3, #2
 810b586:	2b00      	cmp	r3, #0
 810b588:	d00a      	beq.n	810b5a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810b58a:	687b      	ldr	r3, [r7, #4]
 810b58c:	681b      	ldr	r3, [r3, #0]
 810b58e:	685b      	ldr	r3, [r3, #4]
 810b590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810b594:	687b      	ldr	r3, [r7, #4]
 810b596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810b598:	687b      	ldr	r3, [r7, #4]
 810b59a:	681b      	ldr	r3, [r3, #0]
 810b59c:	430a      	orrs	r2, r1
 810b59e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810b5a0:	687b      	ldr	r3, [r7, #4]
 810b5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b5a4:	f003 0304 	and.w	r3, r3, #4
 810b5a8:	2b00      	cmp	r3, #0
 810b5aa:	d00a      	beq.n	810b5c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810b5ac:	687b      	ldr	r3, [r7, #4]
 810b5ae:	681b      	ldr	r3, [r3, #0]
 810b5b0:	685b      	ldr	r3, [r3, #4]
 810b5b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810b5b6:	687b      	ldr	r3, [r7, #4]
 810b5b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810b5ba:	687b      	ldr	r3, [r7, #4]
 810b5bc:	681b      	ldr	r3, [r3, #0]
 810b5be:	430a      	orrs	r2, r1
 810b5c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810b5c2:	687b      	ldr	r3, [r7, #4]
 810b5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b5c6:	f003 0308 	and.w	r3, r3, #8
 810b5ca:	2b00      	cmp	r3, #0
 810b5cc:	d00a      	beq.n	810b5e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810b5ce:	687b      	ldr	r3, [r7, #4]
 810b5d0:	681b      	ldr	r3, [r3, #0]
 810b5d2:	685b      	ldr	r3, [r3, #4]
 810b5d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810b5d8:	687b      	ldr	r3, [r7, #4]
 810b5da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810b5dc:	687b      	ldr	r3, [r7, #4]
 810b5de:	681b      	ldr	r3, [r3, #0]
 810b5e0:	430a      	orrs	r2, r1
 810b5e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810b5e4:	687b      	ldr	r3, [r7, #4]
 810b5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b5e8:	f003 0310 	and.w	r3, r3, #16
 810b5ec:	2b00      	cmp	r3, #0
 810b5ee:	d00a      	beq.n	810b606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810b5f0:	687b      	ldr	r3, [r7, #4]
 810b5f2:	681b      	ldr	r3, [r3, #0]
 810b5f4:	689b      	ldr	r3, [r3, #8]
 810b5f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810b5fa:	687b      	ldr	r3, [r7, #4]
 810b5fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810b5fe:	687b      	ldr	r3, [r7, #4]
 810b600:	681b      	ldr	r3, [r3, #0]
 810b602:	430a      	orrs	r2, r1
 810b604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810b606:	687b      	ldr	r3, [r7, #4]
 810b608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b60a:	f003 0320 	and.w	r3, r3, #32
 810b60e:	2b00      	cmp	r3, #0
 810b610:	d00a      	beq.n	810b628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810b612:	687b      	ldr	r3, [r7, #4]
 810b614:	681b      	ldr	r3, [r3, #0]
 810b616:	689b      	ldr	r3, [r3, #8]
 810b618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810b61c:	687b      	ldr	r3, [r7, #4]
 810b61e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810b620:	687b      	ldr	r3, [r7, #4]
 810b622:	681b      	ldr	r3, [r3, #0]
 810b624:	430a      	orrs	r2, r1
 810b626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810b628:	687b      	ldr	r3, [r7, #4]
 810b62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b630:	2b00      	cmp	r3, #0
 810b632:	d01a      	beq.n	810b66a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810b634:	687b      	ldr	r3, [r7, #4]
 810b636:	681b      	ldr	r3, [r3, #0]
 810b638:	685b      	ldr	r3, [r3, #4]
 810b63a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810b63e:	687b      	ldr	r3, [r7, #4]
 810b640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810b642:	687b      	ldr	r3, [r7, #4]
 810b644:	681b      	ldr	r3, [r3, #0]
 810b646:	430a      	orrs	r2, r1
 810b648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810b64a:	687b      	ldr	r3, [r7, #4]
 810b64c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b64e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810b652:	d10a      	bne.n	810b66a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810b654:	687b      	ldr	r3, [r7, #4]
 810b656:	681b      	ldr	r3, [r3, #0]
 810b658:	685b      	ldr	r3, [r3, #4]
 810b65a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810b65e:	687b      	ldr	r3, [r7, #4]
 810b660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810b662:	687b      	ldr	r3, [r7, #4]
 810b664:	681b      	ldr	r3, [r3, #0]
 810b666:	430a      	orrs	r2, r1
 810b668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810b66a:	687b      	ldr	r3, [r7, #4]
 810b66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b672:	2b00      	cmp	r3, #0
 810b674:	d00a      	beq.n	810b68c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810b676:	687b      	ldr	r3, [r7, #4]
 810b678:	681b      	ldr	r3, [r3, #0]
 810b67a:	685b      	ldr	r3, [r3, #4]
 810b67c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810b680:	687b      	ldr	r3, [r7, #4]
 810b682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810b684:	687b      	ldr	r3, [r7, #4]
 810b686:	681b      	ldr	r3, [r3, #0]
 810b688:	430a      	orrs	r2, r1
 810b68a:	605a      	str	r2, [r3, #4]
  }
}
 810b68c:	bf00      	nop
 810b68e:	370c      	adds	r7, #12
 810b690:	46bd      	mov	sp, r7
 810b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b696:	4770      	bx	lr

0810b698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810b698:	b580      	push	{r7, lr}
 810b69a:	b086      	sub	sp, #24
 810b69c:	af02      	add	r7, sp, #8
 810b69e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b6a0:	687b      	ldr	r3, [r7, #4]
 810b6a2:	2200      	movs	r2, #0
 810b6a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810b6a8:	f7f7 f922 	bl	81028f0 <HAL_GetTick>
 810b6ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810b6ae:	687b      	ldr	r3, [r7, #4]
 810b6b0:	681b      	ldr	r3, [r3, #0]
 810b6b2:	681b      	ldr	r3, [r3, #0]
 810b6b4:	f003 0308 	and.w	r3, r3, #8
 810b6b8:	2b08      	cmp	r3, #8
 810b6ba:	d10e      	bne.n	810b6da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b6bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810b6c0:	9300      	str	r3, [sp, #0]
 810b6c2:	68fb      	ldr	r3, [r7, #12]
 810b6c4:	2200      	movs	r2, #0
 810b6c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810b6ca:	6878      	ldr	r0, [r7, #4]
 810b6cc:	f000 f82f 	bl	810b72e <UART_WaitOnFlagUntilTimeout>
 810b6d0:	4603      	mov	r3, r0
 810b6d2:	2b00      	cmp	r3, #0
 810b6d4:	d001      	beq.n	810b6da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b6d6:	2303      	movs	r3, #3
 810b6d8:	e025      	b.n	810b726 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810b6da:	687b      	ldr	r3, [r7, #4]
 810b6dc:	681b      	ldr	r3, [r3, #0]
 810b6de:	681b      	ldr	r3, [r3, #0]
 810b6e0:	f003 0304 	and.w	r3, r3, #4
 810b6e4:	2b04      	cmp	r3, #4
 810b6e6:	d10e      	bne.n	810b706 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b6e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810b6ec:	9300      	str	r3, [sp, #0]
 810b6ee:	68fb      	ldr	r3, [r7, #12]
 810b6f0:	2200      	movs	r2, #0
 810b6f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810b6f6:	6878      	ldr	r0, [r7, #4]
 810b6f8:	f000 f819 	bl	810b72e <UART_WaitOnFlagUntilTimeout>
 810b6fc:	4603      	mov	r3, r0
 810b6fe:	2b00      	cmp	r3, #0
 810b700:	d001      	beq.n	810b706 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b702:	2303      	movs	r3, #3
 810b704:	e00f      	b.n	810b726 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810b706:	687b      	ldr	r3, [r7, #4]
 810b708:	2220      	movs	r2, #32
 810b70a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810b70e:	687b      	ldr	r3, [r7, #4]
 810b710:	2220      	movs	r2, #32
 810b712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b716:	687b      	ldr	r3, [r7, #4]
 810b718:	2200      	movs	r2, #0
 810b71a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810b71c:	687b      	ldr	r3, [r7, #4]
 810b71e:	2200      	movs	r2, #0
 810b720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b724:	2300      	movs	r3, #0
}
 810b726:	4618      	mov	r0, r3
 810b728:	3710      	adds	r7, #16
 810b72a:	46bd      	mov	sp, r7
 810b72c:	bd80      	pop	{r7, pc}

0810b72e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810b72e:	b580      	push	{r7, lr}
 810b730:	b09c      	sub	sp, #112	; 0x70
 810b732:	af00      	add	r7, sp, #0
 810b734:	60f8      	str	r0, [r7, #12]
 810b736:	60b9      	str	r1, [r7, #8]
 810b738:	603b      	str	r3, [r7, #0]
 810b73a:	4613      	mov	r3, r2
 810b73c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b73e:	e0a9      	b.n	810b894 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810b740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810b742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810b746:	f000 80a5 	beq.w	810b894 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810b74a:	f7f7 f8d1 	bl	81028f0 <HAL_GetTick>
 810b74e:	4602      	mov	r2, r0
 810b750:	683b      	ldr	r3, [r7, #0]
 810b752:	1ad3      	subs	r3, r2, r3
 810b754:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810b756:	429a      	cmp	r2, r3
 810b758:	d302      	bcc.n	810b760 <UART_WaitOnFlagUntilTimeout+0x32>
 810b75a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810b75c:	2b00      	cmp	r3, #0
 810b75e:	d140      	bne.n	810b7e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810b760:	68fb      	ldr	r3, [r7, #12]
 810b762:	681b      	ldr	r3, [r3, #0]
 810b764:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810b768:	e853 3f00 	ldrex	r3, [r3]
 810b76c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810b76e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810b770:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810b774:	667b      	str	r3, [r7, #100]	; 0x64
 810b776:	68fb      	ldr	r3, [r7, #12]
 810b778:	681b      	ldr	r3, [r3, #0]
 810b77a:	461a      	mov	r2, r3
 810b77c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810b77e:	65fb      	str	r3, [r7, #92]	; 0x5c
 810b780:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b782:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810b784:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810b786:	e841 2300 	strex	r3, r2, [r1]
 810b78a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 810b78c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810b78e:	2b00      	cmp	r3, #0
 810b790:	d1e6      	bne.n	810b760 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b792:	68fb      	ldr	r3, [r7, #12]
 810b794:	681b      	ldr	r3, [r3, #0]
 810b796:	3308      	adds	r3, #8
 810b798:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b79c:	e853 3f00 	ldrex	r3, [r3]
 810b7a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810b7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b7a4:	f023 0301 	bic.w	r3, r3, #1
 810b7a8:	663b      	str	r3, [r7, #96]	; 0x60
 810b7aa:	68fb      	ldr	r3, [r7, #12]
 810b7ac:	681b      	ldr	r3, [r3, #0]
 810b7ae:	3308      	adds	r3, #8
 810b7b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810b7b2:	64ba      	str	r2, [r7, #72]	; 0x48
 810b7b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b7b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810b7b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810b7ba:	e841 2300 	strex	r3, r2, [r1]
 810b7be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810b7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810b7c2:	2b00      	cmp	r3, #0
 810b7c4:	d1e5      	bne.n	810b792 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810b7c6:	68fb      	ldr	r3, [r7, #12]
 810b7c8:	2220      	movs	r2, #32
 810b7ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810b7ce:	68fb      	ldr	r3, [r7, #12]
 810b7d0:	2220      	movs	r2, #32
 810b7d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810b7d6:	68fb      	ldr	r3, [r7, #12]
 810b7d8:	2200      	movs	r2, #0
 810b7da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810b7de:	2303      	movs	r3, #3
 810b7e0:	e069      	b.n	810b8b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810b7e2:	68fb      	ldr	r3, [r7, #12]
 810b7e4:	681b      	ldr	r3, [r3, #0]
 810b7e6:	681b      	ldr	r3, [r3, #0]
 810b7e8:	f003 0304 	and.w	r3, r3, #4
 810b7ec:	2b00      	cmp	r3, #0
 810b7ee:	d051      	beq.n	810b894 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810b7f0:	68fb      	ldr	r3, [r7, #12]
 810b7f2:	681b      	ldr	r3, [r3, #0]
 810b7f4:	69db      	ldr	r3, [r3, #28]
 810b7f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810b7fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810b7fe:	d149      	bne.n	810b894 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b800:	68fb      	ldr	r3, [r7, #12]
 810b802:	681b      	ldr	r3, [r3, #0]
 810b804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810b808:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810b80a:	68fb      	ldr	r3, [r7, #12]
 810b80c:	681b      	ldr	r3, [r3, #0]
 810b80e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b812:	e853 3f00 	ldrex	r3, [r3]
 810b816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b81a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810b81e:	66fb      	str	r3, [r7, #108]	; 0x6c
 810b820:	68fb      	ldr	r3, [r7, #12]
 810b822:	681b      	ldr	r3, [r3, #0]
 810b824:	461a      	mov	r2, r3
 810b826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810b828:	637b      	str	r3, [r7, #52]	; 0x34
 810b82a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b82c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810b82e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810b830:	e841 2300 	strex	r3, r2, [r1]
 810b834:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b838:	2b00      	cmp	r3, #0
 810b83a:	d1e6      	bne.n	810b80a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b83c:	68fb      	ldr	r3, [r7, #12]
 810b83e:	681b      	ldr	r3, [r3, #0]
 810b840:	3308      	adds	r3, #8
 810b842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b844:	697b      	ldr	r3, [r7, #20]
 810b846:	e853 3f00 	ldrex	r3, [r3]
 810b84a:	613b      	str	r3, [r7, #16]
   return(result);
 810b84c:	693b      	ldr	r3, [r7, #16]
 810b84e:	f023 0301 	bic.w	r3, r3, #1
 810b852:	66bb      	str	r3, [r7, #104]	; 0x68
 810b854:	68fb      	ldr	r3, [r7, #12]
 810b856:	681b      	ldr	r3, [r3, #0]
 810b858:	3308      	adds	r3, #8
 810b85a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810b85c:	623a      	str	r2, [r7, #32]
 810b85e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b860:	69f9      	ldr	r1, [r7, #28]
 810b862:	6a3a      	ldr	r2, [r7, #32]
 810b864:	e841 2300 	strex	r3, r2, [r1]
 810b868:	61bb      	str	r3, [r7, #24]
   return(result);
 810b86a:	69bb      	ldr	r3, [r7, #24]
 810b86c:	2b00      	cmp	r3, #0
 810b86e:	d1e5      	bne.n	810b83c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810b870:	68fb      	ldr	r3, [r7, #12]
 810b872:	2220      	movs	r2, #32
 810b874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810b878:	68fb      	ldr	r3, [r7, #12]
 810b87a:	2220      	movs	r2, #32
 810b87c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810b880:	68fb      	ldr	r3, [r7, #12]
 810b882:	2220      	movs	r2, #32
 810b884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b888:	68fb      	ldr	r3, [r7, #12]
 810b88a:	2200      	movs	r2, #0
 810b88c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810b890:	2303      	movs	r3, #3
 810b892:	e010      	b.n	810b8b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b894:	68fb      	ldr	r3, [r7, #12]
 810b896:	681b      	ldr	r3, [r3, #0]
 810b898:	69da      	ldr	r2, [r3, #28]
 810b89a:	68bb      	ldr	r3, [r7, #8]
 810b89c:	4013      	ands	r3, r2
 810b89e:	68ba      	ldr	r2, [r7, #8]
 810b8a0:	429a      	cmp	r2, r3
 810b8a2:	bf0c      	ite	eq
 810b8a4:	2301      	moveq	r3, #1
 810b8a6:	2300      	movne	r3, #0
 810b8a8:	b2db      	uxtb	r3, r3
 810b8aa:	461a      	mov	r2, r3
 810b8ac:	79fb      	ldrb	r3, [r7, #7]
 810b8ae:	429a      	cmp	r2, r3
 810b8b0:	f43f af46 	beq.w	810b740 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810b8b4:	2300      	movs	r3, #0
}
 810b8b6:	4618      	mov	r0, r3
 810b8b8:	3770      	adds	r7, #112	; 0x70
 810b8ba:	46bd      	mov	sp, r7
 810b8bc:	bd80      	pop	{r7, pc}

0810b8be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b8be:	b480      	push	{r7}
 810b8c0:	b085      	sub	sp, #20
 810b8c2:	af00      	add	r7, sp, #0
 810b8c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b8c6:	687b      	ldr	r3, [r7, #4]
 810b8c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b8cc:	2b01      	cmp	r3, #1
 810b8ce:	d101      	bne.n	810b8d4 <HAL_UARTEx_DisableFifoMode+0x16>
 810b8d0:	2302      	movs	r3, #2
 810b8d2:	e027      	b.n	810b924 <HAL_UARTEx_DisableFifoMode+0x66>
 810b8d4:	687b      	ldr	r3, [r7, #4]
 810b8d6:	2201      	movs	r2, #1
 810b8d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810b8dc:	687b      	ldr	r3, [r7, #4]
 810b8de:	2224      	movs	r2, #36	; 0x24
 810b8e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b8e4:	687b      	ldr	r3, [r7, #4]
 810b8e6:	681b      	ldr	r3, [r3, #0]
 810b8e8:	681b      	ldr	r3, [r3, #0]
 810b8ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b8ec:	687b      	ldr	r3, [r7, #4]
 810b8ee:	681b      	ldr	r3, [r3, #0]
 810b8f0:	681a      	ldr	r2, [r3, #0]
 810b8f2:	687b      	ldr	r3, [r7, #4]
 810b8f4:	681b      	ldr	r3, [r3, #0]
 810b8f6:	f022 0201 	bic.w	r2, r2, #1
 810b8fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b8fc:	68fb      	ldr	r3, [r7, #12]
 810b8fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810b902:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b904:	687b      	ldr	r3, [r7, #4]
 810b906:	2200      	movs	r2, #0
 810b908:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b90a:	687b      	ldr	r3, [r7, #4]
 810b90c:	681b      	ldr	r3, [r3, #0]
 810b90e:	68fa      	ldr	r2, [r7, #12]
 810b910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b912:	687b      	ldr	r3, [r7, #4]
 810b914:	2220      	movs	r2, #32
 810b916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b91a:	687b      	ldr	r3, [r7, #4]
 810b91c:	2200      	movs	r2, #0
 810b91e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b922:	2300      	movs	r3, #0
}
 810b924:	4618      	mov	r0, r3
 810b926:	3714      	adds	r7, #20
 810b928:	46bd      	mov	sp, r7
 810b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b92e:	4770      	bx	lr

0810b930 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b930:	b580      	push	{r7, lr}
 810b932:	b084      	sub	sp, #16
 810b934:	af00      	add	r7, sp, #0
 810b936:	6078      	str	r0, [r7, #4]
 810b938:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b93a:	687b      	ldr	r3, [r7, #4]
 810b93c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b940:	2b01      	cmp	r3, #1
 810b942:	d101      	bne.n	810b948 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b944:	2302      	movs	r3, #2
 810b946:	e02d      	b.n	810b9a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b948:	687b      	ldr	r3, [r7, #4]
 810b94a:	2201      	movs	r2, #1
 810b94c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810b950:	687b      	ldr	r3, [r7, #4]
 810b952:	2224      	movs	r2, #36	; 0x24
 810b954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b958:	687b      	ldr	r3, [r7, #4]
 810b95a:	681b      	ldr	r3, [r3, #0]
 810b95c:	681b      	ldr	r3, [r3, #0]
 810b95e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b960:	687b      	ldr	r3, [r7, #4]
 810b962:	681b      	ldr	r3, [r3, #0]
 810b964:	681a      	ldr	r2, [r3, #0]
 810b966:	687b      	ldr	r3, [r7, #4]
 810b968:	681b      	ldr	r3, [r3, #0]
 810b96a:	f022 0201 	bic.w	r2, r2, #1
 810b96e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b970:	687b      	ldr	r3, [r7, #4]
 810b972:	681b      	ldr	r3, [r3, #0]
 810b974:	689b      	ldr	r3, [r3, #8]
 810b976:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810b97a:	687b      	ldr	r3, [r7, #4]
 810b97c:	681b      	ldr	r3, [r3, #0]
 810b97e:	683a      	ldr	r2, [r7, #0]
 810b980:	430a      	orrs	r2, r1
 810b982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b984:	6878      	ldr	r0, [r7, #4]
 810b986:	f000 f84f 	bl	810ba28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b98a:	687b      	ldr	r3, [r7, #4]
 810b98c:	681b      	ldr	r3, [r3, #0]
 810b98e:	68fa      	ldr	r2, [r7, #12]
 810b990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b992:	687b      	ldr	r3, [r7, #4]
 810b994:	2220      	movs	r2, #32
 810b996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b99a:	687b      	ldr	r3, [r7, #4]
 810b99c:	2200      	movs	r2, #0
 810b99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810b9a2:	2300      	movs	r3, #0
}
 810b9a4:	4618      	mov	r0, r3
 810b9a6:	3710      	adds	r7, #16
 810b9a8:	46bd      	mov	sp, r7
 810b9aa:	bd80      	pop	{r7, pc}

0810b9ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b9ac:	b580      	push	{r7, lr}
 810b9ae:	b084      	sub	sp, #16
 810b9b0:	af00      	add	r7, sp, #0
 810b9b2:	6078      	str	r0, [r7, #4]
 810b9b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b9b6:	687b      	ldr	r3, [r7, #4]
 810b9b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b9bc:	2b01      	cmp	r3, #1
 810b9be:	d101      	bne.n	810b9c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b9c0:	2302      	movs	r3, #2
 810b9c2:	e02d      	b.n	810ba20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b9c4:	687b      	ldr	r3, [r7, #4]
 810b9c6:	2201      	movs	r2, #1
 810b9c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810b9cc:	687b      	ldr	r3, [r7, #4]
 810b9ce:	2224      	movs	r2, #36	; 0x24
 810b9d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b9d4:	687b      	ldr	r3, [r7, #4]
 810b9d6:	681b      	ldr	r3, [r3, #0]
 810b9d8:	681b      	ldr	r3, [r3, #0]
 810b9da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b9dc:	687b      	ldr	r3, [r7, #4]
 810b9de:	681b      	ldr	r3, [r3, #0]
 810b9e0:	681a      	ldr	r2, [r3, #0]
 810b9e2:	687b      	ldr	r3, [r7, #4]
 810b9e4:	681b      	ldr	r3, [r3, #0]
 810b9e6:	f022 0201 	bic.w	r2, r2, #1
 810b9ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810b9ec:	687b      	ldr	r3, [r7, #4]
 810b9ee:	681b      	ldr	r3, [r3, #0]
 810b9f0:	689b      	ldr	r3, [r3, #8]
 810b9f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810b9f6:	687b      	ldr	r3, [r7, #4]
 810b9f8:	681b      	ldr	r3, [r3, #0]
 810b9fa:	683a      	ldr	r2, [r7, #0]
 810b9fc:	430a      	orrs	r2, r1
 810b9fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ba00:	6878      	ldr	r0, [r7, #4]
 810ba02:	f000 f811 	bl	810ba28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ba06:	687b      	ldr	r3, [r7, #4]
 810ba08:	681b      	ldr	r3, [r3, #0]
 810ba0a:	68fa      	ldr	r2, [r7, #12]
 810ba0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ba0e:	687b      	ldr	r3, [r7, #4]
 810ba10:	2220      	movs	r2, #32
 810ba12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ba16:	687b      	ldr	r3, [r7, #4]
 810ba18:	2200      	movs	r2, #0
 810ba1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810ba1e:	2300      	movs	r3, #0
}
 810ba20:	4618      	mov	r0, r3
 810ba22:	3710      	adds	r7, #16
 810ba24:	46bd      	mov	sp, r7
 810ba26:	bd80      	pop	{r7, pc}

0810ba28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810ba28:	b480      	push	{r7}
 810ba2a:	b085      	sub	sp, #20
 810ba2c:	af00      	add	r7, sp, #0
 810ba2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810ba30:	687b      	ldr	r3, [r7, #4]
 810ba32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba34:	2b00      	cmp	r3, #0
 810ba36:	d108      	bne.n	810ba4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810ba38:	687b      	ldr	r3, [r7, #4]
 810ba3a:	2201      	movs	r2, #1
 810ba3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810ba40:	687b      	ldr	r3, [r7, #4]
 810ba42:	2201      	movs	r2, #1
 810ba44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810ba48:	e031      	b.n	810baae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810ba4a:	2310      	movs	r3, #16
 810ba4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ba4e:	2310      	movs	r3, #16
 810ba50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ba52:	687b      	ldr	r3, [r7, #4]
 810ba54:	681b      	ldr	r3, [r3, #0]
 810ba56:	689b      	ldr	r3, [r3, #8]
 810ba58:	0e5b      	lsrs	r3, r3, #25
 810ba5a:	b2db      	uxtb	r3, r3
 810ba5c:	f003 0307 	and.w	r3, r3, #7
 810ba60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ba62:	687b      	ldr	r3, [r7, #4]
 810ba64:	681b      	ldr	r3, [r3, #0]
 810ba66:	689b      	ldr	r3, [r3, #8]
 810ba68:	0f5b      	lsrs	r3, r3, #29
 810ba6a:	b2db      	uxtb	r3, r3
 810ba6c:	f003 0307 	and.w	r3, r3, #7
 810ba70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ba72:	7bbb      	ldrb	r3, [r7, #14]
 810ba74:	7b3a      	ldrb	r2, [r7, #12]
 810ba76:	4911      	ldr	r1, [pc, #68]	; (810babc <UARTEx_SetNbDataToProcess+0x94>)
 810ba78:	5c8a      	ldrb	r2, [r1, r2]
 810ba7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810ba7e:	7b3a      	ldrb	r2, [r7, #12]
 810ba80:	490f      	ldr	r1, [pc, #60]	; (810bac0 <UARTEx_SetNbDataToProcess+0x98>)
 810ba82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ba84:	fb93 f3f2 	sdiv	r3, r3, r2
 810ba88:	b29a      	uxth	r2, r3
 810ba8a:	687b      	ldr	r3, [r7, #4]
 810ba8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ba90:	7bfb      	ldrb	r3, [r7, #15]
 810ba92:	7b7a      	ldrb	r2, [r7, #13]
 810ba94:	4909      	ldr	r1, [pc, #36]	; (810babc <UARTEx_SetNbDataToProcess+0x94>)
 810ba96:	5c8a      	ldrb	r2, [r1, r2]
 810ba98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810ba9c:	7b7a      	ldrb	r2, [r7, #13]
 810ba9e:	4908      	ldr	r1, [pc, #32]	; (810bac0 <UARTEx_SetNbDataToProcess+0x98>)
 810baa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810baa2:	fb93 f3f2 	sdiv	r3, r3, r2
 810baa6:	b29a      	uxth	r2, r3
 810baa8:	687b      	ldr	r3, [r7, #4]
 810baaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810baae:	bf00      	nop
 810bab0:	3714      	adds	r7, #20
 810bab2:	46bd      	mov	sp, r7
 810bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bab8:	4770      	bx	lr
 810baba:	bf00      	nop
 810babc:	0810fd8c 	.word	0x0810fd8c
 810bac0:	0810fd94 	.word	0x0810fd94

0810bac4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 810bac4:	b480      	push	{r7}
 810bac6:	b083      	sub	sp, #12
 810bac8:	af00      	add	r7, sp, #0
 810baca:	6078      	str	r0, [r7, #4]
 810bacc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810bace:	683b      	ldr	r3, [r7, #0]
 810bad0:	681b      	ldr	r3, [r3, #0]
 810bad2:	2b00      	cmp	r3, #0
 810bad4:	d123      	bne.n	810bb1e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810bad6:	687b      	ldr	r3, [r7, #4]
 810bad8:	681b      	ldr	r3, [r3, #0]
 810bada:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810bade:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810bae2:	683a      	ldr	r2, [r7, #0]
 810bae4:	6851      	ldr	r1, [r2, #4]
 810bae6:	683a      	ldr	r2, [r7, #0]
 810bae8:	6892      	ldr	r2, [r2, #8]
 810baea:	4311      	orrs	r1, r2
 810baec:	683a      	ldr	r2, [r7, #0]
 810baee:	68d2      	ldr	r2, [r2, #12]
 810baf0:	4311      	orrs	r1, r2
 810baf2:	683a      	ldr	r2, [r7, #0]
 810baf4:	6912      	ldr	r2, [r2, #16]
 810baf6:	4311      	orrs	r1, r2
 810baf8:	683a      	ldr	r2, [r7, #0]
 810bafa:	6952      	ldr	r2, [r2, #20]
 810bafc:	4311      	orrs	r1, r2
 810bafe:	683a      	ldr	r2, [r7, #0]
 810bb00:	6992      	ldr	r2, [r2, #24]
 810bb02:	4311      	orrs	r1, r2
 810bb04:	683a      	ldr	r2, [r7, #0]
 810bb06:	69d2      	ldr	r2, [r2, #28]
 810bb08:	4311      	orrs	r1, r2
 810bb0a:	683a      	ldr	r2, [r7, #0]
 810bb0c:	6a12      	ldr	r2, [r2, #32]
 810bb0e:	4311      	orrs	r1, r2
 810bb10:	683a      	ldr	r2, [r7, #0]
 810bb12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 810bb14:	430a      	orrs	r2, r1
 810bb16:	431a      	orrs	r2, r3
 810bb18:	687b      	ldr	r3, [r7, #4]
 810bb1a:	601a      	str	r2, [r3, #0]
 810bb1c:	e028      	b.n	810bb70 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810bb1e:	687b      	ldr	r3, [r7, #4]
 810bb20:	681b      	ldr	r3, [r3, #0]
 810bb22:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 810bb26:	683b      	ldr	r3, [r7, #0]
 810bb28:	69d9      	ldr	r1, [r3, #28]
 810bb2a:	683b      	ldr	r3, [r7, #0]
 810bb2c:	6a1b      	ldr	r3, [r3, #32]
 810bb2e:	4319      	orrs	r1, r3
 810bb30:	683b      	ldr	r3, [r7, #0]
 810bb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bb34:	430b      	orrs	r3, r1
 810bb36:	431a      	orrs	r2, r3
 810bb38:	687b      	ldr	r3, [r7, #4]
 810bb3a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 810bb3c:	687b      	ldr	r3, [r7, #4]
 810bb3e:	685b      	ldr	r3, [r3, #4]
 810bb40:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810bb44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810bb48:	683a      	ldr	r2, [r7, #0]
 810bb4a:	6851      	ldr	r1, [r2, #4]
 810bb4c:	683a      	ldr	r2, [r7, #0]
 810bb4e:	6892      	ldr	r2, [r2, #8]
 810bb50:	4311      	orrs	r1, r2
 810bb52:	683a      	ldr	r2, [r7, #0]
 810bb54:	68d2      	ldr	r2, [r2, #12]
 810bb56:	4311      	orrs	r1, r2
 810bb58:	683a      	ldr	r2, [r7, #0]
 810bb5a:	6912      	ldr	r2, [r2, #16]
 810bb5c:	4311      	orrs	r1, r2
 810bb5e:	683a      	ldr	r2, [r7, #0]
 810bb60:	6952      	ldr	r2, [r2, #20]
 810bb62:	4311      	orrs	r1, r2
 810bb64:	683a      	ldr	r2, [r7, #0]
 810bb66:	6992      	ldr	r2, [r2, #24]
 810bb68:	430a      	orrs	r2, r1
 810bb6a:	431a      	orrs	r2, r3
 810bb6c:	687b      	ldr	r3, [r7, #4]
 810bb6e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 810bb70:	2300      	movs	r3, #0
}
 810bb72:	4618      	mov	r0, r3
 810bb74:	370c      	adds	r7, #12
 810bb76:	46bd      	mov	sp, r7
 810bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb7c:	4770      	bx	lr

0810bb7e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810bb7e:	b480      	push	{r7}
 810bb80:	b085      	sub	sp, #20
 810bb82:	af00      	add	r7, sp, #0
 810bb84:	60f8      	str	r0, [r7, #12]
 810bb86:	60b9      	str	r1, [r7, #8]
 810bb88:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810bb8a:	687b      	ldr	r3, [r7, #4]
 810bb8c:	2b00      	cmp	r3, #0
 810bb8e:	d128      	bne.n	810bbe2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810bb90:	68fb      	ldr	r3, [r7, #12]
 810bb92:	689b      	ldr	r3, [r3, #8]
 810bb94:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810bb98:	68bb      	ldr	r3, [r7, #8]
 810bb9a:	681b      	ldr	r3, [r3, #0]
 810bb9c:	1e59      	subs	r1, r3, #1
 810bb9e:	68bb      	ldr	r3, [r7, #8]
 810bba0:	685b      	ldr	r3, [r3, #4]
 810bba2:	3b01      	subs	r3, #1
 810bba4:	011b      	lsls	r3, r3, #4
 810bba6:	4319      	orrs	r1, r3
 810bba8:	68bb      	ldr	r3, [r7, #8]
 810bbaa:	689b      	ldr	r3, [r3, #8]
 810bbac:	3b01      	subs	r3, #1
 810bbae:	021b      	lsls	r3, r3, #8
 810bbb0:	4319      	orrs	r1, r3
 810bbb2:	68bb      	ldr	r3, [r7, #8]
 810bbb4:	68db      	ldr	r3, [r3, #12]
 810bbb6:	3b01      	subs	r3, #1
 810bbb8:	031b      	lsls	r3, r3, #12
 810bbba:	4319      	orrs	r1, r3
 810bbbc:	68bb      	ldr	r3, [r7, #8]
 810bbbe:	691b      	ldr	r3, [r3, #16]
 810bbc0:	3b01      	subs	r3, #1
 810bbc2:	041b      	lsls	r3, r3, #16
 810bbc4:	4319      	orrs	r1, r3
 810bbc6:	68bb      	ldr	r3, [r7, #8]
 810bbc8:	695b      	ldr	r3, [r3, #20]
 810bbca:	3b01      	subs	r3, #1
 810bbcc:	051b      	lsls	r3, r3, #20
 810bbce:	4319      	orrs	r1, r3
 810bbd0:	68bb      	ldr	r3, [r7, #8]
 810bbd2:	699b      	ldr	r3, [r3, #24]
 810bbd4:	3b01      	subs	r3, #1
 810bbd6:	061b      	lsls	r3, r3, #24
 810bbd8:	430b      	orrs	r3, r1
 810bbda:	431a      	orrs	r2, r3
 810bbdc:	68fb      	ldr	r3, [r7, #12]
 810bbde:	609a      	str	r2, [r3, #8]
 810bbe0:	e02f      	b.n	810bc42 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810bbe2:	68fb      	ldr	r3, [r7, #12]
 810bbe4:	689b      	ldr	r3, [r3, #8]
 810bbe6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810bbea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810bbee:	68ba      	ldr	r2, [r7, #8]
 810bbf0:	68d2      	ldr	r2, [r2, #12]
 810bbf2:	3a01      	subs	r2, #1
 810bbf4:	0311      	lsls	r1, r2, #12
 810bbf6:	68ba      	ldr	r2, [r7, #8]
 810bbf8:	6952      	ldr	r2, [r2, #20]
 810bbfa:	3a01      	subs	r2, #1
 810bbfc:	0512      	lsls	r2, r2, #20
 810bbfe:	430a      	orrs	r2, r1
 810bc00:	431a      	orrs	r2, r3
 810bc02:	68fb      	ldr	r3, [r7, #12]
 810bc04:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810bc06:	68fb      	ldr	r3, [r7, #12]
 810bc08:	68db      	ldr	r3, [r3, #12]
 810bc0a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810bc0e:	68bb      	ldr	r3, [r7, #8]
 810bc10:	681b      	ldr	r3, [r3, #0]
 810bc12:	1e59      	subs	r1, r3, #1
 810bc14:	68bb      	ldr	r3, [r7, #8]
 810bc16:	685b      	ldr	r3, [r3, #4]
 810bc18:	3b01      	subs	r3, #1
 810bc1a:	011b      	lsls	r3, r3, #4
 810bc1c:	4319      	orrs	r1, r3
 810bc1e:	68bb      	ldr	r3, [r7, #8]
 810bc20:	689b      	ldr	r3, [r3, #8]
 810bc22:	3b01      	subs	r3, #1
 810bc24:	021b      	lsls	r3, r3, #8
 810bc26:	4319      	orrs	r1, r3
 810bc28:	68bb      	ldr	r3, [r7, #8]
 810bc2a:	691b      	ldr	r3, [r3, #16]
 810bc2c:	3b01      	subs	r3, #1
 810bc2e:	041b      	lsls	r3, r3, #16
 810bc30:	4319      	orrs	r1, r3
 810bc32:	68bb      	ldr	r3, [r7, #8]
 810bc34:	699b      	ldr	r3, [r3, #24]
 810bc36:	3b01      	subs	r3, #1
 810bc38:	061b      	lsls	r3, r3, #24
 810bc3a:	430b      	orrs	r3, r1
 810bc3c:	431a      	orrs	r2, r3
 810bc3e:	68fb      	ldr	r3, [r7, #12]
 810bc40:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 810bc42:	2300      	movs	r3, #0
}
 810bc44:	4618      	mov	r0, r3
 810bc46:	3714      	adds	r7, #20
 810bc48:	46bd      	mov	sp, r7
 810bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc4e:	4770      	bx	lr

0810bc50 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810bc50:	b084      	sub	sp, #16
 810bc52:	b480      	push	{r7}
 810bc54:	b085      	sub	sp, #20
 810bc56:	af00      	add	r7, sp, #0
 810bc58:	6078      	str	r0, [r7, #4]
 810bc5a:	f107 001c 	add.w	r0, r7, #28
 810bc5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810bc62:	2300      	movs	r3, #0
 810bc64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 810bc66:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 810bc68:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 810bc6a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 810bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 810bc6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 810bc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 810bc72:	431a      	orrs	r2, r3
             Init.ClockDiv
 810bc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 810bc76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 810bc78:	68fa      	ldr	r2, [r7, #12]
 810bc7a:	4313      	orrs	r3, r2
 810bc7c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810bc7e:	687b      	ldr	r3, [r7, #4]
 810bc80:	685a      	ldr	r2, [r3, #4]
 810bc82:	4b07      	ldr	r3, [pc, #28]	; (810bca0 <SDMMC_Init+0x50>)
 810bc84:	4013      	ands	r3, r2
 810bc86:	68fa      	ldr	r2, [r7, #12]
 810bc88:	431a      	orrs	r2, r3
 810bc8a:	687b      	ldr	r3, [r7, #4]
 810bc8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810bc8e:	2300      	movs	r3, #0
}
 810bc90:	4618      	mov	r0, r3
 810bc92:	3714      	adds	r7, #20
 810bc94:	46bd      	mov	sp, r7
 810bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc9a:	b004      	add	sp, #16
 810bc9c:	4770      	bx	lr
 810bc9e:	bf00      	nop
 810bca0:	ffc02c00 	.word	0xffc02c00

0810bca4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 810bca4:	b480      	push	{r7}
 810bca6:	b083      	sub	sp, #12
 810bca8:	af00      	add	r7, sp, #0
 810bcaa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810bcac:	687b      	ldr	r3, [r7, #4]
 810bcae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 810bcb2:	4618      	mov	r0, r3
 810bcb4:	370c      	adds	r7, #12
 810bcb6:	46bd      	mov	sp, r7
 810bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcbc:	4770      	bx	lr

0810bcbe <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810bcbe:	b480      	push	{r7}
 810bcc0:	b083      	sub	sp, #12
 810bcc2:	af00      	add	r7, sp, #0
 810bcc4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810bcc6:	687b      	ldr	r3, [r7, #4]
 810bcc8:	681b      	ldr	r3, [r3, #0]
 810bcca:	f043 0203 	orr.w	r2, r3, #3
 810bcce:	687b      	ldr	r3, [r7, #4]
 810bcd0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810bcd2:	2300      	movs	r3, #0
}
 810bcd4:	4618      	mov	r0, r3
 810bcd6:	370c      	adds	r7, #12
 810bcd8:	46bd      	mov	sp, r7
 810bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcde:	4770      	bx	lr

0810bce0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 810bce0:	b480      	push	{r7}
 810bce2:	b083      	sub	sp, #12
 810bce4:	af00      	add	r7, sp, #0
 810bce6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810bce8:	687b      	ldr	r3, [r7, #4]
 810bcea:	681b      	ldr	r3, [r3, #0]
 810bcec:	f003 0303 	and.w	r3, r3, #3
}
 810bcf0:	4618      	mov	r0, r3
 810bcf2:	370c      	adds	r7, #12
 810bcf4:	46bd      	mov	sp, r7
 810bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcfa:	4770      	bx	lr

0810bcfc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 810bcfc:	b480      	push	{r7}
 810bcfe:	b085      	sub	sp, #20
 810bd00:	af00      	add	r7, sp, #0
 810bd02:	6078      	str	r0, [r7, #4]
 810bd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810bd06:	2300      	movs	r3, #0
 810bd08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810bd0a:	683b      	ldr	r3, [r7, #0]
 810bd0c:	681a      	ldr	r2, [r3, #0]
 810bd0e:	687b      	ldr	r3, [r7, #4]
 810bd10:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810bd12:	683b      	ldr	r3, [r7, #0]
 810bd14:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 810bd16:	683b      	ldr	r3, [r7, #0]
 810bd18:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810bd1a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 810bd1c:	683b      	ldr	r3, [r7, #0]
 810bd1e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 810bd20:	431a      	orrs	r2, r3
                       Command->CPSM);
 810bd22:	683b      	ldr	r3, [r7, #0]
 810bd24:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 810bd26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810bd28:	68fa      	ldr	r2, [r7, #12]
 810bd2a:	4313      	orrs	r3, r2
 810bd2c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810bd2e:	687b      	ldr	r3, [r7, #4]
 810bd30:	68da      	ldr	r2, [r3, #12]
 810bd32:	4b06      	ldr	r3, [pc, #24]	; (810bd4c <SDMMC_SendCommand+0x50>)
 810bd34:	4013      	ands	r3, r2
 810bd36:	68fa      	ldr	r2, [r7, #12]
 810bd38:	431a      	orrs	r2, r3
 810bd3a:	687b      	ldr	r3, [r7, #4]
 810bd3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810bd3e:	2300      	movs	r3, #0
}
 810bd40:	4618      	mov	r0, r3
 810bd42:	3714      	adds	r7, #20
 810bd44:	46bd      	mov	sp, r7
 810bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd4a:	4770      	bx	lr
 810bd4c:	fffee0c0 	.word	0xfffee0c0

0810bd50 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 810bd50:	b480      	push	{r7}
 810bd52:	b083      	sub	sp, #12
 810bd54:	af00      	add	r7, sp, #0
 810bd56:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810bd58:	687b      	ldr	r3, [r7, #4]
 810bd5a:	691b      	ldr	r3, [r3, #16]
 810bd5c:	b2db      	uxtb	r3, r3
}
 810bd5e:	4618      	mov	r0, r3
 810bd60:	370c      	adds	r7, #12
 810bd62:	46bd      	mov	sp, r7
 810bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd68:	4770      	bx	lr

0810bd6a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810bd6a:	b480      	push	{r7}
 810bd6c:	b085      	sub	sp, #20
 810bd6e:	af00      	add	r7, sp, #0
 810bd70:	6078      	str	r0, [r7, #4]
 810bd72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810bd74:	687b      	ldr	r3, [r7, #4]
 810bd76:	3314      	adds	r3, #20
 810bd78:	461a      	mov	r2, r3
 810bd7a:	683b      	ldr	r3, [r7, #0]
 810bd7c:	4413      	add	r3, r2
 810bd7e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810bd80:	68fb      	ldr	r3, [r7, #12]
 810bd82:	681b      	ldr	r3, [r3, #0]
}
 810bd84:	4618      	mov	r0, r3
 810bd86:	3714      	adds	r7, #20
 810bd88:	46bd      	mov	sp, r7
 810bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd8e:	4770      	bx	lr

0810bd90 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 810bd90:	b480      	push	{r7}
 810bd92:	b085      	sub	sp, #20
 810bd94:	af00      	add	r7, sp, #0
 810bd96:	6078      	str	r0, [r7, #4]
 810bd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810bd9a:	2300      	movs	r3, #0
 810bd9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810bd9e:	683b      	ldr	r3, [r7, #0]
 810bda0:	681a      	ldr	r2, [r3, #0]
 810bda2:	687b      	ldr	r3, [r7, #4]
 810bda4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810bda6:	683b      	ldr	r3, [r7, #0]
 810bda8:	685a      	ldr	r2, [r3, #4]
 810bdaa:	687b      	ldr	r3, [r7, #4]
 810bdac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810bdae:	683b      	ldr	r3, [r7, #0]
 810bdb0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 810bdb2:	683b      	ldr	r3, [r7, #0]
 810bdb4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810bdb6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810bdb8:	683b      	ldr	r3, [r7, #0]
 810bdba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 810bdbc:	431a      	orrs	r2, r3
                       Data->DPSM);
 810bdbe:	683b      	ldr	r3, [r7, #0]
 810bdc0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 810bdc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810bdc4:	68fa      	ldr	r2, [r7, #12]
 810bdc6:	4313      	orrs	r3, r2
 810bdc8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810bdca:	687b      	ldr	r3, [r7, #4]
 810bdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810bdce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810bdd2:	68fb      	ldr	r3, [r7, #12]
 810bdd4:	431a      	orrs	r2, r3
 810bdd6:	687b      	ldr	r3, [r7, #4]
 810bdd8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 810bdda:	2300      	movs	r3, #0

}
 810bddc:	4618      	mov	r0, r3
 810bdde:	3714      	adds	r7, #20
 810bde0:	46bd      	mov	sp, r7
 810bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bde6:	4770      	bx	lr

0810bde8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810bde8:	b580      	push	{r7, lr}
 810bdea:	b088      	sub	sp, #32
 810bdec:	af00      	add	r7, sp, #0
 810bdee:	6078      	str	r0, [r7, #4]
 810bdf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810bdf2:	683b      	ldr	r3, [r7, #0]
 810bdf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810bdf6:	2310      	movs	r3, #16
 810bdf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bdfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bdfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810be00:	2300      	movs	r3, #0
 810be02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810be04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810be08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810be0a:	f107 0308 	add.w	r3, r7, #8
 810be0e:	4619      	mov	r1, r3
 810be10:	6878      	ldr	r0, [r7, #4]
 810be12:	f7ff ff73 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810be16:	f241 3288 	movw	r2, #5000	; 0x1388
 810be1a:	2110      	movs	r1, #16
 810be1c:	6878      	ldr	r0, [r7, #4]
 810be1e:	f000 f995 	bl	810c14c <SDMMC_GetCmdResp1>
 810be22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810be24:	69fb      	ldr	r3, [r7, #28]
}
 810be26:	4618      	mov	r0, r3
 810be28:	3720      	adds	r7, #32
 810be2a:	46bd      	mov	sp, r7
 810be2c:	bd80      	pop	{r7, pc}

0810be2e <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 810be2e:	b580      	push	{r7, lr}
 810be30:	b088      	sub	sp, #32
 810be32:	af00      	add	r7, sp, #0
 810be34:	6078      	str	r0, [r7, #4]
 810be36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810be38:	683b      	ldr	r3, [r7, #0]
 810be3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810be3c:	2307      	movs	r3, #7
 810be3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810be40:	f44f 7380 	mov.w	r3, #256	; 0x100
 810be44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810be46:	2300      	movs	r3, #0
 810be48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810be4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810be4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810be50:	f107 0308 	add.w	r3, r7, #8
 810be54:	4619      	mov	r1, r3
 810be56:	6878      	ldr	r0, [r7, #4]
 810be58:	f7ff ff50 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810be5c:	f241 3288 	movw	r2, #5000	; 0x1388
 810be60:	2107      	movs	r1, #7
 810be62:	6878      	ldr	r0, [r7, #4]
 810be64:	f000 f972 	bl	810c14c <SDMMC_GetCmdResp1>
 810be68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810be6a:	69fb      	ldr	r3, [r7, #28]
}
 810be6c:	4618      	mov	r0, r3
 810be6e:	3720      	adds	r7, #32
 810be70:	46bd      	mov	sp, r7
 810be72:	bd80      	pop	{r7, pc}

0810be74 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810be74:	b580      	push	{r7, lr}
 810be76:	b088      	sub	sp, #32
 810be78:	af00      	add	r7, sp, #0
 810be7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810be7c:	2300      	movs	r3, #0
 810be7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810be80:	2300      	movs	r3, #0
 810be82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810be84:	2300      	movs	r3, #0
 810be86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810be88:	2300      	movs	r3, #0
 810be8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810be8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810be90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810be92:	f107 0308 	add.w	r3, r7, #8
 810be96:	4619      	mov	r1, r3
 810be98:	6878      	ldr	r0, [r7, #4]
 810be9a:	f7ff ff2f 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810be9e:	6878      	ldr	r0, [r7, #4]
 810bea0:	f000 fb96 	bl	810c5d0 <SDMMC_GetCmdError>
 810bea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bea6:	69fb      	ldr	r3, [r7, #28]
}
 810bea8:	4618      	mov	r0, r3
 810beaa:	3720      	adds	r7, #32
 810beac:	46bd      	mov	sp, r7
 810beae:	bd80      	pop	{r7, pc}

0810beb0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810beb0:	b580      	push	{r7, lr}
 810beb2:	b088      	sub	sp, #32
 810beb4:	af00      	add	r7, sp, #0
 810beb6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810beb8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 810bebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810bebe:	2308      	movs	r3, #8
 810bec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bec8:	2300      	movs	r3, #0
 810beca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810becc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810bed0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bed2:	f107 0308 	add.w	r3, r7, #8
 810bed6:	4619      	mov	r1, r3
 810bed8:	6878      	ldr	r0, [r7, #4]
 810beda:	f7ff ff0f 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810bede:	6878      	ldr	r0, [r7, #4]
 810bee0:	f000 fb28 	bl	810c534 <SDMMC_GetCmdResp7>
 810bee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bee6:	69fb      	ldr	r3, [r7, #28]
}
 810bee8:	4618      	mov	r0, r3
 810beea:	3720      	adds	r7, #32
 810beec:	46bd      	mov	sp, r7
 810beee:	bd80      	pop	{r7, pc}

0810bef0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810bef0:	b580      	push	{r7, lr}
 810bef2:	b088      	sub	sp, #32
 810bef4:	af00      	add	r7, sp, #0
 810bef6:	6078      	str	r0, [r7, #4]
 810bef8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810befa:	683b      	ldr	r3, [r7, #0]
 810befc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810befe:	2337      	movs	r3, #55	; 0x37
 810bf00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bf02:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bf06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bf08:	2300      	movs	r3, #0
 810bf0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bf0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810bf10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bf12:	f107 0308 	add.w	r3, r7, #8
 810bf16:	4619      	mov	r1, r3
 810bf18:	6878      	ldr	r0, [r7, #4]
 810bf1a:	f7ff feef 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810bf1e:	f241 3288 	movw	r2, #5000	; 0x1388
 810bf22:	2137      	movs	r1, #55	; 0x37
 810bf24:	6878      	ldr	r0, [r7, #4]
 810bf26:	f000 f911 	bl	810c14c <SDMMC_GetCmdResp1>
 810bf2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bf2c:	69fb      	ldr	r3, [r7, #28]
}
 810bf2e:	4618      	mov	r0, r3
 810bf30:	3720      	adds	r7, #32
 810bf32:	46bd      	mov	sp, r7
 810bf34:	bd80      	pop	{r7, pc}

0810bf36 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810bf36:	b580      	push	{r7, lr}
 810bf38:	b088      	sub	sp, #32
 810bf3a:	af00      	add	r7, sp, #0
 810bf3c:	6078      	str	r0, [r7, #4]
 810bf3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810bf40:	683b      	ldr	r3, [r7, #0]
 810bf42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810bf44:	2329      	movs	r3, #41	; 0x29
 810bf46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bf48:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bf4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bf4e:	2300      	movs	r3, #0
 810bf50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bf52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810bf56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bf58:	f107 0308 	add.w	r3, r7, #8
 810bf5c:	4619      	mov	r1, r3
 810bf5e:	6878      	ldr	r0, [r7, #4]
 810bf60:	f7ff fecc 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810bf64:	6878      	ldr	r0, [r7, #4]
 810bf66:	f000 fa2d 	bl	810c3c4 <SDMMC_GetCmdResp3>
 810bf6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bf6c:	69fb      	ldr	r3, [r7, #28]
}
 810bf6e:	4618      	mov	r0, r3
 810bf70:	3720      	adds	r7, #32
 810bf72:	46bd      	mov	sp, r7
 810bf74:	bd80      	pop	{r7, pc}

0810bf76 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810bf76:	b580      	push	{r7, lr}
 810bf78:	b088      	sub	sp, #32
 810bf7a:	af00      	add	r7, sp, #0
 810bf7c:	6078      	str	r0, [r7, #4]
 810bf7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810bf80:	683b      	ldr	r3, [r7, #0]
 810bf82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810bf84:	2306      	movs	r3, #6
 810bf86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bf88:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bf8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bf8e:	2300      	movs	r3, #0
 810bf90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bf92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810bf96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bf98:	f107 0308 	add.w	r3, r7, #8
 810bf9c:	4619      	mov	r1, r3
 810bf9e:	6878      	ldr	r0, [r7, #4]
 810bfa0:	f7ff feac 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810bfa4:	f241 3288 	movw	r2, #5000	; 0x1388
 810bfa8:	2106      	movs	r1, #6
 810bfaa:	6878      	ldr	r0, [r7, #4]
 810bfac:	f000 f8ce 	bl	810c14c <SDMMC_GetCmdResp1>
 810bfb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bfb2:	69fb      	ldr	r3, [r7, #28]
}
 810bfb4:	4618      	mov	r0, r3
 810bfb6:	3720      	adds	r7, #32
 810bfb8:	46bd      	mov	sp, r7
 810bfba:	bd80      	pop	{r7, pc}

0810bfbc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810bfbc:	b580      	push	{r7, lr}
 810bfbe:	b088      	sub	sp, #32
 810bfc0:	af00      	add	r7, sp, #0
 810bfc2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810bfc4:	2300      	movs	r3, #0
 810bfc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810bfc8:	2333      	movs	r3, #51	; 0x33
 810bfca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bfcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 810bfd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bfd2:	2300      	movs	r3, #0
 810bfd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bfd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810bfda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bfdc:	f107 0308 	add.w	r3, r7, #8
 810bfe0:	4619      	mov	r1, r3
 810bfe2:	6878      	ldr	r0, [r7, #4]
 810bfe4:	f7ff fe8a 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810bfe8:	f241 3288 	movw	r2, #5000	; 0x1388
 810bfec:	2133      	movs	r1, #51	; 0x33
 810bfee:	6878      	ldr	r0, [r7, #4]
 810bff0:	f000 f8ac 	bl	810c14c <SDMMC_GetCmdResp1>
 810bff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bff6:	69fb      	ldr	r3, [r7, #28]
}
 810bff8:	4618      	mov	r0, r3
 810bffa:	3720      	adds	r7, #32
 810bffc:	46bd      	mov	sp, r7
 810bffe:	bd80      	pop	{r7, pc}

0810c000 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810c000:	b580      	push	{r7, lr}
 810c002:	b088      	sub	sp, #32
 810c004:	af00      	add	r7, sp, #0
 810c006:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810c008:	2300      	movs	r3, #0
 810c00a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810c00c:	2302      	movs	r3, #2
 810c00e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810c010:	f44f 7340 	mov.w	r3, #768	; 0x300
 810c014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c016:	2300      	movs	r3, #0
 810c018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c01a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c01e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c020:	f107 0308 	add.w	r3, r7, #8
 810c024:	4619      	mov	r1, r3
 810c026:	6878      	ldr	r0, [r7, #4]
 810c028:	f7ff fe68 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810c02c:	6878      	ldr	r0, [r7, #4]
 810c02e:	f000 f97f 	bl	810c330 <SDMMC_GetCmdResp2>
 810c032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c034:	69fb      	ldr	r3, [r7, #28]
}
 810c036:	4618      	mov	r0, r3
 810c038:	3720      	adds	r7, #32
 810c03a:	46bd      	mov	sp, r7
 810c03c:	bd80      	pop	{r7, pc}

0810c03e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c03e:	b580      	push	{r7, lr}
 810c040:	b088      	sub	sp, #32
 810c042:	af00      	add	r7, sp, #0
 810c044:	6078      	str	r0, [r7, #4]
 810c046:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810c048:	683b      	ldr	r3, [r7, #0]
 810c04a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810c04c:	2309      	movs	r3, #9
 810c04e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810c050:	f44f 7340 	mov.w	r3, #768	; 0x300
 810c054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c056:	2300      	movs	r3, #0
 810c058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c05a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c05e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c060:	f107 0308 	add.w	r3, r7, #8
 810c064:	4619      	mov	r1, r3
 810c066:	6878      	ldr	r0, [r7, #4]
 810c068:	f7ff fe48 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810c06c:	6878      	ldr	r0, [r7, #4]
 810c06e:	f000 f95f 	bl	810c330 <SDMMC_GetCmdResp2>
 810c072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c074:	69fb      	ldr	r3, [r7, #28]
}
 810c076:	4618      	mov	r0, r3
 810c078:	3720      	adds	r7, #32
 810c07a:	46bd      	mov	sp, r7
 810c07c:	bd80      	pop	{r7, pc}

0810c07e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810c07e:	b580      	push	{r7, lr}
 810c080:	b088      	sub	sp, #32
 810c082:	af00      	add	r7, sp, #0
 810c084:	6078      	str	r0, [r7, #4]
 810c086:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810c088:	2300      	movs	r3, #0
 810c08a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810c08c:	2303      	movs	r3, #3
 810c08e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c090:	f44f 7380 	mov.w	r3, #256	; 0x100
 810c094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c096:	2300      	movs	r3, #0
 810c098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c09a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c09e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c0a0:	f107 0308 	add.w	r3, r7, #8
 810c0a4:	4619      	mov	r1, r3
 810c0a6:	6878      	ldr	r0, [r7, #4]
 810c0a8:	f7ff fe28 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810c0ac:	683a      	ldr	r2, [r7, #0]
 810c0ae:	2103      	movs	r1, #3
 810c0b0:	6878      	ldr	r0, [r7, #4]
 810c0b2:	f000 f9c7 	bl	810c444 <SDMMC_GetCmdResp6>
 810c0b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c0b8:	69fb      	ldr	r3, [r7, #28]
}
 810c0ba:	4618      	mov	r0, r3
 810c0bc:	3720      	adds	r7, #32
 810c0be:	46bd      	mov	sp, r7
 810c0c0:	bd80      	pop	{r7, pc}

0810c0c2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c0c2:	b580      	push	{r7, lr}
 810c0c4:	b088      	sub	sp, #32
 810c0c6:	af00      	add	r7, sp, #0
 810c0c8:	6078      	str	r0, [r7, #4]
 810c0ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810c0cc:	683b      	ldr	r3, [r7, #0]
 810c0ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810c0d0:	230d      	movs	r3, #13
 810c0d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c0d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 810c0d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c0da:	2300      	movs	r3, #0
 810c0dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c0de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c0e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c0e4:	f107 0308 	add.w	r3, r7, #8
 810c0e8:	4619      	mov	r1, r3
 810c0ea:	6878      	ldr	r0, [r7, #4]
 810c0ec:	f7ff fe06 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810c0f0:	f241 3288 	movw	r2, #5000	; 0x1388
 810c0f4:	210d      	movs	r1, #13
 810c0f6:	6878      	ldr	r0, [r7, #4]
 810c0f8:	f000 f828 	bl	810c14c <SDMMC_GetCmdResp1>
 810c0fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c0fe:	69fb      	ldr	r3, [r7, #28]
}
 810c100:	4618      	mov	r0, r3
 810c102:	3720      	adds	r7, #32
 810c104:	46bd      	mov	sp, r7
 810c106:	bd80      	pop	{r7, pc}

0810c108 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810c108:	b580      	push	{r7, lr}
 810c10a:	b088      	sub	sp, #32
 810c10c:	af00      	add	r7, sp, #0
 810c10e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810c110:	2300      	movs	r3, #0
 810c112:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810c114:	230d      	movs	r3, #13
 810c116:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c118:	f44f 7380 	mov.w	r3, #256	; 0x100
 810c11c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c11e:	2300      	movs	r3, #0
 810c120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c126:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c128:	f107 0308 	add.w	r3, r7, #8
 810c12c:	4619      	mov	r1, r3
 810c12e:	6878      	ldr	r0, [r7, #4]
 810c130:	f7ff fde4 	bl	810bcfc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810c134:	f241 3288 	movw	r2, #5000	; 0x1388
 810c138:	210d      	movs	r1, #13
 810c13a:	6878      	ldr	r0, [r7, #4]
 810c13c:	f000 f806 	bl	810c14c <SDMMC_GetCmdResp1>
 810c140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c142:	69fb      	ldr	r3, [r7, #28]
}
 810c144:	4618      	mov	r0, r3
 810c146:	3720      	adds	r7, #32
 810c148:	46bd      	mov	sp, r7
 810c14a:	bd80      	pop	{r7, pc}

0810c14c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810c14c:	b580      	push	{r7, lr}
 810c14e:	b088      	sub	sp, #32
 810c150:	af00      	add	r7, sp, #0
 810c152:	60f8      	str	r0, [r7, #12]
 810c154:	460b      	mov	r3, r1
 810c156:	607a      	str	r2, [r7, #4]
 810c158:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810c15a:	4b70      	ldr	r3, [pc, #448]	; (810c31c <SDMMC_GetCmdResp1+0x1d0>)
 810c15c:	681b      	ldr	r3, [r3, #0]
 810c15e:	4a70      	ldr	r2, [pc, #448]	; (810c320 <SDMMC_GetCmdResp1+0x1d4>)
 810c160:	fba2 2303 	umull	r2, r3, r2, r3
 810c164:	0a5a      	lsrs	r2, r3, #9
 810c166:	687b      	ldr	r3, [r7, #4]
 810c168:	fb02 f303 	mul.w	r3, r2, r3
 810c16c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810c16e:	69fb      	ldr	r3, [r7, #28]
 810c170:	1e5a      	subs	r2, r3, #1
 810c172:	61fa      	str	r2, [r7, #28]
 810c174:	2b00      	cmp	r3, #0
 810c176:	d102      	bne.n	810c17e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c178:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c17c:	e0c9      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810c17e:	68fb      	ldr	r3, [r7, #12]
 810c180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c182:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810c184:	69ba      	ldr	r2, [r7, #24]
 810c186:	4b67      	ldr	r3, [pc, #412]	; (810c324 <SDMMC_GetCmdResp1+0x1d8>)
 810c188:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c18a:	2b00      	cmp	r3, #0
 810c18c:	d0ef      	beq.n	810c16e <SDMMC_GetCmdResp1+0x22>
 810c18e:	69bb      	ldr	r3, [r7, #24]
 810c190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810c194:	2b00      	cmp	r3, #0
 810c196:	d1ea      	bne.n	810c16e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c198:	68fb      	ldr	r3, [r7, #12]
 810c19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c19c:	f003 0304 	and.w	r3, r3, #4
 810c1a0:	2b00      	cmp	r3, #0
 810c1a2:	d004      	beq.n	810c1ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c1a4:	68fb      	ldr	r3, [r7, #12]
 810c1a6:	2204      	movs	r2, #4
 810c1a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c1aa:	2304      	movs	r3, #4
 810c1ac:	e0b1      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c1ae:	68fb      	ldr	r3, [r7, #12]
 810c1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c1b2:	f003 0301 	and.w	r3, r3, #1
 810c1b6:	2b00      	cmp	r3, #0
 810c1b8:	d004      	beq.n	810c1c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c1ba:	68fb      	ldr	r3, [r7, #12]
 810c1bc:	2201      	movs	r2, #1
 810c1be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c1c0:	2301      	movs	r3, #1
 810c1c2:	e0a6      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c1c4:	68fb      	ldr	r3, [r7, #12]
 810c1c6:	4a58      	ldr	r2, [pc, #352]	; (810c328 <SDMMC_GetCmdResp1+0x1dc>)
 810c1c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810c1ca:	68f8      	ldr	r0, [r7, #12]
 810c1cc:	f7ff fdc0 	bl	810bd50 <SDMMC_GetCommandResponse>
 810c1d0:	4603      	mov	r3, r0
 810c1d2:	461a      	mov	r2, r3
 810c1d4:	7afb      	ldrb	r3, [r7, #11]
 810c1d6:	4293      	cmp	r3, r2
 810c1d8:	d001      	beq.n	810c1de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c1da:	2301      	movs	r3, #1
 810c1dc:	e099      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810c1de:	2100      	movs	r1, #0
 810c1e0:	68f8      	ldr	r0, [r7, #12]
 810c1e2:	f7ff fdc2 	bl	810bd6a <SDMMC_GetResponse>
 810c1e6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810c1e8:	697a      	ldr	r2, [r7, #20]
 810c1ea:	4b50      	ldr	r3, [pc, #320]	; (810c32c <SDMMC_GetCmdResp1+0x1e0>)
 810c1ec:	4013      	ands	r3, r2
 810c1ee:	2b00      	cmp	r3, #0
 810c1f0:	d101      	bne.n	810c1f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810c1f2:	2300      	movs	r3, #0
 810c1f4:	e08d      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810c1f6:	697b      	ldr	r3, [r7, #20]
 810c1f8:	2b00      	cmp	r3, #0
 810c1fa:	da02      	bge.n	810c202 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810c1fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810c200:	e087      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810c202:	697b      	ldr	r3, [r7, #20]
 810c204:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810c208:	2b00      	cmp	r3, #0
 810c20a:	d001      	beq.n	810c210 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810c20c:	2340      	movs	r3, #64	; 0x40
 810c20e:	e080      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810c210:	697b      	ldr	r3, [r7, #20]
 810c212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810c216:	2b00      	cmp	r3, #0
 810c218:	d001      	beq.n	810c21e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810c21a:	2380      	movs	r3, #128	; 0x80
 810c21c:	e079      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810c21e:	697b      	ldr	r3, [r7, #20]
 810c220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810c224:	2b00      	cmp	r3, #0
 810c226:	d002      	beq.n	810c22e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810c228:	f44f 7380 	mov.w	r3, #256	; 0x100
 810c22c:	e071      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810c22e:	697b      	ldr	r3, [r7, #20]
 810c230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810c234:	2b00      	cmp	r3, #0
 810c236:	d002      	beq.n	810c23e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810c238:	f44f 7300 	mov.w	r3, #512	; 0x200
 810c23c:	e069      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810c23e:	697b      	ldr	r3, [r7, #20]
 810c240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810c244:	2b00      	cmp	r3, #0
 810c246:	d002      	beq.n	810c24e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810c248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810c24c:	e061      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810c24e:	697b      	ldr	r3, [r7, #20]
 810c250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810c254:	2b00      	cmp	r3, #0
 810c256:	d002      	beq.n	810c25e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810c258:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810c25c:	e059      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810c25e:	697b      	ldr	r3, [r7, #20]
 810c260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810c264:	2b00      	cmp	r3, #0
 810c266:	d002      	beq.n	810c26e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810c268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c26c:	e051      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810c26e:	697b      	ldr	r3, [r7, #20]
 810c270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810c274:	2b00      	cmp	r3, #0
 810c276:	d002      	beq.n	810c27e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810c278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810c27c:	e049      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810c27e:	697b      	ldr	r3, [r7, #20]
 810c280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810c284:	2b00      	cmp	r3, #0
 810c286:	d002      	beq.n	810c28e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810c288:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810c28c:	e041      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810c28e:	697b      	ldr	r3, [r7, #20]
 810c290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810c294:	2b00      	cmp	r3, #0
 810c296:	d002      	beq.n	810c29e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810c298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c29c:	e039      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810c29e:	697b      	ldr	r3, [r7, #20]
 810c2a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810c2a4:	2b00      	cmp	r3, #0
 810c2a6:	d002      	beq.n	810c2ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810c2a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 810c2ac:	e031      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810c2ae:	697b      	ldr	r3, [r7, #20]
 810c2b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810c2b4:	2b00      	cmp	r3, #0
 810c2b6:	d002      	beq.n	810c2be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810c2b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810c2bc:	e029      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810c2be:	697b      	ldr	r3, [r7, #20]
 810c2c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810c2c4:	2b00      	cmp	r3, #0
 810c2c6:	d002      	beq.n	810c2ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810c2c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810c2cc:	e021      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810c2ce:	697b      	ldr	r3, [r7, #20]
 810c2d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810c2d4:	2b00      	cmp	r3, #0
 810c2d6:	d002      	beq.n	810c2de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810c2d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 810c2dc:	e019      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810c2de:	697b      	ldr	r3, [r7, #20]
 810c2e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810c2e4:	2b00      	cmp	r3, #0
 810c2e6:	d002      	beq.n	810c2ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810c2e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 810c2ec:	e011      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810c2ee:	697b      	ldr	r3, [r7, #20]
 810c2f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810c2f4:	2b00      	cmp	r3, #0
 810c2f6:	d002      	beq.n	810c2fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810c2f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810c2fc:	e009      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810c2fe:	697b      	ldr	r3, [r7, #20]
 810c300:	f003 0308 	and.w	r3, r3, #8
 810c304:	2b00      	cmp	r3, #0
 810c306:	d002      	beq.n	810c30e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810c308:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 810c30c:	e001      	b.n	810c312 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810c30e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810c312:	4618      	mov	r0, r3
 810c314:	3720      	adds	r7, #32
 810c316:	46bd      	mov	sp, r7
 810c318:	bd80      	pop	{r7, pc}
 810c31a:	bf00      	nop
 810c31c:	10000000 	.word	0x10000000
 810c320:	10624dd3 	.word	0x10624dd3
 810c324:	00200045 	.word	0x00200045
 810c328:	002000c5 	.word	0x002000c5
 810c32c:	fdffe008 	.word	0xfdffe008

0810c330 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810c330:	b480      	push	{r7}
 810c332:	b085      	sub	sp, #20
 810c334:	af00      	add	r7, sp, #0
 810c336:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c338:	4b1f      	ldr	r3, [pc, #124]	; (810c3b8 <SDMMC_GetCmdResp2+0x88>)
 810c33a:	681b      	ldr	r3, [r3, #0]
 810c33c:	4a1f      	ldr	r2, [pc, #124]	; (810c3bc <SDMMC_GetCmdResp2+0x8c>)
 810c33e:	fba2 2303 	umull	r2, r3, r2, r3
 810c342:	0a5b      	lsrs	r3, r3, #9
 810c344:	f241 3288 	movw	r2, #5000	; 0x1388
 810c348:	fb02 f303 	mul.w	r3, r2, r3
 810c34c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c34e:	68fb      	ldr	r3, [r7, #12]
 810c350:	1e5a      	subs	r2, r3, #1
 810c352:	60fa      	str	r2, [r7, #12]
 810c354:	2b00      	cmp	r3, #0
 810c356:	d102      	bne.n	810c35e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c35c:	e026      	b.n	810c3ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810c35e:	687b      	ldr	r3, [r7, #4]
 810c360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c362:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c364:	68bb      	ldr	r3, [r7, #8]
 810c366:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c36a:	2b00      	cmp	r3, #0
 810c36c:	d0ef      	beq.n	810c34e <SDMMC_GetCmdResp2+0x1e>
 810c36e:	68bb      	ldr	r3, [r7, #8]
 810c370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c374:	2b00      	cmp	r3, #0
 810c376:	d1ea      	bne.n	810c34e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c378:	687b      	ldr	r3, [r7, #4]
 810c37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c37c:	f003 0304 	and.w	r3, r3, #4
 810c380:	2b00      	cmp	r3, #0
 810c382:	d004      	beq.n	810c38e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c384:	687b      	ldr	r3, [r7, #4]
 810c386:	2204      	movs	r2, #4
 810c388:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c38a:	2304      	movs	r3, #4
 810c38c:	e00e      	b.n	810c3ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c38e:	687b      	ldr	r3, [r7, #4]
 810c390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c392:	f003 0301 	and.w	r3, r3, #1
 810c396:	2b00      	cmp	r3, #0
 810c398:	d004      	beq.n	810c3a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c39a:	687b      	ldr	r3, [r7, #4]
 810c39c:	2201      	movs	r2, #1
 810c39e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c3a0:	2301      	movs	r3, #1
 810c3a2:	e003      	b.n	810c3ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c3a4:	687b      	ldr	r3, [r7, #4]
 810c3a6:	4a06      	ldr	r2, [pc, #24]	; (810c3c0 <SDMMC_GetCmdResp2+0x90>)
 810c3a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810c3aa:	2300      	movs	r3, #0
}
 810c3ac:	4618      	mov	r0, r3
 810c3ae:	3714      	adds	r7, #20
 810c3b0:	46bd      	mov	sp, r7
 810c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3b6:	4770      	bx	lr
 810c3b8:	10000000 	.word	0x10000000
 810c3bc:	10624dd3 	.word	0x10624dd3
 810c3c0:	002000c5 	.word	0x002000c5

0810c3c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810c3c4:	b480      	push	{r7}
 810c3c6:	b085      	sub	sp, #20
 810c3c8:	af00      	add	r7, sp, #0
 810c3ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c3cc:	4b1a      	ldr	r3, [pc, #104]	; (810c438 <SDMMC_GetCmdResp3+0x74>)
 810c3ce:	681b      	ldr	r3, [r3, #0]
 810c3d0:	4a1a      	ldr	r2, [pc, #104]	; (810c43c <SDMMC_GetCmdResp3+0x78>)
 810c3d2:	fba2 2303 	umull	r2, r3, r2, r3
 810c3d6:	0a5b      	lsrs	r3, r3, #9
 810c3d8:	f241 3288 	movw	r2, #5000	; 0x1388
 810c3dc:	fb02 f303 	mul.w	r3, r2, r3
 810c3e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c3e2:	68fb      	ldr	r3, [r7, #12]
 810c3e4:	1e5a      	subs	r2, r3, #1
 810c3e6:	60fa      	str	r2, [r7, #12]
 810c3e8:	2b00      	cmp	r3, #0
 810c3ea:	d102      	bne.n	810c3f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c3ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c3f0:	e01b      	b.n	810c42a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810c3f2:	687b      	ldr	r3, [r7, #4]
 810c3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c3f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c3f8:	68bb      	ldr	r3, [r7, #8]
 810c3fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c3fe:	2b00      	cmp	r3, #0
 810c400:	d0ef      	beq.n	810c3e2 <SDMMC_GetCmdResp3+0x1e>
 810c402:	68bb      	ldr	r3, [r7, #8]
 810c404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c408:	2b00      	cmp	r3, #0
 810c40a:	d1ea      	bne.n	810c3e2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c40c:	687b      	ldr	r3, [r7, #4]
 810c40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c410:	f003 0304 	and.w	r3, r3, #4
 810c414:	2b00      	cmp	r3, #0
 810c416:	d004      	beq.n	810c422 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c418:	687b      	ldr	r3, [r7, #4]
 810c41a:	2204      	movs	r2, #4
 810c41c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c41e:	2304      	movs	r3, #4
 810c420:	e003      	b.n	810c42a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c422:	687b      	ldr	r3, [r7, #4]
 810c424:	4a06      	ldr	r2, [pc, #24]	; (810c440 <SDMMC_GetCmdResp3+0x7c>)
 810c426:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810c428:	2300      	movs	r3, #0
}
 810c42a:	4618      	mov	r0, r3
 810c42c:	3714      	adds	r7, #20
 810c42e:	46bd      	mov	sp, r7
 810c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c434:	4770      	bx	lr
 810c436:	bf00      	nop
 810c438:	10000000 	.word	0x10000000
 810c43c:	10624dd3 	.word	0x10624dd3
 810c440:	002000c5 	.word	0x002000c5

0810c444 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810c444:	b580      	push	{r7, lr}
 810c446:	b088      	sub	sp, #32
 810c448:	af00      	add	r7, sp, #0
 810c44a:	60f8      	str	r0, [r7, #12]
 810c44c:	460b      	mov	r3, r1
 810c44e:	607a      	str	r2, [r7, #4]
 810c450:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c452:	4b35      	ldr	r3, [pc, #212]	; (810c528 <SDMMC_GetCmdResp6+0xe4>)
 810c454:	681b      	ldr	r3, [r3, #0]
 810c456:	4a35      	ldr	r2, [pc, #212]	; (810c52c <SDMMC_GetCmdResp6+0xe8>)
 810c458:	fba2 2303 	umull	r2, r3, r2, r3
 810c45c:	0a5b      	lsrs	r3, r3, #9
 810c45e:	f241 3288 	movw	r2, #5000	; 0x1388
 810c462:	fb02 f303 	mul.w	r3, r2, r3
 810c466:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810c468:	69fb      	ldr	r3, [r7, #28]
 810c46a:	1e5a      	subs	r2, r3, #1
 810c46c:	61fa      	str	r2, [r7, #28]
 810c46e:	2b00      	cmp	r3, #0
 810c470:	d102      	bne.n	810c478 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c472:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c476:	e052      	b.n	810c51e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810c478:	68fb      	ldr	r3, [r7, #12]
 810c47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c47c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c47e:	69bb      	ldr	r3, [r7, #24]
 810c480:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c484:	2b00      	cmp	r3, #0
 810c486:	d0ef      	beq.n	810c468 <SDMMC_GetCmdResp6+0x24>
 810c488:	69bb      	ldr	r3, [r7, #24]
 810c48a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c48e:	2b00      	cmp	r3, #0
 810c490:	d1ea      	bne.n	810c468 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c492:	68fb      	ldr	r3, [r7, #12]
 810c494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c496:	f003 0304 	and.w	r3, r3, #4
 810c49a:	2b00      	cmp	r3, #0
 810c49c:	d004      	beq.n	810c4a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c49e:	68fb      	ldr	r3, [r7, #12]
 810c4a0:	2204      	movs	r2, #4
 810c4a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c4a4:	2304      	movs	r3, #4
 810c4a6:	e03a      	b.n	810c51e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c4a8:	68fb      	ldr	r3, [r7, #12]
 810c4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c4ac:	f003 0301 	and.w	r3, r3, #1
 810c4b0:	2b00      	cmp	r3, #0
 810c4b2:	d004      	beq.n	810c4be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c4b4:	68fb      	ldr	r3, [r7, #12]
 810c4b6:	2201      	movs	r2, #1
 810c4b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c4ba:	2301      	movs	r3, #1
 810c4bc:	e02f      	b.n	810c51e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810c4be:	68f8      	ldr	r0, [r7, #12]
 810c4c0:	f7ff fc46 	bl	810bd50 <SDMMC_GetCommandResponse>
 810c4c4:	4603      	mov	r3, r0
 810c4c6:	461a      	mov	r2, r3
 810c4c8:	7afb      	ldrb	r3, [r7, #11]
 810c4ca:	4293      	cmp	r3, r2
 810c4cc:	d001      	beq.n	810c4d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c4ce:	2301      	movs	r3, #1
 810c4d0:	e025      	b.n	810c51e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c4d2:	68fb      	ldr	r3, [r7, #12]
 810c4d4:	4a16      	ldr	r2, [pc, #88]	; (810c530 <SDMMC_GetCmdResp6+0xec>)
 810c4d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810c4d8:	2100      	movs	r1, #0
 810c4da:	68f8      	ldr	r0, [r7, #12]
 810c4dc:	f7ff fc45 	bl	810bd6a <SDMMC_GetResponse>
 810c4e0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810c4e2:	697b      	ldr	r3, [r7, #20]
 810c4e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810c4e8:	2b00      	cmp	r3, #0
 810c4ea:	d106      	bne.n	810c4fa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 810c4ec:	697b      	ldr	r3, [r7, #20]
 810c4ee:	0c1b      	lsrs	r3, r3, #16
 810c4f0:	b29a      	uxth	r2, r3
 810c4f2:	687b      	ldr	r3, [r7, #4]
 810c4f4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810c4f6:	2300      	movs	r3, #0
 810c4f8:	e011      	b.n	810c51e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810c4fa:	697b      	ldr	r3, [r7, #20]
 810c4fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810c500:	2b00      	cmp	r3, #0
 810c502:	d002      	beq.n	810c50a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810c504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810c508:	e009      	b.n	810c51e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810c50a:	697b      	ldr	r3, [r7, #20]
 810c50c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810c510:	2b00      	cmp	r3, #0
 810c512:	d002      	beq.n	810c51a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810c514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810c518:	e001      	b.n	810c51e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810c51a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810c51e:	4618      	mov	r0, r3
 810c520:	3720      	adds	r7, #32
 810c522:	46bd      	mov	sp, r7
 810c524:	bd80      	pop	{r7, pc}
 810c526:	bf00      	nop
 810c528:	10000000 	.word	0x10000000
 810c52c:	10624dd3 	.word	0x10624dd3
 810c530:	002000c5 	.word	0x002000c5

0810c534 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810c534:	b480      	push	{r7}
 810c536:	b085      	sub	sp, #20
 810c538:	af00      	add	r7, sp, #0
 810c53a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c53c:	4b22      	ldr	r3, [pc, #136]	; (810c5c8 <SDMMC_GetCmdResp7+0x94>)
 810c53e:	681b      	ldr	r3, [r3, #0]
 810c540:	4a22      	ldr	r2, [pc, #136]	; (810c5cc <SDMMC_GetCmdResp7+0x98>)
 810c542:	fba2 2303 	umull	r2, r3, r2, r3
 810c546:	0a5b      	lsrs	r3, r3, #9
 810c548:	f241 3288 	movw	r2, #5000	; 0x1388
 810c54c:	fb02 f303 	mul.w	r3, r2, r3
 810c550:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c552:	68fb      	ldr	r3, [r7, #12]
 810c554:	1e5a      	subs	r2, r3, #1
 810c556:	60fa      	str	r2, [r7, #12]
 810c558:	2b00      	cmp	r3, #0
 810c55a:	d102      	bne.n	810c562 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c55c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c560:	e02c      	b.n	810c5bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810c562:	687b      	ldr	r3, [r7, #4]
 810c564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c566:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c568:	68bb      	ldr	r3, [r7, #8]
 810c56a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c56e:	2b00      	cmp	r3, #0
 810c570:	d0ef      	beq.n	810c552 <SDMMC_GetCmdResp7+0x1e>
 810c572:	68bb      	ldr	r3, [r7, #8]
 810c574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c578:	2b00      	cmp	r3, #0
 810c57a:	d1ea      	bne.n	810c552 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c57c:	687b      	ldr	r3, [r7, #4]
 810c57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c580:	f003 0304 	and.w	r3, r3, #4
 810c584:	2b00      	cmp	r3, #0
 810c586:	d004      	beq.n	810c592 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c588:	687b      	ldr	r3, [r7, #4]
 810c58a:	2204      	movs	r2, #4
 810c58c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c58e:	2304      	movs	r3, #4
 810c590:	e014      	b.n	810c5bc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c592:	687b      	ldr	r3, [r7, #4]
 810c594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c596:	f003 0301 	and.w	r3, r3, #1
 810c59a:	2b00      	cmp	r3, #0
 810c59c:	d004      	beq.n	810c5a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c59e:	687b      	ldr	r3, [r7, #4]
 810c5a0:	2201      	movs	r2, #1
 810c5a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c5a4:	2301      	movs	r3, #1
 810c5a6:	e009      	b.n	810c5bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810c5a8:	687b      	ldr	r3, [r7, #4]
 810c5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c5b0:	2b00      	cmp	r3, #0
 810c5b2:	d002      	beq.n	810c5ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810c5b4:	687b      	ldr	r3, [r7, #4]
 810c5b6:	2240      	movs	r2, #64	; 0x40
 810c5b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810c5ba:	2300      	movs	r3, #0

}
 810c5bc:	4618      	mov	r0, r3
 810c5be:	3714      	adds	r7, #20
 810c5c0:	46bd      	mov	sp, r7
 810c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5c6:	4770      	bx	lr
 810c5c8:	10000000 	.word	0x10000000
 810c5cc:	10624dd3 	.word	0x10624dd3

0810c5d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810c5d0:	b480      	push	{r7}
 810c5d2:	b085      	sub	sp, #20
 810c5d4:	af00      	add	r7, sp, #0
 810c5d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c5d8:	4b11      	ldr	r3, [pc, #68]	; (810c620 <SDMMC_GetCmdError+0x50>)
 810c5da:	681b      	ldr	r3, [r3, #0]
 810c5dc:	4a11      	ldr	r2, [pc, #68]	; (810c624 <SDMMC_GetCmdError+0x54>)
 810c5de:	fba2 2303 	umull	r2, r3, r2, r3
 810c5e2:	0a5b      	lsrs	r3, r3, #9
 810c5e4:	f241 3288 	movw	r2, #5000	; 0x1388
 810c5e8:	fb02 f303 	mul.w	r3, r2, r3
 810c5ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c5ee:	68fb      	ldr	r3, [r7, #12]
 810c5f0:	1e5a      	subs	r2, r3, #1
 810c5f2:	60fa      	str	r2, [r7, #12]
 810c5f4:	2b00      	cmp	r3, #0
 810c5f6:	d102      	bne.n	810c5fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c5f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810c5fc:	e009      	b.n	810c612 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810c5fe:	687b      	ldr	r3, [r7, #4]
 810c600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c606:	2b00      	cmp	r3, #0
 810c608:	d0f1      	beq.n	810c5ee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c60a:	687b      	ldr	r3, [r7, #4]
 810c60c:	4a06      	ldr	r2, [pc, #24]	; (810c628 <SDMMC_GetCmdError+0x58>)
 810c60e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 810c610:	2300      	movs	r3, #0
}
 810c612:	4618      	mov	r0, r3
 810c614:	3714      	adds	r7, #20
 810c616:	46bd      	mov	sp, r7
 810c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c61c:	4770      	bx	lr
 810c61e:	bf00      	nop
 810c620:	10000000 	.word	0x10000000
 810c624:	10624dd3 	.word	0x10624dd3
 810c628:	002000c5 	.word	0x002000c5

0810c62c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810c62c:	b084      	sub	sp, #16
 810c62e:	b580      	push	{r7, lr}
 810c630:	b084      	sub	sp, #16
 810c632:	af00      	add	r7, sp, #0
 810c634:	6078      	str	r0, [r7, #4]
 810c636:	f107 001c 	add.w	r0, r7, #28
 810c63a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810c640:	2b01      	cmp	r3, #1
 810c642:	d122      	bne.n	810c68a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810c644:	687b      	ldr	r3, [r7, #4]
 810c646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810c64c:	687b      	ldr	r3, [r7, #4]
 810c64e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810c650:	687b      	ldr	r3, [r7, #4]
 810c652:	68db      	ldr	r3, [r3, #12]
 810c654:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 810c658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810c65c:	687a      	ldr	r2, [r7, #4]
 810c65e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810c660:	687b      	ldr	r3, [r7, #4]
 810c662:	68db      	ldr	r3, [r3, #12]
 810c664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810c668:	687b      	ldr	r3, [r7, #4]
 810c66a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810c66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810c66e:	2b01      	cmp	r3, #1
 810c670:	d105      	bne.n	810c67e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810c672:	687b      	ldr	r3, [r7, #4]
 810c674:	68db      	ldr	r3, [r3, #12]
 810c676:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 810c67a:	687b      	ldr	r3, [r7, #4]
 810c67c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810c67e:	6878      	ldr	r0, [r7, #4]
 810c680:	f000 faaa 	bl	810cbd8 <USB_CoreReset>
 810c684:	4603      	mov	r3, r0
 810c686:	73fb      	strb	r3, [r7, #15]
 810c688:	e01a      	b.n	810c6c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810c68a:	687b      	ldr	r3, [r7, #4]
 810c68c:	68db      	ldr	r3, [r3, #12]
 810c68e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810c692:	687b      	ldr	r3, [r7, #4]
 810c694:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810c696:	6878      	ldr	r0, [r7, #4]
 810c698:	f000 fa9e 	bl	810cbd8 <USB_CoreReset>
 810c69c:	4603      	mov	r3, r0
 810c69e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810c6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810c6a2:	2b00      	cmp	r3, #0
 810c6a4:	d106      	bne.n	810c6b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810c6a6:	687b      	ldr	r3, [r7, #4]
 810c6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c6aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810c6ae:	687b      	ldr	r3, [r7, #4]
 810c6b0:	639a      	str	r2, [r3, #56]	; 0x38
 810c6b2:	e005      	b.n	810c6c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810c6b4:	687b      	ldr	r3, [r7, #4]
 810c6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c6b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810c6bc:	687b      	ldr	r3, [r7, #4]
 810c6be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810c6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c6c2:	2b01      	cmp	r3, #1
 810c6c4:	d118      	bne.n	810c6f8 <USB_CoreInit+0xcc>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810c6c6:	687b      	ldr	r3, [r7, #4]
 810c6c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810c6ca:	b29a      	uxth	r2, r3
 810c6cc:	687b      	ldr	r3, [r7, #4]
 810c6ce:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810c6d0:	687b      	ldr	r3, [r7, #4]
 810c6d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810c6d4:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 810c6d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810c6dc:	687a      	ldr	r2, [r7, #4]
 810c6de:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810c6e0:	687b      	ldr	r3, [r7, #4]
 810c6e2:	689b      	ldr	r3, [r3, #8]
 810c6e4:	f043 0206 	orr.w	r2, r3, #6
 810c6e8:	687b      	ldr	r3, [r7, #4]
 810c6ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810c6ec:	687b      	ldr	r3, [r7, #4]
 810c6ee:	689b      	ldr	r3, [r3, #8]
 810c6f0:	f043 0220 	orr.w	r2, r3, #32
 810c6f4:	687b      	ldr	r3, [r7, #4]
 810c6f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810c6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 810c6fa:	4618      	mov	r0, r3
 810c6fc:	3710      	adds	r7, #16
 810c6fe:	46bd      	mov	sp, r7
 810c700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810c704:	b004      	add	sp, #16
 810c706:	4770      	bx	lr

0810c708 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810c708:	b480      	push	{r7}
 810c70a:	b083      	sub	sp, #12
 810c70c:	af00      	add	r7, sp, #0
 810c70e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810c710:	687b      	ldr	r3, [r7, #4]
 810c712:	689b      	ldr	r3, [r3, #8]
 810c714:	f023 0201 	bic.w	r2, r3, #1
 810c718:	687b      	ldr	r3, [r7, #4]
 810c71a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810c71c:	2300      	movs	r3, #0
}
 810c71e:	4618      	mov	r0, r3
 810c720:	370c      	adds	r7, #12
 810c722:	46bd      	mov	sp, r7
 810c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c728:	4770      	bx	lr

0810c72a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810c72a:	b580      	push	{r7, lr}
 810c72c:	b084      	sub	sp, #16
 810c72e:	af00      	add	r7, sp, #0
 810c730:	6078      	str	r0, [r7, #4]
 810c732:	460b      	mov	r3, r1
 810c734:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810c736:	2300      	movs	r3, #0
 810c738:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810c73a:	687b      	ldr	r3, [r7, #4]
 810c73c:	68db      	ldr	r3, [r3, #12]
 810c73e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 810c742:	687b      	ldr	r3, [r7, #4]
 810c744:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810c746:	78fb      	ldrb	r3, [r7, #3]
 810c748:	2b01      	cmp	r3, #1
 810c74a:	d115      	bne.n	810c778 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810c74c:	687b      	ldr	r3, [r7, #4]
 810c74e:	68db      	ldr	r3, [r3, #12]
 810c750:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 810c754:	687b      	ldr	r3, [r7, #4]
 810c756:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 810c758:	2001      	movs	r0, #1
 810c75a:	f7f6 f8d5 	bl	8102908 <HAL_Delay>
      ms++;
 810c75e:	68fb      	ldr	r3, [r7, #12]
 810c760:	3301      	adds	r3, #1
 810c762:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 810c764:	6878      	ldr	r0, [r7, #4]
 810c766:	f000 fa29 	bl	810cbbc <USB_GetMode>
 810c76a:	4603      	mov	r3, r0
 810c76c:	2b01      	cmp	r3, #1
 810c76e:	d01e      	beq.n	810c7ae <USB_SetCurrentMode+0x84>
 810c770:	68fb      	ldr	r3, [r7, #12]
 810c772:	2b31      	cmp	r3, #49	; 0x31
 810c774:	d9f0      	bls.n	810c758 <USB_SetCurrentMode+0x2e>
 810c776:	e01a      	b.n	810c7ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810c778:	78fb      	ldrb	r3, [r7, #3]
 810c77a:	2b00      	cmp	r3, #0
 810c77c:	d115      	bne.n	810c7aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810c77e:	687b      	ldr	r3, [r7, #4]
 810c780:	68db      	ldr	r3, [r3, #12]
 810c782:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 810c786:	687b      	ldr	r3, [r7, #4]
 810c788:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 810c78a:	2001      	movs	r0, #1
 810c78c:	f7f6 f8bc 	bl	8102908 <HAL_Delay>
      ms++;
 810c790:	68fb      	ldr	r3, [r7, #12]
 810c792:	3301      	adds	r3, #1
 810c794:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 810c796:	6878      	ldr	r0, [r7, #4]
 810c798:	f000 fa10 	bl	810cbbc <USB_GetMode>
 810c79c:	4603      	mov	r3, r0
 810c79e:	2b00      	cmp	r3, #0
 810c7a0:	d005      	beq.n	810c7ae <USB_SetCurrentMode+0x84>
 810c7a2:	68fb      	ldr	r3, [r7, #12]
 810c7a4:	2b31      	cmp	r3, #49	; 0x31
 810c7a6:	d9f0      	bls.n	810c78a <USB_SetCurrentMode+0x60>
 810c7a8:	e001      	b.n	810c7ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810c7aa:	2301      	movs	r3, #1
 810c7ac:	e005      	b.n	810c7ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 810c7ae:	68fb      	ldr	r3, [r7, #12]
 810c7b0:	2b32      	cmp	r3, #50	; 0x32
 810c7b2:	d101      	bne.n	810c7b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810c7b4:	2301      	movs	r3, #1
 810c7b6:	e000      	b.n	810c7ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810c7b8:	2300      	movs	r3, #0
}
 810c7ba:	4618      	mov	r0, r3
 810c7bc:	3710      	adds	r7, #16
 810c7be:	46bd      	mov	sp, r7
 810c7c0:	bd80      	pop	{r7, pc}
	...

0810c7c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810c7c4:	b084      	sub	sp, #16
 810c7c6:	b580      	push	{r7, lr}
 810c7c8:	b086      	sub	sp, #24
 810c7ca:	af00      	add	r7, sp, #0
 810c7cc:	6078      	str	r0, [r7, #4]
 810c7ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 810c7d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810c7d6:	2300      	movs	r3, #0
 810c7d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810c7da:	687b      	ldr	r3, [r7, #4]
 810c7dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810c7de:	2300      	movs	r3, #0
 810c7e0:	613b      	str	r3, [r7, #16]
 810c7e2:	e009      	b.n	810c7f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810c7e4:	687a      	ldr	r2, [r7, #4]
 810c7e6:	693b      	ldr	r3, [r7, #16]
 810c7e8:	3340      	adds	r3, #64	; 0x40
 810c7ea:	009b      	lsls	r3, r3, #2
 810c7ec:	4413      	add	r3, r2
 810c7ee:	2200      	movs	r2, #0
 810c7f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810c7f2:	693b      	ldr	r3, [r7, #16]
 810c7f4:	3301      	adds	r3, #1
 810c7f6:	613b      	str	r3, [r7, #16]
 810c7f8:	693b      	ldr	r3, [r7, #16]
 810c7fa:	2b0e      	cmp	r3, #14
 810c7fc:	d9f2      	bls.n	810c7e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810c7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810c800:	2b00      	cmp	r3, #0
 810c802:	d11c      	bne.n	810c83e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810c804:	68fb      	ldr	r3, [r7, #12]
 810c806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c80a:	685b      	ldr	r3, [r3, #4]
 810c80c:	68fa      	ldr	r2, [r7, #12]
 810c80e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810c812:	f043 0302 	orr.w	r3, r3, #2
 810c816:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810c818:	687b      	ldr	r3, [r7, #4]
 810c81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c81c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 810c820:	687b      	ldr	r3, [r7, #4]
 810c822:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810c824:	687b      	ldr	r3, [r7, #4]
 810c826:	681b      	ldr	r3, [r3, #0]
 810c828:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810c82c:	687b      	ldr	r3, [r7, #4]
 810c82e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810c830:	687b      	ldr	r3, [r7, #4]
 810c832:	681b      	ldr	r3, [r3, #0]
 810c834:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810c838:	687b      	ldr	r3, [r7, #4]
 810c83a:	601a      	str	r2, [r3, #0]
 810c83c:	e005      	b.n	810c84a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810c83e:	687b      	ldr	r3, [r7, #4]
 810c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c842:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 810c846:	687b      	ldr	r3, [r7, #4]
 810c848:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810c84a:	68fb      	ldr	r3, [r7, #12]
 810c84c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810c850:	461a      	mov	r2, r3
 810c852:	2300      	movs	r3, #0
 810c854:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 810c856:	68fb      	ldr	r3, [r7, #12]
 810c858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c85c:	4619      	mov	r1, r3
 810c85e:	68fb      	ldr	r3, [r7, #12]
 810c860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c864:	461a      	mov	r2, r3
 810c866:	680b      	ldr	r3, [r1, #0]
 810c868:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810c86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810c86c:	2b01      	cmp	r3, #1
 810c86e:	d10c      	bne.n	810c88a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c872:	2b00      	cmp	r3, #0
 810c874:	d104      	bne.n	810c880 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810c876:	2100      	movs	r1, #0
 810c878:	6878      	ldr	r0, [r7, #4]
 810c87a:	f000 f965 	bl	810cb48 <USB_SetDevSpeed>
 810c87e:	e008      	b.n	810c892 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810c880:	2101      	movs	r1, #1
 810c882:	6878      	ldr	r0, [r7, #4]
 810c884:	f000 f960 	bl	810cb48 <USB_SetDevSpeed>
 810c888:	e003      	b.n	810c892 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810c88a:	2103      	movs	r1, #3
 810c88c:	6878      	ldr	r0, [r7, #4]
 810c88e:	f000 f95b 	bl	810cb48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810c892:	2110      	movs	r1, #16
 810c894:	6878      	ldr	r0, [r7, #4]
 810c896:	f000 f8f3 	bl	810ca80 <USB_FlushTxFifo>
 810c89a:	4603      	mov	r3, r0
 810c89c:	2b00      	cmp	r3, #0
 810c89e:	d001      	beq.n	810c8a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 810c8a0:	2301      	movs	r3, #1
 810c8a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810c8a4:	6878      	ldr	r0, [r7, #4]
 810c8a6:	f000 f91f 	bl	810cae8 <USB_FlushRxFifo>
 810c8aa:	4603      	mov	r3, r0
 810c8ac:	2b00      	cmp	r3, #0
 810c8ae:	d001      	beq.n	810c8b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 810c8b0:	2301      	movs	r3, #1
 810c8b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810c8b4:	68fb      	ldr	r3, [r7, #12]
 810c8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c8ba:	461a      	mov	r2, r3
 810c8bc:	2300      	movs	r3, #0
 810c8be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810c8c0:	68fb      	ldr	r3, [r7, #12]
 810c8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c8c6:	461a      	mov	r2, r3
 810c8c8:	2300      	movs	r3, #0
 810c8ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810c8cc:	68fb      	ldr	r3, [r7, #12]
 810c8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810c8d2:	461a      	mov	r2, r3
 810c8d4:	2300      	movs	r3, #0
 810c8d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810c8d8:	2300      	movs	r3, #0
 810c8da:	613b      	str	r3, [r7, #16]
 810c8dc:	e043      	b.n	810c966 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810c8de:	693b      	ldr	r3, [r7, #16]
 810c8e0:	015a      	lsls	r2, r3, #5
 810c8e2:	68fb      	ldr	r3, [r7, #12]
 810c8e4:	4413      	add	r3, r2
 810c8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c8ea:	681b      	ldr	r3, [r3, #0]
 810c8ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810c8f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810c8f4:	d118      	bne.n	810c928 <USB_DevInit+0x164>
    {
      if (i == 0U)
 810c8f6:	693b      	ldr	r3, [r7, #16]
 810c8f8:	2b00      	cmp	r3, #0
 810c8fa:	d10a      	bne.n	810c912 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810c8fc:	693b      	ldr	r3, [r7, #16]
 810c8fe:	015a      	lsls	r2, r3, #5
 810c900:	68fb      	ldr	r3, [r7, #12]
 810c902:	4413      	add	r3, r2
 810c904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c908:	461a      	mov	r2, r3
 810c90a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810c90e:	6013      	str	r3, [r2, #0]
 810c910:	e013      	b.n	810c93a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810c912:	693b      	ldr	r3, [r7, #16]
 810c914:	015a      	lsls	r2, r3, #5
 810c916:	68fb      	ldr	r3, [r7, #12]
 810c918:	4413      	add	r3, r2
 810c91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c91e:	461a      	mov	r2, r3
 810c920:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810c924:	6013      	str	r3, [r2, #0]
 810c926:	e008      	b.n	810c93a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810c928:	693b      	ldr	r3, [r7, #16]
 810c92a:	015a      	lsls	r2, r3, #5
 810c92c:	68fb      	ldr	r3, [r7, #12]
 810c92e:	4413      	add	r3, r2
 810c930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c934:	461a      	mov	r2, r3
 810c936:	2300      	movs	r3, #0
 810c938:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810c93a:	693b      	ldr	r3, [r7, #16]
 810c93c:	015a      	lsls	r2, r3, #5
 810c93e:	68fb      	ldr	r3, [r7, #12]
 810c940:	4413      	add	r3, r2
 810c942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c946:	461a      	mov	r2, r3
 810c948:	2300      	movs	r3, #0
 810c94a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810c94c:	693b      	ldr	r3, [r7, #16]
 810c94e:	015a      	lsls	r2, r3, #5
 810c950:	68fb      	ldr	r3, [r7, #12]
 810c952:	4413      	add	r3, r2
 810c954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810c958:	461a      	mov	r2, r3
 810c95a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810c95e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810c960:	693b      	ldr	r3, [r7, #16]
 810c962:	3301      	adds	r3, #1
 810c964:	613b      	str	r3, [r7, #16]
 810c966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c968:	693a      	ldr	r2, [r7, #16]
 810c96a:	429a      	cmp	r2, r3
 810c96c:	d3b7      	bcc.n	810c8de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810c96e:	2300      	movs	r3, #0
 810c970:	613b      	str	r3, [r7, #16]
 810c972:	e043      	b.n	810c9fc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810c974:	693b      	ldr	r3, [r7, #16]
 810c976:	015a      	lsls	r2, r3, #5
 810c978:	68fb      	ldr	r3, [r7, #12]
 810c97a:	4413      	add	r3, r2
 810c97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c980:	681b      	ldr	r3, [r3, #0]
 810c982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810c986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810c98a:	d118      	bne.n	810c9be <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 810c98c:	693b      	ldr	r3, [r7, #16]
 810c98e:	2b00      	cmp	r3, #0
 810c990:	d10a      	bne.n	810c9a8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810c992:	693b      	ldr	r3, [r7, #16]
 810c994:	015a      	lsls	r2, r3, #5
 810c996:	68fb      	ldr	r3, [r7, #12]
 810c998:	4413      	add	r3, r2
 810c99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c99e:	461a      	mov	r2, r3
 810c9a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810c9a4:	6013      	str	r3, [r2, #0]
 810c9a6:	e013      	b.n	810c9d0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810c9a8:	693b      	ldr	r3, [r7, #16]
 810c9aa:	015a      	lsls	r2, r3, #5
 810c9ac:	68fb      	ldr	r3, [r7, #12]
 810c9ae:	4413      	add	r3, r2
 810c9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c9b4:	461a      	mov	r2, r3
 810c9b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810c9ba:	6013      	str	r3, [r2, #0]
 810c9bc:	e008      	b.n	810c9d0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810c9be:	693b      	ldr	r3, [r7, #16]
 810c9c0:	015a      	lsls	r2, r3, #5
 810c9c2:	68fb      	ldr	r3, [r7, #12]
 810c9c4:	4413      	add	r3, r2
 810c9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c9ca:	461a      	mov	r2, r3
 810c9cc:	2300      	movs	r3, #0
 810c9ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810c9d0:	693b      	ldr	r3, [r7, #16]
 810c9d2:	015a      	lsls	r2, r3, #5
 810c9d4:	68fb      	ldr	r3, [r7, #12]
 810c9d6:	4413      	add	r3, r2
 810c9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c9dc:	461a      	mov	r2, r3
 810c9de:	2300      	movs	r3, #0
 810c9e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810c9e2:	693b      	ldr	r3, [r7, #16]
 810c9e4:	015a      	lsls	r2, r3, #5
 810c9e6:	68fb      	ldr	r3, [r7, #12]
 810c9e8:	4413      	add	r3, r2
 810c9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810c9ee:	461a      	mov	r2, r3
 810c9f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810c9f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810c9f6:	693b      	ldr	r3, [r7, #16]
 810c9f8:	3301      	adds	r3, #1
 810c9fa:	613b      	str	r3, [r7, #16]
 810c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810c9fe:	693a      	ldr	r2, [r7, #16]
 810ca00:	429a      	cmp	r2, r3
 810ca02:	d3b7      	bcc.n	810c974 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810ca04:	68fb      	ldr	r3, [r7, #12]
 810ca06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810ca0a:	691b      	ldr	r3, [r3, #16]
 810ca0c:	68fa      	ldr	r2, [r7, #12]
 810ca0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810ca12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810ca16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810ca18:	687b      	ldr	r3, [r7, #4]
 810ca1a:	2200      	movs	r2, #0
 810ca1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810ca1e:	687b      	ldr	r3, [r7, #4]
 810ca20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 810ca24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ca28:	2b00      	cmp	r3, #0
 810ca2a:	d105      	bne.n	810ca38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810ca2c:	687b      	ldr	r3, [r7, #4]
 810ca2e:	699b      	ldr	r3, [r3, #24]
 810ca30:	f043 0210 	orr.w	r2, r3, #16
 810ca34:	687b      	ldr	r3, [r7, #4]
 810ca36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810ca38:	687b      	ldr	r3, [r7, #4]
 810ca3a:	699a      	ldr	r2, [r3, #24]
 810ca3c:	4b0f      	ldr	r3, [pc, #60]	; (810ca7c <USB_DevInit+0x2b8>)
 810ca3e:	4313      	orrs	r3, r2
 810ca40:	687a      	ldr	r2, [r7, #4]
 810ca42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810ca44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810ca46:	2b00      	cmp	r3, #0
 810ca48:	d005      	beq.n	810ca56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810ca4a:	687b      	ldr	r3, [r7, #4]
 810ca4c:	699b      	ldr	r3, [r3, #24]
 810ca4e:	f043 0208 	orr.w	r2, r3, #8
 810ca52:	687b      	ldr	r3, [r7, #4]
 810ca54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810ca56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810ca58:	2b01      	cmp	r3, #1
 810ca5a:	d107      	bne.n	810ca6c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810ca5c:	687b      	ldr	r3, [r7, #4]
 810ca5e:	699b      	ldr	r3, [r3, #24]
 810ca60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810ca64:	f043 0304 	orr.w	r3, r3, #4
 810ca68:	687a      	ldr	r2, [r7, #4]
 810ca6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810ca6c:	7dfb      	ldrb	r3, [r7, #23]
}
 810ca6e:	4618      	mov	r0, r3
 810ca70:	3718      	adds	r7, #24
 810ca72:	46bd      	mov	sp, r7
 810ca74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810ca78:	b004      	add	sp, #16
 810ca7a:	4770      	bx	lr
 810ca7c:	803c3800 	.word	0x803c3800

0810ca80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810ca80:	b480      	push	{r7}
 810ca82:	b085      	sub	sp, #20
 810ca84:	af00      	add	r7, sp, #0
 810ca86:	6078      	str	r0, [r7, #4]
 810ca88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810ca8a:	2300      	movs	r3, #0
 810ca8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810ca8e:	68fb      	ldr	r3, [r7, #12]
 810ca90:	3301      	adds	r3, #1
 810ca92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810ca94:	68fb      	ldr	r3, [r7, #12]
 810ca96:	4a13      	ldr	r2, [pc, #76]	; (810cae4 <USB_FlushTxFifo+0x64>)
 810ca98:	4293      	cmp	r3, r2
 810ca9a:	d901      	bls.n	810caa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810ca9c:	2303      	movs	r3, #3
 810ca9e:	e01b      	b.n	810cad8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810caa0:	687b      	ldr	r3, [r7, #4]
 810caa2:	691b      	ldr	r3, [r3, #16]
 810caa4:	2b00      	cmp	r3, #0
 810caa6:	daf2      	bge.n	810ca8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 810caa8:	2300      	movs	r3, #0
 810caaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810caac:	683b      	ldr	r3, [r7, #0]
 810caae:	019b      	lsls	r3, r3, #6
 810cab0:	f043 0220 	orr.w	r2, r3, #32
 810cab4:	687b      	ldr	r3, [r7, #4]
 810cab6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810cab8:	68fb      	ldr	r3, [r7, #12]
 810caba:	3301      	adds	r3, #1
 810cabc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810cabe:	68fb      	ldr	r3, [r7, #12]
 810cac0:	4a08      	ldr	r2, [pc, #32]	; (810cae4 <USB_FlushTxFifo+0x64>)
 810cac2:	4293      	cmp	r3, r2
 810cac4:	d901      	bls.n	810caca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810cac6:	2303      	movs	r3, #3
 810cac8:	e006      	b.n	810cad8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810caca:	687b      	ldr	r3, [r7, #4]
 810cacc:	691b      	ldr	r3, [r3, #16]
 810cace:	f003 0320 	and.w	r3, r3, #32
 810cad2:	2b20      	cmp	r3, #32
 810cad4:	d0f0      	beq.n	810cab8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810cad6:	2300      	movs	r3, #0
}
 810cad8:	4618      	mov	r0, r3
 810cada:	3714      	adds	r7, #20
 810cadc:	46bd      	mov	sp, r7
 810cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cae2:	4770      	bx	lr
 810cae4:	00030d40 	.word	0x00030d40

0810cae8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810cae8:	b480      	push	{r7}
 810caea:	b085      	sub	sp, #20
 810caec:	af00      	add	r7, sp, #0
 810caee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810caf0:	2300      	movs	r3, #0
 810caf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810caf4:	68fb      	ldr	r3, [r7, #12]
 810caf6:	3301      	adds	r3, #1
 810caf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810cafa:	68fb      	ldr	r3, [r7, #12]
 810cafc:	4a11      	ldr	r2, [pc, #68]	; (810cb44 <USB_FlushRxFifo+0x5c>)
 810cafe:	4293      	cmp	r3, r2
 810cb00:	d901      	bls.n	810cb06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810cb02:	2303      	movs	r3, #3
 810cb04:	e018      	b.n	810cb38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810cb06:	687b      	ldr	r3, [r7, #4]
 810cb08:	691b      	ldr	r3, [r3, #16]
 810cb0a:	2b00      	cmp	r3, #0
 810cb0c:	daf2      	bge.n	810caf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810cb0e:	2300      	movs	r3, #0
 810cb10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810cb12:	687b      	ldr	r3, [r7, #4]
 810cb14:	2210      	movs	r2, #16
 810cb16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810cb18:	68fb      	ldr	r3, [r7, #12]
 810cb1a:	3301      	adds	r3, #1
 810cb1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810cb1e:	68fb      	ldr	r3, [r7, #12]
 810cb20:	4a08      	ldr	r2, [pc, #32]	; (810cb44 <USB_FlushRxFifo+0x5c>)
 810cb22:	4293      	cmp	r3, r2
 810cb24:	d901      	bls.n	810cb2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 810cb26:	2303      	movs	r3, #3
 810cb28:	e006      	b.n	810cb38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810cb2a:	687b      	ldr	r3, [r7, #4]
 810cb2c:	691b      	ldr	r3, [r3, #16]
 810cb2e:	f003 0310 	and.w	r3, r3, #16
 810cb32:	2b10      	cmp	r3, #16
 810cb34:	d0f0      	beq.n	810cb18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 810cb36:	2300      	movs	r3, #0
}
 810cb38:	4618      	mov	r0, r3
 810cb3a:	3714      	adds	r7, #20
 810cb3c:	46bd      	mov	sp, r7
 810cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb42:	4770      	bx	lr
 810cb44:	00030d40 	.word	0x00030d40

0810cb48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810cb48:	b480      	push	{r7}
 810cb4a:	b085      	sub	sp, #20
 810cb4c:	af00      	add	r7, sp, #0
 810cb4e:	6078      	str	r0, [r7, #4]
 810cb50:	460b      	mov	r3, r1
 810cb52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810cb54:	687b      	ldr	r3, [r7, #4]
 810cb56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810cb58:	68fb      	ldr	r3, [r7, #12]
 810cb5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810cb5e:	681a      	ldr	r2, [r3, #0]
 810cb60:	78fb      	ldrb	r3, [r7, #3]
 810cb62:	68f9      	ldr	r1, [r7, #12]
 810cb64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 810cb68:	4313      	orrs	r3, r2
 810cb6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810cb6c:	2300      	movs	r3, #0
}
 810cb6e:	4618      	mov	r0, r3
 810cb70:	3714      	adds	r7, #20
 810cb72:	46bd      	mov	sp, r7
 810cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb78:	4770      	bx	lr

0810cb7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 810cb7a:	b480      	push	{r7}
 810cb7c:	b085      	sub	sp, #20
 810cb7e:	af00      	add	r7, sp, #0
 810cb80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810cb82:	687b      	ldr	r3, [r7, #4]
 810cb84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810cb86:	68fb      	ldr	r3, [r7, #12]
 810cb88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810cb8c:	681b      	ldr	r3, [r3, #0]
 810cb8e:	68fa      	ldr	r2, [r7, #12]
 810cb90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810cb94:	f023 0303 	bic.w	r3, r3, #3
 810cb98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810cb9a:	68fb      	ldr	r3, [r7, #12]
 810cb9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810cba0:	685b      	ldr	r3, [r3, #4]
 810cba2:	68fa      	ldr	r2, [r7, #12]
 810cba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810cba8:	f043 0302 	orr.w	r3, r3, #2
 810cbac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810cbae:	2300      	movs	r3, #0
}
 810cbb0:	4618      	mov	r0, r3
 810cbb2:	3714      	adds	r7, #20
 810cbb4:	46bd      	mov	sp, r7
 810cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbba:	4770      	bx	lr

0810cbbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 810cbbc:	b480      	push	{r7}
 810cbbe:	b083      	sub	sp, #12
 810cbc0:	af00      	add	r7, sp, #0
 810cbc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810cbc4:	687b      	ldr	r3, [r7, #4]
 810cbc6:	695b      	ldr	r3, [r3, #20]
 810cbc8:	f003 0301 	and.w	r3, r3, #1
}
 810cbcc:	4618      	mov	r0, r3
 810cbce:	370c      	adds	r7, #12
 810cbd0:	46bd      	mov	sp, r7
 810cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cbd6:	4770      	bx	lr

0810cbd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810cbd8:	b480      	push	{r7}
 810cbda:	b085      	sub	sp, #20
 810cbdc:	af00      	add	r7, sp, #0
 810cbde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810cbe0:	2300      	movs	r3, #0
 810cbe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810cbe4:	68fb      	ldr	r3, [r7, #12]
 810cbe6:	3301      	adds	r3, #1
 810cbe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810cbea:	68fb      	ldr	r3, [r7, #12]
 810cbec:	4a13      	ldr	r2, [pc, #76]	; (810cc3c <USB_CoreReset+0x64>)
 810cbee:	4293      	cmp	r3, r2
 810cbf0:	d901      	bls.n	810cbf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810cbf2:	2303      	movs	r3, #3
 810cbf4:	e01b      	b.n	810cc2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810cbf6:	687b      	ldr	r3, [r7, #4]
 810cbf8:	691b      	ldr	r3, [r3, #16]
 810cbfa:	2b00      	cmp	r3, #0
 810cbfc:	daf2      	bge.n	810cbe4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810cbfe:	2300      	movs	r3, #0
 810cc00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810cc02:	687b      	ldr	r3, [r7, #4]
 810cc04:	691b      	ldr	r3, [r3, #16]
 810cc06:	f043 0201 	orr.w	r2, r3, #1
 810cc0a:	687b      	ldr	r3, [r7, #4]
 810cc0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810cc0e:	68fb      	ldr	r3, [r7, #12]
 810cc10:	3301      	adds	r3, #1
 810cc12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810cc14:	68fb      	ldr	r3, [r7, #12]
 810cc16:	4a09      	ldr	r2, [pc, #36]	; (810cc3c <USB_CoreReset+0x64>)
 810cc18:	4293      	cmp	r3, r2
 810cc1a:	d901      	bls.n	810cc20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810cc1c:	2303      	movs	r3, #3
 810cc1e:	e006      	b.n	810cc2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810cc20:	687b      	ldr	r3, [r7, #4]
 810cc22:	691b      	ldr	r3, [r3, #16]
 810cc24:	f003 0301 	and.w	r3, r3, #1
 810cc28:	2b01      	cmp	r3, #1
 810cc2a:	d0f0      	beq.n	810cc0e <USB_CoreReset+0x36>

  return HAL_OK;
 810cc2c:	2300      	movs	r3, #0
}
 810cc2e:	4618      	mov	r0, r3
 810cc30:	3714      	adds	r7, #20
 810cc32:	46bd      	mov	sp, r7
 810cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc38:	4770      	bx	lr
 810cc3a:	bf00      	nop
 810cc3c:	00030d40 	.word	0x00030d40

0810cc40 <__NVIC_SetPriority>:
{
 810cc40:	b480      	push	{r7}
 810cc42:	b083      	sub	sp, #12
 810cc44:	af00      	add	r7, sp, #0
 810cc46:	4603      	mov	r3, r0
 810cc48:	6039      	str	r1, [r7, #0]
 810cc4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810cc4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810cc50:	2b00      	cmp	r3, #0
 810cc52:	db0a      	blt.n	810cc6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810cc54:	683b      	ldr	r3, [r7, #0]
 810cc56:	b2da      	uxtb	r2, r3
 810cc58:	490c      	ldr	r1, [pc, #48]	; (810cc8c <__NVIC_SetPriority+0x4c>)
 810cc5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810cc5e:	0112      	lsls	r2, r2, #4
 810cc60:	b2d2      	uxtb	r2, r2
 810cc62:	440b      	add	r3, r1
 810cc64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 810cc68:	e00a      	b.n	810cc80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810cc6a:	683b      	ldr	r3, [r7, #0]
 810cc6c:	b2da      	uxtb	r2, r3
 810cc6e:	4908      	ldr	r1, [pc, #32]	; (810cc90 <__NVIC_SetPriority+0x50>)
 810cc70:	88fb      	ldrh	r3, [r7, #6]
 810cc72:	f003 030f 	and.w	r3, r3, #15
 810cc76:	3b04      	subs	r3, #4
 810cc78:	0112      	lsls	r2, r2, #4
 810cc7a:	b2d2      	uxtb	r2, r2
 810cc7c:	440b      	add	r3, r1
 810cc7e:	761a      	strb	r2, [r3, #24]
}
 810cc80:	bf00      	nop
 810cc82:	370c      	adds	r7, #12
 810cc84:	46bd      	mov	sp, r7
 810cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc8a:	4770      	bx	lr
 810cc8c:	e000e100 	.word	0xe000e100
 810cc90:	e000ed00 	.word	0xe000ed00

0810cc94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810cc94:	b580      	push	{r7, lr}
 810cc96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810cc98:	4b05      	ldr	r3, [pc, #20]	; (810ccb0 <SysTick_Handler+0x1c>)
 810cc9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810cc9c:	f002 fada 	bl	810f254 <xTaskGetSchedulerState>
 810cca0:	4603      	mov	r3, r0
 810cca2:	2b01      	cmp	r3, #1
 810cca4:	d001      	beq.n	810ccaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810cca6:	f000 fe1f 	bl	810d8e8 <xPortSysTickHandler>
  }
}
 810ccaa:	bf00      	nop
 810ccac:	bd80      	pop	{r7, pc}
 810ccae:	bf00      	nop
 810ccb0:	e000e010 	.word	0xe000e010

0810ccb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810ccb4:	b580      	push	{r7, lr}
 810ccb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810ccb8:	2100      	movs	r1, #0
 810ccba:	f06f 0004 	mvn.w	r0, #4
 810ccbe:	f7ff ffbf 	bl	810cc40 <__NVIC_SetPriority>
#endif
}
 810ccc2:	bf00      	nop
 810ccc4:	bd80      	pop	{r7, pc}
	...

0810ccc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810ccc8:	b480      	push	{r7}
 810ccca:	b083      	sub	sp, #12
 810cccc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ccce:	f3ef 8305 	mrs	r3, IPSR
 810ccd2:	603b      	str	r3, [r7, #0]
  return(result);
 810ccd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810ccd6:	2b00      	cmp	r3, #0
 810ccd8:	d003      	beq.n	810cce2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810ccda:	f06f 0305 	mvn.w	r3, #5
 810ccde:	607b      	str	r3, [r7, #4]
 810cce0:	e00c      	b.n	810ccfc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810cce2:	4b0a      	ldr	r3, [pc, #40]	; (810cd0c <osKernelInitialize+0x44>)
 810cce4:	681b      	ldr	r3, [r3, #0]
 810cce6:	2b00      	cmp	r3, #0
 810cce8:	d105      	bne.n	810ccf6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810ccea:	4b08      	ldr	r3, [pc, #32]	; (810cd0c <osKernelInitialize+0x44>)
 810ccec:	2201      	movs	r2, #1
 810ccee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810ccf0:	2300      	movs	r3, #0
 810ccf2:	607b      	str	r3, [r7, #4]
 810ccf4:	e002      	b.n	810ccfc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810ccf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810ccfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810ccfc:	687b      	ldr	r3, [r7, #4]
}
 810ccfe:	4618      	mov	r0, r3
 810cd00:	370c      	adds	r7, #12
 810cd02:	46bd      	mov	sp, r7
 810cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd08:	4770      	bx	lr
 810cd0a:	bf00      	nop
 810cd0c:	10000dc8 	.word	0x10000dc8

0810cd10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810cd10:	b580      	push	{r7, lr}
 810cd12:	b082      	sub	sp, #8
 810cd14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810cd16:	f3ef 8305 	mrs	r3, IPSR
 810cd1a:	603b      	str	r3, [r7, #0]
  return(result);
 810cd1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810cd1e:	2b00      	cmp	r3, #0
 810cd20:	d003      	beq.n	810cd2a <osKernelStart+0x1a>
    stat = osErrorISR;
 810cd22:	f06f 0305 	mvn.w	r3, #5
 810cd26:	607b      	str	r3, [r7, #4]
 810cd28:	e010      	b.n	810cd4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810cd2a:	4b0b      	ldr	r3, [pc, #44]	; (810cd58 <osKernelStart+0x48>)
 810cd2c:	681b      	ldr	r3, [r3, #0]
 810cd2e:	2b01      	cmp	r3, #1
 810cd30:	d109      	bne.n	810cd46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810cd32:	f7ff ffbf 	bl	810ccb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810cd36:	4b08      	ldr	r3, [pc, #32]	; (810cd58 <osKernelStart+0x48>)
 810cd38:	2202      	movs	r2, #2
 810cd3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810cd3c:	f001 fe2e 	bl	810e99c <vTaskStartScheduler>
      stat = osOK;
 810cd40:	2300      	movs	r3, #0
 810cd42:	607b      	str	r3, [r7, #4]
 810cd44:	e002      	b.n	810cd4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 810cd46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810cd4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810cd4c:	687b      	ldr	r3, [r7, #4]
}
 810cd4e:	4618      	mov	r0, r3
 810cd50:	3708      	adds	r7, #8
 810cd52:	46bd      	mov	sp, r7
 810cd54:	bd80      	pop	{r7, pc}
 810cd56:	bf00      	nop
 810cd58:	10000dc8 	.word	0x10000dc8

0810cd5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810cd5c:	b580      	push	{r7, lr}
 810cd5e:	b08e      	sub	sp, #56	; 0x38
 810cd60:	af04      	add	r7, sp, #16
 810cd62:	60f8      	str	r0, [r7, #12]
 810cd64:	60b9      	str	r1, [r7, #8]
 810cd66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810cd68:	2300      	movs	r3, #0
 810cd6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810cd6c:	f3ef 8305 	mrs	r3, IPSR
 810cd70:	617b      	str	r3, [r7, #20]
  return(result);
 810cd72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810cd74:	2b00      	cmp	r3, #0
 810cd76:	d17e      	bne.n	810ce76 <osThreadNew+0x11a>
 810cd78:	68fb      	ldr	r3, [r7, #12]
 810cd7a:	2b00      	cmp	r3, #0
 810cd7c:	d07b      	beq.n	810ce76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810cd7e:	2380      	movs	r3, #128	; 0x80
 810cd80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810cd82:	2318      	movs	r3, #24
 810cd84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810cd86:	2300      	movs	r3, #0
 810cd88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 810cd8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810cd8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810cd90:	687b      	ldr	r3, [r7, #4]
 810cd92:	2b00      	cmp	r3, #0
 810cd94:	d045      	beq.n	810ce22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810cd96:	687b      	ldr	r3, [r7, #4]
 810cd98:	681b      	ldr	r3, [r3, #0]
 810cd9a:	2b00      	cmp	r3, #0
 810cd9c:	d002      	beq.n	810cda4 <osThreadNew+0x48>
        name = attr->name;
 810cd9e:	687b      	ldr	r3, [r7, #4]
 810cda0:	681b      	ldr	r3, [r3, #0]
 810cda2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 810cda4:	687b      	ldr	r3, [r7, #4]
 810cda6:	699b      	ldr	r3, [r3, #24]
 810cda8:	2b00      	cmp	r3, #0
 810cdaa:	d002      	beq.n	810cdb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810cdac:	687b      	ldr	r3, [r7, #4]
 810cdae:	699b      	ldr	r3, [r3, #24]
 810cdb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810cdb2:	69fb      	ldr	r3, [r7, #28]
 810cdb4:	2b00      	cmp	r3, #0
 810cdb6:	d008      	beq.n	810cdca <osThreadNew+0x6e>
 810cdb8:	69fb      	ldr	r3, [r7, #28]
 810cdba:	2b38      	cmp	r3, #56	; 0x38
 810cdbc:	d805      	bhi.n	810cdca <osThreadNew+0x6e>
 810cdbe:	687b      	ldr	r3, [r7, #4]
 810cdc0:	685b      	ldr	r3, [r3, #4]
 810cdc2:	f003 0301 	and.w	r3, r3, #1
 810cdc6:	2b00      	cmp	r3, #0
 810cdc8:	d001      	beq.n	810cdce <osThreadNew+0x72>
        return (NULL);
 810cdca:	2300      	movs	r3, #0
 810cdcc:	e054      	b.n	810ce78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810cdce:	687b      	ldr	r3, [r7, #4]
 810cdd0:	695b      	ldr	r3, [r3, #20]
 810cdd2:	2b00      	cmp	r3, #0
 810cdd4:	d003      	beq.n	810cdde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810cdd6:	687b      	ldr	r3, [r7, #4]
 810cdd8:	695b      	ldr	r3, [r3, #20]
 810cdda:	089b      	lsrs	r3, r3, #2
 810cddc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810cdde:	687b      	ldr	r3, [r7, #4]
 810cde0:	689b      	ldr	r3, [r3, #8]
 810cde2:	2b00      	cmp	r3, #0
 810cde4:	d00e      	beq.n	810ce04 <osThreadNew+0xa8>
 810cde6:	687b      	ldr	r3, [r7, #4]
 810cde8:	68db      	ldr	r3, [r3, #12]
 810cdea:	2bbb      	cmp	r3, #187	; 0xbb
 810cdec:	d90a      	bls.n	810ce04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810cdee:	687b      	ldr	r3, [r7, #4]
 810cdf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810cdf2:	2b00      	cmp	r3, #0
 810cdf4:	d006      	beq.n	810ce04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810cdf6:	687b      	ldr	r3, [r7, #4]
 810cdf8:	695b      	ldr	r3, [r3, #20]
 810cdfa:	2b00      	cmp	r3, #0
 810cdfc:	d002      	beq.n	810ce04 <osThreadNew+0xa8>
        mem = 1;
 810cdfe:	2301      	movs	r3, #1
 810ce00:	61bb      	str	r3, [r7, #24]
 810ce02:	e010      	b.n	810ce26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810ce04:	687b      	ldr	r3, [r7, #4]
 810ce06:	689b      	ldr	r3, [r3, #8]
 810ce08:	2b00      	cmp	r3, #0
 810ce0a:	d10c      	bne.n	810ce26 <osThreadNew+0xca>
 810ce0c:	687b      	ldr	r3, [r7, #4]
 810ce0e:	68db      	ldr	r3, [r3, #12]
 810ce10:	2b00      	cmp	r3, #0
 810ce12:	d108      	bne.n	810ce26 <osThreadNew+0xca>
 810ce14:	687b      	ldr	r3, [r7, #4]
 810ce16:	691b      	ldr	r3, [r3, #16]
 810ce18:	2b00      	cmp	r3, #0
 810ce1a:	d104      	bne.n	810ce26 <osThreadNew+0xca>
          mem = 0;
 810ce1c:	2300      	movs	r3, #0
 810ce1e:	61bb      	str	r3, [r7, #24]
 810ce20:	e001      	b.n	810ce26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810ce22:	2300      	movs	r3, #0
 810ce24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810ce26:	69bb      	ldr	r3, [r7, #24]
 810ce28:	2b01      	cmp	r3, #1
 810ce2a:	d110      	bne.n	810ce4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810ce2c:	687b      	ldr	r3, [r7, #4]
 810ce2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810ce30:	687a      	ldr	r2, [r7, #4]
 810ce32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810ce34:	9202      	str	r2, [sp, #8]
 810ce36:	9301      	str	r3, [sp, #4]
 810ce38:	69fb      	ldr	r3, [r7, #28]
 810ce3a:	9300      	str	r3, [sp, #0]
 810ce3c:	68bb      	ldr	r3, [r7, #8]
 810ce3e:	6a3a      	ldr	r2, [r7, #32]
 810ce40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810ce42:	68f8      	ldr	r0, [r7, #12]
 810ce44:	f001 fbbe 	bl	810e5c4 <xTaskCreateStatic>
 810ce48:	4603      	mov	r3, r0
 810ce4a:	613b      	str	r3, [r7, #16]
 810ce4c:	e013      	b.n	810ce76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810ce4e:	69bb      	ldr	r3, [r7, #24]
 810ce50:	2b00      	cmp	r3, #0
 810ce52:	d110      	bne.n	810ce76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810ce54:	6a3b      	ldr	r3, [r7, #32]
 810ce56:	b29a      	uxth	r2, r3
 810ce58:	f107 0310 	add.w	r3, r7, #16
 810ce5c:	9301      	str	r3, [sp, #4]
 810ce5e:	69fb      	ldr	r3, [r7, #28]
 810ce60:	9300      	str	r3, [sp, #0]
 810ce62:	68bb      	ldr	r3, [r7, #8]
 810ce64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810ce66:	68f8      	ldr	r0, [r7, #12]
 810ce68:	f001 fc09 	bl	810e67e <xTaskCreate>
 810ce6c:	4603      	mov	r3, r0
 810ce6e:	2b01      	cmp	r3, #1
 810ce70:	d001      	beq.n	810ce76 <osThreadNew+0x11a>
            hTask = NULL;
 810ce72:	2300      	movs	r3, #0
 810ce74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810ce76:	693b      	ldr	r3, [r7, #16]
}
 810ce78:	4618      	mov	r0, r3
 810ce7a:	3728      	adds	r7, #40	; 0x28
 810ce7c:	46bd      	mov	sp, r7
 810ce7e:	bd80      	pop	{r7, pc}

0810ce80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810ce80:	b580      	push	{r7, lr}
 810ce82:	b084      	sub	sp, #16
 810ce84:	af00      	add	r7, sp, #0
 810ce86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ce88:	f3ef 8305 	mrs	r3, IPSR
 810ce8c:	60bb      	str	r3, [r7, #8]
  return(result);
 810ce8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810ce90:	2b00      	cmp	r3, #0
 810ce92:	d003      	beq.n	810ce9c <osDelay+0x1c>
    stat = osErrorISR;
 810ce94:	f06f 0305 	mvn.w	r3, #5
 810ce98:	60fb      	str	r3, [r7, #12]
 810ce9a:	e007      	b.n	810ceac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810ce9c:	2300      	movs	r3, #0
 810ce9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810cea0:	687b      	ldr	r3, [r7, #4]
 810cea2:	2b00      	cmp	r3, #0
 810cea4:	d002      	beq.n	810ceac <osDelay+0x2c>
      vTaskDelay(ticks);
 810cea6:	6878      	ldr	r0, [r7, #4]
 810cea8:	f001 fd44 	bl	810e934 <vTaskDelay>
    }
  }

  return (stat);
 810ceac:	68fb      	ldr	r3, [r7, #12]
}
 810ceae:	4618      	mov	r0, r3
 810ceb0:	3710      	adds	r7, #16
 810ceb2:	46bd      	mov	sp, r7
 810ceb4:	bd80      	pop	{r7, pc}

0810ceb6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 810ceb6:	b580      	push	{r7, lr}
 810ceb8:	b08a      	sub	sp, #40	; 0x28
 810ceba:	af02      	add	r7, sp, #8
 810cebc:	60f8      	str	r0, [r7, #12]
 810cebe:	60b9      	str	r1, [r7, #8]
 810cec0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 810cec2:	2300      	movs	r3, #0
 810cec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810cec6:	f3ef 8305 	mrs	r3, IPSR
 810ceca:	613b      	str	r3, [r7, #16]
  return(result);
 810cecc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 810cece:	2b00      	cmp	r3, #0
 810ced0:	d175      	bne.n	810cfbe <osSemaphoreNew+0x108>
 810ced2:	68fb      	ldr	r3, [r7, #12]
 810ced4:	2b00      	cmp	r3, #0
 810ced6:	d072      	beq.n	810cfbe <osSemaphoreNew+0x108>
 810ced8:	68ba      	ldr	r2, [r7, #8]
 810ceda:	68fb      	ldr	r3, [r7, #12]
 810cedc:	429a      	cmp	r2, r3
 810cede:	d86e      	bhi.n	810cfbe <osSemaphoreNew+0x108>
    mem = -1;
 810cee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810cee4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810cee6:	687b      	ldr	r3, [r7, #4]
 810cee8:	2b00      	cmp	r3, #0
 810ceea:	d015      	beq.n	810cf18 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810ceec:	687b      	ldr	r3, [r7, #4]
 810ceee:	689b      	ldr	r3, [r3, #8]
 810cef0:	2b00      	cmp	r3, #0
 810cef2:	d006      	beq.n	810cf02 <osSemaphoreNew+0x4c>
 810cef4:	687b      	ldr	r3, [r7, #4]
 810cef6:	68db      	ldr	r3, [r3, #12]
 810cef8:	2b4f      	cmp	r3, #79	; 0x4f
 810cefa:	d902      	bls.n	810cf02 <osSemaphoreNew+0x4c>
        mem = 1;
 810cefc:	2301      	movs	r3, #1
 810cefe:	61bb      	str	r3, [r7, #24]
 810cf00:	e00c      	b.n	810cf1c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810cf02:	687b      	ldr	r3, [r7, #4]
 810cf04:	689b      	ldr	r3, [r3, #8]
 810cf06:	2b00      	cmp	r3, #0
 810cf08:	d108      	bne.n	810cf1c <osSemaphoreNew+0x66>
 810cf0a:	687b      	ldr	r3, [r7, #4]
 810cf0c:	68db      	ldr	r3, [r3, #12]
 810cf0e:	2b00      	cmp	r3, #0
 810cf10:	d104      	bne.n	810cf1c <osSemaphoreNew+0x66>
          mem = 0;
 810cf12:	2300      	movs	r3, #0
 810cf14:	61bb      	str	r3, [r7, #24]
 810cf16:	e001      	b.n	810cf1c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 810cf18:	2300      	movs	r3, #0
 810cf1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 810cf1c:	69bb      	ldr	r3, [r7, #24]
 810cf1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810cf22:	d04c      	beq.n	810cfbe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 810cf24:	68fb      	ldr	r3, [r7, #12]
 810cf26:	2b01      	cmp	r3, #1
 810cf28:	d128      	bne.n	810cf7c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 810cf2a:	69bb      	ldr	r3, [r7, #24]
 810cf2c:	2b01      	cmp	r3, #1
 810cf2e:	d10a      	bne.n	810cf46 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 810cf30:	687b      	ldr	r3, [r7, #4]
 810cf32:	689b      	ldr	r3, [r3, #8]
 810cf34:	2203      	movs	r2, #3
 810cf36:	9200      	str	r2, [sp, #0]
 810cf38:	2200      	movs	r2, #0
 810cf3a:	2100      	movs	r1, #0
 810cf3c:	2001      	movs	r0, #1
 810cf3e:	f000 fdcb 	bl	810dad8 <xQueueGenericCreateStatic>
 810cf42:	61f8      	str	r0, [r7, #28]
 810cf44:	e005      	b.n	810cf52 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 810cf46:	2203      	movs	r2, #3
 810cf48:	2100      	movs	r1, #0
 810cf4a:	2001      	movs	r0, #1
 810cf4c:	f000 fe3c 	bl	810dbc8 <xQueueGenericCreate>
 810cf50:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 810cf52:	69fb      	ldr	r3, [r7, #28]
 810cf54:	2b00      	cmp	r3, #0
 810cf56:	d022      	beq.n	810cf9e <osSemaphoreNew+0xe8>
 810cf58:	68bb      	ldr	r3, [r7, #8]
 810cf5a:	2b00      	cmp	r3, #0
 810cf5c:	d01f      	beq.n	810cf9e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810cf5e:	2300      	movs	r3, #0
 810cf60:	2200      	movs	r2, #0
 810cf62:	2100      	movs	r1, #0
 810cf64:	69f8      	ldr	r0, [r7, #28]
 810cf66:	f000 fef7 	bl	810dd58 <xQueueGenericSend>
 810cf6a:	4603      	mov	r3, r0
 810cf6c:	2b01      	cmp	r3, #1
 810cf6e:	d016      	beq.n	810cf9e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 810cf70:	69f8      	ldr	r0, [r7, #28]
 810cf72:	f001 f96b 	bl	810e24c <vQueueDelete>
            hSemaphore = NULL;
 810cf76:	2300      	movs	r3, #0
 810cf78:	61fb      	str	r3, [r7, #28]
 810cf7a:	e010      	b.n	810cf9e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810cf7c:	69bb      	ldr	r3, [r7, #24]
 810cf7e:	2b01      	cmp	r3, #1
 810cf80:	d108      	bne.n	810cf94 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 810cf82:	687b      	ldr	r3, [r7, #4]
 810cf84:	689b      	ldr	r3, [r3, #8]
 810cf86:	461a      	mov	r2, r3
 810cf88:	68b9      	ldr	r1, [r7, #8]
 810cf8a:	68f8      	ldr	r0, [r7, #12]
 810cf8c:	f000 fe79 	bl	810dc82 <xQueueCreateCountingSemaphoreStatic>
 810cf90:	61f8      	str	r0, [r7, #28]
 810cf92:	e004      	b.n	810cf9e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 810cf94:	68b9      	ldr	r1, [r7, #8]
 810cf96:	68f8      	ldr	r0, [r7, #12]
 810cf98:	f000 feaa 	bl	810dcf0 <xQueueCreateCountingSemaphore>
 810cf9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 810cf9e:	69fb      	ldr	r3, [r7, #28]
 810cfa0:	2b00      	cmp	r3, #0
 810cfa2:	d00c      	beq.n	810cfbe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 810cfa4:	687b      	ldr	r3, [r7, #4]
 810cfa6:	2b00      	cmp	r3, #0
 810cfa8:	d003      	beq.n	810cfb2 <osSemaphoreNew+0xfc>
          name = attr->name;
 810cfaa:	687b      	ldr	r3, [r7, #4]
 810cfac:	681b      	ldr	r3, [r3, #0]
 810cfae:	617b      	str	r3, [r7, #20]
 810cfb0:	e001      	b.n	810cfb6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 810cfb2:	2300      	movs	r3, #0
 810cfb4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 810cfb6:	6979      	ldr	r1, [r7, #20]
 810cfb8:	69f8      	ldr	r0, [r7, #28]
 810cfba:	f001 fa7b 	bl	810e4b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 810cfbe:	69fb      	ldr	r3, [r7, #28]
}
 810cfc0:	4618      	mov	r0, r3
 810cfc2:	3720      	adds	r7, #32
 810cfc4:	46bd      	mov	sp, r7
 810cfc6:	bd80      	pop	{r7, pc}

0810cfc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810cfc8:	b480      	push	{r7}
 810cfca:	b085      	sub	sp, #20
 810cfcc:	af00      	add	r7, sp, #0
 810cfce:	60f8      	str	r0, [r7, #12]
 810cfd0:	60b9      	str	r1, [r7, #8]
 810cfd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810cfd4:	68fb      	ldr	r3, [r7, #12]
 810cfd6:	4a07      	ldr	r2, [pc, #28]	; (810cff4 <vApplicationGetIdleTaskMemory+0x2c>)
 810cfd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810cfda:	68bb      	ldr	r3, [r7, #8]
 810cfdc:	4a06      	ldr	r2, [pc, #24]	; (810cff8 <vApplicationGetIdleTaskMemory+0x30>)
 810cfde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810cfe0:	687b      	ldr	r3, [r7, #4]
 810cfe2:	2280      	movs	r2, #128	; 0x80
 810cfe4:	601a      	str	r2, [r3, #0]
}
 810cfe6:	bf00      	nop
 810cfe8:	3714      	adds	r7, #20
 810cfea:	46bd      	mov	sp, r7
 810cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cff0:	4770      	bx	lr
 810cff2:	bf00      	nop
 810cff4:	10000dcc 	.word	0x10000dcc
 810cff8:	10000e88 	.word	0x10000e88

0810cffc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810cffc:	b480      	push	{r7}
 810cffe:	b085      	sub	sp, #20
 810d000:	af00      	add	r7, sp, #0
 810d002:	60f8      	str	r0, [r7, #12]
 810d004:	60b9      	str	r1, [r7, #8]
 810d006:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810d008:	68fb      	ldr	r3, [r7, #12]
 810d00a:	4a07      	ldr	r2, [pc, #28]	; (810d028 <vApplicationGetTimerTaskMemory+0x2c>)
 810d00c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810d00e:	68bb      	ldr	r3, [r7, #8]
 810d010:	4a06      	ldr	r2, [pc, #24]	; (810d02c <vApplicationGetTimerTaskMemory+0x30>)
 810d012:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810d014:	687b      	ldr	r3, [r7, #4]
 810d016:	f44f 7280 	mov.w	r2, #256	; 0x100
 810d01a:	601a      	str	r2, [r3, #0]
}
 810d01c:	bf00      	nop
 810d01e:	3714      	adds	r7, #20
 810d020:	46bd      	mov	sp, r7
 810d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d026:	4770      	bx	lr
 810d028:	10001088 	.word	0x10001088
 810d02c:	10001144 	.word	0x10001144

0810d030 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810d030:	b580      	push	{r7, lr}
 810d032:	b08a      	sub	sp, #40	; 0x28
 810d034:	af00      	add	r7, sp, #0
 810d036:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810d038:	2300      	movs	r3, #0
 810d03a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810d03c:	f001 fd1e 	bl	810ea7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810d040:	4b5b      	ldr	r3, [pc, #364]	; (810d1b0 <pvPortMalloc+0x180>)
 810d042:	681b      	ldr	r3, [r3, #0]
 810d044:	2b00      	cmp	r3, #0
 810d046:	d101      	bne.n	810d04c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810d048:	f000 f920 	bl	810d28c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810d04c:	4b59      	ldr	r3, [pc, #356]	; (810d1b4 <pvPortMalloc+0x184>)
 810d04e:	681a      	ldr	r2, [r3, #0]
 810d050:	687b      	ldr	r3, [r7, #4]
 810d052:	4013      	ands	r3, r2
 810d054:	2b00      	cmp	r3, #0
 810d056:	f040 8093 	bne.w	810d180 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810d05a:	687b      	ldr	r3, [r7, #4]
 810d05c:	2b00      	cmp	r3, #0
 810d05e:	d01d      	beq.n	810d09c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 810d060:	2208      	movs	r2, #8
 810d062:	687b      	ldr	r3, [r7, #4]
 810d064:	4413      	add	r3, r2
 810d066:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810d068:	687b      	ldr	r3, [r7, #4]
 810d06a:	f003 0307 	and.w	r3, r3, #7
 810d06e:	2b00      	cmp	r3, #0
 810d070:	d014      	beq.n	810d09c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810d072:	687b      	ldr	r3, [r7, #4]
 810d074:	f023 0307 	bic.w	r3, r3, #7
 810d078:	3308      	adds	r3, #8
 810d07a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810d07c:	687b      	ldr	r3, [r7, #4]
 810d07e:	f003 0307 	and.w	r3, r3, #7
 810d082:	2b00      	cmp	r3, #0
 810d084:	d00a      	beq.n	810d09c <pvPortMalloc+0x6c>
	__asm volatile
 810d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d08a:	f383 8811 	msr	BASEPRI, r3
 810d08e:	f3bf 8f6f 	isb	sy
 810d092:	f3bf 8f4f 	dsb	sy
 810d096:	617b      	str	r3, [r7, #20]
}
 810d098:	bf00      	nop
 810d09a:	e7fe      	b.n	810d09a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810d09c:	687b      	ldr	r3, [r7, #4]
 810d09e:	2b00      	cmp	r3, #0
 810d0a0:	d06e      	beq.n	810d180 <pvPortMalloc+0x150>
 810d0a2:	4b45      	ldr	r3, [pc, #276]	; (810d1b8 <pvPortMalloc+0x188>)
 810d0a4:	681b      	ldr	r3, [r3, #0]
 810d0a6:	687a      	ldr	r2, [r7, #4]
 810d0a8:	429a      	cmp	r2, r3
 810d0aa:	d869      	bhi.n	810d180 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810d0ac:	4b43      	ldr	r3, [pc, #268]	; (810d1bc <pvPortMalloc+0x18c>)
 810d0ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810d0b0:	4b42      	ldr	r3, [pc, #264]	; (810d1bc <pvPortMalloc+0x18c>)
 810d0b2:	681b      	ldr	r3, [r3, #0]
 810d0b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810d0b6:	e004      	b.n	810d0c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 810d0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d0ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d0be:	681b      	ldr	r3, [r3, #0]
 810d0c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810d0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d0c4:	685b      	ldr	r3, [r3, #4]
 810d0c6:	687a      	ldr	r2, [r7, #4]
 810d0c8:	429a      	cmp	r2, r3
 810d0ca:	d903      	bls.n	810d0d4 <pvPortMalloc+0xa4>
 810d0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d0ce:	681b      	ldr	r3, [r3, #0]
 810d0d0:	2b00      	cmp	r3, #0
 810d0d2:	d1f1      	bne.n	810d0b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810d0d4:	4b36      	ldr	r3, [pc, #216]	; (810d1b0 <pvPortMalloc+0x180>)
 810d0d6:	681b      	ldr	r3, [r3, #0]
 810d0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810d0da:	429a      	cmp	r2, r3
 810d0dc:	d050      	beq.n	810d180 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810d0de:	6a3b      	ldr	r3, [r7, #32]
 810d0e0:	681b      	ldr	r3, [r3, #0]
 810d0e2:	2208      	movs	r2, #8
 810d0e4:	4413      	add	r3, r2
 810d0e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d0ea:	681a      	ldr	r2, [r3, #0]
 810d0ec:	6a3b      	ldr	r3, [r7, #32]
 810d0ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810d0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d0f2:	685a      	ldr	r2, [r3, #4]
 810d0f4:	687b      	ldr	r3, [r7, #4]
 810d0f6:	1ad2      	subs	r2, r2, r3
 810d0f8:	2308      	movs	r3, #8
 810d0fa:	005b      	lsls	r3, r3, #1
 810d0fc:	429a      	cmp	r2, r3
 810d0fe:	d91f      	bls.n	810d140 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810d100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810d102:	687b      	ldr	r3, [r7, #4]
 810d104:	4413      	add	r3, r2
 810d106:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810d108:	69bb      	ldr	r3, [r7, #24]
 810d10a:	f003 0307 	and.w	r3, r3, #7
 810d10e:	2b00      	cmp	r3, #0
 810d110:	d00a      	beq.n	810d128 <pvPortMalloc+0xf8>
	__asm volatile
 810d112:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d116:	f383 8811 	msr	BASEPRI, r3
 810d11a:	f3bf 8f6f 	isb	sy
 810d11e:	f3bf 8f4f 	dsb	sy
 810d122:	613b      	str	r3, [r7, #16]
}
 810d124:	bf00      	nop
 810d126:	e7fe      	b.n	810d126 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810d128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d12a:	685a      	ldr	r2, [r3, #4]
 810d12c:	687b      	ldr	r3, [r7, #4]
 810d12e:	1ad2      	subs	r2, r2, r3
 810d130:	69bb      	ldr	r3, [r7, #24]
 810d132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d136:	687a      	ldr	r2, [r7, #4]
 810d138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810d13a:	69b8      	ldr	r0, [r7, #24]
 810d13c:	f000 f908 	bl	810d350 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810d140:	4b1d      	ldr	r3, [pc, #116]	; (810d1b8 <pvPortMalloc+0x188>)
 810d142:	681a      	ldr	r2, [r3, #0]
 810d144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d146:	685b      	ldr	r3, [r3, #4]
 810d148:	1ad3      	subs	r3, r2, r3
 810d14a:	4a1b      	ldr	r2, [pc, #108]	; (810d1b8 <pvPortMalloc+0x188>)
 810d14c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810d14e:	4b1a      	ldr	r3, [pc, #104]	; (810d1b8 <pvPortMalloc+0x188>)
 810d150:	681a      	ldr	r2, [r3, #0]
 810d152:	4b1b      	ldr	r3, [pc, #108]	; (810d1c0 <pvPortMalloc+0x190>)
 810d154:	681b      	ldr	r3, [r3, #0]
 810d156:	429a      	cmp	r2, r3
 810d158:	d203      	bcs.n	810d162 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810d15a:	4b17      	ldr	r3, [pc, #92]	; (810d1b8 <pvPortMalloc+0x188>)
 810d15c:	681b      	ldr	r3, [r3, #0]
 810d15e:	4a18      	ldr	r2, [pc, #96]	; (810d1c0 <pvPortMalloc+0x190>)
 810d160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810d162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d164:	685a      	ldr	r2, [r3, #4]
 810d166:	4b13      	ldr	r3, [pc, #76]	; (810d1b4 <pvPortMalloc+0x184>)
 810d168:	681b      	ldr	r3, [r3, #0]
 810d16a:	431a      	orrs	r2, r3
 810d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d16e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d172:	2200      	movs	r2, #0
 810d174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810d176:	4b13      	ldr	r3, [pc, #76]	; (810d1c4 <pvPortMalloc+0x194>)
 810d178:	681b      	ldr	r3, [r3, #0]
 810d17a:	3301      	adds	r3, #1
 810d17c:	4a11      	ldr	r2, [pc, #68]	; (810d1c4 <pvPortMalloc+0x194>)
 810d17e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810d180:	f001 fc8a 	bl	810ea98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810d184:	69fb      	ldr	r3, [r7, #28]
 810d186:	f003 0307 	and.w	r3, r3, #7
 810d18a:	2b00      	cmp	r3, #0
 810d18c:	d00a      	beq.n	810d1a4 <pvPortMalloc+0x174>
	__asm volatile
 810d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d192:	f383 8811 	msr	BASEPRI, r3
 810d196:	f3bf 8f6f 	isb	sy
 810d19a:	f3bf 8f4f 	dsb	sy
 810d19e:	60fb      	str	r3, [r7, #12]
}
 810d1a0:	bf00      	nop
 810d1a2:	e7fe      	b.n	810d1a2 <pvPortMalloc+0x172>
	return pvReturn;
 810d1a4:	69fb      	ldr	r3, [r7, #28]
}
 810d1a6:	4618      	mov	r0, r3
 810d1a8:	3728      	adds	r7, #40	; 0x28
 810d1aa:	46bd      	mov	sp, r7
 810d1ac:	bd80      	pop	{r7, pc}
 810d1ae:	bf00      	nop
 810d1b0:	1000514c 	.word	0x1000514c
 810d1b4:	10005160 	.word	0x10005160
 810d1b8:	10005150 	.word	0x10005150
 810d1bc:	10005144 	.word	0x10005144
 810d1c0:	10005154 	.word	0x10005154
 810d1c4:	10005158 	.word	0x10005158

0810d1c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810d1c8:	b580      	push	{r7, lr}
 810d1ca:	b086      	sub	sp, #24
 810d1cc:	af00      	add	r7, sp, #0
 810d1ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810d1d0:	687b      	ldr	r3, [r7, #4]
 810d1d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810d1d4:	687b      	ldr	r3, [r7, #4]
 810d1d6:	2b00      	cmp	r3, #0
 810d1d8:	d04d      	beq.n	810d276 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810d1da:	2308      	movs	r3, #8
 810d1dc:	425b      	negs	r3, r3
 810d1de:	697a      	ldr	r2, [r7, #20]
 810d1e0:	4413      	add	r3, r2
 810d1e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810d1e4:	697b      	ldr	r3, [r7, #20]
 810d1e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810d1e8:	693b      	ldr	r3, [r7, #16]
 810d1ea:	685a      	ldr	r2, [r3, #4]
 810d1ec:	4b24      	ldr	r3, [pc, #144]	; (810d280 <vPortFree+0xb8>)
 810d1ee:	681b      	ldr	r3, [r3, #0]
 810d1f0:	4013      	ands	r3, r2
 810d1f2:	2b00      	cmp	r3, #0
 810d1f4:	d10a      	bne.n	810d20c <vPortFree+0x44>
	__asm volatile
 810d1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d1fa:	f383 8811 	msr	BASEPRI, r3
 810d1fe:	f3bf 8f6f 	isb	sy
 810d202:	f3bf 8f4f 	dsb	sy
 810d206:	60fb      	str	r3, [r7, #12]
}
 810d208:	bf00      	nop
 810d20a:	e7fe      	b.n	810d20a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810d20c:	693b      	ldr	r3, [r7, #16]
 810d20e:	681b      	ldr	r3, [r3, #0]
 810d210:	2b00      	cmp	r3, #0
 810d212:	d00a      	beq.n	810d22a <vPortFree+0x62>
	__asm volatile
 810d214:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d218:	f383 8811 	msr	BASEPRI, r3
 810d21c:	f3bf 8f6f 	isb	sy
 810d220:	f3bf 8f4f 	dsb	sy
 810d224:	60bb      	str	r3, [r7, #8]
}
 810d226:	bf00      	nop
 810d228:	e7fe      	b.n	810d228 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810d22a:	693b      	ldr	r3, [r7, #16]
 810d22c:	685a      	ldr	r2, [r3, #4]
 810d22e:	4b14      	ldr	r3, [pc, #80]	; (810d280 <vPortFree+0xb8>)
 810d230:	681b      	ldr	r3, [r3, #0]
 810d232:	4013      	ands	r3, r2
 810d234:	2b00      	cmp	r3, #0
 810d236:	d01e      	beq.n	810d276 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810d238:	693b      	ldr	r3, [r7, #16]
 810d23a:	681b      	ldr	r3, [r3, #0]
 810d23c:	2b00      	cmp	r3, #0
 810d23e:	d11a      	bne.n	810d276 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810d240:	693b      	ldr	r3, [r7, #16]
 810d242:	685a      	ldr	r2, [r3, #4]
 810d244:	4b0e      	ldr	r3, [pc, #56]	; (810d280 <vPortFree+0xb8>)
 810d246:	681b      	ldr	r3, [r3, #0]
 810d248:	43db      	mvns	r3, r3
 810d24a:	401a      	ands	r2, r3
 810d24c:	693b      	ldr	r3, [r7, #16]
 810d24e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810d250:	f001 fc14 	bl	810ea7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810d254:	693b      	ldr	r3, [r7, #16]
 810d256:	685a      	ldr	r2, [r3, #4]
 810d258:	4b0a      	ldr	r3, [pc, #40]	; (810d284 <vPortFree+0xbc>)
 810d25a:	681b      	ldr	r3, [r3, #0]
 810d25c:	4413      	add	r3, r2
 810d25e:	4a09      	ldr	r2, [pc, #36]	; (810d284 <vPortFree+0xbc>)
 810d260:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810d262:	6938      	ldr	r0, [r7, #16]
 810d264:	f000 f874 	bl	810d350 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810d268:	4b07      	ldr	r3, [pc, #28]	; (810d288 <vPortFree+0xc0>)
 810d26a:	681b      	ldr	r3, [r3, #0]
 810d26c:	3301      	adds	r3, #1
 810d26e:	4a06      	ldr	r2, [pc, #24]	; (810d288 <vPortFree+0xc0>)
 810d270:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810d272:	f001 fc11 	bl	810ea98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810d276:	bf00      	nop
 810d278:	3718      	adds	r7, #24
 810d27a:	46bd      	mov	sp, r7
 810d27c:	bd80      	pop	{r7, pc}
 810d27e:	bf00      	nop
 810d280:	10005160 	.word	0x10005160
 810d284:	10005150 	.word	0x10005150
 810d288:	1000515c 	.word	0x1000515c

0810d28c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810d28c:	b480      	push	{r7}
 810d28e:	b085      	sub	sp, #20
 810d290:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810d292:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 810d296:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810d298:	4b27      	ldr	r3, [pc, #156]	; (810d338 <prvHeapInit+0xac>)
 810d29a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810d29c:	68fb      	ldr	r3, [r7, #12]
 810d29e:	f003 0307 	and.w	r3, r3, #7
 810d2a2:	2b00      	cmp	r3, #0
 810d2a4:	d00c      	beq.n	810d2c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810d2a6:	68fb      	ldr	r3, [r7, #12]
 810d2a8:	3307      	adds	r3, #7
 810d2aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810d2ac:	68fb      	ldr	r3, [r7, #12]
 810d2ae:	f023 0307 	bic.w	r3, r3, #7
 810d2b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810d2b4:	68ba      	ldr	r2, [r7, #8]
 810d2b6:	68fb      	ldr	r3, [r7, #12]
 810d2b8:	1ad3      	subs	r3, r2, r3
 810d2ba:	4a1f      	ldr	r2, [pc, #124]	; (810d338 <prvHeapInit+0xac>)
 810d2bc:	4413      	add	r3, r2
 810d2be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810d2c0:	68fb      	ldr	r3, [r7, #12]
 810d2c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810d2c4:	4a1d      	ldr	r2, [pc, #116]	; (810d33c <prvHeapInit+0xb0>)
 810d2c6:	687b      	ldr	r3, [r7, #4]
 810d2c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810d2ca:	4b1c      	ldr	r3, [pc, #112]	; (810d33c <prvHeapInit+0xb0>)
 810d2cc:	2200      	movs	r2, #0
 810d2ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810d2d0:	687b      	ldr	r3, [r7, #4]
 810d2d2:	68ba      	ldr	r2, [r7, #8]
 810d2d4:	4413      	add	r3, r2
 810d2d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810d2d8:	2208      	movs	r2, #8
 810d2da:	68fb      	ldr	r3, [r7, #12]
 810d2dc:	1a9b      	subs	r3, r3, r2
 810d2de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810d2e0:	68fb      	ldr	r3, [r7, #12]
 810d2e2:	f023 0307 	bic.w	r3, r3, #7
 810d2e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810d2e8:	68fb      	ldr	r3, [r7, #12]
 810d2ea:	4a15      	ldr	r2, [pc, #84]	; (810d340 <prvHeapInit+0xb4>)
 810d2ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810d2ee:	4b14      	ldr	r3, [pc, #80]	; (810d340 <prvHeapInit+0xb4>)
 810d2f0:	681b      	ldr	r3, [r3, #0]
 810d2f2:	2200      	movs	r2, #0
 810d2f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810d2f6:	4b12      	ldr	r3, [pc, #72]	; (810d340 <prvHeapInit+0xb4>)
 810d2f8:	681b      	ldr	r3, [r3, #0]
 810d2fa:	2200      	movs	r2, #0
 810d2fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810d2fe:	687b      	ldr	r3, [r7, #4]
 810d300:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810d302:	683b      	ldr	r3, [r7, #0]
 810d304:	68fa      	ldr	r2, [r7, #12]
 810d306:	1ad2      	subs	r2, r2, r3
 810d308:	683b      	ldr	r3, [r7, #0]
 810d30a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810d30c:	4b0c      	ldr	r3, [pc, #48]	; (810d340 <prvHeapInit+0xb4>)
 810d30e:	681a      	ldr	r2, [r3, #0]
 810d310:	683b      	ldr	r3, [r7, #0]
 810d312:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810d314:	683b      	ldr	r3, [r7, #0]
 810d316:	685b      	ldr	r3, [r3, #4]
 810d318:	4a0a      	ldr	r2, [pc, #40]	; (810d344 <prvHeapInit+0xb8>)
 810d31a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810d31c:	683b      	ldr	r3, [r7, #0]
 810d31e:	685b      	ldr	r3, [r3, #4]
 810d320:	4a09      	ldr	r2, [pc, #36]	; (810d348 <prvHeapInit+0xbc>)
 810d322:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810d324:	4b09      	ldr	r3, [pc, #36]	; (810d34c <prvHeapInit+0xc0>)
 810d326:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810d32a:	601a      	str	r2, [r3, #0]
}
 810d32c:	bf00      	nop
 810d32e:	3714      	adds	r7, #20
 810d330:	46bd      	mov	sp, r7
 810d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d336:	4770      	bx	lr
 810d338:	10001544 	.word	0x10001544
 810d33c:	10005144 	.word	0x10005144
 810d340:	1000514c 	.word	0x1000514c
 810d344:	10005154 	.word	0x10005154
 810d348:	10005150 	.word	0x10005150
 810d34c:	10005160 	.word	0x10005160

0810d350 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810d350:	b480      	push	{r7}
 810d352:	b085      	sub	sp, #20
 810d354:	af00      	add	r7, sp, #0
 810d356:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810d358:	4b28      	ldr	r3, [pc, #160]	; (810d3fc <prvInsertBlockIntoFreeList+0xac>)
 810d35a:	60fb      	str	r3, [r7, #12]
 810d35c:	e002      	b.n	810d364 <prvInsertBlockIntoFreeList+0x14>
 810d35e:	68fb      	ldr	r3, [r7, #12]
 810d360:	681b      	ldr	r3, [r3, #0]
 810d362:	60fb      	str	r3, [r7, #12]
 810d364:	68fb      	ldr	r3, [r7, #12]
 810d366:	681b      	ldr	r3, [r3, #0]
 810d368:	687a      	ldr	r2, [r7, #4]
 810d36a:	429a      	cmp	r2, r3
 810d36c:	d8f7      	bhi.n	810d35e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810d36e:	68fb      	ldr	r3, [r7, #12]
 810d370:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810d372:	68fb      	ldr	r3, [r7, #12]
 810d374:	685b      	ldr	r3, [r3, #4]
 810d376:	68ba      	ldr	r2, [r7, #8]
 810d378:	4413      	add	r3, r2
 810d37a:	687a      	ldr	r2, [r7, #4]
 810d37c:	429a      	cmp	r2, r3
 810d37e:	d108      	bne.n	810d392 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810d380:	68fb      	ldr	r3, [r7, #12]
 810d382:	685a      	ldr	r2, [r3, #4]
 810d384:	687b      	ldr	r3, [r7, #4]
 810d386:	685b      	ldr	r3, [r3, #4]
 810d388:	441a      	add	r2, r3
 810d38a:	68fb      	ldr	r3, [r7, #12]
 810d38c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810d38e:	68fb      	ldr	r3, [r7, #12]
 810d390:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810d392:	687b      	ldr	r3, [r7, #4]
 810d394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810d396:	687b      	ldr	r3, [r7, #4]
 810d398:	685b      	ldr	r3, [r3, #4]
 810d39a:	68ba      	ldr	r2, [r7, #8]
 810d39c:	441a      	add	r2, r3
 810d39e:	68fb      	ldr	r3, [r7, #12]
 810d3a0:	681b      	ldr	r3, [r3, #0]
 810d3a2:	429a      	cmp	r2, r3
 810d3a4:	d118      	bne.n	810d3d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810d3a6:	68fb      	ldr	r3, [r7, #12]
 810d3a8:	681a      	ldr	r2, [r3, #0]
 810d3aa:	4b15      	ldr	r3, [pc, #84]	; (810d400 <prvInsertBlockIntoFreeList+0xb0>)
 810d3ac:	681b      	ldr	r3, [r3, #0]
 810d3ae:	429a      	cmp	r2, r3
 810d3b0:	d00d      	beq.n	810d3ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810d3b2:	687b      	ldr	r3, [r7, #4]
 810d3b4:	685a      	ldr	r2, [r3, #4]
 810d3b6:	68fb      	ldr	r3, [r7, #12]
 810d3b8:	681b      	ldr	r3, [r3, #0]
 810d3ba:	685b      	ldr	r3, [r3, #4]
 810d3bc:	441a      	add	r2, r3
 810d3be:	687b      	ldr	r3, [r7, #4]
 810d3c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810d3c2:	68fb      	ldr	r3, [r7, #12]
 810d3c4:	681b      	ldr	r3, [r3, #0]
 810d3c6:	681a      	ldr	r2, [r3, #0]
 810d3c8:	687b      	ldr	r3, [r7, #4]
 810d3ca:	601a      	str	r2, [r3, #0]
 810d3cc:	e008      	b.n	810d3e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810d3ce:	4b0c      	ldr	r3, [pc, #48]	; (810d400 <prvInsertBlockIntoFreeList+0xb0>)
 810d3d0:	681a      	ldr	r2, [r3, #0]
 810d3d2:	687b      	ldr	r3, [r7, #4]
 810d3d4:	601a      	str	r2, [r3, #0]
 810d3d6:	e003      	b.n	810d3e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810d3d8:	68fb      	ldr	r3, [r7, #12]
 810d3da:	681a      	ldr	r2, [r3, #0]
 810d3dc:	687b      	ldr	r3, [r7, #4]
 810d3de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810d3e0:	68fa      	ldr	r2, [r7, #12]
 810d3e2:	687b      	ldr	r3, [r7, #4]
 810d3e4:	429a      	cmp	r2, r3
 810d3e6:	d002      	beq.n	810d3ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810d3e8:	68fb      	ldr	r3, [r7, #12]
 810d3ea:	687a      	ldr	r2, [r7, #4]
 810d3ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810d3ee:	bf00      	nop
 810d3f0:	3714      	adds	r7, #20
 810d3f2:	46bd      	mov	sp, r7
 810d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d3f8:	4770      	bx	lr
 810d3fa:	bf00      	nop
 810d3fc:	10005144 	.word	0x10005144
 810d400:	1000514c 	.word	0x1000514c

0810d404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810d404:	b480      	push	{r7}
 810d406:	b083      	sub	sp, #12
 810d408:	af00      	add	r7, sp, #0
 810d40a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810d40c:	687b      	ldr	r3, [r7, #4]
 810d40e:	f103 0208 	add.w	r2, r3, #8
 810d412:	687b      	ldr	r3, [r7, #4]
 810d414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810d416:	687b      	ldr	r3, [r7, #4]
 810d418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810d41c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810d41e:	687b      	ldr	r3, [r7, #4]
 810d420:	f103 0208 	add.w	r2, r3, #8
 810d424:	687b      	ldr	r3, [r7, #4]
 810d426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810d428:	687b      	ldr	r3, [r7, #4]
 810d42a:	f103 0208 	add.w	r2, r3, #8
 810d42e:	687b      	ldr	r3, [r7, #4]
 810d430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810d432:	687b      	ldr	r3, [r7, #4]
 810d434:	2200      	movs	r2, #0
 810d436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810d438:	bf00      	nop
 810d43a:	370c      	adds	r7, #12
 810d43c:	46bd      	mov	sp, r7
 810d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d442:	4770      	bx	lr

0810d444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810d444:	b480      	push	{r7}
 810d446:	b083      	sub	sp, #12
 810d448:	af00      	add	r7, sp, #0
 810d44a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810d44c:	687b      	ldr	r3, [r7, #4]
 810d44e:	2200      	movs	r2, #0
 810d450:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810d452:	bf00      	nop
 810d454:	370c      	adds	r7, #12
 810d456:	46bd      	mov	sp, r7
 810d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d45c:	4770      	bx	lr

0810d45e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810d45e:	b480      	push	{r7}
 810d460:	b085      	sub	sp, #20
 810d462:	af00      	add	r7, sp, #0
 810d464:	6078      	str	r0, [r7, #4]
 810d466:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810d468:	687b      	ldr	r3, [r7, #4]
 810d46a:	685b      	ldr	r3, [r3, #4]
 810d46c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810d46e:	683b      	ldr	r3, [r7, #0]
 810d470:	68fa      	ldr	r2, [r7, #12]
 810d472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810d474:	68fb      	ldr	r3, [r7, #12]
 810d476:	689a      	ldr	r2, [r3, #8]
 810d478:	683b      	ldr	r3, [r7, #0]
 810d47a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810d47c:	68fb      	ldr	r3, [r7, #12]
 810d47e:	689b      	ldr	r3, [r3, #8]
 810d480:	683a      	ldr	r2, [r7, #0]
 810d482:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810d484:	68fb      	ldr	r3, [r7, #12]
 810d486:	683a      	ldr	r2, [r7, #0]
 810d488:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810d48a:	683b      	ldr	r3, [r7, #0]
 810d48c:	687a      	ldr	r2, [r7, #4]
 810d48e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810d490:	687b      	ldr	r3, [r7, #4]
 810d492:	681b      	ldr	r3, [r3, #0]
 810d494:	1c5a      	adds	r2, r3, #1
 810d496:	687b      	ldr	r3, [r7, #4]
 810d498:	601a      	str	r2, [r3, #0]
}
 810d49a:	bf00      	nop
 810d49c:	3714      	adds	r7, #20
 810d49e:	46bd      	mov	sp, r7
 810d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4a4:	4770      	bx	lr

0810d4a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810d4a6:	b480      	push	{r7}
 810d4a8:	b085      	sub	sp, #20
 810d4aa:	af00      	add	r7, sp, #0
 810d4ac:	6078      	str	r0, [r7, #4]
 810d4ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810d4b0:	683b      	ldr	r3, [r7, #0]
 810d4b2:	681b      	ldr	r3, [r3, #0]
 810d4b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810d4b6:	68bb      	ldr	r3, [r7, #8]
 810d4b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810d4bc:	d103      	bne.n	810d4c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810d4be:	687b      	ldr	r3, [r7, #4]
 810d4c0:	691b      	ldr	r3, [r3, #16]
 810d4c2:	60fb      	str	r3, [r7, #12]
 810d4c4:	e00c      	b.n	810d4e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810d4c6:	687b      	ldr	r3, [r7, #4]
 810d4c8:	3308      	adds	r3, #8
 810d4ca:	60fb      	str	r3, [r7, #12]
 810d4cc:	e002      	b.n	810d4d4 <vListInsert+0x2e>
 810d4ce:	68fb      	ldr	r3, [r7, #12]
 810d4d0:	685b      	ldr	r3, [r3, #4]
 810d4d2:	60fb      	str	r3, [r7, #12]
 810d4d4:	68fb      	ldr	r3, [r7, #12]
 810d4d6:	685b      	ldr	r3, [r3, #4]
 810d4d8:	681b      	ldr	r3, [r3, #0]
 810d4da:	68ba      	ldr	r2, [r7, #8]
 810d4dc:	429a      	cmp	r2, r3
 810d4de:	d2f6      	bcs.n	810d4ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810d4e0:	68fb      	ldr	r3, [r7, #12]
 810d4e2:	685a      	ldr	r2, [r3, #4]
 810d4e4:	683b      	ldr	r3, [r7, #0]
 810d4e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810d4e8:	683b      	ldr	r3, [r7, #0]
 810d4ea:	685b      	ldr	r3, [r3, #4]
 810d4ec:	683a      	ldr	r2, [r7, #0]
 810d4ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810d4f0:	683b      	ldr	r3, [r7, #0]
 810d4f2:	68fa      	ldr	r2, [r7, #12]
 810d4f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810d4f6:	68fb      	ldr	r3, [r7, #12]
 810d4f8:	683a      	ldr	r2, [r7, #0]
 810d4fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810d4fc:	683b      	ldr	r3, [r7, #0]
 810d4fe:	687a      	ldr	r2, [r7, #4]
 810d500:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810d502:	687b      	ldr	r3, [r7, #4]
 810d504:	681b      	ldr	r3, [r3, #0]
 810d506:	1c5a      	adds	r2, r3, #1
 810d508:	687b      	ldr	r3, [r7, #4]
 810d50a:	601a      	str	r2, [r3, #0]
}
 810d50c:	bf00      	nop
 810d50e:	3714      	adds	r7, #20
 810d510:	46bd      	mov	sp, r7
 810d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d516:	4770      	bx	lr

0810d518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810d518:	b480      	push	{r7}
 810d51a:	b085      	sub	sp, #20
 810d51c:	af00      	add	r7, sp, #0
 810d51e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810d520:	687b      	ldr	r3, [r7, #4]
 810d522:	691b      	ldr	r3, [r3, #16]
 810d524:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810d526:	687b      	ldr	r3, [r7, #4]
 810d528:	685b      	ldr	r3, [r3, #4]
 810d52a:	687a      	ldr	r2, [r7, #4]
 810d52c:	6892      	ldr	r2, [r2, #8]
 810d52e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810d530:	687b      	ldr	r3, [r7, #4]
 810d532:	689b      	ldr	r3, [r3, #8]
 810d534:	687a      	ldr	r2, [r7, #4]
 810d536:	6852      	ldr	r2, [r2, #4]
 810d538:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810d53a:	68fb      	ldr	r3, [r7, #12]
 810d53c:	685b      	ldr	r3, [r3, #4]
 810d53e:	687a      	ldr	r2, [r7, #4]
 810d540:	429a      	cmp	r2, r3
 810d542:	d103      	bne.n	810d54c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810d544:	687b      	ldr	r3, [r7, #4]
 810d546:	689a      	ldr	r2, [r3, #8]
 810d548:	68fb      	ldr	r3, [r7, #12]
 810d54a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810d54c:	687b      	ldr	r3, [r7, #4]
 810d54e:	2200      	movs	r2, #0
 810d550:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810d552:	68fb      	ldr	r3, [r7, #12]
 810d554:	681b      	ldr	r3, [r3, #0]
 810d556:	1e5a      	subs	r2, r3, #1
 810d558:	68fb      	ldr	r3, [r7, #12]
 810d55a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810d55c:	68fb      	ldr	r3, [r7, #12]
 810d55e:	681b      	ldr	r3, [r3, #0]
}
 810d560:	4618      	mov	r0, r3
 810d562:	3714      	adds	r7, #20
 810d564:	46bd      	mov	sp, r7
 810d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d56a:	4770      	bx	lr

0810d56c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810d56c:	b480      	push	{r7}
 810d56e:	b085      	sub	sp, #20
 810d570:	af00      	add	r7, sp, #0
 810d572:	60f8      	str	r0, [r7, #12]
 810d574:	60b9      	str	r1, [r7, #8]
 810d576:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810d578:	68fb      	ldr	r3, [r7, #12]
 810d57a:	3b04      	subs	r3, #4
 810d57c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810d57e:	68fb      	ldr	r3, [r7, #12]
 810d580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 810d584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810d586:	68fb      	ldr	r3, [r7, #12]
 810d588:	3b04      	subs	r3, #4
 810d58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810d58c:	68bb      	ldr	r3, [r7, #8]
 810d58e:	f023 0201 	bic.w	r2, r3, #1
 810d592:	68fb      	ldr	r3, [r7, #12]
 810d594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810d596:	68fb      	ldr	r3, [r7, #12]
 810d598:	3b04      	subs	r3, #4
 810d59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810d59c:	4a0c      	ldr	r2, [pc, #48]	; (810d5d0 <pxPortInitialiseStack+0x64>)
 810d59e:	68fb      	ldr	r3, [r7, #12]
 810d5a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810d5a2:	68fb      	ldr	r3, [r7, #12]
 810d5a4:	3b14      	subs	r3, #20
 810d5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810d5a8:	687a      	ldr	r2, [r7, #4]
 810d5aa:	68fb      	ldr	r3, [r7, #12]
 810d5ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810d5ae:	68fb      	ldr	r3, [r7, #12]
 810d5b0:	3b04      	subs	r3, #4
 810d5b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810d5b4:	68fb      	ldr	r3, [r7, #12]
 810d5b6:	f06f 0202 	mvn.w	r2, #2
 810d5ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810d5bc:	68fb      	ldr	r3, [r7, #12]
 810d5be:	3b20      	subs	r3, #32
 810d5c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810d5c2:	68fb      	ldr	r3, [r7, #12]
}
 810d5c4:	4618      	mov	r0, r3
 810d5c6:	3714      	adds	r7, #20
 810d5c8:	46bd      	mov	sp, r7
 810d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d5ce:	4770      	bx	lr
 810d5d0:	0810d5d5 	.word	0x0810d5d5

0810d5d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810d5d4:	b480      	push	{r7}
 810d5d6:	b085      	sub	sp, #20
 810d5d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810d5da:	2300      	movs	r3, #0
 810d5dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810d5de:	4b12      	ldr	r3, [pc, #72]	; (810d628 <prvTaskExitError+0x54>)
 810d5e0:	681b      	ldr	r3, [r3, #0]
 810d5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810d5e6:	d00a      	beq.n	810d5fe <prvTaskExitError+0x2a>
	__asm volatile
 810d5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d5ec:	f383 8811 	msr	BASEPRI, r3
 810d5f0:	f3bf 8f6f 	isb	sy
 810d5f4:	f3bf 8f4f 	dsb	sy
 810d5f8:	60fb      	str	r3, [r7, #12]
}
 810d5fa:	bf00      	nop
 810d5fc:	e7fe      	b.n	810d5fc <prvTaskExitError+0x28>
	__asm volatile
 810d5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d602:	f383 8811 	msr	BASEPRI, r3
 810d606:	f3bf 8f6f 	isb	sy
 810d60a:	f3bf 8f4f 	dsb	sy
 810d60e:	60bb      	str	r3, [r7, #8]
}
 810d610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810d612:	bf00      	nop
 810d614:	687b      	ldr	r3, [r7, #4]
 810d616:	2b00      	cmp	r3, #0
 810d618:	d0fc      	beq.n	810d614 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810d61a:	bf00      	nop
 810d61c:	bf00      	nop
 810d61e:	3714      	adds	r7, #20
 810d620:	46bd      	mov	sp, r7
 810d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d626:	4770      	bx	lr
 810d628:	10000020 	.word	0x10000020
 810d62c:	00000000 	.word	0x00000000

0810d630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810d630:	4b07      	ldr	r3, [pc, #28]	; (810d650 <pxCurrentTCBConst2>)
 810d632:	6819      	ldr	r1, [r3, #0]
 810d634:	6808      	ldr	r0, [r1, #0]
 810d636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d63a:	f380 8809 	msr	PSP, r0
 810d63e:	f3bf 8f6f 	isb	sy
 810d642:	f04f 0000 	mov.w	r0, #0
 810d646:	f380 8811 	msr	BASEPRI, r0
 810d64a:	4770      	bx	lr
 810d64c:	f3af 8000 	nop.w

0810d650 <pxCurrentTCBConst2>:
 810d650:	100051ac 	.word	0x100051ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810d654:	bf00      	nop
 810d656:	bf00      	nop

0810d658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810d658:	4808      	ldr	r0, [pc, #32]	; (810d67c <prvPortStartFirstTask+0x24>)
 810d65a:	6800      	ldr	r0, [r0, #0]
 810d65c:	6800      	ldr	r0, [r0, #0]
 810d65e:	f380 8808 	msr	MSP, r0
 810d662:	f04f 0000 	mov.w	r0, #0
 810d666:	f380 8814 	msr	CONTROL, r0
 810d66a:	b662      	cpsie	i
 810d66c:	b661      	cpsie	f
 810d66e:	f3bf 8f4f 	dsb	sy
 810d672:	f3bf 8f6f 	isb	sy
 810d676:	df00      	svc	0
 810d678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810d67a:	bf00      	nop
 810d67c:	e000ed08 	.word	0xe000ed08

0810d680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810d680:	b580      	push	{r7, lr}
 810d682:	b086      	sub	sp, #24
 810d684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810d686:	4b46      	ldr	r3, [pc, #280]	; (810d7a0 <xPortStartScheduler+0x120>)
 810d688:	681b      	ldr	r3, [r3, #0]
 810d68a:	4a46      	ldr	r2, [pc, #280]	; (810d7a4 <xPortStartScheduler+0x124>)
 810d68c:	4293      	cmp	r3, r2
 810d68e:	d10a      	bne.n	810d6a6 <xPortStartScheduler+0x26>
	__asm volatile
 810d690:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d694:	f383 8811 	msr	BASEPRI, r3
 810d698:	f3bf 8f6f 	isb	sy
 810d69c:	f3bf 8f4f 	dsb	sy
 810d6a0:	613b      	str	r3, [r7, #16]
}
 810d6a2:	bf00      	nop
 810d6a4:	e7fe      	b.n	810d6a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810d6a6:	4b3e      	ldr	r3, [pc, #248]	; (810d7a0 <xPortStartScheduler+0x120>)
 810d6a8:	681b      	ldr	r3, [r3, #0]
 810d6aa:	4a3f      	ldr	r2, [pc, #252]	; (810d7a8 <xPortStartScheduler+0x128>)
 810d6ac:	4293      	cmp	r3, r2
 810d6ae:	d10a      	bne.n	810d6c6 <xPortStartScheduler+0x46>
	__asm volatile
 810d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d6b4:	f383 8811 	msr	BASEPRI, r3
 810d6b8:	f3bf 8f6f 	isb	sy
 810d6bc:	f3bf 8f4f 	dsb	sy
 810d6c0:	60fb      	str	r3, [r7, #12]
}
 810d6c2:	bf00      	nop
 810d6c4:	e7fe      	b.n	810d6c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810d6c6:	4b39      	ldr	r3, [pc, #228]	; (810d7ac <xPortStartScheduler+0x12c>)
 810d6c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810d6ca:	697b      	ldr	r3, [r7, #20]
 810d6cc:	781b      	ldrb	r3, [r3, #0]
 810d6ce:	b2db      	uxtb	r3, r3
 810d6d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810d6d2:	697b      	ldr	r3, [r7, #20]
 810d6d4:	22ff      	movs	r2, #255	; 0xff
 810d6d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810d6d8:	697b      	ldr	r3, [r7, #20]
 810d6da:	781b      	ldrb	r3, [r3, #0]
 810d6dc:	b2db      	uxtb	r3, r3
 810d6de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810d6e0:	78fb      	ldrb	r3, [r7, #3]
 810d6e2:	b2db      	uxtb	r3, r3
 810d6e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 810d6e8:	b2da      	uxtb	r2, r3
 810d6ea:	4b31      	ldr	r3, [pc, #196]	; (810d7b0 <xPortStartScheduler+0x130>)
 810d6ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810d6ee:	4b31      	ldr	r3, [pc, #196]	; (810d7b4 <xPortStartScheduler+0x134>)
 810d6f0:	2207      	movs	r2, #7
 810d6f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810d6f4:	e009      	b.n	810d70a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 810d6f6:	4b2f      	ldr	r3, [pc, #188]	; (810d7b4 <xPortStartScheduler+0x134>)
 810d6f8:	681b      	ldr	r3, [r3, #0]
 810d6fa:	3b01      	subs	r3, #1
 810d6fc:	4a2d      	ldr	r2, [pc, #180]	; (810d7b4 <xPortStartScheduler+0x134>)
 810d6fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810d700:	78fb      	ldrb	r3, [r7, #3]
 810d702:	b2db      	uxtb	r3, r3
 810d704:	005b      	lsls	r3, r3, #1
 810d706:	b2db      	uxtb	r3, r3
 810d708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810d70a:	78fb      	ldrb	r3, [r7, #3]
 810d70c:	b2db      	uxtb	r3, r3
 810d70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810d712:	2b80      	cmp	r3, #128	; 0x80
 810d714:	d0ef      	beq.n	810d6f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810d716:	4b27      	ldr	r3, [pc, #156]	; (810d7b4 <xPortStartScheduler+0x134>)
 810d718:	681b      	ldr	r3, [r3, #0]
 810d71a:	f1c3 0307 	rsb	r3, r3, #7
 810d71e:	2b04      	cmp	r3, #4
 810d720:	d00a      	beq.n	810d738 <xPortStartScheduler+0xb8>
	__asm volatile
 810d722:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d726:	f383 8811 	msr	BASEPRI, r3
 810d72a:	f3bf 8f6f 	isb	sy
 810d72e:	f3bf 8f4f 	dsb	sy
 810d732:	60bb      	str	r3, [r7, #8]
}
 810d734:	bf00      	nop
 810d736:	e7fe      	b.n	810d736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810d738:	4b1e      	ldr	r3, [pc, #120]	; (810d7b4 <xPortStartScheduler+0x134>)
 810d73a:	681b      	ldr	r3, [r3, #0]
 810d73c:	021b      	lsls	r3, r3, #8
 810d73e:	4a1d      	ldr	r2, [pc, #116]	; (810d7b4 <xPortStartScheduler+0x134>)
 810d740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810d742:	4b1c      	ldr	r3, [pc, #112]	; (810d7b4 <xPortStartScheduler+0x134>)
 810d744:	681b      	ldr	r3, [r3, #0]
 810d746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810d74a:	4a1a      	ldr	r2, [pc, #104]	; (810d7b4 <xPortStartScheduler+0x134>)
 810d74c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810d74e:	687b      	ldr	r3, [r7, #4]
 810d750:	b2da      	uxtb	r2, r3
 810d752:	697b      	ldr	r3, [r7, #20]
 810d754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810d756:	4b18      	ldr	r3, [pc, #96]	; (810d7b8 <xPortStartScheduler+0x138>)
 810d758:	681b      	ldr	r3, [r3, #0]
 810d75a:	4a17      	ldr	r2, [pc, #92]	; (810d7b8 <xPortStartScheduler+0x138>)
 810d75c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810d760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810d762:	4b15      	ldr	r3, [pc, #84]	; (810d7b8 <xPortStartScheduler+0x138>)
 810d764:	681b      	ldr	r3, [r3, #0]
 810d766:	4a14      	ldr	r2, [pc, #80]	; (810d7b8 <xPortStartScheduler+0x138>)
 810d768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810d76c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810d76e:	f000 f8dd 	bl	810d92c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810d772:	4b12      	ldr	r3, [pc, #72]	; (810d7bc <xPortStartScheduler+0x13c>)
 810d774:	2200      	movs	r2, #0
 810d776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810d778:	f000 f8fc 	bl	810d974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810d77c:	4b10      	ldr	r3, [pc, #64]	; (810d7c0 <xPortStartScheduler+0x140>)
 810d77e:	681b      	ldr	r3, [r3, #0]
 810d780:	4a0f      	ldr	r2, [pc, #60]	; (810d7c0 <xPortStartScheduler+0x140>)
 810d782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 810d786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810d788:	f7ff ff66 	bl	810d658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810d78c:	f001 faec 	bl	810ed68 <vTaskSwitchContext>
	prvTaskExitError();
 810d790:	f7ff ff20 	bl	810d5d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810d794:	2300      	movs	r3, #0
}
 810d796:	4618      	mov	r0, r3
 810d798:	3718      	adds	r7, #24
 810d79a:	46bd      	mov	sp, r7
 810d79c:	bd80      	pop	{r7, pc}
 810d79e:	bf00      	nop
 810d7a0:	e000ed00 	.word	0xe000ed00
 810d7a4:	410fc271 	.word	0x410fc271
 810d7a8:	410fc270 	.word	0x410fc270
 810d7ac:	e000e400 	.word	0xe000e400
 810d7b0:	10005164 	.word	0x10005164
 810d7b4:	10005168 	.word	0x10005168
 810d7b8:	e000ed20 	.word	0xe000ed20
 810d7bc:	10000020 	.word	0x10000020
 810d7c0:	e000ef34 	.word	0xe000ef34

0810d7c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810d7c4:	b480      	push	{r7}
 810d7c6:	b083      	sub	sp, #12
 810d7c8:	af00      	add	r7, sp, #0
	__asm volatile
 810d7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d7ce:	f383 8811 	msr	BASEPRI, r3
 810d7d2:	f3bf 8f6f 	isb	sy
 810d7d6:	f3bf 8f4f 	dsb	sy
 810d7da:	607b      	str	r3, [r7, #4]
}
 810d7dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810d7de:	4b0f      	ldr	r3, [pc, #60]	; (810d81c <vPortEnterCritical+0x58>)
 810d7e0:	681b      	ldr	r3, [r3, #0]
 810d7e2:	3301      	adds	r3, #1
 810d7e4:	4a0d      	ldr	r2, [pc, #52]	; (810d81c <vPortEnterCritical+0x58>)
 810d7e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810d7e8:	4b0c      	ldr	r3, [pc, #48]	; (810d81c <vPortEnterCritical+0x58>)
 810d7ea:	681b      	ldr	r3, [r3, #0]
 810d7ec:	2b01      	cmp	r3, #1
 810d7ee:	d10f      	bne.n	810d810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810d7f0:	4b0b      	ldr	r3, [pc, #44]	; (810d820 <vPortEnterCritical+0x5c>)
 810d7f2:	681b      	ldr	r3, [r3, #0]
 810d7f4:	b2db      	uxtb	r3, r3
 810d7f6:	2b00      	cmp	r3, #0
 810d7f8:	d00a      	beq.n	810d810 <vPortEnterCritical+0x4c>
	__asm volatile
 810d7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d7fe:	f383 8811 	msr	BASEPRI, r3
 810d802:	f3bf 8f6f 	isb	sy
 810d806:	f3bf 8f4f 	dsb	sy
 810d80a:	603b      	str	r3, [r7, #0]
}
 810d80c:	bf00      	nop
 810d80e:	e7fe      	b.n	810d80e <vPortEnterCritical+0x4a>
	}
}
 810d810:	bf00      	nop
 810d812:	370c      	adds	r7, #12
 810d814:	46bd      	mov	sp, r7
 810d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d81a:	4770      	bx	lr
 810d81c:	10000020 	.word	0x10000020
 810d820:	e000ed04 	.word	0xe000ed04

0810d824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810d824:	b480      	push	{r7}
 810d826:	b083      	sub	sp, #12
 810d828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810d82a:	4b12      	ldr	r3, [pc, #72]	; (810d874 <vPortExitCritical+0x50>)
 810d82c:	681b      	ldr	r3, [r3, #0]
 810d82e:	2b00      	cmp	r3, #0
 810d830:	d10a      	bne.n	810d848 <vPortExitCritical+0x24>
	__asm volatile
 810d832:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d836:	f383 8811 	msr	BASEPRI, r3
 810d83a:	f3bf 8f6f 	isb	sy
 810d83e:	f3bf 8f4f 	dsb	sy
 810d842:	607b      	str	r3, [r7, #4]
}
 810d844:	bf00      	nop
 810d846:	e7fe      	b.n	810d846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810d848:	4b0a      	ldr	r3, [pc, #40]	; (810d874 <vPortExitCritical+0x50>)
 810d84a:	681b      	ldr	r3, [r3, #0]
 810d84c:	3b01      	subs	r3, #1
 810d84e:	4a09      	ldr	r2, [pc, #36]	; (810d874 <vPortExitCritical+0x50>)
 810d850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810d852:	4b08      	ldr	r3, [pc, #32]	; (810d874 <vPortExitCritical+0x50>)
 810d854:	681b      	ldr	r3, [r3, #0]
 810d856:	2b00      	cmp	r3, #0
 810d858:	d105      	bne.n	810d866 <vPortExitCritical+0x42>
 810d85a:	2300      	movs	r3, #0
 810d85c:	603b      	str	r3, [r7, #0]
	__asm volatile
 810d85e:	683b      	ldr	r3, [r7, #0]
 810d860:	f383 8811 	msr	BASEPRI, r3
}
 810d864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810d866:	bf00      	nop
 810d868:	370c      	adds	r7, #12
 810d86a:	46bd      	mov	sp, r7
 810d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d870:	4770      	bx	lr
 810d872:	bf00      	nop
 810d874:	10000020 	.word	0x10000020
	...

0810d880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810d880:	f3ef 8009 	mrs	r0, PSP
 810d884:	f3bf 8f6f 	isb	sy
 810d888:	4b15      	ldr	r3, [pc, #84]	; (810d8e0 <pxCurrentTCBConst>)
 810d88a:	681a      	ldr	r2, [r3, #0]
 810d88c:	f01e 0f10 	tst.w	lr, #16
 810d890:	bf08      	it	eq
 810d892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810d896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d89a:	6010      	str	r0, [r2, #0]
 810d89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810d8a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 810d8a4:	f380 8811 	msr	BASEPRI, r0
 810d8a8:	f3bf 8f4f 	dsb	sy
 810d8ac:	f3bf 8f6f 	isb	sy
 810d8b0:	f001 fa5a 	bl	810ed68 <vTaskSwitchContext>
 810d8b4:	f04f 0000 	mov.w	r0, #0
 810d8b8:	f380 8811 	msr	BASEPRI, r0
 810d8bc:	bc09      	pop	{r0, r3}
 810d8be:	6819      	ldr	r1, [r3, #0]
 810d8c0:	6808      	ldr	r0, [r1, #0]
 810d8c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d8c6:	f01e 0f10 	tst.w	lr, #16
 810d8ca:	bf08      	it	eq
 810d8cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810d8d0:	f380 8809 	msr	PSP, r0
 810d8d4:	f3bf 8f6f 	isb	sy
 810d8d8:	4770      	bx	lr
 810d8da:	bf00      	nop
 810d8dc:	f3af 8000 	nop.w

0810d8e0 <pxCurrentTCBConst>:
 810d8e0:	100051ac 	.word	0x100051ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810d8e4:	bf00      	nop
 810d8e6:	bf00      	nop

0810d8e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810d8e8:	b580      	push	{r7, lr}
 810d8ea:	b082      	sub	sp, #8
 810d8ec:	af00      	add	r7, sp, #0
	__asm volatile
 810d8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d8f2:	f383 8811 	msr	BASEPRI, r3
 810d8f6:	f3bf 8f6f 	isb	sy
 810d8fa:	f3bf 8f4f 	dsb	sy
 810d8fe:	607b      	str	r3, [r7, #4]
}
 810d900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810d902:	f001 f977 	bl	810ebf4 <xTaskIncrementTick>
 810d906:	4603      	mov	r3, r0
 810d908:	2b00      	cmp	r3, #0
 810d90a:	d003      	beq.n	810d914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810d90c:	4b06      	ldr	r3, [pc, #24]	; (810d928 <xPortSysTickHandler+0x40>)
 810d90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810d912:	601a      	str	r2, [r3, #0]
 810d914:	2300      	movs	r3, #0
 810d916:	603b      	str	r3, [r7, #0]
	__asm volatile
 810d918:	683b      	ldr	r3, [r7, #0]
 810d91a:	f383 8811 	msr	BASEPRI, r3
}
 810d91e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810d920:	bf00      	nop
 810d922:	3708      	adds	r7, #8
 810d924:	46bd      	mov	sp, r7
 810d926:	bd80      	pop	{r7, pc}
 810d928:	e000ed04 	.word	0xe000ed04

0810d92c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810d92c:	b480      	push	{r7}
 810d92e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810d930:	4b0b      	ldr	r3, [pc, #44]	; (810d960 <vPortSetupTimerInterrupt+0x34>)
 810d932:	2200      	movs	r2, #0
 810d934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810d936:	4b0b      	ldr	r3, [pc, #44]	; (810d964 <vPortSetupTimerInterrupt+0x38>)
 810d938:	2200      	movs	r2, #0
 810d93a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810d93c:	4b0a      	ldr	r3, [pc, #40]	; (810d968 <vPortSetupTimerInterrupt+0x3c>)
 810d93e:	681b      	ldr	r3, [r3, #0]
 810d940:	4a0a      	ldr	r2, [pc, #40]	; (810d96c <vPortSetupTimerInterrupt+0x40>)
 810d942:	fba2 2303 	umull	r2, r3, r2, r3
 810d946:	099b      	lsrs	r3, r3, #6
 810d948:	4a09      	ldr	r2, [pc, #36]	; (810d970 <vPortSetupTimerInterrupt+0x44>)
 810d94a:	3b01      	subs	r3, #1
 810d94c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810d94e:	4b04      	ldr	r3, [pc, #16]	; (810d960 <vPortSetupTimerInterrupt+0x34>)
 810d950:	2207      	movs	r2, #7
 810d952:	601a      	str	r2, [r3, #0]
}
 810d954:	bf00      	nop
 810d956:	46bd      	mov	sp, r7
 810d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d95c:	4770      	bx	lr
 810d95e:	bf00      	nop
 810d960:	e000e010 	.word	0xe000e010
 810d964:	e000e018 	.word	0xe000e018
 810d968:	10000004 	.word	0x10000004
 810d96c:	10624dd3 	.word	0x10624dd3
 810d970:	e000e014 	.word	0xe000e014

0810d974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810d974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 810d984 <vPortEnableVFP+0x10>
 810d978:	6801      	ldr	r1, [r0, #0]
 810d97a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810d97e:	6001      	str	r1, [r0, #0]
 810d980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810d982:	bf00      	nop
 810d984:	e000ed88 	.word	0xe000ed88

0810d988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810d988:	b480      	push	{r7}
 810d98a:	b085      	sub	sp, #20
 810d98c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810d98e:	f3ef 8305 	mrs	r3, IPSR
 810d992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810d994:	68fb      	ldr	r3, [r7, #12]
 810d996:	2b0f      	cmp	r3, #15
 810d998:	d914      	bls.n	810d9c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810d99a:	4a17      	ldr	r2, [pc, #92]	; (810d9f8 <vPortValidateInterruptPriority+0x70>)
 810d99c:	68fb      	ldr	r3, [r7, #12]
 810d99e:	4413      	add	r3, r2
 810d9a0:	781b      	ldrb	r3, [r3, #0]
 810d9a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810d9a4:	4b15      	ldr	r3, [pc, #84]	; (810d9fc <vPortValidateInterruptPriority+0x74>)
 810d9a6:	781b      	ldrb	r3, [r3, #0]
 810d9a8:	7afa      	ldrb	r2, [r7, #11]
 810d9aa:	429a      	cmp	r2, r3
 810d9ac:	d20a      	bcs.n	810d9c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 810d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d9b2:	f383 8811 	msr	BASEPRI, r3
 810d9b6:	f3bf 8f6f 	isb	sy
 810d9ba:	f3bf 8f4f 	dsb	sy
 810d9be:	607b      	str	r3, [r7, #4]
}
 810d9c0:	bf00      	nop
 810d9c2:	e7fe      	b.n	810d9c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810d9c4:	4b0e      	ldr	r3, [pc, #56]	; (810da00 <vPortValidateInterruptPriority+0x78>)
 810d9c6:	681b      	ldr	r3, [r3, #0]
 810d9c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810d9cc:	4b0d      	ldr	r3, [pc, #52]	; (810da04 <vPortValidateInterruptPriority+0x7c>)
 810d9ce:	681b      	ldr	r3, [r3, #0]
 810d9d0:	429a      	cmp	r2, r3
 810d9d2:	d90a      	bls.n	810d9ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 810d9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810d9d8:	f383 8811 	msr	BASEPRI, r3
 810d9dc:	f3bf 8f6f 	isb	sy
 810d9e0:	f3bf 8f4f 	dsb	sy
 810d9e4:	603b      	str	r3, [r7, #0]
}
 810d9e6:	bf00      	nop
 810d9e8:	e7fe      	b.n	810d9e8 <vPortValidateInterruptPriority+0x60>
	}
 810d9ea:	bf00      	nop
 810d9ec:	3714      	adds	r7, #20
 810d9ee:	46bd      	mov	sp, r7
 810d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d9f4:	4770      	bx	lr
 810d9f6:	bf00      	nop
 810d9f8:	e000e3f0 	.word	0xe000e3f0
 810d9fc:	10005164 	.word	0x10005164
 810da00:	e000ed0c 	.word	0xe000ed0c
 810da04:	10005168 	.word	0x10005168

0810da08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810da08:	b580      	push	{r7, lr}
 810da0a:	b084      	sub	sp, #16
 810da0c:	af00      	add	r7, sp, #0
 810da0e:	6078      	str	r0, [r7, #4]
 810da10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810da12:	687b      	ldr	r3, [r7, #4]
 810da14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810da16:	68fb      	ldr	r3, [r7, #12]
 810da18:	2b00      	cmp	r3, #0
 810da1a:	d10a      	bne.n	810da32 <xQueueGenericReset+0x2a>
	__asm volatile
 810da1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810da20:	f383 8811 	msr	BASEPRI, r3
 810da24:	f3bf 8f6f 	isb	sy
 810da28:	f3bf 8f4f 	dsb	sy
 810da2c:	60bb      	str	r3, [r7, #8]
}
 810da2e:	bf00      	nop
 810da30:	e7fe      	b.n	810da30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810da32:	f7ff fec7 	bl	810d7c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810da36:	68fb      	ldr	r3, [r7, #12]
 810da38:	681a      	ldr	r2, [r3, #0]
 810da3a:	68fb      	ldr	r3, [r7, #12]
 810da3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810da3e:	68f9      	ldr	r1, [r7, #12]
 810da40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810da42:	fb01 f303 	mul.w	r3, r1, r3
 810da46:	441a      	add	r2, r3
 810da48:	68fb      	ldr	r3, [r7, #12]
 810da4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810da4c:	68fb      	ldr	r3, [r7, #12]
 810da4e:	2200      	movs	r2, #0
 810da50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810da52:	68fb      	ldr	r3, [r7, #12]
 810da54:	681a      	ldr	r2, [r3, #0]
 810da56:	68fb      	ldr	r3, [r7, #12]
 810da58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810da5a:	68fb      	ldr	r3, [r7, #12]
 810da5c:	681a      	ldr	r2, [r3, #0]
 810da5e:	68fb      	ldr	r3, [r7, #12]
 810da60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810da62:	3b01      	subs	r3, #1
 810da64:	68f9      	ldr	r1, [r7, #12]
 810da66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810da68:	fb01 f303 	mul.w	r3, r1, r3
 810da6c:	441a      	add	r2, r3
 810da6e:	68fb      	ldr	r3, [r7, #12]
 810da70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810da72:	68fb      	ldr	r3, [r7, #12]
 810da74:	22ff      	movs	r2, #255	; 0xff
 810da76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810da7a:	68fb      	ldr	r3, [r7, #12]
 810da7c:	22ff      	movs	r2, #255	; 0xff
 810da7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 810da82:	683b      	ldr	r3, [r7, #0]
 810da84:	2b00      	cmp	r3, #0
 810da86:	d114      	bne.n	810dab2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810da88:	68fb      	ldr	r3, [r7, #12]
 810da8a:	691b      	ldr	r3, [r3, #16]
 810da8c:	2b00      	cmp	r3, #0
 810da8e:	d01a      	beq.n	810dac6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810da90:	68fb      	ldr	r3, [r7, #12]
 810da92:	3310      	adds	r3, #16
 810da94:	4618      	mov	r0, r3
 810da96:	f001 fa1b 	bl	810eed0 <xTaskRemoveFromEventList>
 810da9a:	4603      	mov	r3, r0
 810da9c:	2b00      	cmp	r3, #0
 810da9e:	d012      	beq.n	810dac6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810daa0:	4b0c      	ldr	r3, [pc, #48]	; (810dad4 <xQueueGenericReset+0xcc>)
 810daa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810daa6:	601a      	str	r2, [r3, #0]
 810daa8:	f3bf 8f4f 	dsb	sy
 810daac:	f3bf 8f6f 	isb	sy
 810dab0:	e009      	b.n	810dac6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810dab2:	68fb      	ldr	r3, [r7, #12]
 810dab4:	3310      	adds	r3, #16
 810dab6:	4618      	mov	r0, r3
 810dab8:	f7ff fca4 	bl	810d404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810dabc:	68fb      	ldr	r3, [r7, #12]
 810dabe:	3324      	adds	r3, #36	; 0x24
 810dac0:	4618      	mov	r0, r3
 810dac2:	f7ff fc9f 	bl	810d404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810dac6:	f7ff fead 	bl	810d824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810daca:	2301      	movs	r3, #1
}
 810dacc:	4618      	mov	r0, r3
 810dace:	3710      	adds	r7, #16
 810dad0:	46bd      	mov	sp, r7
 810dad2:	bd80      	pop	{r7, pc}
 810dad4:	e000ed04 	.word	0xe000ed04

0810dad8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810dad8:	b580      	push	{r7, lr}
 810dada:	b08e      	sub	sp, #56	; 0x38
 810dadc:	af02      	add	r7, sp, #8
 810dade:	60f8      	str	r0, [r7, #12]
 810dae0:	60b9      	str	r1, [r7, #8]
 810dae2:	607a      	str	r2, [r7, #4]
 810dae4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810dae6:	68fb      	ldr	r3, [r7, #12]
 810dae8:	2b00      	cmp	r3, #0
 810daea:	d10a      	bne.n	810db02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810daec:	f04f 0350 	mov.w	r3, #80	; 0x50
 810daf0:	f383 8811 	msr	BASEPRI, r3
 810daf4:	f3bf 8f6f 	isb	sy
 810daf8:	f3bf 8f4f 	dsb	sy
 810dafc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810dafe:	bf00      	nop
 810db00:	e7fe      	b.n	810db00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810db02:	683b      	ldr	r3, [r7, #0]
 810db04:	2b00      	cmp	r3, #0
 810db06:	d10a      	bne.n	810db1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 810db08:	f04f 0350 	mov.w	r3, #80	; 0x50
 810db0c:	f383 8811 	msr	BASEPRI, r3
 810db10:	f3bf 8f6f 	isb	sy
 810db14:	f3bf 8f4f 	dsb	sy
 810db18:	627b      	str	r3, [r7, #36]	; 0x24
}
 810db1a:	bf00      	nop
 810db1c:	e7fe      	b.n	810db1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810db1e:	687b      	ldr	r3, [r7, #4]
 810db20:	2b00      	cmp	r3, #0
 810db22:	d002      	beq.n	810db2a <xQueueGenericCreateStatic+0x52>
 810db24:	68bb      	ldr	r3, [r7, #8]
 810db26:	2b00      	cmp	r3, #0
 810db28:	d001      	beq.n	810db2e <xQueueGenericCreateStatic+0x56>
 810db2a:	2301      	movs	r3, #1
 810db2c:	e000      	b.n	810db30 <xQueueGenericCreateStatic+0x58>
 810db2e:	2300      	movs	r3, #0
 810db30:	2b00      	cmp	r3, #0
 810db32:	d10a      	bne.n	810db4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 810db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 810db38:	f383 8811 	msr	BASEPRI, r3
 810db3c:	f3bf 8f6f 	isb	sy
 810db40:	f3bf 8f4f 	dsb	sy
 810db44:	623b      	str	r3, [r7, #32]
}
 810db46:	bf00      	nop
 810db48:	e7fe      	b.n	810db48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810db4a:	687b      	ldr	r3, [r7, #4]
 810db4c:	2b00      	cmp	r3, #0
 810db4e:	d102      	bne.n	810db56 <xQueueGenericCreateStatic+0x7e>
 810db50:	68bb      	ldr	r3, [r7, #8]
 810db52:	2b00      	cmp	r3, #0
 810db54:	d101      	bne.n	810db5a <xQueueGenericCreateStatic+0x82>
 810db56:	2301      	movs	r3, #1
 810db58:	e000      	b.n	810db5c <xQueueGenericCreateStatic+0x84>
 810db5a:	2300      	movs	r3, #0
 810db5c:	2b00      	cmp	r3, #0
 810db5e:	d10a      	bne.n	810db76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 810db60:	f04f 0350 	mov.w	r3, #80	; 0x50
 810db64:	f383 8811 	msr	BASEPRI, r3
 810db68:	f3bf 8f6f 	isb	sy
 810db6c:	f3bf 8f4f 	dsb	sy
 810db70:	61fb      	str	r3, [r7, #28]
}
 810db72:	bf00      	nop
 810db74:	e7fe      	b.n	810db74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810db76:	2350      	movs	r3, #80	; 0x50
 810db78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810db7a:	697b      	ldr	r3, [r7, #20]
 810db7c:	2b50      	cmp	r3, #80	; 0x50
 810db7e:	d00a      	beq.n	810db96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 810db80:	f04f 0350 	mov.w	r3, #80	; 0x50
 810db84:	f383 8811 	msr	BASEPRI, r3
 810db88:	f3bf 8f6f 	isb	sy
 810db8c:	f3bf 8f4f 	dsb	sy
 810db90:	61bb      	str	r3, [r7, #24]
}
 810db92:	bf00      	nop
 810db94:	e7fe      	b.n	810db94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810db96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810db98:	683b      	ldr	r3, [r7, #0]
 810db9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810db9e:	2b00      	cmp	r3, #0
 810dba0:	d00d      	beq.n	810dbbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810dba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dba4:	2201      	movs	r2, #1
 810dba6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810dbaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810dbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810dbb0:	9300      	str	r3, [sp, #0]
 810dbb2:	4613      	mov	r3, r2
 810dbb4:	687a      	ldr	r2, [r7, #4]
 810dbb6:	68b9      	ldr	r1, [r7, #8]
 810dbb8:	68f8      	ldr	r0, [r7, #12]
 810dbba:	f000 f83f 	bl	810dc3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810dbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 810dbc0:	4618      	mov	r0, r3
 810dbc2:	3730      	adds	r7, #48	; 0x30
 810dbc4:	46bd      	mov	sp, r7
 810dbc6:	bd80      	pop	{r7, pc}

0810dbc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810dbc8:	b580      	push	{r7, lr}
 810dbca:	b08a      	sub	sp, #40	; 0x28
 810dbcc:	af02      	add	r7, sp, #8
 810dbce:	60f8      	str	r0, [r7, #12]
 810dbd0:	60b9      	str	r1, [r7, #8]
 810dbd2:	4613      	mov	r3, r2
 810dbd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810dbd6:	68fb      	ldr	r3, [r7, #12]
 810dbd8:	2b00      	cmp	r3, #0
 810dbda:	d10a      	bne.n	810dbf2 <xQueueGenericCreate+0x2a>
	__asm volatile
 810dbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dbe0:	f383 8811 	msr	BASEPRI, r3
 810dbe4:	f3bf 8f6f 	isb	sy
 810dbe8:	f3bf 8f4f 	dsb	sy
 810dbec:	613b      	str	r3, [r7, #16]
}
 810dbee:	bf00      	nop
 810dbf0:	e7fe      	b.n	810dbf0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810dbf2:	68fb      	ldr	r3, [r7, #12]
 810dbf4:	68ba      	ldr	r2, [r7, #8]
 810dbf6:	fb02 f303 	mul.w	r3, r2, r3
 810dbfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810dbfc:	69fb      	ldr	r3, [r7, #28]
 810dbfe:	3350      	adds	r3, #80	; 0x50
 810dc00:	4618      	mov	r0, r3
 810dc02:	f7ff fa15 	bl	810d030 <pvPortMalloc>
 810dc06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810dc08:	69bb      	ldr	r3, [r7, #24]
 810dc0a:	2b00      	cmp	r3, #0
 810dc0c:	d011      	beq.n	810dc32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810dc0e:	69bb      	ldr	r3, [r7, #24]
 810dc10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810dc12:	697b      	ldr	r3, [r7, #20]
 810dc14:	3350      	adds	r3, #80	; 0x50
 810dc16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810dc18:	69bb      	ldr	r3, [r7, #24]
 810dc1a:	2200      	movs	r2, #0
 810dc1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810dc20:	79fa      	ldrb	r2, [r7, #7]
 810dc22:	69bb      	ldr	r3, [r7, #24]
 810dc24:	9300      	str	r3, [sp, #0]
 810dc26:	4613      	mov	r3, r2
 810dc28:	697a      	ldr	r2, [r7, #20]
 810dc2a:	68b9      	ldr	r1, [r7, #8]
 810dc2c:	68f8      	ldr	r0, [r7, #12]
 810dc2e:	f000 f805 	bl	810dc3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810dc32:	69bb      	ldr	r3, [r7, #24]
	}
 810dc34:	4618      	mov	r0, r3
 810dc36:	3720      	adds	r7, #32
 810dc38:	46bd      	mov	sp, r7
 810dc3a:	bd80      	pop	{r7, pc}

0810dc3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810dc3c:	b580      	push	{r7, lr}
 810dc3e:	b084      	sub	sp, #16
 810dc40:	af00      	add	r7, sp, #0
 810dc42:	60f8      	str	r0, [r7, #12]
 810dc44:	60b9      	str	r1, [r7, #8]
 810dc46:	607a      	str	r2, [r7, #4]
 810dc48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810dc4a:	68bb      	ldr	r3, [r7, #8]
 810dc4c:	2b00      	cmp	r3, #0
 810dc4e:	d103      	bne.n	810dc58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810dc50:	69bb      	ldr	r3, [r7, #24]
 810dc52:	69ba      	ldr	r2, [r7, #24]
 810dc54:	601a      	str	r2, [r3, #0]
 810dc56:	e002      	b.n	810dc5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810dc58:	69bb      	ldr	r3, [r7, #24]
 810dc5a:	687a      	ldr	r2, [r7, #4]
 810dc5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810dc5e:	69bb      	ldr	r3, [r7, #24]
 810dc60:	68fa      	ldr	r2, [r7, #12]
 810dc62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810dc64:	69bb      	ldr	r3, [r7, #24]
 810dc66:	68ba      	ldr	r2, [r7, #8]
 810dc68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810dc6a:	2101      	movs	r1, #1
 810dc6c:	69b8      	ldr	r0, [r7, #24]
 810dc6e:	f7ff fecb 	bl	810da08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810dc72:	69bb      	ldr	r3, [r7, #24]
 810dc74:	78fa      	ldrb	r2, [r7, #3]
 810dc76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810dc7a:	bf00      	nop
 810dc7c:	3710      	adds	r7, #16
 810dc7e:	46bd      	mov	sp, r7
 810dc80:	bd80      	pop	{r7, pc}

0810dc82 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 810dc82:	b580      	push	{r7, lr}
 810dc84:	b08a      	sub	sp, #40	; 0x28
 810dc86:	af02      	add	r7, sp, #8
 810dc88:	60f8      	str	r0, [r7, #12]
 810dc8a:	60b9      	str	r1, [r7, #8]
 810dc8c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810dc8e:	68fb      	ldr	r3, [r7, #12]
 810dc90:	2b00      	cmp	r3, #0
 810dc92:	d10a      	bne.n	810dcaa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 810dc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dc98:	f383 8811 	msr	BASEPRI, r3
 810dc9c:	f3bf 8f6f 	isb	sy
 810dca0:	f3bf 8f4f 	dsb	sy
 810dca4:	61bb      	str	r3, [r7, #24]
}
 810dca6:	bf00      	nop
 810dca8:	e7fe      	b.n	810dca8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 810dcaa:	68ba      	ldr	r2, [r7, #8]
 810dcac:	68fb      	ldr	r3, [r7, #12]
 810dcae:	429a      	cmp	r2, r3
 810dcb0:	d90a      	bls.n	810dcc8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 810dcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dcb6:	f383 8811 	msr	BASEPRI, r3
 810dcba:	f3bf 8f6f 	isb	sy
 810dcbe:	f3bf 8f4f 	dsb	sy
 810dcc2:	617b      	str	r3, [r7, #20]
}
 810dcc4:	bf00      	nop
 810dcc6:	e7fe      	b.n	810dcc6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810dcc8:	2302      	movs	r3, #2
 810dcca:	9300      	str	r3, [sp, #0]
 810dccc:	687b      	ldr	r3, [r7, #4]
 810dcce:	2200      	movs	r2, #0
 810dcd0:	2100      	movs	r1, #0
 810dcd2:	68f8      	ldr	r0, [r7, #12]
 810dcd4:	f7ff ff00 	bl	810dad8 <xQueueGenericCreateStatic>
 810dcd8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 810dcda:	69fb      	ldr	r3, [r7, #28]
 810dcdc:	2b00      	cmp	r3, #0
 810dcde:	d002      	beq.n	810dce6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810dce0:	69fb      	ldr	r3, [r7, #28]
 810dce2:	68ba      	ldr	r2, [r7, #8]
 810dce4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810dce6:	69fb      	ldr	r3, [r7, #28]
	}
 810dce8:	4618      	mov	r0, r3
 810dcea:	3720      	adds	r7, #32
 810dcec:	46bd      	mov	sp, r7
 810dcee:	bd80      	pop	{r7, pc}

0810dcf0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 810dcf0:	b580      	push	{r7, lr}
 810dcf2:	b086      	sub	sp, #24
 810dcf4:	af00      	add	r7, sp, #0
 810dcf6:	6078      	str	r0, [r7, #4]
 810dcf8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810dcfa:	687b      	ldr	r3, [r7, #4]
 810dcfc:	2b00      	cmp	r3, #0
 810dcfe:	d10a      	bne.n	810dd16 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 810dd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dd04:	f383 8811 	msr	BASEPRI, r3
 810dd08:	f3bf 8f6f 	isb	sy
 810dd0c:	f3bf 8f4f 	dsb	sy
 810dd10:	613b      	str	r3, [r7, #16]
}
 810dd12:	bf00      	nop
 810dd14:	e7fe      	b.n	810dd14 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 810dd16:	683a      	ldr	r2, [r7, #0]
 810dd18:	687b      	ldr	r3, [r7, #4]
 810dd1a:	429a      	cmp	r2, r3
 810dd1c:	d90a      	bls.n	810dd34 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 810dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dd22:	f383 8811 	msr	BASEPRI, r3
 810dd26:	f3bf 8f6f 	isb	sy
 810dd2a:	f3bf 8f4f 	dsb	sy
 810dd2e:	60fb      	str	r3, [r7, #12]
}
 810dd30:	bf00      	nop
 810dd32:	e7fe      	b.n	810dd32 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810dd34:	2202      	movs	r2, #2
 810dd36:	2100      	movs	r1, #0
 810dd38:	6878      	ldr	r0, [r7, #4]
 810dd3a:	f7ff ff45 	bl	810dbc8 <xQueueGenericCreate>
 810dd3e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 810dd40:	697b      	ldr	r3, [r7, #20]
 810dd42:	2b00      	cmp	r3, #0
 810dd44:	d002      	beq.n	810dd4c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810dd46:	697b      	ldr	r3, [r7, #20]
 810dd48:	683a      	ldr	r2, [r7, #0]
 810dd4a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810dd4c:	697b      	ldr	r3, [r7, #20]
	}
 810dd4e:	4618      	mov	r0, r3
 810dd50:	3718      	adds	r7, #24
 810dd52:	46bd      	mov	sp, r7
 810dd54:	bd80      	pop	{r7, pc}
	...

0810dd58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810dd58:	b580      	push	{r7, lr}
 810dd5a:	b08e      	sub	sp, #56	; 0x38
 810dd5c:	af00      	add	r7, sp, #0
 810dd5e:	60f8      	str	r0, [r7, #12]
 810dd60:	60b9      	str	r1, [r7, #8]
 810dd62:	607a      	str	r2, [r7, #4]
 810dd64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810dd66:	2300      	movs	r3, #0
 810dd68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810dd6a:	68fb      	ldr	r3, [r7, #12]
 810dd6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dd70:	2b00      	cmp	r3, #0
 810dd72:	d10a      	bne.n	810dd8a <xQueueGenericSend+0x32>
	__asm volatile
 810dd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dd78:	f383 8811 	msr	BASEPRI, r3
 810dd7c:	f3bf 8f6f 	isb	sy
 810dd80:	f3bf 8f4f 	dsb	sy
 810dd84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810dd86:	bf00      	nop
 810dd88:	e7fe      	b.n	810dd88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810dd8a:	68bb      	ldr	r3, [r7, #8]
 810dd8c:	2b00      	cmp	r3, #0
 810dd8e:	d103      	bne.n	810dd98 <xQueueGenericSend+0x40>
 810dd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810dd94:	2b00      	cmp	r3, #0
 810dd96:	d101      	bne.n	810dd9c <xQueueGenericSend+0x44>
 810dd98:	2301      	movs	r3, #1
 810dd9a:	e000      	b.n	810dd9e <xQueueGenericSend+0x46>
 810dd9c:	2300      	movs	r3, #0
 810dd9e:	2b00      	cmp	r3, #0
 810dda0:	d10a      	bne.n	810ddb8 <xQueueGenericSend+0x60>
	__asm volatile
 810dda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dda6:	f383 8811 	msr	BASEPRI, r3
 810ddaa:	f3bf 8f6f 	isb	sy
 810ddae:	f3bf 8f4f 	dsb	sy
 810ddb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 810ddb4:	bf00      	nop
 810ddb6:	e7fe      	b.n	810ddb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810ddb8:	683b      	ldr	r3, [r7, #0]
 810ddba:	2b02      	cmp	r3, #2
 810ddbc:	d103      	bne.n	810ddc6 <xQueueGenericSend+0x6e>
 810ddbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ddc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ddc2:	2b01      	cmp	r3, #1
 810ddc4:	d101      	bne.n	810ddca <xQueueGenericSend+0x72>
 810ddc6:	2301      	movs	r3, #1
 810ddc8:	e000      	b.n	810ddcc <xQueueGenericSend+0x74>
 810ddca:	2300      	movs	r3, #0
 810ddcc:	2b00      	cmp	r3, #0
 810ddce:	d10a      	bne.n	810dde6 <xQueueGenericSend+0x8e>
	__asm volatile
 810ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ddd4:	f383 8811 	msr	BASEPRI, r3
 810ddd8:	f3bf 8f6f 	isb	sy
 810dddc:	f3bf 8f4f 	dsb	sy
 810dde0:	623b      	str	r3, [r7, #32]
}
 810dde2:	bf00      	nop
 810dde4:	e7fe      	b.n	810dde4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810dde6:	f001 fa35 	bl	810f254 <xTaskGetSchedulerState>
 810ddea:	4603      	mov	r3, r0
 810ddec:	2b00      	cmp	r3, #0
 810ddee:	d102      	bne.n	810ddf6 <xQueueGenericSend+0x9e>
 810ddf0:	687b      	ldr	r3, [r7, #4]
 810ddf2:	2b00      	cmp	r3, #0
 810ddf4:	d101      	bne.n	810ddfa <xQueueGenericSend+0xa2>
 810ddf6:	2301      	movs	r3, #1
 810ddf8:	e000      	b.n	810ddfc <xQueueGenericSend+0xa4>
 810ddfa:	2300      	movs	r3, #0
 810ddfc:	2b00      	cmp	r3, #0
 810ddfe:	d10a      	bne.n	810de16 <xQueueGenericSend+0xbe>
	__asm volatile
 810de00:	f04f 0350 	mov.w	r3, #80	; 0x50
 810de04:	f383 8811 	msr	BASEPRI, r3
 810de08:	f3bf 8f6f 	isb	sy
 810de0c:	f3bf 8f4f 	dsb	sy
 810de10:	61fb      	str	r3, [r7, #28]
}
 810de12:	bf00      	nop
 810de14:	e7fe      	b.n	810de14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810de16:	f7ff fcd5 	bl	810d7c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810de1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810de1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810de1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810de20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810de22:	429a      	cmp	r2, r3
 810de24:	d302      	bcc.n	810de2c <xQueueGenericSend+0xd4>
 810de26:	683b      	ldr	r3, [r7, #0]
 810de28:	2b02      	cmp	r3, #2
 810de2a:	d129      	bne.n	810de80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810de2c:	683a      	ldr	r2, [r7, #0]
 810de2e:	68b9      	ldr	r1, [r7, #8]
 810de30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810de32:	f000 fa2e 	bl	810e292 <prvCopyDataToQueue>
 810de36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810de38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810de3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810de3c:	2b00      	cmp	r3, #0
 810de3e:	d010      	beq.n	810de62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810de40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810de42:	3324      	adds	r3, #36	; 0x24
 810de44:	4618      	mov	r0, r3
 810de46:	f001 f843 	bl	810eed0 <xTaskRemoveFromEventList>
 810de4a:	4603      	mov	r3, r0
 810de4c:	2b00      	cmp	r3, #0
 810de4e:	d013      	beq.n	810de78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810de50:	4b3f      	ldr	r3, [pc, #252]	; (810df50 <xQueueGenericSend+0x1f8>)
 810de52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810de56:	601a      	str	r2, [r3, #0]
 810de58:	f3bf 8f4f 	dsb	sy
 810de5c:	f3bf 8f6f 	isb	sy
 810de60:	e00a      	b.n	810de78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810de64:	2b00      	cmp	r3, #0
 810de66:	d007      	beq.n	810de78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810de68:	4b39      	ldr	r3, [pc, #228]	; (810df50 <xQueueGenericSend+0x1f8>)
 810de6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810de6e:	601a      	str	r2, [r3, #0]
 810de70:	f3bf 8f4f 	dsb	sy
 810de74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810de78:	f7ff fcd4 	bl	810d824 <vPortExitCritical>
				return pdPASS;
 810de7c:	2301      	movs	r3, #1
 810de7e:	e063      	b.n	810df48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810de80:	687b      	ldr	r3, [r7, #4]
 810de82:	2b00      	cmp	r3, #0
 810de84:	d103      	bne.n	810de8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810de86:	f7ff fccd 	bl	810d824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810de8a:	2300      	movs	r3, #0
 810de8c:	e05c      	b.n	810df48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 810de8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810de90:	2b00      	cmp	r3, #0
 810de92:	d106      	bne.n	810dea2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810de94:	f107 0314 	add.w	r3, r7, #20
 810de98:	4618      	mov	r0, r3
 810de9a:	f001 f87d 	bl	810ef98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810de9e:	2301      	movs	r3, #1
 810dea0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810dea2:	f7ff fcbf 	bl	810d824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810dea6:	f000 fde9 	bl	810ea7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810deaa:	f7ff fc8b 	bl	810d7c4 <vPortEnterCritical>
 810deae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810deb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810deb4:	b25b      	sxtb	r3, r3
 810deb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810deba:	d103      	bne.n	810dec4 <xQueueGenericSend+0x16c>
 810debc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810debe:	2200      	movs	r2, #0
 810dec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810dec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810dec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810deca:	b25b      	sxtb	r3, r3
 810decc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810ded0:	d103      	bne.n	810deda <xQueueGenericSend+0x182>
 810ded2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ded4:	2200      	movs	r2, #0
 810ded6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810deda:	f7ff fca3 	bl	810d824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810dede:	1d3a      	adds	r2, r7, #4
 810dee0:	f107 0314 	add.w	r3, r7, #20
 810dee4:	4611      	mov	r1, r2
 810dee6:	4618      	mov	r0, r3
 810dee8:	f001 f86c 	bl	810efc4 <xTaskCheckForTimeOut>
 810deec:	4603      	mov	r3, r0
 810deee:	2b00      	cmp	r3, #0
 810def0:	d124      	bne.n	810df3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810def2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810def4:	f000 fac5 	bl	810e482 <prvIsQueueFull>
 810def8:	4603      	mov	r3, r0
 810defa:	2b00      	cmp	r3, #0
 810defc:	d018      	beq.n	810df30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810defe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810df00:	3310      	adds	r3, #16
 810df02:	687a      	ldr	r2, [r7, #4]
 810df04:	4611      	mov	r1, r2
 810df06:	4618      	mov	r0, r3
 810df08:	f000 ff92 	bl	810ee30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810df0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810df0e:	f000 fa50 	bl	810e3b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810df12:	f000 fdc1 	bl	810ea98 <xTaskResumeAll>
 810df16:	4603      	mov	r3, r0
 810df18:	2b00      	cmp	r3, #0
 810df1a:	f47f af7c 	bne.w	810de16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 810df1e:	4b0c      	ldr	r3, [pc, #48]	; (810df50 <xQueueGenericSend+0x1f8>)
 810df20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810df24:	601a      	str	r2, [r3, #0]
 810df26:	f3bf 8f4f 	dsb	sy
 810df2a:	f3bf 8f6f 	isb	sy
 810df2e:	e772      	b.n	810de16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810df30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810df32:	f000 fa3e 	bl	810e3b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810df36:	f000 fdaf 	bl	810ea98 <xTaskResumeAll>
 810df3a:	e76c      	b.n	810de16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810df3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810df3e:	f000 fa38 	bl	810e3b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810df42:	f000 fda9 	bl	810ea98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810df46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810df48:	4618      	mov	r0, r3
 810df4a:	3738      	adds	r7, #56	; 0x38
 810df4c:	46bd      	mov	sp, r7
 810df4e:	bd80      	pop	{r7, pc}
 810df50:	e000ed04 	.word	0xe000ed04

0810df54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810df54:	b580      	push	{r7, lr}
 810df56:	b090      	sub	sp, #64	; 0x40
 810df58:	af00      	add	r7, sp, #0
 810df5a:	60f8      	str	r0, [r7, #12]
 810df5c:	60b9      	str	r1, [r7, #8]
 810df5e:	607a      	str	r2, [r7, #4]
 810df60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810df62:	68fb      	ldr	r3, [r7, #12]
 810df64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 810df66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810df68:	2b00      	cmp	r3, #0
 810df6a:	d10a      	bne.n	810df82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 810df6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810df70:	f383 8811 	msr	BASEPRI, r3
 810df74:	f3bf 8f6f 	isb	sy
 810df78:	f3bf 8f4f 	dsb	sy
 810df7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810df7e:	bf00      	nop
 810df80:	e7fe      	b.n	810df80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810df82:	68bb      	ldr	r3, [r7, #8]
 810df84:	2b00      	cmp	r3, #0
 810df86:	d103      	bne.n	810df90 <xQueueGenericSendFromISR+0x3c>
 810df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810df8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810df8c:	2b00      	cmp	r3, #0
 810df8e:	d101      	bne.n	810df94 <xQueueGenericSendFromISR+0x40>
 810df90:	2301      	movs	r3, #1
 810df92:	e000      	b.n	810df96 <xQueueGenericSendFromISR+0x42>
 810df94:	2300      	movs	r3, #0
 810df96:	2b00      	cmp	r3, #0
 810df98:	d10a      	bne.n	810dfb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 810df9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810df9e:	f383 8811 	msr	BASEPRI, r3
 810dfa2:	f3bf 8f6f 	isb	sy
 810dfa6:	f3bf 8f4f 	dsb	sy
 810dfaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 810dfac:	bf00      	nop
 810dfae:	e7fe      	b.n	810dfae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810dfb0:	683b      	ldr	r3, [r7, #0]
 810dfb2:	2b02      	cmp	r3, #2
 810dfb4:	d103      	bne.n	810dfbe <xQueueGenericSendFromISR+0x6a>
 810dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810dfb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810dfba:	2b01      	cmp	r3, #1
 810dfbc:	d101      	bne.n	810dfc2 <xQueueGenericSendFromISR+0x6e>
 810dfbe:	2301      	movs	r3, #1
 810dfc0:	e000      	b.n	810dfc4 <xQueueGenericSendFromISR+0x70>
 810dfc2:	2300      	movs	r3, #0
 810dfc4:	2b00      	cmp	r3, #0
 810dfc6:	d10a      	bne.n	810dfde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 810dfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dfcc:	f383 8811 	msr	BASEPRI, r3
 810dfd0:	f3bf 8f6f 	isb	sy
 810dfd4:	f3bf 8f4f 	dsb	sy
 810dfd8:	623b      	str	r3, [r7, #32]
}
 810dfda:	bf00      	nop
 810dfdc:	e7fe      	b.n	810dfdc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810dfde:	f7ff fcd3 	bl	810d988 <vPortValidateInterruptPriority>
	__asm volatile
 810dfe2:	f3ef 8211 	mrs	r2, BASEPRI
 810dfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810dfea:	f383 8811 	msr	BASEPRI, r3
 810dfee:	f3bf 8f6f 	isb	sy
 810dff2:	f3bf 8f4f 	dsb	sy
 810dff6:	61fa      	str	r2, [r7, #28]
 810dff8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810dffa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810dffc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810dffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810e002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810e006:	429a      	cmp	r2, r3
 810e008:	d302      	bcc.n	810e010 <xQueueGenericSendFromISR+0xbc>
 810e00a:	683b      	ldr	r3, [r7, #0]
 810e00c:	2b02      	cmp	r3, #2
 810e00e:	d12f      	bne.n	810e070 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810e010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810e016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810e01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e01e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810e020:	683a      	ldr	r2, [r7, #0]
 810e022:	68b9      	ldr	r1, [r7, #8]
 810e024:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810e026:	f000 f934 	bl	810e292 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810e02a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 810e02e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810e032:	d112      	bne.n	810e05a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810e034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810e038:	2b00      	cmp	r3, #0
 810e03a:	d016      	beq.n	810e06a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810e03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e03e:	3324      	adds	r3, #36	; 0x24
 810e040:	4618      	mov	r0, r3
 810e042:	f000 ff45 	bl	810eed0 <xTaskRemoveFromEventList>
 810e046:	4603      	mov	r3, r0
 810e048:	2b00      	cmp	r3, #0
 810e04a:	d00e      	beq.n	810e06a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810e04c:	687b      	ldr	r3, [r7, #4]
 810e04e:	2b00      	cmp	r3, #0
 810e050:	d00b      	beq.n	810e06a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810e052:	687b      	ldr	r3, [r7, #4]
 810e054:	2201      	movs	r2, #1
 810e056:	601a      	str	r2, [r3, #0]
 810e058:	e007      	b.n	810e06a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810e05a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810e05e:	3301      	adds	r3, #1
 810e060:	b2db      	uxtb	r3, r3
 810e062:	b25a      	sxtb	r2, r3
 810e064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810e06a:	2301      	movs	r3, #1
 810e06c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 810e06e:	e001      	b.n	810e074 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810e070:	2300      	movs	r3, #0
 810e072:	63fb      	str	r3, [r7, #60]	; 0x3c
 810e074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810e076:	617b      	str	r3, [r7, #20]
	__asm volatile
 810e078:	697b      	ldr	r3, [r7, #20]
 810e07a:	f383 8811 	msr	BASEPRI, r3
}
 810e07e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810e080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810e082:	4618      	mov	r0, r3
 810e084:	3740      	adds	r7, #64	; 0x40
 810e086:	46bd      	mov	sp, r7
 810e088:	bd80      	pop	{r7, pc}
	...

0810e08c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810e08c:	b580      	push	{r7, lr}
 810e08e:	b08c      	sub	sp, #48	; 0x30
 810e090:	af00      	add	r7, sp, #0
 810e092:	60f8      	str	r0, [r7, #12]
 810e094:	60b9      	str	r1, [r7, #8]
 810e096:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810e098:	2300      	movs	r3, #0
 810e09a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810e09c:	68fb      	ldr	r3, [r7, #12]
 810e09e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810e0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e0a2:	2b00      	cmp	r3, #0
 810e0a4:	d10a      	bne.n	810e0bc <xQueueReceive+0x30>
	__asm volatile
 810e0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e0aa:	f383 8811 	msr	BASEPRI, r3
 810e0ae:	f3bf 8f6f 	isb	sy
 810e0b2:	f3bf 8f4f 	dsb	sy
 810e0b6:	623b      	str	r3, [r7, #32]
}
 810e0b8:	bf00      	nop
 810e0ba:	e7fe      	b.n	810e0ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810e0bc:	68bb      	ldr	r3, [r7, #8]
 810e0be:	2b00      	cmp	r3, #0
 810e0c0:	d103      	bne.n	810e0ca <xQueueReceive+0x3e>
 810e0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e0c6:	2b00      	cmp	r3, #0
 810e0c8:	d101      	bne.n	810e0ce <xQueueReceive+0x42>
 810e0ca:	2301      	movs	r3, #1
 810e0cc:	e000      	b.n	810e0d0 <xQueueReceive+0x44>
 810e0ce:	2300      	movs	r3, #0
 810e0d0:	2b00      	cmp	r3, #0
 810e0d2:	d10a      	bne.n	810e0ea <xQueueReceive+0x5e>
	__asm volatile
 810e0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e0d8:	f383 8811 	msr	BASEPRI, r3
 810e0dc:	f3bf 8f6f 	isb	sy
 810e0e0:	f3bf 8f4f 	dsb	sy
 810e0e4:	61fb      	str	r3, [r7, #28]
}
 810e0e6:	bf00      	nop
 810e0e8:	e7fe      	b.n	810e0e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810e0ea:	f001 f8b3 	bl	810f254 <xTaskGetSchedulerState>
 810e0ee:	4603      	mov	r3, r0
 810e0f0:	2b00      	cmp	r3, #0
 810e0f2:	d102      	bne.n	810e0fa <xQueueReceive+0x6e>
 810e0f4:	687b      	ldr	r3, [r7, #4]
 810e0f6:	2b00      	cmp	r3, #0
 810e0f8:	d101      	bne.n	810e0fe <xQueueReceive+0x72>
 810e0fa:	2301      	movs	r3, #1
 810e0fc:	e000      	b.n	810e100 <xQueueReceive+0x74>
 810e0fe:	2300      	movs	r3, #0
 810e100:	2b00      	cmp	r3, #0
 810e102:	d10a      	bne.n	810e11a <xQueueReceive+0x8e>
	__asm volatile
 810e104:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e108:	f383 8811 	msr	BASEPRI, r3
 810e10c:	f3bf 8f6f 	isb	sy
 810e110:	f3bf 8f4f 	dsb	sy
 810e114:	61bb      	str	r3, [r7, #24]
}
 810e116:	bf00      	nop
 810e118:	e7fe      	b.n	810e118 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810e11a:	f7ff fb53 	bl	810d7c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810e11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e122:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810e124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e126:	2b00      	cmp	r3, #0
 810e128:	d01f      	beq.n	810e16a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810e12a:	68b9      	ldr	r1, [r7, #8]
 810e12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810e12e:	f000 f91a 	bl	810e366 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810e132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e134:	1e5a      	subs	r2, r3, #1
 810e136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e138:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e13c:	691b      	ldr	r3, [r3, #16]
 810e13e:	2b00      	cmp	r3, #0
 810e140:	d00f      	beq.n	810e162 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e144:	3310      	adds	r3, #16
 810e146:	4618      	mov	r0, r3
 810e148:	f000 fec2 	bl	810eed0 <xTaskRemoveFromEventList>
 810e14c:	4603      	mov	r3, r0
 810e14e:	2b00      	cmp	r3, #0
 810e150:	d007      	beq.n	810e162 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810e152:	4b3d      	ldr	r3, [pc, #244]	; (810e248 <xQueueReceive+0x1bc>)
 810e154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e158:	601a      	str	r2, [r3, #0]
 810e15a:	f3bf 8f4f 	dsb	sy
 810e15e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810e162:	f7ff fb5f 	bl	810d824 <vPortExitCritical>
				return pdPASS;
 810e166:	2301      	movs	r3, #1
 810e168:	e069      	b.n	810e23e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810e16a:	687b      	ldr	r3, [r7, #4]
 810e16c:	2b00      	cmp	r3, #0
 810e16e:	d103      	bne.n	810e178 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810e170:	f7ff fb58 	bl	810d824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810e174:	2300      	movs	r3, #0
 810e176:	e062      	b.n	810e23e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 810e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e17a:	2b00      	cmp	r3, #0
 810e17c:	d106      	bne.n	810e18c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810e17e:	f107 0310 	add.w	r3, r7, #16
 810e182:	4618      	mov	r0, r3
 810e184:	f000 ff08 	bl	810ef98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810e188:	2301      	movs	r3, #1
 810e18a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810e18c:	f7ff fb4a 	bl	810d824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810e190:	f000 fc74 	bl	810ea7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810e194:	f7ff fb16 	bl	810d7c4 <vPortEnterCritical>
 810e198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e19a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810e19e:	b25b      	sxtb	r3, r3
 810e1a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810e1a4:	d103      	bne.n	810e1ae <xQueueReceive+0x122>
 810e1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e1a8:	2200      	movs	r2, #0
 810e1aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e1b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810e1b4:	b25b      	sxtb	r3, r3
 810e1b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810e1ba:	d103      	bne.n	810e1c4 <xQueueReceive+0x138>
 810e1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e1be:	2200      	movs	r2, #0
 810e1c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810e1c4:	f7ff fb2e 	bl	810d824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810e1c8:	1d3a      	adds	r2, r7, #4
 810e1ca:	f107 0310 	add.w	r3, r7, #16
 810e1ce:	4611      	mov	r1, r2
 810e1d0:	4618      	mov	r0, r3
 810e1d2:	f000 fef7 	bl	810efc4 <xTaskCheckForTimeOut>
 810e1d6:	4603      	mov	r3, r0
 810e1d8:	2b00      	cmp	r3, #0
 810e1da:	d123      	bne.n	810e224 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810e1dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810e1de:	f000 f93a 	bl	810e456 <prvIsQueueEmpty>
 810e1e2:	4603      	mov	r3, r0
 810e1e4:	2b00      	cmp	r3, #0
 810e1e6:	d017      	beq.n	810e218 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810e1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e1ea:	3324      	adds	r3, #36	; 0x24
 810e1ec:	687a      	ldr	r2, [r7, #4]
 810e1ee:	4611      	mov	r1, r2
 810e1f0:	4618      	mov	r0, r3
 810e1f2:	f000 fe1d 	bl	810ee30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810e1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810e1f8:	f000 f8db 	bl	810e3b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810e1fc:	f000 fc4c 	bl	810ea98 <xTaskResumeAll>
 810e200:	4603      	mov	r3, r0
 810e202:	2b00      	cmp	r3, #0
 810e204:	d189      	bne.n	810e11a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 810e206:	4b10      	ldr	r3, [pc, #64]	; (810e248 <xQueueReceive+0x1bc>)
 810e208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e20c:	601a      	str	r2, [r3, #0]
 810e20e:	f3bf 8f4f 	dsb	sy
 810e212:	f3bf 8f6f 	isb	sy
 810e216:	e780      	b.n	810e11a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810e218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810e21a:	f000 f8ca 	bl	810e3b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810e21e:	f000 fc3b 	bl	810ea98 <xTaskResumeAll>
 810e222:	e77a      	b.n	810e11a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810e224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810e226:	f000 f8c4 	bl	810e3b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810e22a:	f000 fc35 	bl	810ea98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810e22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810e230:	f000 f911 	bl	810e456 <prvIsQueueEmpty>
 810e234:	4603      	mov	r3, r0
 810e236:	2b00      	cmp	r3, #0
 810e238:	f43f af6f 	beq.w	810e11a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810e23c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810e23e:	4618      	mov	r0, r3
 810e240:	3730      	adds	r7, #48	; 0x30
 810e242:	46bd      	mov	sp, r7
 810e244:	bd80      	pop	{r7, pc}
 810e246:	bf00      	nop
 810e248:	e000ed04 	.word	0xe000ed04

0810e24c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 810e24c:	b580      	push	{r7, lr}
 810e24e:	b084      	sub	sp, #16
 810e250:	af00      	add	r7, sp, #0
 810e252:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 810e254:	687b      	ldr	r3, [r7, #4]
 810e256:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810e258:	68fb      	ldr	r3, [r7, #12]
 810e25a:	2b00      	cmp	r3, #0
 810e25c:	d10a      	bne.n	810e274 <vQueueDelete+0x28>
	__asm volatile
 810e25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e262:	f383 8811 	msr	BASEPRI, r3
 810e266:	f3bf 8f6f 	isb	sy
 810e26a:	f3bf 8f4f 	dsb	sy
 810e26e:	60bb      	str	r3, [r7, #8]
}
 810e270:	bf00      	nop
 810e272:	e7fe      	b.n	810e272 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 810e274:	68f8      	ldr	r0, [r7, #12]
 810e276:	f000 f947 	bl	810e508 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 810e27a:	68fb      	ldr	r3, [r7, #12]
 810e27c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 810e280:	2b00      	cmp	r3, #0
 810e282:	d102      	bne.n	810e28a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 810e284:	68f8      	ldr	r0, [r7, #12]
 810e286:	f7fe ff9f 	bl	810d1c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 810e28a:	bf00      	nop
 810e28c:	3710      	adds	r7, #16
 810e28e:	46bd      	mov	sp, r7
 810e290:	bd80      	pop	{r7, pc}

0810e292 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810e292:	b580      	push	{r7, lr}
 810e294:	b086      	sub	sp, #24
 810e296:	af00      	add	r7, sp, #0
 810e298:	60f8      	str	r0, [r7, #12]
 810e29a:	60b9      	str	r1, [r7, #8]
 810e29c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810e29e:	2300      	movs	r3, #0
 810e2a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810e2a2:	68fb      	ldr	r3, [r7, #12]
 810e2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e2a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810e2a8:	68fb      	ldr	r3, [r7, #12]
 810e2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e2ac:	2b00      	cmp	r3, #0
 810e2ae:	d10d      	bne.n	810e2cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810e2b0:	68fb      	ldr	r3, [r7, #12]
 810e2b2:	681b      	ldr	r3, [r3, #0]
 810e2b4:	2b00      	cmp	r3, #0
 810e2b6:	d14d      	bne.n	810e354 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810e2b8:	68fb      	ldr	r3, [r7, #12]
 810e2ba:	689b      	ldr	r3, [r3, #8]
 810e2bc:	4618      	mov	r0, r3
 810e2be:	f000 ffe7 	bl	810f290 <xTaskPriorityDisinherit>
 810e2c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810e2c4:	68fb      	ldr	r3, [r7, #12]
 810e2c6:	2200      	movs	r2, #0
 810e2c8:	609a      	str	r2, [r3, #8]
 810e2ca:	e043      	b.n	810e354 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810e2cc:	687b      	ldr	r3, [r7, #4]
 810e2ce:	2b00      	cmp	r3, #0
 810e2d0:	d119      	bne.n	810e306 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810e2d2:	68fb      	ldr	r3, [r7, #12]
 810e2d4:	6858      	ldr	r0, [r3, #4]
 810e2d6:	68fb      	ldr	r3, [r7, #12]
 810e2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e2da:	461a      	mov	r2, r3
 810e2dc:	68b9      	ldr	r1, [r7, #8]
 810e2de:	f001 fc0b 	bl	810faf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810e2e2:	68fb      	ldr	r3, [r7, #12]
 810e2e4:	685a      	ldr	r2, [r3, #4]
 810e2e6:	68fb      	ldr	r3, [r7, #12]
 810e2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e2ea:	441a      	add	r2, r3
 810e2ec:	68fb      	ldr	r3, [r7, #12]
 810e2ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810e2f0:	68fb      	ldr	r3, [r7, #12]
 810e2f2:	685a      	ldr	r2, [r3, #4]
 810e2f4:	68fb      	ldr	r3, [r7, #12]
 810e2f6:	689b      	ldr	r3, [r3, #8]
 810e2f8:	429a      	cmp	r2, r3
 810e2fa:	d32b      	bcc.n	810e354 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810e2fc:	68fb      	ldr	r3, [r7, #12]
 810e2fe:	681a      	ldr	r2, [r3, #0]
 810e300:	68fb      	ldr	r3, [r7, #12]
 810e302:	605a      	str	r2, [r3, #4]
 810e304:	e026      	b.n	810e354 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810e306:	68fb      	ldr	r3, [r7, #12]
 810e308:	68d8      	ldr	r0, [r3, #12]
 810e30a:	68fb      	ldr	r3, [r7, #12]
 810e30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e30e:	461a      	mov	r2, r3
 810e310:	68b9      	ldr	r1, [r7, #8]
 810e312:	f001 fbf1 	bl	810faf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810e316:	68fb      	ldr	r3, [r7, #12]
 810e318:	68da      	ldr	r2, [r3, #12]
 810e31a:	68fb      	ldr	r3, [r7, #12]
 810e31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e31e:	425b      	negs	r3, r3
 810e320:	441a      	add	r2, r3
 810e322:	68fb      	ldr	r3, [r7, #12]
 810e324:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810e326:	68fb      	ldr	r3, [r7, #12]
 810e328:	68da      	ldr	r2, [r3, #12]
 810e32a:	68fb      	ldr	r3, [r7, #12]
 810e32c:	681b      	ldr	r3, [r3, #0]
 810e32e:	429a      	cmp	r2, r3
 810e330:	d207      	bcs.n	810e342 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810e332:	68fb      	ldr	r3, [r7, #12]
 810e334:	689a      	ldr	r2, [r3, #8]
 810e336:	68fb      	ldr	r3, [r7, #12]
 810e338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e33a:	425b      	negs	r3, r3
 810e33c:	441a      	add	r2, r3
 810e33e:	68fb      	ldr	r3, [r7, #12]
 810e340:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810e342:	687b      	ldr	r3, [r7, #4]
 810e344:	2b02      	cmp	r3, #2
 810e346:	d105      	bne.n	810e354 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810e348:	693b      	ldr	r3, [r7, #16]
 810e34a:	2b00      	cmp	r3, #0
 810e34c:	d002      	beq.n	810e354 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810e34e:	693b      	ldr	r3, [r7, #16]
 810e350:	3b01      	subs	r3, #1
 810e352:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810e354:	693b      	ldr	r3, [r7, #16]
 810e356:	1c5a      	adds	r2, r3, #1
 810e358:	68fb      	ldr	r3, [r7, #12]
 810e35a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810e35c:	697b      	ldr	r3, [r7, #20]
}
 810e35e:	4618      	mov	r0, r3
 810e360:	3718      	adds	r7, #24
 810e362:	46bd      	mov	sp, r7
 810e364:	bd80      	pop	{r7, pc}

0810e366 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810e366:	b580      	push	{r7, lr}
 810e368:	b082      	sub	sp, #8
 810e36a:	af00      	add	r7, sp, #0
 810e36c:	6078      	str	r0, [r7, #4]
 810e36e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810e370:	687b      	ldr	r3, [r7, #4]
 810e372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e374:	2b00      	cmp	r3, #0
 810e376:	d018      	beq.n	810e3aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810e378:	687b      	ldr	r3, [r7, #4]
 810e37a:	68da      	ldr	r2, [r3, #12]
 810e37c:	687b      	ldr	r3, [r7, #4]
 810e37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e380:	441a      	add	r2, r3
 810e382:	687b      	ldr	r3, [r7, #4]
 810e384:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810e386:	687b      	ldr	r3, [r7, #4]
 810e388:	68da      	ldr	r2, [r3, #12]
 810e38a:	687b      	ldr	r3, [r7, #4]
 810e38c:	689b      	ldr	r3, [r3, #8]
 810e38e:	429a      	cmp	r2, r3
 810e390:	d303      	bcc.n	810e39a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810e392:	687b      	ldr	r3, [r7, #4]
 810e394:	681a      	ldr	r2, [r3, #0]
 810e396:	687b      	ldr	r3, [r7, #4]
 810e398:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810e39a:	687b      	ldr	r3, [r7, #4]
 810e39c:	68d9      	ldr	r1, [r3, #12]
 810e39e:	687b      	ldr	r3, [r7, #4]
 810e3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810e3a2:	461a      	mov	r2, r3
 810e3a4:	6838      	ldr	r0, [r7, #0]
 810e3a6:	f001 fba7 	bl	810faf8 <memcpy>
	}
}
 810e3aa:	bf00      	nop
 810e3ac:	3708      	adds	r7, #8
 810e3ae:	46bd      	mov	sp, r7
 810e3b0:	bd80      	pop	{r7, pc}

0810e3b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810e3b2:	b580      	push	{r7, lr}
 810e3b4:	b084      	sub	sp, #16
 810e3b6:	af00      	add	r7, sp, #0
 810e3b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810e3ba:	f7ff fa03 	bl	810d7c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810e3be:	687b      	ldr	r3, [r7, #4]
 810e3c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810e3c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810e3c6:	e011      	b.n	810e3ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810e3c8:	687b      	ldr	r3, [r7, #4]
 810e3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810e3cc:	2b00      	cmp	r3, #0
 810e3ce:	d012      	beq.n	810e3f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810e3d0:	687b      	ldr	r3, [r7, #4]
 810e3d2:	3324      	adds	r3, #36	; 0x24
 810e3d4:	4618      	mov	r0, r3
 810e3d6:	f000 fd7b 	bl	810eed0 <xTaskRemoveFromEventList>
 810e3da:	4603      	mov	r3, r0
 810e3dc:	2b00      	cmp	r3, #0
 810e3de:	d001      	beq.n	810e3e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810e3e0:	f000 fe52 	bl	810f088 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810e3e4:	7bfb      	ldrb	r3, [r7, #15]
 810e3e6:	3b01      	subs	r3, #1
 810e3e8:	b2db      	uxtb	r3, r3
 810e3ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810e3ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810e3f0:	2b00      	cmp	r3, #0
 810e3f2:	dce9      	bgt.n	810e3c8 <prvUnlockQueue+0x16>
 810e3f4:	e000      	b.n	810e3f8 <prvUnlockQueue+0x46>
					break;
 810e3f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810e3f8:	687b      	ldr	r3, [r7, #4]
 810e3fa:	22ff      	movs	r2, #255	; 0xff
 810e3fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810e400:	f7ff fa10 	bl	810d824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810e404:	f7ff f9de 	bl	810d7c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810e408:	687b      	ldr	r3, [r7, #4]
 810e40a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810e40e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810e410:	e011      	b.n	810e436 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e412:	687b      	ldr	r3, [r7, #4]
 810e414:	691b      	ldr	r3, [r3, #16]
 810e416:	2b00      	cmp	r3, #0
 810e418:	d012      	beq.n	810e440 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e41a:	687b      	ldr	r3, [r7, #4]
 810e41c:	3310      	adds	r3, #16
 810e41e:	4618      	mov	r0, r3
 810e420:	f000 fd56 	bl	810eed0 <xTaskRemoveFromEventList>
 810e424:	4603      	mov	r3, r0
 810e426:	2b00      	cmp	r3, #0
 810e428:	d001      	beq.n	810e42e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810e42a:	f000 fe2d 	bl	810f088 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810e42e:	7bbb      	ldrb	r3, [r7, #14]
 810e430:	3b01      	subs	r3, #1
 810e432:	b2db      	uxtb	r3, r3
 810e434:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810e436:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810e43a:	2b00      	cmp	r3, #0
 810e43c:	dce9      	bgt.n	810e412 <prvUnlockQueue+0x60>
 810e43e:	e000      	b.n	810e442 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810e440:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810e442:	687b      	ldr	r3, [r7, #4]
 810e444:	22ff      	movs	r2, #255	; 0xff
 810e446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810e44a:	f7ff f9eb 	bl	810d824 <vPortExitCritical>
}
 810e44e:	bf00      	nop
 810e450:	3710      	adds	r7, #16
 810e452:	46bd      	mov	sp, r7
 810e454:	bd80      	pop	{r7, pc}

0810e456 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810e456:	b580      	push	{r7, lr}
 810e458:	b084      	sub	sp, #16
 810e45a:	af00      	add	r7, sp, #0
 810e45c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810e45e:	f7ff f9b1 	bl	810d7c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810e462:	687b      	ldr	r3, [r7, #4]
 810e464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e466:	2b00      	cmp	r3, #0
 810e468:	d102      	bne.n	810e470 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810e46a:	2301      	movs	r3, #1
 810e46c:	60fb      	str	r3, [r7, #12]
 810e46e:	e001      	b.n	810e474 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810e470:	2300      	movs	r3, #0
 810e472:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810e474:	f7ff f9d6 	bl	810d824 <vPortExitCritical>

	return xReturn;
 810e478:	68fb      	ldr	r3, [r7, #12]
}
 810e47a:	4618      	mov	r0, r3
 810e47c:	3710      	adds	r7, #16
 810e47e:	46bd      	mov	sp, r7
 810e480:	bd80      	pop	{r7, pc}

0810e482 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810e482:	b580      	push	{r7, lr}
 810e484:	b084      	sub	sp, #16
 810e486:	af00      	add	r7, sp, #0
 810e488:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810e48a:	f7ff f99b 	bl	810d7c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810e48e:	687b      	ldr	r3, [r7, #4]
 810e490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810e492:	687b      	ldr	r3, [r7, #4]
 810e494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810e496:	429a      	cmp	r2, r3
 810e498:	d102      	bne.n	810e4a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810e49a:	2301      	movs	r3, #1
 810e49c:	60fb      	str	r3, [r7, #12]
 810e49e:	e001      	b.n	810e4a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810e4a0:	2300      	movs	r3, #0
 810e4a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810e4a4:	f7ff f9be 	bl	810d824 <vPortExitCritical>

	return xReturn;
 810e4a8:	68fb      	ldr	r3, [r7, #12]
}
 810e4aa:	4618      	mov	r0, r3
 810e4ac:	3710      	adds	r7, #16
 810e4ae:	46bd      	mov	sp, r7
 810e4b0:	bd80      	pop	{r7, pc}
	...

0810e4b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810e4b4:	b480      	push	{r7}
 810e4b6:	b085      	sub	sp, #20
 810e4b8:	af00      	add	r7, sp, #0
 810e4ba:	6078      	str	r0, [r7, #4]
 810e4bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e4be:	2300      	movs	r3, #0
 810e4c0:	60fb      	str	r3, [r7, #12]
 810e4c2:	e014      	b.n	810e4ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810e4c4:	4a0f      	ldr	r2, [pc, #60]	; (810e504 <vQueueAddToRegistry+0x50>)
 810e4c6:	68fb      	ldr	r3, [r7, #12]
 810e4c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810e4cc:	2b00      	cmp	r3, #0
 810e4ce:	d10b      	bne.n	810e4e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810e4d0:	490c      	ldr	r1, [pc, #48]	; (810e504 <vQueueAddToRegistry+0x50>)
 810e4d2:	68fb      	ldr	r3, [r7, #12]
 810e4d4:	683a      	ldr	r2, [r7, #0]
 810e4d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810e4da:	4a0a      	ldr	r2, [pc, #40]	; (810e504 <vQueueAddToRegistry+0x50>)
 810e4dc:	68fb      	ldr	r3, [r7, #12]
 810e4de:	00db      	lsls	r3, r3, #3
 810e4e0:	4413      	add	r3, r2
 810e4e2:	687a      	ldr	r2, [r7, #4]
 810e4e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810e4e6:	e006      	b.n	810e4f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e4e8:	68fb      	ldr	r3, [r7, #12]
 810e4ea:	3301      	adds	r3, #1
 810e4ec:	60fb      	str	r3, [r7, #12]
 810e4ee:	68fb      	ldr	r3, [r7, #12]
 810e4f0:	2b07      	cmp	r3, #7
 810e4f2:	d9e7      	bls.n	810e4c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810e4f4:	bf00      	nop
 810e4f6:	bf00      	nop
 810e4f8:	3714      	adds	r7, #20
 810e4fa:	46bd      	mov	sp, r7
 810e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e500:	4770      	bx	lr
 810e502:	bf00      	nop
 810e504:	1000516c 	.word	0x1000516c

0810e508 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 810e508:	b480      	push	{r7}
 810e50a:	b085      	sub	sp, #20
 810e50c:	af00      	add	r7, sp, #0
 810e50e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e510:	2300      	movs	r3, #0
 810e512:	60fb      	str	r3, [r7, #12]
 810e514:	e016      	b.n	810e544 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 810e516:	4a10      	ldr	r2, [pc, #64]	; (810e558 <vQueueUnregisterQueue+0x50>)
 810e518:	68fb      	ldr	r3, [r7, #12]
 810e51a:	00db      	lsls	r3, r3, #3
 810e51c:	4413      	add	r3, r2
 810e51e:	685b      	ldr	r3, [r3, #4]
 810e520:	687a      	ldr	r2, [r7, #4]
 810e522:	429a      	cmp	r2, r3
 810e524:	d10b      	bne.n	810e53e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 810e526:	4a0c      	ldr	r2, [pc, #48]	; (810e558 <vQueueUnregisterQueue+0x50>)
 810e528:	68fb      	ldr	r3, [r7, #12]
 810e52a:	2100      	movs	r1, #0
 810e52c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 810e530:	4a09      	ldr	r2, [pc, #36]	; (810e558 <vQueueUnregisterQueue+0x50>)
 810e532:	68fb      	ldr	r3, [r7, #12]
 810e534:	00db      	lsls	r3, r3, #3
 810e536:	4413      	add	r3, r2
 810e538:	2200      	movs	r2, #0
 810e53a:	605a      	str	r2, [r3, #4]
				break;
 810e53c:	e006      	b.n	810e54c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e53e:	68fb      	ldr	r3, [r7, #12]
 810e540:	3301      	adds	r3, #1
 810e542:	60fb      	str	r3, [r7, #12]
 810e544:	68fb      	ldr	r3, [r7, #12]
 810e546:	2b07      	cmp	r3, #7
 810e548:	d9e5      	bls.n	810e516 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 810e54a:	bf00      	nop
 810e54c:	bf00      	nop
 810e54e:	3714      	adds	r7, #20
 810e550:	46bd      	mov	sp, r7
 810e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e556:	4770      	bx	lr
 810e558:	1000516c 	.word	0x1000516c

0810e55c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810e55c:	b580      	push	{r7, lr}
 810e55e:	b086      	sub	sp, #24
 810e560:	af00      	add	r7, sp, #0
 810e562:	60f8      	str	r0, [r7, #12]
 810e564:	60b9      	str	r1, [r7, #8]
 810e566:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810e568:	68fb      	ldr	r3, [r7, #12]
 810e56a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810e56c:	f7ff f92a 	bl	810d7c4 <vPortEnterCritical>
 810e570:	697b      	ldr	r3, [r7, #20]
 810e572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810e576:	b25b      	sxtb	r3, r3
 810e578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810e57c:	d103      	bne.n	810e586 <vQueueWaitForMessageRestricted+0x2a>
 810e57e:	697b      	ldr	r3, [r7, #20]
 810e580:	2200      	movs	r2, #0
 810e582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810e586:	697b      	ldr	r3, [r7, #20]
 810e588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810e58c:	b25b      	sxtb	r3, r3
 810e58e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810e592:	d103      	bne.n	810e59c <vQueueWaitForMessageRestricted+0x40>
 810e594:	697b      	ldr	r3, [r7, #20]
 810e596:	2200      	movs	r2, #0
 810e598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810e59c:	f7ff f942 	bl	810d824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810e5a0:	697b      	ldr	r3, [r7, #20]
 810e5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e5a4:	2b00      	cmp	r3, #0
 810e5a6:	d106      	bne.n	810e5b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810e5a8:	697b      	ldr	r3, [r7, #20]
 810e5aa:	3324      	adds	r3, #36	; 0x24
 810e5ac:	687a      	ldr	r2, [r7, #4]
 810e5ae:	68b9      	ldr	r1, [r7, #8]
 810e5b0:	4618      	mov	r0, r3
 810e5b2:	f000 fc61 	bl	810ee78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810e5b6:	6978      	ldr	r0, [r7, #20]
 810e5b8:	f7ff fefb 	bl	810e3b2 <prvUnlockQueue>
	}
 810e5bc:	bf00      	nop
 810e5be:	3718      	adds	r7, #24
 810e5c0:	46bd      	mov	sp, r7
 810e5c2:	bd80      	pop	{r7, pc}

0810e5c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810e5c4:	b580      	push	{r7, lr}
 810e5c6:	b08e      	sub	sp, #56	; 0x38
 810e5c8:	af04      	add	r7, sp, #16
 810e5ca:	60f8      	str	r0, [r7, #12]
 810e5cc:	60b9      	str	r1, [r7, #8]
 810e5ce:	607a      	str	r2, [r7, #4]
 810e5d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810e5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810e5d4:	2b00      	cmp	r3, #0
 810e5d6:	d10a      	bne.n	810e5ee <xTaskCreateStatic+0x2a>
	__asm volatile
 810e5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e5dc:	f383 8811 	msr	BASEPRI, r3
 810e5e0:	f3bf 8f6f 	isb	sy
 810e5e4:	f3bf 8f4f 	dsb	sy
 810e5e8:	623b      	str	r3, [r7, #32]
}
 810e5ea:	bf00      	nop
 810e5ec:	e7fe      	b.n	810e5ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810e5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e5f0:	2b00      	cmp	r3, #0
 810e5f2:	d10a      	bne.n	810e60a <xTaskCreateStatic+0x46>
	__asm volatile
 810e5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e5f8:	f383 8811 	msr	BASEPRI, r3
 810e5fc:	f3bf 8f6f 	isb	sy
 810e600:	f3bf 8f4f 	dsb	sy
 810e604:	61fb      	str	r3, [r7, #28]
}
 810e606:	bf00      	nop
 810e608:	e7fe      	b.n	810e608 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810e60a:	23bc      	movs	r3, #188	; 0xbc
 810e60c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810e60e:	693b      	ldr	r3, [r7, #16]
 810e610:	2bbc      	cmp	r3, #188	; 0xbc
 810e612:	d00a      	beq.n	810e62a <xTaskCreateStatic+0x66>
	__asm volatile
 810e614:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e618:	f383 8811 	msr	BASEPRI, r3
 810e61c:	f3bf 8f6f 	isb	sy
 810e620:	f3bf 8f4f 	dsb	sy
 810e624:	61bb      	str	r3, [r7, #24]
}
 810e626:	bf00      	nop
 810e628:	e7fe      	b.n	810e628 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810e62a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810e62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e62e:	2b00      	cmp	r3, #0
 810e630:	d01e      	beq.n	810e670 <xTaskCreateStatic+0xac>
 810e632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810e634:	2b00      	cmp	r3, #0
 810e636:	d01b      	beq.n	810e670 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810e638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e63a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810e63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e63e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810e640:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810e642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e644:	2202      	movs	r2, #2
 810e646:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810e64a:	2300      	movs	r3, #0
 810e64c:	9303      	str	r3, [sp, #12]
 810e64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e650:	9302      	str	r3, [sp, #8]
 810e652:	f107 0314 	add.w	r3, r7, #20
 810e656:	9301      	str	r3, [sp, #4]
 810e658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e65a:	9300      	str	r3, [sp, #0]
 810e65c:	683b      	ldr	r3, [r7, #0]
 810e65e:	687a      	ldr	r2, [r7, #4]
 810e660:	68b9      	ldr	r1, [r7, #8]
 810e662:	68f8      	ldr	r0, [r7, #12]
 810e664:	f000 f850 	bl	810e708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810e668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810e66a:	f000 f8f3 	bl	810e854 <prvAddNewTaskToReadyList>
 810e66e:	e001      	b.n	810e674 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 810e670:	2300      	movs	r3, #0
 810e672:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810e674:	697b      	ldr	r3, [r7, #20]
	}
 810e676:	4618      	mov	r0, r3
 810e678:	3728      	adds	r7, #40	; 0x28
 810e67a:	46bd      	mov	sp, r7
 810e67c:	bd80      	pop	{r7, pc}

0810e67e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810e67e:	b580      	push	{r7, lr}
 810e680:	b08c      	sub	sp, #48	; 0x30
 810e682:	af04      	add	r7, sp, #16
 810e684:	60f8      	str	r0, [r7, #12]
 810e686:	60b9      	str	r1, [r7, #8]
 810e688:	603b      	str	r3, [r7, #0]
 810e68a:	4613      	mov	r3, r2
 810e68c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810e68e:	88fb      	ldrh	r3, [r7, #6]
 810e690:	009b      	lsls	r3, r3, #2
 810e692:	4618      	mov	r0, r3
 810e694:	f7fe fccc 	bl	810d030 <pvPortMalloc>
 810e698:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810e69a:	697b      	ldr	r3, [r7, #20]
 810e69c:	2b00      	cmp	r3, #0
 810e69e:	d00e      	beq.n	810e6be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810e6a0:	20bc      	movs	r0, #188	; 0xbc
 810e6a2:	f7fe fcc5 	bl	810d030 <pvPortMalloc>
 810e6a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810e6a8:	69fb      	ldr	r3, [r7, #28]
 810e6aa:	2b00      	cmp	r3, #0
 810e6ac:	d003      	beq.n	810e6b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810e6ae:	69fb      	ldr	r3, [r7, #28]
 810e6b0:	697a      	ldr	r2, [r7, #20]
 810e6b2:	631a      	str	r2, [r3, #48]	; 0x30
 810e6b4:	e005      	b.n	810e6c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810e6b6:	6978      	ldr	r0, [r7, #20]
 810e6b8:	f7fe fd86 	bl	810d1c8 <vPortFree>
 810e6bc:	e001      	b.n	810e6c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810e6be:	2300      	movs	r3, #0
 810e6c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810e6c2:	69fb      	ldr	r3, [r7, #28]
 810e6c4:	2b00      	cmp	r3, #0
 810e6c6:	d017      	beq.n	810e6f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810e6c8:	69fb      	ldr	r3, [r7, #28]
 810e6ca:	2200      	movs	r2, #0
 810e6cc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810e6d0:	88fa      	ldrh	r2, [r7, #6]
 810e6d2:	2300      	movs	r3, #0
 810e6d4:	9303      	str	r3, [sp, #12]
 810e6d6:	69fb      	ldr	r3, [r7, #28]
 810e6d8:	9302      	str	r3, [sp, #8]
 810e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e6dc:	9301      	str	r3, [sp, #4]
 810e6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e6e0:	9300      	str	r3, [sp, #0]
 810e6e2:	683b      	ldr	r3, [r7, #0]
 810e6e4:	68b9      	ldr	r1, [r7, #8]
 810e6e6:	68f8      	ldr	r0, [r7, #12]
 810e6e8:	f000 f80e 	bl	810e708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810e6ec:	69f8      	ldr	r0, [r7, #28]
 810e6ee:	f000 f8b1 	bl	810e854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810e6f2:	2301      	movs	r3, #1
 810e6f4:	61bb      	str	r3, [r7, #24]
 810e6f6:	e002      	b.n	810e6fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810e6f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810e6fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810e6fe:	69bb      	ldr	r3, [r7, #24]
	}
 810e700:	4618      	mov	r0, r3
 810e702:	3720      	adds	r7, #32
 810e704:	46bd      	mov	sp, r7
 810e706:	bd80      	pop	{r7, pc}

0810e708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810e708:	b580      	push	{r7, lr}
 810e70a:	b088      	sub	sp, #32
 810e70c:	af00      	add	r7, sp, #0
 810e70e:	60f8      	str	r0, [r7, #12]
 810e710:	60b9      	str	r1, [r7, #8]
 810e712:	607a      	str	r2, [r7, #4]
 810e714:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810e716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e718:	6b18      	ldr	r0, [r3, #48]	; 0x30
 810e71a:	687b      	ldr	r3, [r7, #4]
 810e71c:	009b      	lsls	r3, r3, #2
 810e71e:	461a      	mov	r2, r3
 810e720:	21a5      	movs	r1, #165	; 0xa5
 810e722:	f001 f9f7 	bl	810fb14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810e726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810e72a:	687b      	ldr	r3, [r7, #4]
 810e72c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810e730:	3b01      	subs	r3, #1
 810e732:	009b      	lsls	r3, r3, #2
 810e734:	4413      	add	r3, r2
 810e736:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810e738:	69bb      	ldr	r3, [r7, #24]
 810e73a:	f023 0307 	bic.w	r3, r3, #7
 810e73e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810e740:	69bb      	ldr	r3, [r7, #24]
 810e742:	f003 0307 	and.w	r3, r3, #7
 810e746:	2b00      	cmp	r3, #0
 810e748:	d00a      	beq.n	810e760 <prvInitialiseNewTask+0x58>
	__asm volatile
 810e74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e74e:	f383 8811 	msr	BASEPRI, r3
 810e752:	f3bf 8f6f 	isb	sy
 810e756:	f3bf 8f4f 	dsb	sy
 810e75a:	617b      	str	r3, [r7, #20]
}
 810e75c:	bf00      	nop
 810e75e:	e7fe      	b.n	810e75e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810e760:	68bb      	ldr	r3, [r7, #8]
 810e762:	2b00      	cmp	r3, #0
 810e764:	d01f      	beq.n	810e7a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810e766:	2300      	movs	r3, #0
 810e768:	61fb      	str	r3, [r7, #28]
 810e76a:	e012      	b.n	810e792 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810e76c:	68ba      	ldr	r2, [r7, #8]
 810e76e:	69fb      	ldr	r3, [r7, #28]
 810e770:	4413      	add	r3, r2
 810e772:	7819      	ldrb	r1, [r3, #0]
 810e774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810e776:	69fb      	ldr	r3, [r7, #28]
 810e778:	4413      	add	r3, r2
 810e77a:	3334      	adds	r3, #52	; 0x34
 810e77c:	460a      	mov	r2, r1
 810e77e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810e780:	68ba      	ldr	r2, [r7, #8]
 810e782:	69fb      	ldr	r3, [r7, #28]
 810e784:	4413      	add	r3, r2
 810e786:	781b      	ldrb	r3, [r3, #0]
 810e788:	2b00      	cmp	r3, #0
 810e78a:	d006      	beq.n	810e79a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810e78c:	69fb      	ldr	r3, [r7, #28]
 810e78e:	3301      	adds	r3, #1
 810e790:	61fb      	str	r3, [r7, #28]
 810e792:	69fb      	ldr	r3, [r7, #28]
 810e794:	2b0f      	cmp	r3, #15
 810e796:	d9e9      	bls.n	810e76c <prvInitialiseNewTask+0x64>
 810e798:	e000      	b.n	810e79c <prvInitialiseNewTask+0x94>
			{
				break;
 810e79a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810e79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e79e:	2200      	movs	r2, #0
 810e7a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810e7a4:	e003      	b.n	810e7ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7a8:	2200      	movs	r2, #0
 810e7aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810e7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e7b0:	2b37      	cmp	r3, #55	; 0x37
 810e7b2:	d901      	bls.n	810e7b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810e7b4:	2337      	movs	r3, #55	; 0x37
 810e7b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810e7bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810e7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810e7c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810e7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7c6:	2200      	movs	r2, #0
 810e7c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810e7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7cc:	3304      	adds	r3, #4
 810e7ce:	4618      	mov	r0, r3
 810e7d0:	f7fe fe38 	bl	810d444 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810e7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7d6:	3318      	adds	r3, #24
 810e7d8:	4618      	mov	r0, r3
 810e7da:	f7fe fe33 	bl	810d444 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810e7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810e7e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e7e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810e7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810e7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810e7f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810e7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7f6:	2200      	movs	r2, #0
 810e7f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810e7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e7fe:	2200      	movs	r2, #0
 810e800:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810e804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e806:	3354      	adds	r3, #84	; 0x54
 810e808:	2260      	movs	r2, #96	; 0x60
 810e80a:	2100      	movs	r1, #0
 810e80c:	4618      	mov	r0, r3
 810e80e:	f001 f981 	bl	810fb14 <memset>
 810e812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e814:	4a0c      	ldr	r2, [pc, #48]	; (810e848 <prvInitialiseNewTask+0x140>)
 810e816:	659a      	str	r2, [r3, #88]	; 0x58
 810e818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e81a:	4a0c      	ldr	r2, [pc, #48]	; (810e84c <prvInitialiseNewTask+0x144>)
 810e81c:	65da      	str	r2, [r3, #92]	; 0x5c
 810e81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e820:	4a0b      	ldr	r2, [pc, #44]	; (810e850 <prvInitialiseNewTask+0x148>)
 810e822:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810e824:	683a      	ldr	r2, [r7, #0]
 810e826:	68f9      	ldr	r1, [r7, #12]
 810e828:	69b8      	ldr	r0, [r7, #24]
 810e82a:	f7fe fe9f 	bl	810d56c <pxPortInitialiseStack>
 810e82e:	4602      	mov	r2, r0
 810e830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e832:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810e834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e836:	2b00      	cmp	r3, #0
 810e838:	d002      	beq.n	810e840 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810e83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810e83e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810e840:	bf00      	nop
 810e842:	3720      	adds	r7, #32
 810e844:	46bd      	mov	sp, r7
 810e846:	bd80      	pop	{r7, pc}
 810e848:	0810fdbc 	.word	0x0810fdbc
 810e84c:	0810fddc 	.word	0x0810fddc
 810e850:	0810fd9c 	.word	0x0810fd9c

0810e854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810e854:	b580      	push	{r7, lr}
 810e856:	b082      	sub	sp, #8
 810e858:	af00      	add	r7, sp, #0
 810e85a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810e85c:	f7fe ffb2 	bl	810d7c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810e860:	4b2d      	ldr	r3, [pc, #180]	; (810e918 <prvAddNewTaskToReadyList+0xc4>)
 810e862:	681b      	ldr	r3, [r3, #0]
 810e864:	3301      	adds	r3, #1
 810e866:	4a2c      	ldr	r2, [pc, #176]	; (810e918 <prvAddNewTaskToReadyList+0xc4>)
 810e868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810e86a:	4b2c      	ldr	r3, [pc, #176]	; (810e91c <prvAddNewTaskToReadyList+0xc8>)
 810e86c:	681b      	ldr	r3, [r3, #0]
 810e86e:	2b00      	cmp	r3, #0
 810e870:	d109      	bne.n	810e886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810e872:	4a2a      	ldr	r2, [pc, #168]	; (810e91c <prvAddNewTaskToReadyList+0xc8>)
 810e874:	687b      	ldr	r3, [r7, #4]
 810e876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810e878:	4b27      	ldr	r3, [pc, #156]	; (810e918 <prvAddNewTaskToReadyList+0xc4>)
 810e87a:	681b      	ldr	r3, [r3, #0]
 810e87c:	2b01      	cmp	r3, #1
 810e87e:	d110      	bne.n	810e8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810e880:	f000 fc26 	bl	810f0d0 <prvInitialiseTaskLists>
 810e884:	e00d      	b.n	810e8a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810e886:	4b26      	ldr	r3, [pc, #152]	; (810e920 <prvAddNewTaskToReadyList+0xcc>)
 810e888:	681b      	ldr	r3, [r3, #0]
 810e88a:	2b00      	cmp	r3, #0
 810e88c:	d109      	bne.n	810e8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810e88e:	4b23      	ldr	r3, [pc, #140]	; (810e91c <prvAddNewTaskToReadyList+0xc8>)
 810e890:	681b      	ldr	r3, [r3, #0]
 810e892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e894:	687b      	ldr	r3, [r7, #4]
 810e896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e898:	429a      	cmp	r2, r3
 810e89a:	d802      	bhi.n	810e8a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810e89c:	4a1f      	ldr	r2, [pc, #124]	; (810e91c <prvAddNewTaskToReadyList+0xc8>)
 810e89e:	687b      	ldr	r3, [r7, #4]
 810e8a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810e8a2:	4b20      	ldr	r3, [pc, #128]	; (810e924 <prvAddNewTaskToReadyList+0xd0>)
 810e8a4:	681b      	ldr	r3, [r3, #0]
 810e8a6:	3301      	adds	r3, #1
 810e8a8:	4a1e      	ldr	r2, [pc, #120]	; (810e924 <prvAddNewTaskToReadyList+0xd0>)
 810e8aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810e8ac:	4b1d      	ldr	r3, [pc, #116]	; (810e924 <prvAddNewTaskToReadyList+0xd0>)
 810e8ae:	681a      	ldr	r2, [r3, #0]
 810e8b0:	687b      	ldr	r3, [r7, #4]
 810e8b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810e8b4:	687b      	ldr	r3, [r7, #4]
 810e8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e8b8:	4b1b      	ldr	r3, [pc, #108]	; (810e928 <prvAddNewTaskToReadyList+0xd4>)
 810e8ba:	681b      	ldr	r3, [r3, #0]
 810e8bc:	429a      	cmp	r2, r3
 810e8be:	d903      	bls.n	810e8c8 <prvAddNewTaskToReadyList+0x74>
 810e8c0:	687b      	ldr	r3, [r7, #4]
 810e8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e8c4:	4a18      	ldr	r2, [pc, #96]	; (810e928 <prvAddNewTaskToReadyList+0xd4>)
 810e8c6:	6013      	str	r3, [r2, #0]
 810e8c8:	687b      	ldr	r3, [r7, #4]
 810e8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e8cc:	4613      	mov	r3, r2
 810e8ce:	009b      	lsls	r3, r3, #2
 810e8d0:	4413      	add	r3, r2
 810e8d2:	009b      	lsls	r3, r3, #2
 810e8d4:	4a15      	ldr	r2, [pc, #84]	; (810e92c <prvAddNewTaskToReadyList+0xd8>)
 810e8d6:	441a      	add	r2, r3
 810e8d8:	687b      	ldr	r3, [r7, #4]
 810e8da:	3304      	adds	r3, #4
 810e8dc:	4619      	mov	r1, r3
 810e8de:	4610      	mov	r0, r2
 810e8e0:	f7fe fdbd 	bl	810d45e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810e8e4:	f7fe ff9e 	bl	810d824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810e8e8:	4b0d      	ldr	r3, [pc, #52]	; (810e920 <prvAddNewTaskToReadyList+0xcc>)
 810e8ea:	681b      	ldr	r3, [r3, #0]
 810e8ec:	2b00      	cmp	r3, #0
 810e8ee:	d00e      	beq.n	810e90e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810e8f0:	4b0a      	ldr	r3, [pc, #40]	; (810e91c <prvAddNewTaskToReadyList+0xc8>)
 810e8f2:	681b      	ldr	r3, [r3, #0]
 810e8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810e8f6:	687b      	ldr	r3, [r7, #4]
 810e8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810e8fa:	429a      	cmp	r2, r3
 810e8fc:	d207      	bcs.n	810e90e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810e8fe:	4b0c      	ldr	r3, [pc, #48]	; (810e930 <prvAddNewTaskToReadyList+0xdc>)
 810e900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e904:	601a      	str	r2, [r3, #0]
 810e906:	f3bf 8f4f 	dsb	sy
 810e90a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810e90e:	bf00      	nop
 810e910:	3708      	adds	r7, #8
 810e912:	46bd      	mov	sp, r7
 810e914:	bd80      	pop	{r7, pc}
 810e916:	bf00      	nop
 810e918:	10005680 	.word	0x10005680
 810e91c:	100051ac 	.word	0x100051ac
 810e920:	1000568c 	.word	0x1000568c
 810e924:	1000569c 	.word	0x1000569c
 810e928:	10005688 	.word	0x10005688
 810e92c:	100051b0 	.word	0x100051b0
 810e930:	e000ed04 	.word	0xe000ed04

0810e934 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810e934:	b580      	push	{r7, lr}
 810e936:	b084      	sub	sp, #16
 810e938:	af00      	add	r7, sp, #0
 810e93a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810e93c:	2300      	movs	r3, #0
 810e93e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810e940:	687b      	ldr	r3, [r7, #4]
 810e942:	2b00      	cmp	r3, #0
 810e944:	d017      	beq.n	810e976 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810e946:	4b13      	ldr	r3, [pc, #76]	; (810e994 <vTaskDelay+0x60>)
 810e948:	681b      	ldr	r3, [r3, #0]
 810e94a:	2b00      	cmp	r3, #0
 810e94c:	d00a      	beq.n	810e964 <vTaskDelay+0x30>
	__asm volatile
 810e94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e952:	f383 8811 	msr	BASEPRI, r3
 810e956:	f3bf 8f6f 	isb	sy
 810e95a:	f3bf 8f4f 	dsb	sy
 810e95e:	60bb      	str	r3, [r7, #8]
}
 810e960:	bf00      	nop
 810e962:	e7fe      	b.n	810e962 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810e964:	f000 f88a 	bl	810ea7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810e968:	2100      	movs	r1, #0
 810e96a:	6878      	ldr	r0, [r7, #4]
 810e96c:	f000 fcfe 	bl	810f36c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810e970:	f000 f892 	bl	810ea98 <xTaskResumeAll>
 810e974:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810e976:	68fb      	ldr	r3, [r7, #12]
 810e978:	2b00      	cmp	r3, #0
 810e97a:	d107      	bne.n	810e98c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 810e97c:	4b06      	ldr	r3, [pc, #24]	; (810e998 <vTaskDelay+0x64>)
 810e97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e982:	601a      	str	r2, [r3, #0]
 810e984:	f3bf 8f4f 	dsb	sy
 810e988:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810e98c:	bf00      	nop
 810e98e:	3710      	adds	r7, #16
 810e990:	46bd      	mov	sp, r7
 810e992:	bd80      	pop	{r7, pc}
 810e994:	100056a8 	.word	0x100056a8
 810e998:	e000ed04 	.word	0xe000ed04

0810e99c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810e99c:	b580      	push	{r7, lr}
 810e99e:	b08a      	sub	sp, #40	; 0x28
 810e9a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810e9a2:	2300      	movs	r3, #0
 810e9a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810e9a6:	2300      	movs	r3, #0
 810e9a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810e9aa:	463a      	mov	r2, r7
 810e9ac:	1d39      	adds	r1, r7, #4
 810e9ae:	f107 0308 	add.w	r3, r7, #8
 810e9b2:	4618      	mov	r0, r3
 810e9b4:	f7fe fb08 	bl	810cfc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810e9b8:	6839      	ldr	r1, [r7, #0]
 810e9ba:	687b      	ldr	r3, [r7, #4]
 810e9bc:	68ba      	ldr	r2, [r7, #8]
 810e9be:	9202      	str	r2, [sp, #8]
 810e9c0:	9301      	str	r3, [sp, #4]
 810e9c2:	2300      	movs	r3, #0
 810e9c4:	9300      	str	r3, [sp, #0]
 810e9c6:	2300      	movs	r3, #0
 810e9c8:	460a      	mov	r2, r1
 810e9ca:	4924      	ldr	r1, [pc, #144]	; (810ea5c <vTaskStartScheduler+0xc0>)
 810e9cc:	4824      	ldr	r0, [pc, #144]	; (810ea60 <vTaskStartScheduler+0xc4>)
 810e9ce:	f7ff fdf9 	bl	810e5c4 <xTaskCreateStatic>
 810e9d2:	4603      	mov	r3, r0
 810e9d4:	4a23      	ldr	r2, [pc, #140]	; (810ea64 <vTaskStartScheduler+0xc8>)
 810e9d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810e9d8:	4b22      	ldr	r3, [pc, #136]	; (810ea64 <vTaskStartScheduler+0xc8>)
 810e9da:	681b      	ldr	r3, [r3, #0]
 810e9dc:	2b00      	cmp	r3, #0
 810e9de:	d002      	beq.n	810e9e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810e9e0:	2301      	movs	r3, #1
 810e9e2:	617b      	str	r3, [r7, #20]
 810e9e4:	e001      	b.n	810e9ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810e9e6:	2300      	movs	r3, #0
 810e9e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810e9ea:	697b      	ldr	r3, [r7, #20]
 810e9ec:	2b01      	cmp	r3, #1
 810e9ee:	d102      	bne.n	810e9f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810e9f0:	f000 fd10 	bl	810f414 <xTimerCreateTimerTask>
 810e9f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810e9f6:	697b      	ldr	r3, [r7, #20]
 810e9f8:	2b01      	cmp	r3, #1
 810e9fa:	d11b      	bne.n	810ea34 <vTaskStartScheduler+0x98>
	__asm volatile
 810e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ea00:	f383 8811 	msr	BASEPRI, r3
 810ea04:	f3bf 8f6f 	isb	sy
 810ea08:	f3bf 8f4f 	dsb	sy
 810ea0c:	613b      	str	r3, [r7, #16]
}
 810ea0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810ea10:	4b15      	ldr	r3, [pc, #84]	; (810ea68 <vTaskStartScheduler+0xcc>)
 810ea12:	681b      	ldr	r3, [r3, #0]
 810ea14:	3354      	adds	r3, #84	; 0x54
 810ea16:	4a15      	ldr	r2, [pc, #84]	; (810ea6c <vTaskStartScheduler+0xd0>)
 810ea18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810ea1a:	4b15      	ldr	r3, [pc, #84]	; (810ea70 <vTaskStartScheduler+0xd4>)
 810ea1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810ea20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810ea22:	4b14      	ldr	r3, [pc, #80]	; (810ea74 <vTaskStartScheduler+0xd8>)
 810ea24:	2201      	movs	r2, #1
 810ea26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810ea28:	4b13      	ldr	r3, [pc, #76]	; (810ea78 <vTaskStartScheduler+0xdc>)
 810ea2a:	2200      	movs	r2, #0
 810ea2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810ea2e:	f7fe fe27 	bl	810d680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810ea32:	e00e      	b.n	810ea52 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810ea34:	697b      	ldr	r3, [r7, #20]
 810ea36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810ea3a:	d10a      	bne.n	810ea52 <vTaskStartScheduler+0xb6>
	__asm volatile
 810ea3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ea40:	f383 8811 	msr	BASEPRI, r3
 810ea44:	f3bf 8f6f 	isb	sy
 810ea48:	f3bf 8f4f 	dsb	sy
 810ea4c:	60fb      	str	r3, [r7, #12]
}
 810ea4e:	bf00      	nop
 810ea50:	e7fe      	b.n	810ea50 <vTaskStartScheduler+0xb4>
}
 810ea52:	bf00      	nop
 810ea54:	3718      	adds	r7, #24
 810ea56:	46bd      	mov	sp, r7
 810ea58:	bd80      	pop	{r7, pc}
 810ea5a:	bf00      	nop
 810ea5c:	0810fce4 	.word	0x0810fce4
 810ea60:	0810f0a1 	.word	0x0810f0a1
 810ea64:	100056a4 	.word	0x100056a4
 810ea68:	100051ac 	.word	0x100051ac
 810ea6c:	10000024 	.word	0x10000024
 810ea70:	100056a0 	.word	0x100056a0
 810ea74:	1000568c 	.word	0x1000568c
 810ea78:	10005684 	.word	0x10005684

0810ea7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810ea7c:	b480      	push	{r7}
 810ea7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810ea80:	4b04      	ldr	r3, [pc, #16]	; (810ea94 <vTaskSuspendAll+0x18>)
 810ea82:	681b      	ldr	r3, [r3, #0]
 810ea84:	3301      	adds	r3, #1
 810ea86:	4a03      	ldr	r2, [pc, #12]	; (810ea94 <vTaskSuspendAll+0x18>)
 810ea88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810ea8a:	bf00      	nop
 810ea8c:	46bd      	mov	sp, r7
 810ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea92:	4770      	bx	lr
 810ea94:	100056a8 	.word	0x100056a8

0810ea98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810ea98:	b580      	push	{r7, lr}
 810ea9a:	b084      	sub	sp, #16
 810ea9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810ea9e:	2300      	movs	r3, #0
 810eaa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810eaa2:	2300      	movs	r3, #0
 810eaa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810eaa6:	4b42      	ldr	r3, [pc, #264]	; (810ebb0 <xTaskResumeAll+0x118>)
 810eaa8:	681b      	ldr	r3, [r3, #0]
 810eaaa:	2b00      	cmp	r3, #0
 810eaac:	d10a      	bne.n	810eac4 <xTaskResumeAll+0x2c>
	__asm volatile
 810eaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 810eab2:	f383 8811 	msr	BASEPRI, r3
 810eab6:	f3bf 8f6f 	isb	sy
 810eaba:	f3bf 8f4f 	dsb	sy
 810eabe:	603b      	str	r3, [r7, #0]
}
 810eac0:	bf00      	nop
 810eac2:	e7fe      	b.n	810eac2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810eac4:	f7fe fe7e 	bl	810d7c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810eac8:	4b39      	ldr	r3, [pc, #228]	; (810ebb0 <xTaskResumeAll+0x118>)
 810eaca:	681b      	ldr	r3, [r3, #0]
 810eacc:	3b01      	subs	r3, #1
 810eace:	4a38      	ldr	r2, [pc, #224]	; (810ebb0 <xTaskResumeAll+0x118>)
 810ead0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ead2:	4b37      	ldr	r3, [pc, #220]	; (810ebb0 <xTaskResumeAll+0x118>)
 810ead4:	681b      	ldr	r3, [r3, #0]
 810ead6:	2b00      	cmp	r3, #0
 810ead8:	d162      	bne.n	810eba0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810eada:	4b36      	ldr	r3, [pc, #216]	; (810ebb4 <xTaskResumeAll+0x11c>)
 810eadc:	681b      	ldr	r3, [r3, #0]
 810eade:	2b00      	cmp	r3, #0
 810eae0:	d05e      	beq.n	810eba0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810eae2:	e02f      	b.n	810eb44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810eae4:	4b34      	ldr	r3, [pc, #208]	; (810ebb8 <xTaskResumeAll+0x120>)
 810eae6:	68db      	ldr	r3, [r3, #12]
 810eae8:	68db      	ldr	r3, [r3, #12]
 810eaea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810eaec:	68fb      	ldr	r3, [r7, #12]
 810eaee:	3318      	adds	r3, #24
 810eaf0:	4618      	mov	r0, r3
 810eaf2:	f7fe fd11 	bl	810d518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810eaf6:	68fb      	ldr	r3, [r7, #12]
 810eaf8:	3304      	adds	r3, #4
 810eafa:	4618      	mov	r0, r3
 810eafc:	f7fe fd0c 	bl	810d518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810eb00:	68fb      	ldr	r3, [r7, #12]
 810eb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810eb04:	4b2d      	ldr	r3, [pc, #180]	; (810ebbc <xTaskResumeAll+0x124>)
 810eb06:	681b      	ldr	r3, [r3, #0]
 810eb08:	429a      	cmp	r2, r3
 810eb0a:	d903      	bls.n	810eb14 <xTaskResumeAll+0x7c>
 810eb0c:	68fb      	ldr	r3, [r7, #12]
 810eb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810eb10:	4a2a      	ldr	r2, [pc, #168]	; (810ebbc <xTaskResumeAll+0x124>)
 810eb12:	6013      	str	r3, [r2, #0]
 810eb14:	68fb      	ldr	r3, [r7, #12]
 810eb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810eb18:	4613      	mov	r3, r2
 810eb1a:	009b      	lsls	r3, r3, #2
 810eb1c:	4413      	add	r3, r2
 810eb1e:	009b      	lsls	r3, r3, #2
 810eb20:	4a27      	ldr	r2, [pc, #156]	; (810ebc0 <xTaskResumeAll+0x128>)
 810eb22:	441a      	add	r2, r3
 810eb24:	68fb      	ldr	r3, [r7, #12]
 810eb26:	3304      	adds	r3, #4
 810eb28:	4619      	mov	r1, r3
 810eb2a:	4610      	mov	r0, r2
 810eb2c:	f7fe fc97 	bl	810d45e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810eb30:	68fb      	ldr	r3, [r7, #12]
 810eb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810eb34:	4b23      	ldr	r3, [pc, #140]	; (810ebc4 <xTaskResumeAll+0x12c>)
 810eb36:	681b      	ldr	r3, [r3, #0]
 810eb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810eb3a:	429a      	cmp	r2, r3
 810eb3c:	d302      	bcc.n	810eb44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 810eb3e:	4b22      	ldr	r3, [pc, #136]	; (810ebc8 <xTaskResumeAll+0x130>)
 810eb40:	2201      	movs	r2, #1
 810eb42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810eb44:	4b1c      	ldr	r3, [pc, #112]	; (810ebb8 <xTaskResumeAll+0x120>)
 810eb46:	681b      	ldr	r3, [r3, #0]
 810eb48:	2b00      	cmp	r3, #0
 810eb4a:	d1cb      	bne.n	810eae4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810eb4c:	68fb      	ldr	r3, [r7, #12]
 810eb4e:	2b00      	cmp	r3, #0
 810eb50:	d001      	beq.n	810eb56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810eb52:	f000 fb5f 	bl	810f214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810eb56:	4b1d      	ldr	r3, [pc, #116]	; (810ebcc <xTaskResumeAll+0x134>)
 810eb58:	681b      	ldr	r3, [r3, #0]
 810eb5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810eb5c:	687b      	ldr	r3, [r7, #4]
 810eb5e:	2b00      	cmp	r3, #0
 810eb60:	d010      	beq.n	810eb84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810eb62:	f000 f847 	bl	810ebf4 <xTaskIncrementTick>
 810eb66:	4603      	mov	r3, r0
 810eb68:	2b00      	cmp	r3, #0
 810eb6a:	d002      	beq.n	810eb72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 810eb6c:	4b16      	ldr	r3, [pc, #88]	; (810ebc8 <xTaskResumeAll+0x130>)
 810eb6e:	2201      	movs	r2, #1
 810eb70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810eb72:	687b      	ldr	r3, [r7, #4]
 810eb74:	3b01      	subs	r3, #1
 810eb76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810eb78:	687b      	ldr	r3, [r7, #4]
 810eb7a:	2b00      	cmp	r3, #0
 810eb7c:	d1f1      	bne.n	810eb62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 810eb7e:	4b13      	ldr	r3, [pc, #76]	; (810ebcc <xTaskResumeAll+0x134>)
 810eb80:	2200      	movs	r2, #0
 810eb82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810eb84:	4b10      	ldr	r3, [pc, #64]	; (810ebc8 <xTaskResumeAll+0x130>)
 810eb86:	681b      	ldr	r3, [r3, #0]
 810eb88:	2b00      	cmp	r3, #0
 810eb8a:	d009      	beq.n	810eba0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810eb8c:	2301      	movs	r3, #1
 810eb8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810eb90:	4b0f      	ldr	r3, [pc, #60]	; (810ebd0 <xTaskResumeAll+0x138>)
 810eb92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810eb96:	601a      	str	r2, [r3, #0]
 810eb98:	f3bf 8f4f 	dsb	sy
 810eb9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810eba0:	f7fe fe40 	bl	810d824 <vPortExitCritical>

	return xAlreadyYielded;
 810eba4:	68bb      	ldr	r3, [r7, #8]
}
 810eba6:	4618      	mov	r0, r3
 810eba8:	3710      	adds	r7, #16
 810ebaa:	46bd      	mov	sp, r7
 810ebac:	bd80      	pop	{r7, pc}
 810ebae:	bf00      	nop
 810ebb0:	100056a8 	.word	0x100056a8
 810ebb4:	10005680 	.word	0x10005680
 810ebb8:	10005640 	.word	0x10005640
 810ebbc:	10005688 	.word	0x10005688
 810ebc0:	100051b0 	.word	0x100051b0
 810ebc4:	100051ac 	.word	0x100051ac
 810ebc8:	10005694 	.word	0x10005694
 810ebcc:	10005690 	.word	0x10005690
 810ebd0:	e000ed04 	.word	0xe000ed04

0810ebd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810ebd4:	b480      	push	{r7}
 810ebd6:	b083      	sub	sp, #12
 810ebd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810ebda:	4b05      	ldr	r3, [pc, #20]	; (810ebf0 <xTaskGetTickCount+0x1c>)
 810ebdc:	681b      	ldr	r3, [r3, #0]
 810ebde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810ebe0:	687b      	ldr	r3, [r7, #4]
}
 810ebe2:	4618      	mov	r0, r3
 810ebe4:	370c      	adds	r7, #12
 810ebe6:	46bd      	mov	sp, r7
 810ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ebec:	4770      	bx	lr
 810ebee:	bf00      	nop
 810ebf0:	10005684 	.word	0x10005684

0810ebf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810ebf4:	b580      	push	{r7, lr}
 810ebf6:	b086      	sub	sp, #24
 810ebf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810ebfa:	2300      	movs	r3, #0
 810ebfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ebfe:	4b4f      	ldr	r3, [pc, #316]	; (810ed3c <xTaskIncrementTick+0x148>)
 810ec00:	681b      	ldr	r3, [r3, #0]
 810ec02:	2b00      	cmp	r3, #0
 810ec04:	f040 808f 	bne.w	810ed26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810ec08:	4b4d      	ldr	r3, [pc, #308]	; (810ed40 <xTaskIncrementTick+0x14c>)
 810ec0a:	681b      	ldr	r3, [r3, #0]
 810ec0c:	3301      	adds	r3, #1
 810ec0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810ec10:	4a4b      	ldr	r2, [pc, #300]	; (810ed40 <xTaskIncrementTick+0x14c>)
 810ec12:	693b      	ldr	r3, [r7, #16]
 810ec14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810ec16:	693b      	ldr	r3, [r7, #16]
 810ec18:	2b00      	cmp	r3, #0
 810ec1a:	d120      	bne.n	810ec5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 810ec1c:	4b49      	ldr	r3, [pc, #292]	; (810ed44 <xTaskIncrementTick+0x150>)
 810ec1e:	681b      	ldr	r3, [r3, #0]
 810ec20:	681b      	ldr	r3, [r3, #0]
 810ec22:	2b00      	cmp	r3, #0
 810ec24:	d00a      	beq.n	810ec3c <xTaskIncrementTick+0x48>
	__asm volatile
 810ec26:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ec2a:	f383 8811 	msr	BASEPRI, r3
 810ec2e:	f3bf 8f6f 	isb	sy
 810ec32:	f3bf 8f4f 	dsb	sy
 810ec36:	603b      	str	r3, [r7, #0]
}
 810ec38:	bf00      	nop
 810ec3a:	e7fe      	b.n	810ec3a <xTaskIncrementTick+0x46>
 810ec3c:	4b41      	ldr	r3, [pc, #260]	; (810ed44 <xTaskIncrementTick+0x150>)
 810ec3e:	681b      	ldr	r3, [r3, #0]
 810ec40:	60fb      	str	r3, [r7, #12]
 810ec42:	4b41      	ldr	r3, [pc, #260]	; (810ed48 <xTaskIncrementTick+0x154>)
 810ec44:	681b      	ldr	r3, [r3, #0]
 810ec46:	4a3f      	ldr	r2, [pc, #252]	; (810ed44 <xTaskIncrementTick+0x150>)
 810ec48:	6013      	str	r3, [r2, #0]
 810ec4a:	4a3f      	ldr	r2, [pc, #252]	; (810ed48 <xTaskIncrementTick+0x154>)
 810ec4c:	68fb      	ldr	r3, [r7, #12]
 810ec4e:	6013      	str	r3, [r2, #0]
 810ec50:	4b3e      	ldr	r3, [pc, #248]	; (810ed4c <xTaskIncrementTick+0x158>)
 810ec52:	681b      	ldr	r3, [r3, #0]
 810ec54:	3301      	adds	r3, #1
 810ec56:	4a3d      	ldr	r2, [pc, #244]	; (810ed4c <xTaskIncrementTick+0x158>)
 810ec58:	6013      	str	r3, [r2, #0]
 810ec5a:	f000 fadb 	bl	810f214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810ec5e:	4b3c      	ldr	r3, [pc, #240]	; (810ed50 <xTaskIncrementTick+0x15c>)
 810ec60:	681b      	ldr	r3, [r3, #0]
 810ec62:	693a      	ldr	r2, [r7, #16]
 810ec64:	429a      	cmp	r2, r3
 810ec66:	d349      	bcc.n	810ecfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810ec68:	4b36      	ldr	r3, [pc, #216]	; (810ed44 <xTaskIncrementTick+0x150>)
 810ec6a:	681b      	ldr	r3, [r3, #0]
 810ec6c:	681b      	ldr	r3, [r3, #0]
 810ec6e:	2b00      	cmp	r3, #0
 810ec70:	d104      	bne.n	810ec7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ec72:	4b37      	ldr	r3, [pc, #220]	; (810ed50 <xTaskIncrementTick+0x15c>)
 810ec74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810ec78:	601a      	str	r2, [r3, #0]
					break;
 810ec7a:	e03f      	b.n	810ecfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ec7c:	4b31      	ldr	r3, [pc, #196]	; (810ed44 <xTaskIncrementTick+0x150>)
 810ec7e:	681b      	ldr	r3, [r3, #0]
 810ec80:	68db      	ldr	r3, [r3, #12]
 810ec82:	68db      	ldr	r3, [r3, #12]
 810ec84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810ec86:	68bb      	ldr	r3, [r7, #8]
 810ec88:	685b      	ldr	r3, [r3, #4]
 810ec8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810ec8c:	693a      	ldr	r2, [r7, #16]
 810ec8e:	687b      	ldr	r3, [r7, #4]
 810ec90:	429a      	cmp	r2, r3
 810ec92:	d203      	bcs.n	810ec9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810ec94:	4a2e      	ldr	r2, [pc, #184]	; (810ed50 <xTaskIncrementTick+0x15c>)
 810ec96:	687b      	ldr	r3, [r7, #4]
 810ec98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810ec9a:	e02f      	b.n	810ecfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ec9c:	68bb      	ldr	r3, [r7, #8]
 810ec9e:	3304      	adds	r3, #4
 810eca0:	4618      	mov	r0, r3
 810eca2:	f7fe fc39 	bl	810d518 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810eca6:	68bb      	ldr	r3, [r7, #8]
 810eca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810ecaa:	2b00      	cmp	r3, #0
 810ecac:	d004      	beq.n	810ecb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810ecae:	68bb      	ldr	r3, [r7, #8]
 810ecb0:	3318      	adds	r3, #24
 810ecb2:	4618      	mov	r0, r3
 810ecb4:	f7fe fc30 	bl	810d518 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810ecb8:	68bb      	ldr	r3, [r7, #8]
 810ecba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ecbc:	4b25      	ldr	r3, [pc, #148]	; (810ed54 <xTaskIncrementTick+0x160>)
 810ecbe:	681b      	ldr	r3, [r3, #0]
 810ecc0:	429a      	cmp	r2, r3
 810ecc2:	d903      	bls.n	810eccc <xTaskIncrementTick+0xd8>
 810ecc4:	68bb      	ldr	r3, [r7, #8]
 810ecc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ecc8:	4a22      	ldr	r2, [pc, #136]	; (810ed54 <xTaskIncrementTick+0x160>)
 810ecca:	6013      	str	r3, [r2, #0]
 810eccc:	68bb      	ldr	r3, [r7, #8]
 810ecce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ecd0:	4613      	mov	r3, r2
 810ecd2:	009b      	lsls	r3, r3, #2
 810ecd4:	4413      	add	r3, r2
 810ecd6:	009b      	lsls	r3, r3, #2
 810ecd8:	4a1f      	ldr	r2, [pc, #124]	; (810ed58 <xTaskIncrementTick+0x164>)
 810ecda:	441a      	add	r2, r3
 810ecdc:	68bb      	ldr	r3, [r7, #8]
 810ecde:	3304      	adds	r3, #4
 810ece0:	4619      	mov	r1, r3
 810ece2:	4610      	mov	r0, r2
 810ece4:	f7fe fbbb 	bl	810d45e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810ece8:	68bb      	ldr	r3, [r7, #8]
 810ecea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ecec:	4b1b      	ldr	r3, [pc, #108]	; (810ed5c <xTaskIncrementTick+0x168>)
 810ecee:	681b      	ldr	r3, [r3, #0]
 810ecf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ecf2:	429a      	cmp	r2, r3
 810ecf4:	d3b8      	bcc.n	810ec68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 810ecf6:	2301      	movs	r3, #1
 810ecf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810ecfa:	e7b5      	b.n	810ec68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810ecfc:	4b17      	ldr	r3, [pc, #92]	; (810ed5c <xTaskIncrementTick+0x168>)
 810ecfe:	681b      	ldr	r3, [r3, #0]
 810ed00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ed02:	4915      	ldr	r1, [pc, #84]	; (810ed58 <xTaskIncrementTick+0x164>)
 810ed04:	4613      	mov	r3, r2
 810ed06:	009b      	lsls	r3, r3, #2
 810ed08:	4413      	add	r3, r2
 810ed0a:	009b      	lsls	r3, r3, #2
 810ed0c:	440b      	add	r3, r1
 810ed0e:	681b      	ldr	r3, [r3, #0]
 810ed10:	2b01      	cmp	r3, #1
 810ed12:	d901      	bls.n	810ed18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 810ed14:	2301      	movs	r3, #1
 810ed16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810ed18:	4b11      	ldr	r3, [pc, #68]	; (810ed60 <xTaskIncrementTick+0x16c>)
 810ed1a:	681b      	ldr	r3, [r3, #0]
 810ed1c:	2b00      	cmp	r3, #0
 810ed1e:	d007      	beq.n	810ed30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 810ed20:	2301      	movs	r3, #1
 810ed22:	617b      	str	r3, [r7, #20]
 810ed24:	e004      	b.n	810ed30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810ed26:	4b0f      	ldr	r3, [pc, #60]	; (810ed64 <xTaskIncrementTick+0x170>)
 810ed28:	681b      	ldr	r3, [r3, #0]
 810ed2a:	3301      	adds	r3, #1
 810ed2c:	4a0d      	ldr	r2, [pc, #52]	; (810ed64 <xTaskIncrementTick+0x170>)
 810ed2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810ed30:	697b      	ldr	r3, [r7, #20]
}
 810ed32:	4618      	mov	r0, r3
 810ed34:	3718      	adds	r7, #24
 810ed36:	46bd      	mov	sp, r7
 810ed38:	bd80      	pop	{r7, pc}
 810ed3a:	bf00      	nop
 810ed3c:	100056a8 	.word	0x100056a8
 810ed40:	10005684 	.word	0x10005684
 810ed44:	10005638 	.word	0x10005638
 810ed48:	1000563c 	.word	0x1000563c
 810ed4c:	10005698 	.word	0x10005698
 810ed50:	100056a0 	.word	0x100056a0
 810ed54:	10005688 	.word	0x10005688
 810ed58:	100051b0 	.word	0x100051b0
 810ed5c:	100051ac 	.word	0x100051ac
 810ed60:	10005694 	.word	0x10005694
 810ed64:	10005690 	.word	0x10005690

0810ed68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810ed68:	b480      	push	{r7}
 810ed6a:	b085      	sub	sp, #20
 810ed6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810ed6e:	4b2a      	ldr	r3, [pc, #168]	; (810ee18 <vTaskSwitchContext+0xb0>)
 810ed70:	681b      	ldr	r3, [r3, #0]
 810ed72:	2b00      	cmp	r3, #0
 810ed74:	d003      	beq.n	810ed7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810ed76:	4b29      	ldr	r3, [pc, #164]	; (810ee1c <vTaskSwitchContext+0xb4>)
 810ed78:	2201      	movs	r2, #1
 810ed7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810ed7c:	e046      	b.n	810ee0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 810ed7e:	4b27      	ldr	r3, [pc, #156]	; (810ee1c <vTaskSwitchContext+0xb4>)
 810ed80:	2200      	movs	r2, #0
 810ed82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ed84:	4b26      	ldr	r3, [pc, #152]	; (810ee20 <vTaskSwitchContext+0xb8>)
 810ed86:	681b      	ldr	r3, [r3, #0]
 810ed88:	60fb      	str	r3, [r7, #12]
 810ed8a:	e010      	b.n	810edae <vTaskSwitchContext+0x46>
 810ed8c:	68fb      	ldr	r3, [r7, #12]
 810ed8e:	2b00      	cmp	r3, #0
 810ed90:	d10a      	bne.n	810eda8 <vTaskSwitchContext+0x40>
	__asm volatile
 810ed92:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ed96:	f383 8811 	msr	BASEPRI, r3
 810ed9a:	f3bf 8f6f 	isb	sy
 810ed9e:	f3bf 8f4f 	dsb	sy
 810eda2:	607b      	str	r3, [r7, #4]
}
 810eda4:	bf00      	nop
 810eda6:	e7fe      	b.n	810eda6 <vTaskSwitchContext+0x3e>
 810eda8:	68fb      	ldr	r3, [r7, #12]
 810edaa:	3b01      	subs	r3, #1
 810edac:	60fb      	str	r3, [r7, #12]
 810edae:	491d      	ldr	r1, [pc, #116]	; (810ee24 <vTaskSwitchContext+0xbc>)
 810edb0:	68fa      	ldr	r2, [r7, #12]
 810edb2:	4613      	mov	r3, r2
 810edb4:	009b      	lsls	r3, r3, #2
 810edb6:	4413      	add	r3, r2
 810edb8:	009b      	lsls	r3, r3, #2
 810edba:	440b      	add	r3, r1
 810edbc:	681b      	ldr	r3, [r3, #0]
 810edbe:	2b00      	cmp	r3, #0
 810edc0:	d0e4      	beq.n	810ed8c <vTaskSwitchContext+0x24>
 810edc2:	68fa      	ldr	r2, [r7, #12]
 810edc4:	4613      	mov	r3, r2
 810edc6:	009b      	lsls	r3, r3, #2
 810edc8:	4413      	add	r3, r2
 810edca:	009b      	lsls	r3, r3, #2
 810edcc:	4a15      	ldr	r2, [pc, #84]	; (810ee24 <vTaskSwitchContext+0xbc>)
 810edce:	4413      	add	r3, r2
 810edd0:	60bb      	str	r3, [r7, #8]
 810edd2:	68bb      	ldr	r3, [r7, #8]
 810edd4:	685b      	ldr	r3, [r3, #4]
 810edd6:	685a      	ldr	r2, [r3, #4]
 810edd8:	68bb      	ldr	r3, [r7, #8]
 810edda:	605a      	str	r2, [r3, #4]
 810eddc:	68bb      	ldr	r3, [r7, #8]
 810edde:	685a      	ldr	r2, [r3, #4]
 810ede0:	68bb      	ldr	r3, [r7, #8]
 810ede2:	3308      	adds	r3, #8
 810ede4:	429a      	cmp	r2, r3
 810ede6:	d104      	bne.n	810edf2 <vTaskSwitchContext+0x8a>
 810ede8:	68bb      	ldr	r3, [r7, #8]
 810edea:	685b      	ldr	r3, [r3, #4]
 810edec:	685a      	ldr	r2, [r3, #4]
 810edee:	68bb      	ldr	r3, [r7, #8]
 810edf0:	605a      	str	r2, [r3, #4]
 810edf2:	68bb      	ldr	r3, [r7, #8]
 810edf4:	685b      	ldr	r3, [r3, #4]
 810edf6:	68db      	ldr	r3, [r3, #12]
 810edf8:	4a0b      	ldr	r2, [pc, #44]	; (810ee28 <vTaskSwitchContext+0xc0>)
 810edfa:	6013      	str	r3, [r2, #0]
 810edfc:	4a08      	ldr	r2, [pc, #32]	; (810ee20 <vTaskSwitchContext+0xb8>)
 810edfe:	68fb      	ldr	r3, [r7, #12]
 810ee00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810ee02:	4b09      	ldr	r3, [pc, #36]	; (810ee28 <vTaskSwitchContext+0xc0>)
 810ee04:	681b      	ldr	r3, [r3, #0]
 810ee06:	3354      	adds	r3, #84	; 0x54
 810ee08:	4a08      	ldr	r2, [pc, #32]	; (810ee2c <vTaskSwitchContext+0xc4>)
 810ee0a:	6013      	str	r3, [r2, #0]
}
 810ee0c:	bf00      	nop
 810ee0e:	3714      	adds	r7, #20
 810ee10:	46bd      	mov	sp, r7
 810ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ee16:	4770      	bx	lr
 810ee18:	100056a8 	.word	0x100056a8
 810ee1c:	10005694 	.word	0x10005694
 810ee20:	10005688 	.word	0x10005688
 810ee24:	100051b0 	.word	0x100051b0
 810ee28:	100051ac 	.word	0x100051ac
 810ee2c:	10000024 	.word	0x10000024

0810ee30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810ee30:	b580      	push	{r7, lr}
 810ee32:	b084      	sub	sp, #16
 810ee34:	af00      	add	r7, sp, #0
 810ee36:	6078      	str	r0, [r7, #4]
 810ee38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810ee3a:	687b      	ldr	r3, [r7, #4]
 810ee3c:	2b00      	cmp	r3, #0
 810ee3e:	d10a      	bne.n	810ee56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 810ee40:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ee44:	f383 8811 	msr	BASEPRI, r3
 810ee48:	f3bf 8f6f 	isb	sy
 810ee4c:	f3bf 8f4f 	dsb	sy
 810ee50:	60fb      	str	r3, [r7, #12]
}
 810ee52:	bf00      	nop
 810ee54:	e7fe      	b.n	810ee54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810ee56:	4b07      	ldr	r3, [pc, #28]	; (810ee74 <vTaskPlaceOnEventList+0x44>)
 810ee58:	681b      	ldr	r3, [r3, #0]
 810ee5a:	3318      	adds	r3, #24
 810ee5c:	4619      	mov	r1, r3
 810ee5e:	6878      	ldr	r0, [r7, #4]
 810ee60:	f7fe fb21 	bl	810d4a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810ee64:	2101      	movs	r1, #1
 810ee66:	6838      	ldr	r0, [r7, #0]
 810ee68:	f000 fa80 	bl	810f36c <prvAddCurrentTaskToDelayedList>
}
 810ee6c:	bf00      	nop
 810ee6e:	3710      	adds	r7, #16
 810ee70:	46bd      	mov	sp, r7
 810ee72:	bd80      	pop	{r7, pc}
 810ee74:	100051ac 	.word	0x100051ac

0810ee78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810ee78:	b580      	push	{r7, lr}
 810ee7a:	b086      	sub	sp, #24
 810ee7c:	af00      	add	r7, sp, #0
 810ee7e:	60f8      	str	r0, [r7, #12]
 810ee80:	60b9      	str	r1, [r7, #8]
 810ee82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810ee84:	68fb      	ldr	r3, [r7, #12]
 810ee86:	2b00      	cmp	r3, #0
 810ee88:	d10a      	bne.n	810eea0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 810ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ee8e:	f383 8811 	msr	BASEPRI, r3
 810ee92:	f3bf 8f6f 	isb	sy
 810ee96:	f3bf 8f4f 	dsb	sy
 810ee9a:	617b      	str	r3, [r7, #20]
}
 810ee9c:	bf00      	nop
 810ee9e:	e7fe      	b.n	810ee9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810eea0:	4b0a      	ldr	r3, [pc, #40]	; (810eecc <vTaskPlaceOnEventListRestricted+0x54>)
 810eea2:	681b      	ldr	r3, [r3, #0]
 810eea4:	3318      	adds	r3, #24
 810eea6:	4619      	mov	r1, r3
 810eea8:	68f8      	ldr	r0, [r7, #12]
 810eeaa:	f7fe fad8 	bl	810d45e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810eeae:	687b      	ldr	r3, [r7, #4]
 810eeb0:	2b00      	cmp	r3, #0
 810eeb2:	d002      	beq.n	810eeba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 810eeb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810eeb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810eeba:	6879      	ldr	r1, [r7, #4]
 810eebc:	68b8      	ldr	r0, [r7, #8]
 810eebe:	f000 fa55 	bl	810f36c <prvAddCurrentTaskToDelayedList>
	}
 810eec2:	bf00      	nop
 810eec4:	3718      	adds	r7, #24
 810eec6:	46bd      	mov	sp, r7
 810eec8:	bd80      	pop	{r7, pc}
 810eeca:	bf00      	nop
 810eecc:	100051ac 	.word	0x100051ac

0810eed0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810eed0:	b580      	push	{r7, lr}
 810eed2:	b086      	sub	sp, #24
 810eed4:	af00      	add	r7, sp, #0
 810eed6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810eed8:	687b      	ldr	r3, [r7, #4]
 810eeda:	68db      	ldr	r3, [r3, #12]
 810eedc:	68db      	ldr	r3, [r3, #12]
 810eede:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810eee0:	693b      	ldr	r3, [r7, #16]
 810eee2:	2b00      	cmp	r3, #0
 810eee4:	d10a      	bne.n	810eefc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 810eee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810eeea:	f383 8811 	msr	BASEPRI, r3
 810eeee:	f3bf 8f6f 	isb	sy
 810eef2:	f3bf 8f4f 	dsb	sy
 810eef6:	60fb      	str	r3, [r7, #12]
}
 810eef8:	bf00      	nop
 810eefa:	e7fe      	b.n	810eefa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810eefc:	693b      	ldr	r3, [r7, #16]
 810eefe:	3318      	adds	r3, #24
 810ef00:	4618      	mov	r0, r3
 810ef02:	f7fe fb09 	bl	810d518 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ef06:	4b1e      	ldr	r3, [pc, #120]	; (810ef80 <xTaskRemoveFromEventList+0xb0>)
 810ef08:	681b      	ldr	r3, [r3, #0]
 810ef0a:	2b00      	cmp	r3, #0
 810ef0c:	d11d      	bne.n	810ef4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810ef0e:	693b      	ldr	r3, [r7, #16]
 810ef10:	3304      	adds	r3, #4
 810ef12:	4618      	mov	r0, r3
 810ef14:	f7fe fb00 	bl	810d518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810ef18:	693b      	ldr	r3, [r7, #16]
 810ef1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ef1c:	4b19      	ldr	r3, [pc, #100]	; (810ef84 <xTaskRemoveFromEventList+0xb4>)
 810ef1e:	681b      	ldr	r3, [r3, #0]
 810ef20:	429a      	cmp	r2, r3
 810ef22:	d903      	bls.n	810ef2c <xTaskRemoveFromEventList+0x5c>
 810ef24:	693b      	ldr	r3, [r7, #16]
 810ef26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ef28:	4a16      	ldr	r2, [pc, #88]	; (810ef84 <xTaskRemoveFromEventList+0xb4>)
 810ef2a:	6013      	str	r3, [r2, #0]
 810ef2c:	693b      	ldr	r3, [r7, #16]
 810ef2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ef30:	4613      	mov	r3, r2
 810ef32:	009b      	lsls	r3, r3, #2
 810ef34:	4413      	add	r3, r2
 810ef36:	009b      	lsls	r3, r3, #2
 810ef38:	4a13      	ldr	r2, [pc, #76]	; (810ef88 <xTaskRemoveFromEventList+0xb8>)
 810ef3a:	441a      	add	r2, r3
 810ef3c:	693b      	ldr	r3, [r7, #16]
 810ef3e:	3304      	adds	r3, #4
 810ef40:	4619      	mov	r1, r3
 810ef42:	4610      	mov	r0, r2
 810ef44:	f7fe fa8b 	bl	810d45e <vListInsertEnd>
 810ef48:	e005      	b.n	810ef56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810ef4a:	693b      	ldr	r3, [r7, #16]
 810ef4c:	3318      	adds	r3, #24
 810ef4e:	4619      	mov	r1, r3
 810ef50:	480e      	ldr	r0, [pc, #56]	; (810ef8c <xTaskRemoveFromEventList+0xbc>)
 810ef52:	f7fe fa84 	bl	810d45e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810ef56:	693b      	ldr	r3, [r7, #16]
 810ef58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810ef5a:	4b0d      	ldr	r3, [pc, #52]	; (810ef90 <xTaskRemoveFromEventList+0xc0>)
 810ef5c:	681b      	ldr	r3, [r3, #0]
 810ef5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ef60:	429a      	cmp	r2, r3
 810ef62:	d905      	bls.n	810ef70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810ef64:	2301      	movs	r3, #1
 810ef66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810ef68:	4b0a      	ldr	r3, [pc, #40]	; (810ef94 <xTaskRemoveFromEventList+0xc4>)
 810ef6a:	2201      	movs	r2, #1
 810ef6c:	601a      	str	r2, [r3, #0]
 810ef6e:	e001      	b.n	810ef74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 810ef70:	2300      	movs	r3, #0
 810ef72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810ef74:	697b      	ldr	r3, [r7, #20]
}
 810ef76:	4618      	mov	r0, r3
 810ef78:	3718      	adds	r7, #24
 810ef7a:	46bd      	mov	sp, r7
 810ef7c:	bd80      	pop	{r7, pc}
 810ef7e:	bf00      	nop
 810ef80:	100056a8 	.word	0x100056a8
 810ef84:	10005688 	.word	0x10005688
 810ef88:	100051b0 	.word	0x100051b0
 810ef8c:	10005640 	.word	0x10005640
 810ef90:	100051ac 	.word	0x100051ac
 810ef94:	10005694 	.word	0x10005694

0810ef98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810ef98:	b480      	push	{r7}
 810ef9a:	b083      	sub	sp, #12
 810ef9c:	af00      	add	r7, sp, #0
 810ef9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810efa0:	4b06      	ldr	r3, [pc, #24]	; (810efbc <vTaskInternalSetTimeOutState+0x24>)
 810efa2:	681a      	ldr	r2, [r3, #0]
 810efa4:	687b      	ldr	r3, [r7, #4]
 810efa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810efa8:	4b05      	ldr	r3, [pc, #20]	; (810efc0 <vTaskInternalSetTimeOutState+0x28>)
 810efaa:	681a      	ldr	r2, [r3, #0]
 810efac:	687b      	ldr	r3, [r7, #4]
 810efae:	605a      	str	r2, [r3, #4]
}
 810efb0:	bf00      	nop
 810efb2:	370c      	adds	r7, #12
 810efb4:	46bd      	mov	sp, r7
 810efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810efba:	4770      	bx	lr
 810efbc:	10005698 	.word	0x10005698
 810efc0:	10005684 	.word	0x10005684

0810efc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810efc4:	b580      	push	{r7, lr}
 810efc6:	b088      	sub	sp, #32
 810efc8:	af00      	add	r7, sp, #0
 810efca:	6078      	str	r0, [r7, #4]
 810efcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810efce:	687b      	ldr	r3, [r7, #4]
 810efd0:	2b00      	cmp	r3, #0
 810efd2:	d10a      	bne.n	810efea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 810efd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810efd8:	f383 8811 	msr	BASEPRI, r3
 810efdc:	f3bf 8f6f 	isb	sy
 810efe0:	f3bf 8f4f 	dsb	sy
 810efe4:	613b      	str	r3, [r7, #16]
}
 810efe6:	bf00      	nop
 810efe8:	e7fe      	b.n	810efe8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810efea:	683b      	ldr	r3, [r7, #0]
 810efec:	2b00      	cmp	r3, #0
 810efee:	d10a      	bne.n	810f006 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 810eff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810eff4:	f383 8811 	msr	BASEPRI, r3
 810eff8:	f3bf 8f6f 	isb	sy
 810effc:	f3bf 8f4f 	dsb	sy
 810f000:	60fb      	str	r3, [r7, #12]
}
 810f002:	bf00      	nop
 810f004:	e7fe      	b.n	810f004 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 810f006:	f7fe fbdd 	bl	810d7c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810f00a:	4b1d      	ldr	r3, [pc, #116]	; (810f080 <xTaskCheckForTimeOut+0xbc>)
 810f00c:	681b      	ldr	r3, [r3, #0]
 810f00e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810f010:	687b      	ldr	r3, [r7, #4]
 810f012:	685b      	ldr	r3, [r3, #4]
 810f014:	69ba      	ldr	r2, [r7, #24]
 810f016:	1ad3      	subs	r3, r2, r3
 810f018:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810f01a:	683b      	ldr	r3, [r7, #0]
 810f01c:	681b      	ldr	r3, [r3, #0]
 810f01e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810f022:	d102      	bne.n	810f02a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810f024:	2300      	movs	r3, #0
 810f026:	61fb      	str	r3, [r7, #28]
 810f028:	e023      	b.n	810f072 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810f02a:	687b      	ldr	r3, [r7, #4]
 810f02c:	681a      	ldr	r2, [r3, #0]
 810f02e:	4b15      	ldr	r3, [pc, #84]	; (810f084 <xTaskCheckForTimeOut+0xc0>)
 810f030:	681b      	ldr	r3, [r3, #0]
 810f032:	429a      	cmp	r2, r3
 810f034:	d007      	beq.n	810f046 <xTaskCheckForTimeOut+0x82>
 810f036:	687b      	ldr	r3, [r7, #4]
 810f038:	685b      	ldr	r3, [r3, #4]
 810f03a:	69ba      	ldr	r2, [r7, #24]
 810f03c:	429a      	cmp	r2, r3
 810f03e:	d302      	bcc.n	810f046 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810f040:	2301      	movs	r3, #1
 810f042:	61fb      	str	r3, [r7, #28]
 810f044:	e015      	b.n	810f072 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810f046:	683b      	ldr	r3, [r7, #0]
 810f048:	681b      	ldr	r3, [r3, #0]
 810f04a:	697a      	ldr	r2, [r7, #20]
 810f04c:	429a      	cmp	r2, r3
 810f04e:	d20b      	bcs.n	810f068 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810f050:	683b      	ldr	r3, [r7, #0]
 810f052:	681a      	ldr	r2, [r3, #0]
 810f054:	697b      	ldr	r3, [r7, #20]
 810f056:	1ad2      	subs	r2, r2, r3
 810f058:	683b      	ldr	r3, [r7, #0]
 810f05a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810f05c:	6878      	ldr	r0, [r7, #4]
 810f05e:	f7ff ff9b 	bl	810ef98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810f062:	2300      	movs	r3, #0
 810f064:	61fb      	str	r3, [r7, #28]
 810f066:	e004      	b.n	810f072 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 810f068:	683b      	ldr	r3, [r7, #0]
 810f06a:	2200      	movs	r2, #0
 810f06c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810f06e:	2301      	movs	r3, #1
 810f070:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810f072:	f7fe fbd7 	bl	810d824 <vPortExitCritical>

	return xReturn;
 810f076:	69fb      	ldr	r3, [r7, #28]
}
 810f078:	4618      	mov	r0, r3
 810f07a:	3720      	adds	r7, #32
 810f07c:	46bd      	mov	sp, r7
 810f07e:	bd80      	pop	{r7, pc}
 810f080:	10005684 	.word	0x10005684
 810f084:	10005698 	.word	0x10005698

0810f088 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810f088:	b480      	push	{r7}
 810f08a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810f08c:	4b03      	ldr	r3, [pc, #12]	; (810f09c <vTaskMissedYield+0x14>)
 810f08e:	2201      	movs	r2, #1
 810f090:	601a      	str	r2, [r3, #0]
}
 810f092:	bf00      	nop
 810f094:	46bd      	mov	sp, r7
 810f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f09a:	4770      	bx	lr
 810f09c:	10005694 	.word	0x10005694

0810f0a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810f0a0:	b580      	push	{r7, lr}
 810f0a2:	b082      	sub	sp, #8
 810f0a4:	af00      	add	r7, sp, #0
 810f0a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810f0a8:	f000 f852 	bl	810f150 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810f0ac:	4b06      	ldr	r3, [pc, #24]	; (810f0c8 <prvIdleTask+0x28>)
 810f0ae:	681b      	ldr	r3, [r3, #0]
 810f0b0:	2b01      	cmp	r3, #1
 810f0b2:	d9f9      	bls.n	810f0a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 810f0b4:	4b05      	ldr	r3, [pc, #20]	; (810f0cc <prvIdleTask+0x2c>)
 810f0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810f0ba:	601a      	str	r2, [r3, #0]
 810f0bc:	f3bf 8f4f 	dsb	sy
 810f0c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810f0c4:	e7f0      	b.n	810f0a8 <prvIdleTask+0x8>
 810f0c6:	bf00      	nop
 810f0c8:	100051b0 	.word	0x100051b0
 810f0cc:	e000ed04 	.word	0xe000ed04

0810f0d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810f0d0:	b580      	push	{r7, lr}
 810f0d2:	b082      	sub	sp, #8
 810f0d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810f0d6:	2300      	movs	r3, #0
 810f0d8:	607b      	str	r3, [r7, #4]
 810f0da:	e00c      	b.n	810f0f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810f0dc:	687a      	ldr	r2, [r7, #4]
 810f0de:	4613      	mov	r3, r2
 810f0e0:	009b      	lsls	r3, r3, #2
 810f0e2:	4413      	add	r3, r2
 810f0e4:	009b      	lsls	r3, r3, #2
 810f0e6:	4a12      	ldr	r2, [pc, #72]	; (810f130 <prvInitialiseTaskLists+0x60>)
 810f0e8:	4413      	add	r3, r2
 810f0ea:	4618      	mov	r0, r3
 810f0ec:	f7fe f98a 	bl	810d404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810f0f0:	687b      	ldr	r3, [r7, #4]
 810f0f2:	3301      	adds	r3, #1
 810f0f4:	607b      	str	r3, [r7, #4]
 810f0f6:	687b      	ldr	r3, [r7, #4]
 810f0f8:	2b37      	cmp	r3, #55	; 0x37
 810f0fa:	d9ef      	bls.n	810f0dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810f0fc:	480d      	ldr	r0, [pc, #52]	; (810f134 <prvInitialiseTaskLists+0x64>)
 810f0fe:	f7fe f981 	bl	810d404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810f102:	480d      	ldr	r0, [pc, #52]	; (810f138 <prvInitialiseTaskLists+0x68>)
 810f104:	f7fe f97e 	bl	810d404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810f108:	480c      	ldr	r0, [pc, #48]	; (810f13c <prvInitialiseTaskLists+0x6c>)
 810f10a:	f7fe f97b 	bl	810d404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810f10e:	480c      	ldr	r0, [pc, #48]	; (810f140 <prvInitialiseTaskLists+0x70>)
 810f110:	f7fe f978 	bl	810d404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810f114:	480b      	ldr	r0, [pc, #44]	; (810f144 <prvInitialiseTaskLists+0x74>)
 810f116:	f7fe f975 	bl	810d404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810f11a:	4b0b      	ldr	r3, [pc, #44]	; (810f148 <prvInitialiseTaskLists+0x78>)
 810f11c:	4a05      	ldr	r2, [pc, #20]	; (810f134 <prvInitialiseTaskLists+0x64>)
 810f11e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810f120:	4b0a      	ldr	r3, [pc, #40]	; (810f14c <prvInitialiseTaskLists+0x7c>)
 810f122:	4a05      	ldr	r2, [pc, #20]	; (810f138 <prvInitialiseTaskLists+0x68>)
 810f124:	601a      	str	r2, [r3, #0]
}
 810f126:	bf00      	nop
 810f128:	3708      	adds	r7, #8
 810f12a:	46bd      	mov	sp, r7
 810f12c:	bd80      	pop	{r7, pc}
 810f12e:	bf00      	nop
 810f130:	100051b0 	.word	0x100051b0
 810f134:	10005610 	.word	0x10005610
 810f138:	10005624 	.word	0x10005624
 810f13c:	10005640 	.word	0x10005640
 810f140:	10005654 	.word	0x10005654
 810f144:	1000566c 	.word	0x1000566c
 810f148:	10005638 	.word	0x10005638
 810f14c:	1000563c 	.word	0x1000563c

0810f150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810f150:	b580      	push	{r7, lr}
 810f152:	b082      	sub	sp, #8
 810f154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810f156:	e019      	b.n	810f18c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810f158:	f7fe fb34 	bl	810d7c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f15c:	4b10      	ldr	r3, [pc, #64]	; (810f1a0 <prvCheckTasksWaitingTermination+0x50>)
 810f15e:	68db      	ldr	r3, [r3, #12]
 810f160:	68db      	ldr	r3, [r3, #12]
 810f162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810f164:	687b      	ldr	r3, [r7, #4]
 810f166:	3304      	adds	r3, #4
 810f168:	4618      	mov	r0, r3
 810f16a:	f7fe f9d5 	bl	810d518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810f16e:	4b0d      	ldr	r3, [pc, #52]	; (810f1a4 <prvCheckTasksWaitingTermination+0x54>)
 810f170:	681b      	ldr	r3, [r3, #0]
 810f172:	3b01      	subs	r3, #1
 810f174:	4a0b      	ldr	r2, [pc, #44]	; (810f1a4 <prvCheckTasksWaitingTermination+0x54>)
 810f176:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810f178:	4b0b      	ldr	r3, [pc, #44]	; (810f1a8 <prvCheckTasksWaitingTermination+0x58>)
 810f17a:	681b      	ldr	r3, [r3, #0]
 810f17c:	3b01      	subs	r3, #1
 810f17e:	4a0a      	ldr	r2, [pc, #40]	; (810f1a8 <prvCheckTasksWaitingTermination+0x58>)
 810f180:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810f182:	f7fe fb4f 	bl	810d824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810f186:	6878      	ldr	r0, [r7, #4]
 810f188:	f000 f810 	bl	810f1ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810f18c:	4b06      	ldr	r3, [pc, #24]	; (810f1a8 <prvCheckTasksWaitingTermination+0x58>)
 810f18e:	681b      	ldr	r3, [r3, #0]
 810f190:	2b00      	cmp	r3, #0
 810f192:	d1e1      	bne.n	810f158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810f194:	bf00      	nop
 810f196:	bf00      	nop
 810f198:	3708      	adds	r7, #8
 810f19a:	46bd      	mov	sp, r7
 810f19c:	bd80      	pop	{r7, pc}
 810f19e:	bf00      	nop
 810f1a0:	10005654 	.word	0x10005654
 810f1a4:	10005680 	.word	0x10005680
 810f1a8:	10005668 	.word	0x10005668

0810f1ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810f1ac:	b580      	push	{r7, lr}
 810f1ae:	b084      	sub	sp, #16
 810f1b0:	af00      	add	r7, sp, #0
 810f1b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810f1b4:	687b      	ldr	r3, [r7, #4]
 810f1b6:	3354      	adds	r3, #84	; 0x54
 810f1b8:	4618      	mov	r0, r3
 810f1ba:	f000 fd0d 	bl	810fbd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810f1be:	687b      	ldr	r3, [r7, #4]
 810f1c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 810f1c4:	2b00      	cmp	r3, #0
 810f1c6:	d108      	bne.n	810f1da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810f1c8:	687b      	ldr	r3, [r7, #4]
 810f1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810f1cc:	4618      	mov	r0, r3
 810f1ce:	f7fd fffb 	bl	810d1c8 <vPortFree>
				vPortFree( pxTCB );
 810f1d2:	6878      	ldr	r0, [r7, #4]
 810f1d4:	f7fd fff8 	bl	810d1c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810f1d8:	e018      	b.n	810f20c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810f1da:	687b      	ldr	r3, [r7, #4]
 810f1dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 810f1e0:	2b01      	cmp	r3, #1
 810f1e2:	d103      	bne.n	810f1ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810f1e4:	6878      	ldr	r0, [r7, #4]
 810f1e6:	f7fd ffef 	bl	810d1c8 <vPortFree>
	}
 810f1ea:	e00f      	b.n	810f20c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810f1ec:	687b      	ldr	r3, [r7, #4]
 810f1ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 810f1f2:	2b02      	cmp	r3, #2
 810f1f4:	d00a      	beq.n	810f20c <prvDeleteTCB+0x60>
	__asm volatile
 810f1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f1fa:	f383 8811 	msr	BASEPRI, r3
 810f1fe:	f3bf 8f6f 	isb	sy
 810f202:	f3bf 8f4f 	dsb	sy
 810f206:	60fb      	str	r3, [r7, #12]
}
 810f208:	bf00      	nop
 810f20a:	e7fe      	b.n	810f20a <prvDeleteTCB+0x5e>
	}
 810f20c:	bf00      	nop
 810f20e:	3710      	adds	r7, #16
 810f210:	46bd      	mov	sp, r7
 810f212:	bd80      	pop	{r7, pc}

0810f214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810f214:	b480      	push	{r7}
 810f216:	b083      	sub	sp, #12
 810f218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810f21a:	4b0c      	ldr	r3, [pc, #48]	; (810f24c <prvResetNextTaskUnblockTime+0x38>)
 810f21c:	681b      	ldr	r3, [r3, #0]
 810f21e:	681b      	ldr	r3, [r3, #0]
 810f220:	2b00      	cmp	r3, #0
 810f222:	d104      	bne.n	810f22e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810f224:	4b0a      	ldr	r3, [pc, #40]	; (810f250 <prvResetNextTaskUnblockTime+0x3c>)
 810f226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810f22a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810f22c:	e008      	b.n	810f240 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f22e:	4b07      	ldr	r3, [pc, #28]	; (810f24c <prvResetNextTaskUnblockTime+0x38>)
 810f230:	681b      	ldr	r3, [r3, #0]
 810f232:	68db      	ldr	r3, [r3, #12]
 810f234:	68db      	ldr	r3, [r3, #12]
 810f236:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810f238:	687b      	ldr	r3, [r7, #4]
 810f23a:	685b      	ldr	r3, [r3, #4]
 810f23c:	4a04      	ldr	r2, [pc, #16]	; (810f250 <prvResetNextTaskUnblockTime+0x3c>)
 810f23e:	6013      	str	r3, [r2, #0]
}
 810f240:	bf00      	nop
 810f242:	370c      	adds	r7, #12
 810f244:	46bd      	mov	sp, r7
 810f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f24a:	4770      	bx	lr
 810f24c:	10005638 	.word	0x10005638
 810f250:	100056a0 	.word	0x100056a0

0810f254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810f254:	b480      	push	{r7}
 810f256:	b083      	sub	sp, #12
 810f258:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810f25a:	4b0b      	ldr	r3, [pc, #44]	; (810f288 <xTaskGetSchedulerState+0x34>)
 810f25c:	681b      	ldr	r3, [r3, #0]
 810f25e:	2b00      	cmp	r3, #0
 810f260:	d102      	bne.n	810f268 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810f262:	2301      	movs	r3, #1
 810f264:	607b      	str	r3, [r7, #4]
 810f266:	e008      	b.n	810f27a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810f268:	4b08      	ldr	r3, [pc, #32]	; (810f28c <xTaskGetSchedulerState+0x38>)
 810f26a:	681b      	ldr	r3, [r3, #0]
 810f26c:	2b00      	cmp	r3, #0
 810f26e:	d102      	bne.n	810f276 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810f270:	2302      	movs	r3, #2
 810f272:	607b      	str	r3, [r7, #4]
 810f274:	e001      	b.n	810f27a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810f276:	2300      	movs	r3, #0
 810f278:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810f27a:	687b      	ldr	r3, [r7, #4]
	}
 810f27c:	4618      	mov	r0, r3
 810f27e:	370c      	adds	r7, #12
 810f280:	46bd      	mov	sp, r7
 810f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f286:	4770      	bx	lr
 810f288:	1000568c 	.word	0x1000568c
 810f28c:	100056a8 	.word	0x100056a8

0810f290 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810f290:	b580      	push	{r7, lr}
 810f292:	b086      	sub	sp, #24
 810f294:	af00      	add	r7, sp, #0
 810f296:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810f298:	687b      	ldr	r3, [r7, #4]
 810f29a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810f29c:	2300      	movs	r3, #0
 810f29e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810f2a0:	687b      	ldr	r3, [r7, #4]
 810f2a2:	2b00      	cmp	r3, #0
 810f2a4:	d056      	beq.n	810f354 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810f2a6:	4b2e      	ldr	r3, [pc, #184]	; (810f360 <xTaskPriorityDisinherit+0xd0>)
 810f2a8:	681b      	ldr	r3, [r3, #0]
 810f2aa:	693a      	ldr	r2, [r7, #16]
 810f2ac:	429a      	cmp	r2, r3
 810f2ae:	d00a      	beq.n	810f2c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 810f2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f2b4:	f383 8811 	msr	BASEPRI, r3
 810f2b8:	f3bf 8f6f 	isb	sy
 810f2bc:	f3bf 8f4f 	dsb	sy
 810f2c0:	60fb      	str	r3, [r7, #12]
}
 810f2c2:	bf00      	nop
 810f2c4:	e7fe      	b.n	810f2c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810f2c6:	693b      	ldr	r3, [r7, #16]
 810f2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810f2ca:	2b00      	cmp	r3, #0
 810f2cc:	d10a      	bne.n	810f2e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 810f2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f2d2:	f383 8811 	msr	BASEPRI, r3
 810f2d6:	f3bf 8f6f 	isb	sy
 810f2da:	f3bf 8f4f 	dsb	sy
 810f2de:	60bb      	str	r3, [r7, #8]
}
 810f2e0:	bf00      	nop
 810f2e2:	e7fe      	b.n	810f2e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 810f2e4:	693b      	ldr	r3, [r7, #16]
 810f2e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810f2e8:	1e5a      	subs	r2, r3, #1
 810f2ea:	693b      	ldr	r3, [r7, #16]
 810f2ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810f2ee:	693b      	ldr	r3, [r7, #16]
 810f2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810f2f2:	693b      	ldr	r3, [r7, #16]
 810f2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810f2f6:	429a      	cmp	r2, r3
 810f2f8:	d02c      	beq.n	810f354 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810f2fa:	693b      	ldr	r3, [r7, #16]
 810f2fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810f2fe:	2b00      	cmp	r3, #0
 810f300:	d128      	bne.n	810f354 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810f302:	693b      	ldr	r3, [r7, #16]
 810f304:	3304      	adds	r3, #4
 810f306:	4618      	mov	r0, r3
 810f308:	f7fe f906 	bl	810d518 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810f30c:	693b      	ldr	r3, [r7, #16]
 810f30e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810f310:	693b      	ldr	r3, [r7, #16]
 810f312:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f314:	693b      	ldr	r3, [r7, #16]
 810f316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810f318:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810f31c:	693b      	ldr	r3, [r7, #16]
 810f31e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810f320:	693b      	ldr	r3, [r7, #16]
 810f322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810f324:	4b0f      	ldr	r3, [pc, #60]	; (810f364 <xTaskPriorityDisinherit+0xd4>)
 810f326:	681b      	ldr	r3, [r3, #0]
 810f328:	429a      	cmp	r2, r3
 810f32a:	d903      	bls.n	810f334 <xTaskPriorityDisinherit+0xa4>
 810f32c:	693b      	ldr	r3, [r7, #16]
 810f32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810f330:	4a0c      	ldr	r2, [pc, #48]	; (810f364 <xTaskPriorityDisinherit+0xd4>)
 810f332:	6013      	str	r3, [r2, #0]
 810f334:	693b      	ldr	r3, [r7, #16]
 810f336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810f338:	4613      	mov	r3, r2
 810f33a:	009b      	lsls	r3, r3, #2
 810f33c:	4413      	add	r3, r2
 810f33e:	009b      	lsls	r3, r3, #2
 810f340:	4a09      	ldr	r2, [pc, #36]	; (810f368 <xTaskPriorityDisinherit+0xd8>)
 810f342:	441a      	add	r2, r3
 810f344:	693b      	ldr	r3, [r7, #16]
 810f346:	3304      	adds	r3, #4
 810f348:	4619      	mov	r1, r3
 810f34a:	4610      	mov	r0, r2
 810f34c:	f7fe f887 	bl	810d45e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810f350:	2301      	movs	r3, #1
 810f352:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810f354:	697b      	ldr	r3, [r7, #20]
	}
 810f356:	4618      	mov	r0, r3
 810f358:	3718      	adds	r7, #24
 810f35a:	46bd      	mov	sp, r7
 810f35c:	bd80      	pop	{r7, pc}
 810f35e:	bf00      	nop
 810f360:	100051ac 	.word	0x100051ac
 810f364:	10005688 	.word	0x10005688
 810f368:	100051b0 	.word	0x100051b0

0810f36c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810f36c:	b580      	push	{r7, lr}
 810f36e:	b084      	sub	sp, #16
 810f370:	af00      	add	r7, sp, #0
 810f372:	6078      	str	r0, [r7, #4]
 810f374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810f376:	4b21      	ldr	r3, [pc, #132]	; (810f3fc <prvAddCurrentTaskToDelayedList+0x90>)
 810f378:	681b      	ldr	r3, [r3, #0]
 810f37a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810f37c:	4b20      	ldr	r3, [pc, #128]	; (810f400 <prvAddCurrentTaskToDelayedList+0x94>)
 810f37e:	681b      	ldr	r3, [r3, #0]
 810f380:	3304      	adds	r3, #4
 810f382:	4618      	mov	r0, r3
 810f384:	f7fe f8c8 	bl	810d518 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810f388:	687b      	ldr	r3, [r7, #4]
 810f38a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810f38e:	d10a      	bne.n	810f3a6 <prvAddCurrentTaskToDelayedList+0x3a>
 810f390:	683b      	ldr	r3, [r7, #0]
 810f392:	2b00      	cmp	r3, #0
 810f394:	d007      	beq.n	810f3a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f396:	4b1a      	ldr	r3, [pc, #104]	; (810f400 <prvAddCurrentTaskToDelayedList+0x94>)
 810f398:	681b      	ldr	r3, [r3, #0]
 810f39a:	3304      	adds	r3, #4
 810f39c:	4619      	mov	r1, r3
 810f39e:	4819      	ldr	r0, [pc, #100]	; (810f404 <prvAddCurrentTaskToDelayedList+0x98>)
 810f3a0:	f7fe f85d 	bl	810d45e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810f3a4:	e026      	b.n	810f3f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810f3a6:	68fa      	ldr	r2, [r7, #12]
 810f3a8:	687b      	ldr	r3, [r7, #4]
 810f3aa:	4413      	add	r3, r2
 810f3ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810f3ae:	4b14      	ldr	r3, [pc, #80]	; (810f400 <prvAddCurrentTaskToDelayedList+0x94>)
 810f3b0:	681b      	ldr	r3, [r3, #0]
 810f3b2:	68ba      	ldr	r2, [r7, #8]
 810f3b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810f3b6:	68ba      	ldr	r2, [r7, #8]
 810f3b8:	68fb      	ldr	r3, [r7, #12]
 810f3ba:	429a      	cmp	r2, r3
 810f3bc:	d209      	bcs.n	810f3d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f3be:	4b12      	ldr	r3, [pc, #72]	; (810f408 <prvAddCurrentTaskToDelayedList+0x9c>)
 810f3c0:	681a      	ldr	r2, [r3, #0]
 810f3c2:	4b0f      	ldr	r3, [pc, #60]	; (810f400 <prvAddCurrentTaskToDelayedList+0x94>)
 810f3c4:	681b      	ldr	r3, [r3, #0]
 810f3c6:	3304      	adds	r3, #4
 810f3c8:	4619      	mov	r1, r3
 810f3ca:	4610      	mov	r0, r2
 810f3cc:	f7fe f86b 	bl	810d4a6 <vListInsert>
}
 810f3d0:	e010      	b.n	810f3f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810f3d2:	4b0e      	ldr	r3, [pc, #56]	; (810f40c <prvAddCurrentTaskToDelayedList+0xa0>)
 810f3d4:	681a      	ldr	r2, [r3, #0]
 810f3d6:	4b0a      	ldr	r3, [pc, #40]	; (810f400 <prvAddCurrentTaskToDelayedList+0x94>)
 810f3d8:	681b      	ldr	r3, [r3, #0]
 810f3da:	3304      	adds	r3, #4
 810f3dc:	4619      	mov	r1, r3
 810f3de:	4610      	mov	r0, r2
 810f3e0:	f7fe f861 	bl	810d4a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810f3e4:	4b0a      	ldr	r3, [pc, #40]	; (810f410 <prvAddCurrentTaskToDelayedList+0xa4>)
 810f3e6:	681b      	ldr	r3, [r3, #0]
 810f3e8:	68ba      	ldr	r2, [r7, #8]
 810f3ea:	429a      	cmp	r2, r3
 810f3ec:	d202      	bcs.n	810f3f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810f3ee:	4a08      	ldr	r2, [pc, #32]	; (810f410 <prvAddCurrentTaskToDelayedList+0xa4>)
 810f3f0:	68bb      	ldr	r3, [r7, #8]
 810f3f2:	6013      	str	r3, [r2, #0]
}
 810f3f4:	bf00      	nop
 810f3f6:	3710      	adds	r7, #16
 810f3f8:	46bd      	mov	sp, r7
 810f3fa:	bd80      	pop	{r7, pc}
 810f3fc:	10005684 	.word	0x10005684
 810f400:	100051ac 	.word	0x100051ac
 810f404:	1000566c 	.word	0x1000566c
 810f408:	1000563c 	.word	0x1000563c
 810f40c:	10005638 	.word	0x10005638
 810f410:	100056a0 	.word	0x100056a0

0810f414 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810f414:	b580      	push	{r7, lr}
 810f416:	b08a      	sub	sp, #40	; 0x28
 810f418:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810f41a:	2300      	movs	r3, #0
 810f41c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810f41e:	f000 fb07 	bl	810fa30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810f422:	4b1c      	ldr	r3, [pc, #112]	; (810f494 <xTimerCreateTimerTask+0x80>)
 810f424:	681b      	ldr	r3, [r3, #0]
 810f426:	2b00      	cmp	r3, #0
 810f428:	d021      	beq.n	810f46e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810f42a:	2300      	movs	r3, #0
 810f42c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810f42e:	2300      	movs	r3, #0
 810f430:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810f432:	1d3a      	adds	r2, r7, #4
 810f434:	f107 0108 	add.w	r1, r7, #8
 810f438:	f107 030c 	add.w	r3, r7, #12
 810f43c:	4618      	mov	r0, r3
 810f43e:	f7fd fddd 	bl	810cffc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810f442:	6879      	ldr	r1, [r7, #4]
 810f444:	68bb      	ldr	r3, [r7, #8]
 810f446:	68fa      	ldr	r2, [r7, #12]
 810f448:	9202      	str	r2, [sp, #8]
 810f44a:	9301      	str	r3, [sp, #4]
 810f44c:	2302      	movs	r3, #2
 810f44e:	9300      	str	r3, [sp, #0]
 810f450:	2300      	movs	r3, #0
 810f452:	460a      	mov	r2, r1
 810f454:	4910      	ldr	r1, [pc, #64]	; (810f498 <xTimerCreateTimerTask+0x84>)
 810f456:	4811      	ldr	r0, [pc, #68]	; (810f49c <xTimerCreateTimerTask+0x88>)
 810f458:	f7ff f8b4 	bl	810e5c4 <xTaskCreateStatic>
 810f45c:	4603      	mov	r3, r0
 810f45e:	4a10      	ldr	r2, [pc, #64]	; (810f4a0 <xTimerCreateTimerTask+0x8c>)
 810f460:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810f462:	4b0f      	ldr	r3, [pc, #60]	; (810f4a0 <xTimerCreateTimerTask+0x8c>)
 810f464:	681b      	ldr	r3, [r3, #0]
 810f466:	2b00      	cmp	r3, #0
 810f468:	d001      	beq.n	810f46e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810f46a:	2301      	movs	r3, #1
 810f46c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810f46e:	697b      	ldr	r3, [r7, #20]
 810f470:	2b00      	cmp	r3, #0
 810f472:	d10a      	bne.n	810f48a <xTimerCreateTimerTask+0x76>
	__asm volatile
 810f474:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f478:	f383 8811 	msr	BASEPRI, r3
 810f47c:	f3bf 8f6f 	isb	sy
 810f480:	f3bf 8f4f 	dsb	sy
 810f484:	613b      	str	r3, [r7, #16]
}
 810f486:	bf00      	nop
 810f488:	e7fe      	b.n	810f488 <xTimerCreateTimerTask+0x74>
	return xReturn;
 810f48a:	697b      	ldr	r3, [r7, #20]
}
 810f48c:	4618      	mov	r0, r3
 810f48e:	3718      	adds	r7, #24
 810f490:	46bd      	mov	sp, r7
 810f492:	bd80      	pop	{r7, pc}
 810f494:	100056dc 	.word	0x100056dc
 810f498:	0810fcec 	.word	0x0810fcec
 810f49c:	0810f5d9 	.word	0x0810f5d9
 810f4a0:	100056e0 	.word	0x100056e0

0810f4a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810f4a4:	b580      	push	{r7, lr}
 810f4a6:	b08a      	sub	sp, #40	; 0x28
 810f4a8:	af00      	add	r7, sp, #0
 810f4aa:	60f8      	str	r0, [r7, #12]
 810f4ac:	60b9      	str	r1, [r7, #8]
 810f4ae:	607a      	str	r2, [r7, #4]
 810f4b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810f4b2:	2300      	movs	r3, #0
 810f4b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810f4b6:	68fb      	ldr	r3, [r7, #12]
 810f4b8:	2b00      	cmp	r3, #0
 810f4ba:	d10a      	bne.n	810f4d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 810f4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f4c0:	f383 8811 	msr	BASEPRI, r3
 810f4c4:	f3bf 8f6f 	isb	sy
 810f4c8:	f3bf 8f4f 	dsb	sy
 810f4cc:	623b      	str	r3, [r7, #32]
}
 810f4ce:	bf00      	nop
 810f4d0:	e7fe      	b.n	810f4d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810f4d2:	4b1a      	ldr	r3, [pc, #104]	; (810f53c <xTimerGenericCommand+0x98>)
 810f4d4:	681b      	ldr	r3, [r3, #0]
 810f4d6:	2b00      	cmp	r3, #0
 810f4d8:	d02a      	beq.n	810f530 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810f4da:	68bb      	ldr	r3, [r7, #8]
 810f4dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810f4de:	687b      	ldr	r3, [r7, #4]
 810f4e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810f4e2:	68fb      	ldr	r3, [r7, #12]
 810f4e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810f4e6:	68bb      	ldr	r3, [r7, #8]
 810f4e8:	2b05      	cmp	r3, #5
 810f4ea:	dc18      	bgt.n	810f51e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810f4ec:	f7ff feb2 	bl	810f254 <xTaskGetSchedulerState>
 810f4f0:	4603      	mov	r3, r0
 810f4f2:	2b02      	cmp	r3, #2
 810f4f4:	d109      	bne.n	810f50a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810f4f6:	4b11      	ldr	r3, [pc, #68]	; (810f53c <xTimerGenericCommand+0x98>)
 810f4f8:	6818      	ldr	r0, [r3, #0]
 810f4fa:	f107 0110 	add.w	r1, r7, #16
 810f4fe:	2300      	movs	r3, #0
 810f500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810f502:	f7fe fc29 	bl	810dd58 <xQueueGenericSend>
 810f506:	6278      	str	r0, [r7, #36]	; 0x24
 810f508:	e012      	b.n	810f530 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810f50a:	4b0c      	ldr	r3, [pc, #48]	; (810f53c <xTimerGenericCommand+0x98>)
 810f50c:	6818      	ldr	r0, [r3, #0]
 810f50e:	f107 0110 	add.w	r1, r7, #16
 810f512:	2300      	movs	r3, #0
 810f514:	2200      	movs	r2, #0
 810f516:	f7fe fc1f 	bl	810dd58 <xQueueGenericSend>
 810f51a:	6278      	str	r0, [r7, #36]	; 0x24
 810f51c:	e008      	b.n	810f530 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810f51e:	4b07      	ldr	r3, [pc, #28]	; (810f53c <xTimerGenericCommand+0x98>)
 810f520:	6818      	ldr	r0, [r3, #0]
 810f522:	f107 0110 	add.w	r1, r7, #16
 810f526:	2300      	movs	r3, #0
 810f528:	683a      	ldr	r2, [r7, #0]
 810f52a:	f7fe fd13 	bl	810df54 <xQueueGenericSendFromISR>
 810f52e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810f532:	4618      	mov	r0, r3
 810f534:	3728      	adds	r7, #40	; 0x28
 810f536:	46bd      	mov	sp, r7
 810f538:	bd80      	pop	{r7, pc}
 810f53a:	bf00      	nop
 810f53c:	100056dc 	.word	0x100056dc

0810f540 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810f540:	b580      	push	{r7, lr}
 810f542:	b088      	sub	sp, #32
 810f544:	af02      	add	r7, sp, #8
 810f546:	6078      	str	r0, [r7, #4]
 810f548:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f54a:	4b22      	ldr	r3, [pc, #136]	; (810f5d4 <prvProcessExpiredTimer+0x94>)
 810f54c:	681b      	ldr	r3, [r3, #0]
 810f54e:	68db      	ldr	r3, [r3, #12]
 810f550:	68db      	ldr	r3, [r3, #12]
 810f552:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f554:	697b      	ldr	r3, [r7, #20]
 810f556:	3304      	adds	r3, #4
 810f558:	4618      	mov	r0, r3
 810f55a:	f7fd ffdd 	bl	810d518 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f55e:	697b      	ldr	r3, [r7, #20]
 810f560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f564:	f003 0304 	and.w	r3, r3, #4
 810f568:	2b00      	cmp	r3, #0
 810f56a:	d022      	beq.n	810f5b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810f56c:	697b      	ldr	r3, [r7, #20]
 810f56e:	699a      	ldr	r2, [r3, #24]
 810f570:	687b      	ldr	r3, [r7, #4]
 810f572:	18d1      	adds	r1, r2, r3
 810f574:	687b      	ldr	r3, [r7, #4]
 810f576:	683a      	ldr	r2, [r7, #0]
 810f578:	6978      	ldr	r0, [r7, #20]
 810f57a:	f000 f8d1 	bl	810f720 <prvInsertTimerInActiveList>
 810f57e:	4603      	mov	r3, r0
 810f580:	2b00      	cmp	r3, #0
 810f582:	d01f      	beq.n	810f5c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810f584:	2300      	movs	r3, #0
 810f586:	9300      	str	r3, [sp, #0]
 810f588:	2300      	movs	r3, #0
 810f58a:	687a      	ldr	r2, [r7, #4]
 810f58c:	2100      	movs	r1, #0
 810f58e:	6978      	ldr	r0, [r7, #20]
 810f590:	f7ff ff88 	bl	810f4a4 <xTimerGenericCommand>
 810f594:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810f596:	693b      	ldr	r3, [r7, #16]
 810f598:	2b00      	cmp	r3, #0
 810f59a:	d113      	bne.n	810f5c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 810f59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f5a0:	f383 8811 	msr	BASEPRI, r3
 810f5a4:	f3bf 8f6f 	isb	sy
 810f5a8:	f3bf 8f4f 	dsb	sy
 810f5ac:	60fb      	str	r3, [r7, #12]
}
 810f5ae:	bf00      	nop
 810f5b0:	e7fe      	b.n	810f5b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f5b2:	697b      	ldr	r3, [r7, #20]
 810f5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f5b8:	f023 0301 	bic.w	r3, r3, #1
 810f5bc:	b2da      	uxtb	r2, r3
 810f5be:	697b      	ldr	r3, [r7, #20]
 810f5c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f5c4:	697b      	ldr	r3, [r7, #20]
 810f5c6:	6a1b      	ldr	r3, [r3, #32]
 810f5c8:	6978      	ldr	r0, [r7, #20]
 810f5ca:	4798      	blx	r3
}
 810f5cc:	bf00      	nop
 810f5ce:	3718      	adds	r7, #24
 810f5d0:	46bd      	mov	sp, r7
 810f5d2:	bd80      	pop	{r7, pc}
 810f5d4:	100056d4 	.word	0x100056d4

0810f5d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810f5d8:	b580      	push	{r7, lr}
 810f5da:	b084      	sub	sp, #16
 810f5dc:	af00      	add	r7, sp, #0
 810f5de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810f5e0:	f107 0308 	add.w	r3, r7, #8
 810f5e4:	4618      	mov	r0, r3
 810f5e6:	f000 f857 	bl	810f698 <prvGetNextExpireTime>
 810f5ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810f5ec:	68bb      	ldr	r3, [r7, #8]
 810f5ee:	4619      	mov	r1, r3
 810f5f0:	68f8      	ldr	r0, [r7, #12]
 810f5f2:	f000 f803 	bl	810f5fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810f5f6:	f000 f8d5 	bl	810f7a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810f5fa:	e7f1      	b.n	810f5e0 <prvTimerTask+0x8>

0810f5fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810f5fc:	b580      	push	{r7, lr}
 810f5fe:	b084      	sub	sp, #16
 810f600:	af00      	add	r7, sp, #0
 810f602:	6078      	str	r0, [r7, #4]
 810f604:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810f606:	f7ff fa39 	bl	810ea7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810f60a:	f107 0308 	add.w	r3, r7, #8
 810f60e:	4618      	mov	r0, r3
 810f610:	f000 f866 	bl	810f6e0 <prvSampleTimeNow>
 810f614:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810f616:	68bb      	ldr	r3, [r7, #8]
 810f618:	2b00      	cmp	r3, #0
 810f61a:	d130      	bne.n	810f67e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810f61c:	683b      	ldr	r3, [r7, #0]
 810f61e:	2b00      	cmp	r3, #0
 810f620:	d10a      	bne.n	810f638 <prvProcessTimerOrBlockTask+0x3c>
 810f622:	687a      	ldr	r2, [r7, #4]
 810f624:	68fb      	ldr	r3, [r7, #12]
 810f626:	429a      	cmp	r2, r3
 810f628:	d806      	bhi.n	810f638 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810f62a:	f7ff fa35 	bl	810ea98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810f62e:	68f9      	ldr	r1, [r7, #12]
 810f630:	6878      	ldr	r0, [r7, #4]
 810f632:	f7ff ff85 	bl	810f540 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810f636:	e024      	b.n	810f682 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810f638:	683b      	ldr	r3, [r7, #0]
 810f63a:	2b00      	cmp	r3, #0
 810f63c:	d008      	beq.n	810f650 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810f63e:	4b13      	ldr	r3, [pc, #76]	; (810f68c <prvProcessTimerOrBlockTask+0x90>)
 810f640:	681b      	ldr	r3, [r3, #0]
 810f642:	681b      	ldr	r3, [r3, #0]
 810f644:	2b00      	cmp	r3, #0
 810f646:	d101      	bne.n	810f64c <prvProcessTimerOrBlockTask+0x50>
 810f648:	2301      	movs	r3, #1
 810f64a:	e000      	b.n	810f64e <prvProcessTimerOrBlockTask+0x52>
 810f64c:	2300      	movs	r3, #0
 810f64e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810f650:	4b0f      	ldr	r3, [pc, #60]	; (810f690 <prvProcessTimerOrBlockTask+0x94>)
 810f652:	6818      	ldr	r0, [r3, #0]
 810f654:	687a      	ldr	r2, [r7, #4]
 810f656:	68fb      	ldr	r3, [r7, #12]
 810f658:	1ad3      	subs	r3, r2, r3
 810f65a:	683a      	ldr	r2, [r7, #0]
 810f65c:	4619      	mov	r1, r3
 810f65e:	f7fe ff7d 	bl	810e55c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810f662:	f7ff fa19 	bl	810ea98 <xTaskResumeAll>
 810f666:	4603      	mov	r3, r0
 810f668:	2b00      	cmp	r3, #0
 810f66a:	d10a      	bne.n	810f682 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810f66c:	4b09      	ldr	r3, [pc, #36]	; (810f694 <prvProcessTimerOrBlockTask+0x98>)
 810f66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810f672:	601a      	str	r2, [r3, #0]
 810f674:	f3bf 8f4f 	dsb	sy
 810f678:	f3bf 8f6f 	isb	sy
}
 810f67c:	e001      	b.n	810f682 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810f67e:	f7ff fa0b 	bl	810ea98 <xTaskResumeAll>
}
 810f682:	bf00      	nop
 810f684:	3710      	adds	r7, #16
 810f686:	46bd      	mov	sp, r7
 810f688:	bd80      	pop	{r7, pc}
 810f68a:	bf00      	nop
 810f68c:	100056d8 	.word	0x100056d8
 810f690:	100056dc 	.word	0x100056dc
 810f694:	e000ed04 	.word	0xe000ed04

0810f698 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810f698:	b480      	push	{r7}
 810f69a:	b085      	sub	sp, #20
 810f69c:	af00      	add	r7, sp, #0
 810f69e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810f6a0:	4b0e      	ldr	r3, [pc, #56]	; (810f6dc <prvGetNextExpireTime+0x44>)
 810f6a2:	681b      	ldr	r3, [r3, #0]
 810f6a4:	681b      	ldr	r3, [r3, #0]
 810f6a6:	2b00      	cmp	r3, #0
 810f6a8:	d101      	bne.n	810f6ae <prvGetNextExpireTime+0x16>
 810f6aa:	2201      	movs	r2, #1
 810f6ac:	e000      	b.n	810f6b0 <prvGetNextExpireTime+0x18>
 810f6ae:	2200      	movs	r2, #0
 810f6b0:	687b      	ldr	r3, [r7, #4]
 810f6b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810f6b4:	687b      	ldr	r3, [r7, #4]
 810f6b6:	681b      	ldr	r3, [r3, #0]
 810f6b8:	2b00      	cmp	r3, #0
 810f6ba:	d105      	bne.n	810f6c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810f6bc:	4b07      	ldr	r3, [pc, #28]	; (810f6dc <prvGetNextExpireTime+0x44>)
 810f6be:	681b      	ldr	r3, [r3, #0]
 810f6c0:	68db      	ldr	r3, [r3, #12]
 810f6c2:	681b      	ldr	r3, [r3, #0]
 810f6c4:	60fb      	str	r3, [r7, #12]
 810f6c6:	e001      	b.n	810f6cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810f6c8:	2300      	movs	r3, #0
 810f6ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810f6cc:	68fb      	ldr	r3, [r7, #12]
}
 810f6ce:	4618      	mov	r0, r3
 810f6d0:	3714      	adds	r7, #20
 810f6d2:	46bd      	mov	sp, r7
 810f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f6d8:	4770      	bx	lr
 810f6da:	bf00      	nop
 810f6dc:	100056d4 	.word	0x100056d4

0810f6e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810f6e0:	b580      	push	{r7, lr}
 810f6e2:	b084      	sub	sp, #16
 810f6e4:	af00      	add	r7, sp, #0
 810f6e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810f6e8:	f7ff fa74 	bl	810ebd4 <xTaskGetTickCount>
 810f6ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810f6ee:	4b0b      	ldr	r3, [pc, #44]	; (810f71c <prvSampleTimeNow+0x3c>)
 810f6f0:	681b      	ldr	r3, [r3, #0]
 810f6f2:	68fa      	ldr	r2, [r7, #12]
 810f6f4:	429a      	cmp	r2, r3
 810f6f6:	d205      	bcs.n	810f704 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810f6f8:	f000 f936 	bl	810f968 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810f6fc:	687b      	ldr	r3, [r7, #4]
 810f6fe:	2201      	movs	r2, #1
 810f700:	601a      	str	r2, [r3, #0]
 810f702:	e002      	b.n	810f70a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810f704:	687b      	ldr	r3, [r7, #4]
 810f706:	2200      	movs	r2, #0
 810f708:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810f70a:	4a04      	ldr	r2, [pc, #16]	; (810f71c <prvSampleTimeNow+0x3c>)
 810f70c:	68fb      	ldr	r3, [r7, #12]
 810f70e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810f710:	68fb      	ldr	r3, [r7, #12]
}
 810f712:	4618      	mov	r0, r3
 810f714:	3710      	adds	r7, #16
 810f716:	46bd      	mov	sp, r7
 810f718:	bd80      	pop	{r7, pc}
 810f71a:	bf00      	nop
 810f71c:	100056e4 	.word	0x100056e4

0810f720 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810f720:	b580      	push	{r7, lr}
 810f722:	b086      	sub	sp, #24
 810f724:	af00      	add	r7, sp, #0
 810f726:	60f8      	str	r0, [r7, #12]
 810f728:	60b9      	str	r1, [r7, #8]
 810f72a:	607a      	str	r2, [r7, #4]
 810f72c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810f72e:	2300      	movs	r3, #0
 810f730:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810f732:	68fb      	ldr	r3, [r7, #12]
 810f734:	68ba      	ldr	r2, [r7, #8]
 810f736:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810f738:	68fb      	ldr	r3, [r7, #12]
 810f73a:	68fa      	ldr	r2, [r7, #12]
 810f73c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810f73e:	68ba      	ldr	r2, [r7, #8]
 810f740:	687b      	ldr	r3, [r7, #4]
 810f742:	429a      	cmp	r2, r3
 810f744:	d812      	bhi.n	810f76c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f746:	687a      	ldr	r2, [r7, #4]
 810f748:	683b      	ldr	r3, [r7, #0]
 810f74a:	1ad2      	subs	r2, r2, r3
 810f74c:	68fb      	ldr	r3, [r7, #12]
 810f74e:	699b      	ldr	r3, [r3, #24]
 810f750:	429a      	cmp	r2, r3
 810f752:	d302      	bcc.n	810f75a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810f754:	2301      	movs	r3, #1
 810f756:	617b      	str	r3, [r7, #20]
 810f758:	e01b      	b.n	810f792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810f75a:	4b10      	ldr	r3, [pc, #64]	; (810f79c <prvInsertTimerInActiveList+0x7c>)
 810f75c:	681a      	ldr	r2, [r3, #0]
 810f75e:	68fb      	ldr	r3, [r7, #12]
 810f760:	3304      	adds	r3, #4
 810f762:	4619      	mov	r1, r3
 810f764:	4610      	mov	r0, r2
 810f766:	f7fd fe9e 	bl	810d4a6 <vListInsert>
 810f76a:	e012      	b.n	810f792 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810f76c:	687a      	ldr	r2, [r7, #4]
 810f76e:	683b      	ldr	r3, [r7, #0]
 810f770:	429a      	cmp	r2, r3
 810f772:	d206      	bcs.n	810f782 <prvInsertTimerInActiveList+0x62>
 810f774:	68ba      	ldr	r2, [r7, #8]
 810f776:	683b      	ldr	r3, [r7, #0]
 810f778:	429a      	cmp	r2, r3
 810f77a:	d302      	bcc.n	810f782 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810f77c:	2301      	movs	r3, #1
 810f77e:	617b      	str	r3, [r7, #20]
 810f780:	e007      	b.n	810f792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810f782:	4b07      	ldr	r3, [pc, #28]	; (810f7a0 <prvInsertTimerInActiveList+0x80>)
 810f784:	681a      	ldr	r2, [r3, #0]
 810f786:	68fb      	ldr	r3, [r7, #12]
 810f788:	3304      	adds	r3, #4
 810f78a:	4619      	mov	r1, r3
 810f78c:	4610      	mov	r0, r2
 810f78e:	f7fd fe8a 	bl	810d4a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 810f792:	697b      	ldr	r3, [r7, #20]
}
 810f794:	4618      	mov	r0, r3
 810f796:	3718      	adds	r7, #24
 810f798:	46bd      	mov	sp, r7
 810f79a:	bd80      	pop	{r7, pc}
 810f79c:	100056d8 	.word	0x100056d8
 810f7a0:	100056d4 	.word	0x100056d4

0810f7a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810f7a4:	b580      	push	{r7, lr}
 810f7a6:	b08e      	sub	sp, #56	; 0x38
 810f7a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810f7aa:	e0ca      	b.n	810f942 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810f7ac:	687b      	ldr	r3, [r7, #4]
 810f7ae:	2b00      	cmp	r3, #0
 810f7b0:	da18      	bge.n	810f7e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810f7b2:	1d3b      	adds	r3, r7, #4
 810f7b4:	3304      	adds	r3, #4
 810f7b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810f7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810f7ba:	2b00      	cmp	r3, #0
 810f7bc:	d10a      	bne.n	810f7d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 810f7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f7c2:	f383 8811 	msr	BASEPRI, r3
 810f7c6:	f3bf 8f6f 	isb	sy
 810f7ca:	f3bf 8f4f 	dsb	sy
 810f7ce:	61fb      	str	r3, [r7, #28]
}
 810f7d0:	bf00      	nop
 810f7d2:	e7fe      	b.n	810f7d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810f7d6:	681b      	ldr	r3, [r3, #0]
 810f7d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810f7da:	6850      	ldr	r0, [r2, #4]
 810f7dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810f7de:	6892      	ldr	r2, [r2, #8]
 810f7e0:	4611      	mov	r1, r2
 810f7e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810f7e4:	687b      	ldr	r3, [r7, #4]
 810f7e6:	2b00      	cmp	r3, #0
 810f7e8:	f2c0 80aa 	blt.w	810f940 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810f7ec:	68fb      	ldr	r3, [r7, #12]
 810f7ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810f7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f7f2:	695b      	ldr	r3, [r3, #20]
 810f7f4:	2b00      	cmp	r3, #0
 810f7f6:	d004      	beq.n	810f802 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f7fa:	3304      	adds	r3, #4
 810f7fc:	4618      	mov	r0, r3
 810f7fe:	f7fd fe8b 	bl	810d518 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810f802:	463b      	mov	r3, r7
 810f804:	4618      	mov	r0, r3
 810f806:	f7ff ff6b 	bl	810f6e0 <prvSampleTimeNow>
 810f80a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 810f80c:	687b      	ldr	r3, [r7, #4]
 810f80e:	2b09      	cmp	r3, #9
 810f810:	f200 8097 	bhi.w	810f942 <prvProcessReceivedCommands+0x19e>
 810f814:	a201      	add	r2, pc, #4	; (adr r2, 810f81c <prvProcessReceivedCommands+0x78>)
 810f816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f81a:	bf00      	nop
 810f81c:	0810f845 	.word	0x0810f845
 810f820:	0810f845 	.word	0x0810f845
 810f824:	0810f845 	.word	0x0810f845
 810f828:	0810f8b9 	.word	0x0810f8b9
 810f82c:	0810f8cd 	.word	0x0810f8cd
 810f830:	0810f917 	.word	0x0810f917
 810f834:	0810f845 	.word	0x0810f845
 810f838:	0810f845 	.word	0x0810f845
 810f83c:	0810f8b9 	.word	0x0810f8b9
 810f840:	0810f8cd 	.word	0x0810f8cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810f844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f84a:	f043 0301 	orr.w	r3, r3, #1
 810f84e:	b2da      	uxtb	r2, r3
 810f850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810f856:	68ba      	ldr	r2, [r7, #8]
 810f858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f85a:	699b      	ldr	r3, [r3, #24]
 810f85c:	18d1      	adds	r1, r2, r3
 810f85e:	68bb      	ldr	r3, [r7, #8]
 810f860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810f862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f864:	f7ff ff5c 	bl	810f720 <prvInsertTimerInActiveList>
 810f868:	4603      	mov	r3, r0
 810f86a:	2b00      	cmp	r3, #0
 810f86c:	d069      	beq.n	810f942 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f870:	6a1b      	ldr	r3, [r3, #32]
 810f872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f874:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f87c:	f003 0304 	and.w	r3, r3, #4
 810f880:	2b00      	cmp	r3, #0
 810f882:	d05e      	beq.n	810f942 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810f884:	68ba      	ldr	r2, [r7, #8]
 810f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f888:	699b      	ldr	r3, [r3, #24]
 810f88a:	441a      	add	r2, r3
 810f88c:	2300      	movs	r3, #0
 810f88e:	9300      	str	r3, [sp, #0]
 810f890:	2300      	movs	r3, #0
 810f892:	2100      	movs	r1, #0
 810f894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f896:	f7ff fe05 	bl	810f4a4 <xTimerGenericCommand>
 810f89a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810f89c:	6a3b      	ldr	r3, [r7, #32]
 810f89e:	2b00      	cmp	r3, #0
 810f8a0:	d14f      	bne.n	810f942 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 810f8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f8a6:	f383 8811 	msr	BASEPRI, r3
 810f8aa:	f3bf 8f6f 	isb	sy
 810f8ae:	f3bf 8f4f 	dsb	sy
 810f8b2:	61bb      	str	r3, [r7, #24]
}
 810f8b4:	bf00      	nop
 810f8b6:	e7fe      	b.n	810f8b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f8ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f8be:	f023 0301 	bic.w	r3, r3, #1
 810f8c2:	b2da      	uxtb	r2, r3
 810f8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f8c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 810f8ca:	e03a      	b.n	810f942 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810f8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f8ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f8d2:	f043 0301 	orr.w	r3, r3, #1
 810f8d6:	b2da      	uxtb	r2, r3
 810f8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f8da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810f8de:	68ba      	ldr	r2, [r7, #8]
 810f8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f8e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810f8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f8e6:	699b      	ldr	r3, [r3, #24]
 810f8e8:	2b00      	cmp	r3, #0
 810f8ea:	d10a      	bne.n	810f902 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 810f8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f8f0:	f383 8811 	msr	BASEPRI, r3
 810f8f4:	f3bf 8f6f 	isb	sy
 810f8f8:	f3bf 8f4f 	dsb	sy
 810f8fc:	617b      	str	r3, [r7, #20]
}
 810f8fe:	bf00      	nop
 810f900:	e7fe      	b.n	810f900 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810f902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f904:	699a      	ldr	r2, [r3, #24]
 810f906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f908:	18d1      	adds	r1, r2, r3
 810f90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810f90e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f910:	f7ff ff06 	bl	810f720 <prvInsertTimerInActiveList>
					break;
 810f914:	e015      	b.n	810f942 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810f916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f91c:	f003 0302 	and.w	r3, r3, #2
 810f920:	2b00      	cmp	r3, #0
 810f922:	d103      	bne.n	810f92c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 810f924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f926:	f7fd fc4f 	bl	810d1c8 <vPortFree>
 810f92a:	e00a      	b.n	810f942 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810f92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f92e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f932:	f023 0301 	bic.w	r3, r3, #1
 810f936:	b2da      	uxtb	r2, r3
 810f938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f93a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810f93e:	e000      	b.n	810f942 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 810f940:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810f942:	4b08      	ldr	r3, [pc, #32]	; (810f964 <prvProcessReceivedCommands+0x1c0>)
 810f944:	681b      	ldr	r3, [r3, #0]
 810f946:	1d39      	adds	r1, r7, #4
 810f948:	2200      	movs	r2, #0
 810f94a:	4618      	mov	r0, r3
 810f94c:	f7fe fb9e 	bl	810e08c <xQueueReceive>
 810f950:	4603      	mov	r3, r0
 810f952:	2b00      	cmp	r3, #0
 810f954:	f47f af2a 	bne.w	810f7ac <prvProcessReceivedCommands+0x8>
	}
}
 810f958:	bf00      	nop
 810f95a:	bf00      	nop
 810f95c:	3730      	adds	r7, #48	; 0x30
 810f95e:	46bd      	mov	sp, r7
 810f960:	bd80      	pop	{r7, pc}
 810f962:	bf00      	nop
 810f964:	100056dc 	.word	0x100056dc

0810f968 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810f968:	b580      	push	{r7, lr}
 810f96a:	b088      	sub	sp, #32
 810f96c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810f96e:	e048      	b.n	810fa02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810f970:	4b2d      	ldr	r3, [pc, #180]	; (810fa28 <prvSwitchTimerLists+0xc0>)
 810f972:	681b      	ldr	r3, [r3, #0]
 810f974:	68db      	ldr	r3, [r3, #12]
 810f976:	681b      	ldr	r3, [r3, #0]
 810f978:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f97a:	4b2b      	ldr	r3, [pc, #172]	; (810fa28 <prvSwitchTimerLists+0xc0>)
 810f97c:	681b      	ldr	r3, [r3, #0]
 810f97e:	68db      	ldr	r3, [r3, #12]
 810f980:	68db      	ldr	r3, [r3, #12]
 810f982:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810f984:	68fb      	ldr	r3, [r7, #12]
 810f986:	3304      	adds	r3, #4
 810f988:	4618      	mov	r0, r3
 810f98a:	f7fd fdc5 	bl	810d518 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810f98e:	68fb      	ldr	r3, [r7, #12]
 810f990:	6a1b      	ldr	r3, [r3, #32]
 810f992:	68f8      	ldr	r0, [r7, #12]
 810f994:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810f996:	68fb      	ldr	r3, [r7, #12]
 810f998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810f99c:	f003 0304 	and.w	r3, r3, #4
 810f9a0:	2b00      	cmp	r3, #0
 810f9a2:	d02e      	beq.n	810fa02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810f9a4:	68fb      	ldr	r3, [r7, #12]
 810f9a6:	699b      	ldr	r3, [r3, #24]
 810f9a8:	693a      	ldr	r2, [r7, #16]
 810f9aa:	4413      	add	r3, r2
 810f9ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810f9ae:	68ba      	ldr	r2, [r7, #8]
 810f9b0:	693b      	ldr	r3, [r7, #16]
 810f9b2:	429a      	cmp	r2, r3
 810f9b4:	d90e      	bls.n	810f9d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810f9b6:	68fb      	ldr	r3, [r7, #12]
 810f9b8:	68ba      	ldr	r2, [r7, #8]
 810f9ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810f9bc:	68fb      	ldr	r3, [r7, #12]
 810f9be:	68fa      	ldr	r2, [r7, #12]
 810f9c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810f9c2:	4b19      	ldr	r3, [pc, #100]	; (810fa28 <prvSwitchTimerLists+0xc0>)
 810f9c4:	681a      	ldr	r2, [r3, #0]
 810f9c6:	68fb      	ldr	r3, [r7, #12]
 810f9c8:	3304      	adds	r3, #4
 810f9ca:	4619      	mov	r1, r3
 810f9cc:	4610      	mov	r0, r2
 810f9ce:	f7fd fd6a 	bl	810d4a6 <vListInsert>
 810f9d2:	e016      	b.n	810fa02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810f9d4:	2300      	movs	r3, #0
 810f9d6:	9300      	str	r3, [sp, #0]
 810f9d8:	2300      	movs	r3, #0
 810f9da:	693a      	ldr	r2, [r7, #16]
 810f9dc:	2100      	movs	r1, #0
 810f9de:	68f8      	ldr	r0, [r7, #12]
 810f9e0:	f7ff fd60 	bl	810f4a4 <xTimerGenericCommand>
 810f9e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810f9e6:	687b      	ldr	r3, [r7, #4]
 810f9e8:	2b00      	cmp	r3, #0
 810f9ea:	d10a      	bne.n	810fa02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 810f9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f9f0:	f383 8811 	msr	BASEPRI, r3
 810f9f4:	f3bf 8f6f 	isb	sy
 810f9f8:	f3bf 8f4f 	dsb	sy
 810f9fc:	603b      	str	r3, [r7, #0]
}
 810f9fe:	bf00      	nop
 810fa00:	e7fe      	b.n	810fa00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810fa02:	4b09      	ldr	r3, [pc, #36]	; (810fa28 <prvSwitchTimerLists+0xc0>)
 810fa04:	681b      	ldr	r3, [r3, #0]
 810fa06:	681b      	ldr	r3, [r3, #0]
 810fa08:	2b00      	cmp	r3, #0
 810fa0a:	d1b1      	bne.n	810f970 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810fa0c:	4b06      	ldr	r3, [pc, #24]	; (810fa28 <prvSwitchTimerLists+0xc0>)
 810fa0e:	681b      	ldr	r3, [r3, #0]
 810fa10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810fa12:	4b06      	ldr	r3, [pc, #24]	; (810fa2c <prvSwitchTimerLists+0xc4>)
 810fa14:	681b      	ldr	r3, [r3, #0]
 810fa16:	4a04      	ldr	r2, [pc, #16]	; (810fa28 <prvSwitchTimerLists+0xc0>)
 810fa18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810fa1a:	4a04      	ldr	r2, [pc, #16]	; (810fa2c <prvSwitchTimerLists+0xc4>)
 810fa1c:	697b      	ldr	r3, [r7, #20]
 810fa1e:	6013      	str	r3, [r2, #0]
}
 810fa20:	bf00      	nop
 810fa22:	3718      	adds	r7, #24
 810fa24:	46bd      	mov	sp, r7
 810fa26:	bd80      	pop	{r7, pc}
 810fa28:	100056d4 	.word	0x100056d4
 810fa2c:	100056d8 	.word	0x100056d8

0810fa30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810fa30:	b580      	push	{r7, lr}
 810fa32:	b082      	sub	sp, #8
 810fa34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810fa36:	f7fd fec5 	bl	810d7c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810fa3a:	4b15      	ldr	r3, [pc, #84]	; (810fa90 <prvCheckForValidListAndQueue+0x60>)
 810fa3c:	681b      	ldr	r3, [r3, #0]
 810fa3e:	2b00      	cmp	r3, #0
 810fa40:	d120      	bne.n	810fa84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810fa42:	4814      	ldr	r0, [pc, #80]	; (810fa94 <prvCheckForValidListAndQueue+0x64>)
 810fa44:	f7fd fcde 	bl	810d404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810fa48:	4813      	ldr	r0, [pc, #76]	; (810fa98 <prvCheckForValidListAndQueue+0x68>)
 810fa4a:	f7fd fcdb 	bl	810d404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810fa4e:	4b13      	ldr	r3, [pc, #76]	; (810fa9c <prvCheckForValidListAndQueue+0x6c>)
 810fa50:	4a10      	ldr	r2, [pc, #64]	; (810fa94 <prvCheckForValidListAndQueue+0x64>)
 810fa52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810fa54:	4b12      	ldr	r3, [pc, #72]	; (810faa0 <prvCheckForValidListAndQueue+0x70>)
 810fa56:	4a10      	ldr	r2, [pc, #64]	; (810fa98 <prvCheckForValidListAndQueue+0x68>)
 810fa58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810fa5a:	2300      	movs	r3, #0
 810fa5c:	9300      	str	r3, [sp, #0]
 810fa5e:	4b11      	ldr	r3, [pc, #68]	; (810faa4 <prvCheckForValidListAndQueue+0x74>)
 810fa60:	4a11      	ldr	r2, [pc, #68]	; (810faa8 <prvCheckForValidListAndQueue+0x78>)
 810fa62:	2110      	movs	r1, #16
 810fa64:	200a      	movs	r0, #10
 810fa66:	f7fe f837 	bl	810dad8 <xQueueGenericCreateStatic>
 810fa6a:	4603      	mov	r3, r0
 810fa6c:	4a08      	ldr	r2, [pc, #32]	; (810fa90 <prvCheckForValidListAndQueue+0x60>)
 810fa6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810fa70:	4b07      	ldr	r3, [pc, #28]	; (810fa90 <prvCheckForValidListAndQueue+0x60>)
 810fa72:	681b      	ldr	r3, [r3, #0]
 810fa74:	2b00      	cmp	r3, #0
 810fa76:	d005      	beq.n	810fa84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810fa78:	4b05      	ldr	r3, [pc, #20]	; (810fa90 <prvCheckForValidListAndQueue+0x60>)
 810fa7a:	681b      	ldr	r3, [r3, #0]
 810fa7c:	490b      	ldr	r1, [pc, #44]	; (810faac <prvCheckForValidListAndQueue+0x7c>)
 810fa7e:	4618      	mov	r0, r3
 810fa80:	f7fe fd18 	bl	810e4b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810fa84:	f7fd fece 	bl	810d824 <vPortExitCritical>
}
 810fa88:	bf00      	nop
 810fa8a:	46bd      	mov	sp, r7
 810fa8c:	bd80      	pop	{r7, pc}
 810fa8e:	bf00      	nop
 810fa90:	100056dc 	.word	0x100056dc
 810fa94:	100056ac 	.word	0x100056ac
 810fa98:	100056c0 	.word	0x100056c0
 810fa9c:	100056d4 	.word	0x100056d4
 810faa0:	100056d8 	.word	0x100056d8
 810faa4:	10005788 	.word	0x10005788
 810faa8:	100056e8 	.word	0x100056e8
 810faac:	0810fcf4 	.word	0x0810fcf4

0810fab0 <__libc_init_array>:
 810fab0:	b570      	push	{r4, r5, r6, lr}
 810fab2:	4d0d      	ldr	r5, [pc, #52]	; (810fae8 <__libc_init_array+0x38>)
 810fab4:	4c0d      	ldr	r4, [pc, #52]	; (810faec <__libc_init_array+0x3c>)
 810fab6:	1b64      	subs	r4, r4, r5
 810fab8:	10a4      	asrs	r4, r4, #2
 810faba:	2600      	movs	r6, #0
 810fabc:	42a6      	cmp	r6, r4
 810fabe:	d109      	bne.n	810fad4 <__libc_init_array+0x24>
 810fac0:	4d0b      	ldr	r5, [pc, #44]	; (810faf0 <__libc_init_array+0x40>)
 810fac2:	4c0c      	ldr	r4, [pc, #48]	; (810faf4 <__libc_init_array+0x44>)
 810fac4:	f000 f8f0 	bl	810fca8 <_init>
 810fac8:	1b64      	subs	r4, r4, r5
 810faca:	10a4      	asrs	r4, r4, #2
 810facc:	2600      	movs	r6, #0
 810face:	42a6      	cmp	r6, r4
 810fad0:	d105      	bne.n	810fade <__libc_init_array+0x2e>
 810fad2:	bd70      	pop	{r4, r5, r6, pc}
 810fad4:	f855 3b04 	ldr.w	r3, [r5], #4
 810fad8:	4798      	blx	r3
 810fada:	3601      	adds	r6, #1
 810fadc:	e7ee      	b.n	810fabc <__libc_init_array+0xc>
 810fade:	f855 3b04 	ldr.w	r3, [r5], #4
 810fae2:	4798      	blx	r3
 810fae4:	3601      	adds	r6, #1
 810fae6:	e7f2      	b.n	810face <__libc_init_array+0x1e>
 810fae8:	0810fe04 	.word	0x0810fe04
 810faec:	0810fe04 	.word	0x0810fe04
 810faf0:	0810fe04 	.word	0x0810fe04
 810faf4:	0810fe08 	.word	0x0810fe08

0810faf8 <memcpy>:
 810faf8:	440a      	add	r2, r1
 810fafa:	4291      	cmp	r1, r2
 810fafc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810fb00:	d100      	bne.n	810fb04 <memcpy+0xc>
 810fb02:	4770      	bx	lr
 810fb04:	b510      	push	{r4, lr}
 810fb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 810fb0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810fb0e:	4291      	cmp	r1, r2
 810fb10:	d1f9      	bne.n	810fb06 <memcpy+0xe>
 810fb12:	bd10      	pop	{r4, pc}

0810fb14 <memset>:
 810fb14:	4402      	add	r2, r0
 810fb16:	4603      	mov	r3, r0
 810fb18:	4293      	cmp	r3, r2
 810fb1a:	d100      	bne.n	810fb1e <memset+0xa>
 810fb1c:	4770      	bx	lr
 810fb1e:	f803 1b01 	strb.w	r1, [r3], #1
 810fb22:	e7f9      	b.n	810fb18 <memset+0x4>

0810fb24 <_free_r>:
 810fb24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810fb26:	2900      	cmp	r1, #0
 810fb28:	d044      	beq.n	810fbb4 <_free_r+0x90>
 810fb2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810fb2e:	9001      	str	r0, [sp, #4]
 810fb30:	2b00      	cmp	r3, #0
 810fb32:	f1a1 0404 	sub.w	r4, r1, #4
 810fb36:	bfb8      	it	lt
 810fb38:	18e4      	addlt	r4, r4, r3
 810fb3a:	f000 f8a9 	bl	810fc90 <__malloc_lock>
 810fb3e:	4a1e      	ldr	r2, [pc, #120]	; (810fbb8 <_free_r+0x94>)
 810fb40:	9801      	ldr	r0, [sp, #4]
 810fb42:	6813      	ldr	r3, [r2, #0]
 810fb44:	b933      	cbnz	r3, 810fb54 <_free_r+0x30>
 810fb46:	6063      	str	r3, [r4, #4]
 810fb48:	6014      	str	r4, [r2, #0]
 810fb4a:	b003      	add	sp, #12
 810fb4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810fb50:	f000 b8a4 	b.w	810fc9c <__malloc_unlock>
 810fb54:	42a3      	cmp	r3, r4
 810fb56:	d908      	bls.n	810fb6a <_free_r+0x46>
 810fb58:	6825      	ldr	r5, [r4, #0]
 810fb5a:	1961      	adds	r1, r4, r5
 810fb5c:	428b      	cmp	r3, r1
 810fb5e:	bf01      	itttt	eq
 810fb60:	6819      	ldreq	r1, [r3, #0]
 810fb62:	685b      	ldreq	r3, [r3, #4]
 810fb64:	1949      	addeq	r1, r1, r5
 810fb66:	6021      	streq	r1, [r4, #0]
 810fb68:	e7ed      	b.n	810fb46 <_free_r+0x22>
 810fb6a:	461a      	mov	r2, r3
 810fb6c:	685b      	ldr	r3, [r3, #4]
 810fb6e:	b10b      	cbz	r3, 810fb74 <_free_r+0x50>
 810fb70:	42a3      	cmp	r3, r4
 810fb72:	d9fa      	bls.n	810fb6a <_free_r+0x46>
 810fb74:	6811      	ldr	r1, [r2, #0]
 810fb76:	1855      	adds	r5, r2, r1
 810fb78:	42a5      	cmp	r5, r4
 810fb7a:	d10b      	bne.n	810fb94 <_free_r+0x70>
 810fb7c:	6824      	ldr	r4, [r4, #0]
 810fb7e:	4421      	add	r1, r4
 810fb80:	1854      	adds	r4, r2, r1
 810fb82:	42a3      	cmp	r3, r4
 810fb84:	6011      	str	r1, [r2, #0]
 810fb86:	d1e0      	bne.n	810fb4a <_free_r+0x26>
 810fb88:	681c      	ldr	r4, [r3, #0]
 810fb8a:	685b      	ldr	r3, [r3, #4]
 810fb8c:	6053      	str	r3, [r2, #4]
 810fb8e:	4421      	add	r1, r4
 810fb90:	6011      	str	r1, [r2, #0]
 810fb92:	e7da      	b.n	810fb4a <_free_r+0x26>
 810fb94:	d902      	bls.n	810fb9c <_free_r+0x78>
 810fb96:	230c      	movs	r3, #12
 810fb98:	6003      	str	r3, [r0, #0]
 810fb9a:	e7d6      	b.n	810fb4a <_free_r+0x26>
 810fb9c:	6825      	ldr	r5, [r4, #0]
 810fb9e:	1961      	adds	r1, r4, r5
 810fba0:	428b      	cmp	r3, r1
 810fba2:	bf04      	itt	eq
 810fba4:	6819      	ldreq	r1, [r3, #0]
 810fba6:	685b      	ldreq	r3, [r3, #4]
 810fba8:	6063      	str	r3, [r4, #4]
 810fbaa:	bf04      	itt	eq
 810fbac:	1949      	addeq	r1, r1, r5
 810fbae:	6021      	streq	r1, [r4, #0]
 810fbb0:	6054      	str	r4, [r2, #4]
 810fbb2:	e7ca      	b.n	810fb4a <_free_r+0x26>
 810fbb4:	b003      	add	sp, #12
 810fbb6:	bd30      	pop	{r4, r5, pc}
 810fbb8:	100057d8 	.word	0x100057d8

0810fbbc <cleanup_glue>:
 810fbbc:	b538      	push	{r3, r4, r5, lr}
 810fbbe:	460c      	mov	r4, r1
 810fbc0:	6809      	ldr	r1, [r1, #0]
 810fbc2:	4605      	mov	r5, r0
 810fbc4:	b109      	cbz	r1, 810fbca <cleanup_glue+0xe>
 810fbc6:	f7ff fff9 	bl	810fbbc <cleanup_glue>
 810fbca:	4621      	mov	r1, r4
 810fbcc:	4628      	mov	r0, r5
 810fbce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810fbd2:	f7ff bfa7 	b.w	810fb24 <_free_r>
	...

0810fbd8 <_reclaim_reent>:
 810fbd8:	4b2c      	ldr	r3, [pc, #176]	; (810fc8c <_reclaim_reent+0xb4>)
 810fbda:	681b      	ldr	r3, [r3, #0]
 810fbdc:	4283      	cmp	r3, r0
 810fbde:	b570      	push	{r4, r5, r6, lr}
 810fbe0:	4604      	mov	r4, r0
 810fbe2:	d051      	beq.n	810fc88 <_reclaim_reent+0xb0>
 810fbe4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 810fbe6:	b143      	cbz	r3, 810fbfa <_reclaim_reent+0x22>
 810fbe8:	68db      	ldr	r3, [r3, #12]
 810fbea:	2b00      	cmp	r3, #0
 810fbec:	d14a      	bne.n	810fc84 <_reclaim_reent+0xac>
 810fbee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810fbf0:	6819      	ldr	r1, [r3, #0]
 810fbf2:	b111      	cbz	r1, 810fbfa <_reclaim_reent+0x22>
 810fbf4:	4620      	mov	r0, r4
 810fbf6:	f7ff ff95 	bl	810fb24 <_free_r>
 810fbfa:	6961      	ldr	r1, [r4, #20]
 810fbfc:	b111      	cbz	r1, 810fc04 <_reclaim_reent+0x2c>
 810fbfe:	4620      	mov	r0, r4
 810fc00:	f7ff ff90 	bl	810fb24 <_free_r>
 810fc04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 810fc06:	b111      	cbz	r1, 810fc0e <_reclaim_reent+0x36>
 810fc08:	4620      	mov	r0, r4
 810fc0a:	f7ff ff8b 	bl	810fb24 <_free_r>
 810fc0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 810fc10:	b111      	cbz	r1, 810fc18 <_reclaim_reent+0x40>
 810fc12:	4620      	mov	r0, r4
 810fc14:	f7ff ff86 	bl	810fb24 <_free_r>
 810fc18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 810fc1a:	b111      	cbz	r1, 810fc22 <_reclaim_reent+0x4a>
 810fc1c:	4620      	mov	r0, r4
 810fc1e:	f7ff ff81 	bl	810fb24 <_free_r>
 810fc22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 810fc24:	b111      	cbz	r1, 810fc2c <_reclaim_reent+0x54>
 810fc26:	4620      	mov	r0, r4
 810fc28:	f7ff ff7c 	bl	810fb24 <_free_r>
 810fc2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 810fc2e:	b111      	cbz	r1, 810fc36 <_reclaim_reent+0x5e>
 810fc30:	4620      	mov	r0, r4
 810fc32:	f7ff ff77 	bl	810fb24 <_free_r>
 810fc36:	6da1      	ldr	r1, [r4, #88]	; 0x58
 810fc38:	b111      	cbz	r1, 810fc40 <_reclaim_reent+0x68>
 810fc3a:	4620      	mov	r0, r4
 810fc3c:	f7ff ff72 	bl	810fb24 <_free_r>
 810fc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810fc42:	b111      	cbz	r1, 810fc4a <_reclaim_reent+0x72>
 810fc44:	4620      	mov	r0, r4
 810fc46:	f7ff ff6d 	bl	810fb24 <_free_r>
 810fc4a:	69a3      	ldr	r3, [r4, #24]
 810fc4c:	b1e3      	cbz	r3, 810fc88 <_reclaim_reent+0xb0>
 810fc4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810fc50:	4620      	mov	r0, r4
 810fc52:	4798      	blx	r3
 810fc54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 810fc56:	b1b9      	cbz	r1, 810fc88 <_reclaim_reent+0xb0>
 810fc58:	4620      	mov	r0, r4
 810fc5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810fc5e:	f7ff bfad 	b.w	810fbbc <cleanup_glue>
 810fc62:	5949      	ldr	r1, [r1, r5]
 810fc64:	b941      	cbnz	r1, 810fc78 <_reclaim_reent+0xa0>
 810fc66:	3504      	adds	r5, #4
 810fc68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810fc6a:	2d80      	cmp	r5, #128	; 0x80
 810fc6c:	68d9      	ldr	r1, [r3, #12]
 810fc6e:	d1f8      	bne.n	810fc62 <_reclaim_reent+0x8a>
 810fc70:	4620      	mov	r0, r4
 810fc72:	f7ff ff57 	bl	810fb24 <_free_r>
 810fc76:	e7ba      	b.n	810fbee <_reclaim_reent+0x16>
 810fc78:	680e      	ldr	r6, [r1, #0]
 810fc7a:	4620      	mov	r0, r4
 810fc7c:	f7ff ff52 	bl	810fb24 <_free_r>
 810fc80:	4631      	mov	r1, r6
 810fc82:	e7ef      	b.n	810fc64 <_reclaim_reent+0x8c>
 810fc84:	2500      	movs	r5, #0
 810fc86:	e7ef      	b.n	810fc68 <_reclaim_reent+0x90>
 810fc88:	bd70      	pop	{r4, r5, r6, pc}
 810fc8a:	bf00      	nop
 810fc8c:	10000024 	.word	0x10000024

0810fc90 <__malloc_lock>:
 810fc90:	4801      	ldr	r0, [pc, #4]	; (810fc98 <__malloc_lock+0x8>)
 810fc92:	f7f2 bd4e 	b.w	8102732 <__retarget_lock_acquire_recursive>
 810fc96:	bf00      	nop
 810fc98:	10000d6c 	.word	0x10000d6c

0810fc9c <__malloc_unlock>:
 810fc9c:	4801      	ldr	r0, [pc, #4]	; (810fca4 <__malloc_unlock+0x8>)
 810fc9e:	f7f2 bd5c 	b.w	810275a <__retarget_lock_release_recursive>
 810fca2:	bf00      	nop
 810fca4:	10000d6c 	.word	0x10000d6c

0810fca8 <_init>:
 810fca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810fcaa:	bf00      	nop
 810fcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810fcae:	bc08      	pop	{r3}
 810fcb0:	469e      	mov	lr, r3
 810fcb2:	4770      	bx	lr

0810fcb4 <_fini>:
 810fcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810fcb6:	bf00      	nop
 810fcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810fcba:	bc08      	pop	{r3}
 810fcbc:	469e      	mov	lr, r3
 810fcbe:	4770      	bx	lr
