
blinky_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008320  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080085c0  080085c0  000185c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086fc  080086fc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008704  08008704  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008704  08008704  00018704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008708  08008708  00018708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  24000000  0800870c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b28  2400008c  08008798  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004bb4  08008798  00024bb4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024aad  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044cf  00000000  00000000  00044b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  00049038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e8  00000000  00000000  0004aab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004455e  00000000  00000000  0004c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021037  00000000  00000000  000908fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b75d9  00000000  00000000  000b1935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00268f0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000713c  00000000  00000000  00268f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080085a8 	.word	0x080085a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	080085a8 	.word	0x080085a8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <SystemInit+0xfc>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ee:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <SystemInit+0xfc>)
 80005f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0xfc>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <SystemInit+0xfc>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <SystemInit+0x100>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	2b06      	cmp	r3, #6
 800060e:	d807      	bhi.n	8000620 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <SystemInit+0x100>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 030f 	bic.w	r3, r3, #15
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x100>)
 800061a:	f043 0307 	orr.w	r3, r3, #7
 800061e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <SystemInit+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a30      	ldr	r2, [pc, #192]	; (80006e8 <SystemInit+0x104>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x104>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <SystemInit+0x104>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	492c      	ldr	r1, [pc, #176]	; (80006e8 <SystemInit+0x104>)
 8000638:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <SystemInit+0x108>)
 800063a:	4013      	ands	r3, r2
 800063c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SystemInit+0x100>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d007      	beq.n	800065a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemInit+0x100>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f023 030f 	bic.w	r3, r3, #15
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <SystemInit+0x100>)
 8000654:	f043 0307 	orr.w	r3, r3, #7
 8000658:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemInit+0x104>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemInit+0x104>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemInit+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemInit+0x104>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemInit+0x10c>)
 8000670:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemInit+0x104>)
 8000674:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <SystemInit+0x110>)
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SystemInit+0x104>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <SystemInit+0x114>)
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemInit+0x104>)
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <SystemInit+0x104>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <SystemInit+0x114>)
 8000688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x104>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x104>)
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <SystemInit+0x114>)
 8000694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x104>)
 8000698:	2200      	movs	r2, #0
 800069a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x104>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <SystemInit+0x104>)
 80006a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x104>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x118>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <SystemInit+0x118>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x11c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x120>)
 80006c0:	4013      	ands	r3, r2
 80006c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c6:	d202      	bcs.n	80006ce <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <SystemInit+0x124>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <SystemInit+0x128>)
 80006d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	52002000 	.word	0x52002000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f0:	02020200 	.word	0x02020200
 80006f4:	01ff0000 	.word	0x01ff0000
 80006f8:	01010280 	.word	0x01010280
 80006fc:	580000c0 	.word	0x580000c0
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of toggle */
  toggleHandle = osSemaphoreNew(1, 1, &toggle_attributes);
 8000714:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <MX_FREERTOS_Init+0x38>)
 8000716:	2101      	movs	r1, #1
 8000718:	2001      	movs	r0, #1
 800071a:	f005 f84a 	bl	80057b2 <osSemaphoreNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <MX_FREERTOS_Init+0x3c>)
 8000722:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000724:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <MX_FREERTOS_Init+0x40>)
 8000726:	2100      	movs	r1, #0
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <MX_FREERTOS_Init+0x44>)
 800072a:	f004 ff95 	bl	8005658 <osThreadNew>
 800072e:	4603      	mov	r3, r0
 8000730:	4a09      	ldr	r2, [pc, #36]	; (8000758 <MX_FREERTOS_Init+0x48>)
 8000732:	6013      	str	r3, [r2, #0]

  /* creation of CM7_ToggleTask */
  CM7_ToggleTaskHandle = osThreadNew(CM7_ToggleSync, NULL, &CM7_ToggleTask_attributes);
 8000734:	4a09      	ldr	r2, [pc, #36]	; (800075c <MX_FREERTOS_Init+0x4c>)
 8000736:	2100      	movs	r1, #0
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <MX_FREERTOS_Init+0x50>)
 800073a:	f004 ff8d 	bl	8005658 <osThreadNew>
 800073e:	4603      	mov	r3, r0
 8000740:	4a08      	ldr	r2, [pc, #32]	; (8000764 <MX_FREERTOS_Init+0x54>)
 8000742:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	08008654 	.word	0x08008654
 800074c:	240000b0 	.word	0x240000b0
 8000750:	0800860c 	.word	0x0800860c
 8000754:	08000769 	.word	0x08000769
 8000758:	240000a8 	.word	0x240000a8
 800075c:	08008630 	.word	0x08008630
 8000760:	08000779 	.word	0x08000779
 8000764:	240000ac 	.word	0x240000ac

08000768 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f005 f803 	bl	800577c <osDelay>
 8000776:	e7fb      	b.n	8000770 <StartDefaultTask+0x8>

08000778 <CM7_ToggleSync>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CM7_ToggleSync */
void CM7_ToggleSync(void *argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CM7_ToggleSync */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f004 fffb 	bl	800577c <osDelay>
 8000786:	e7fb      	b.n	8000780 <CM7_ToggleSync+0x8>

08000788 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	4a1f      	ldr	r2, [pc, #124]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80007f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0xa0>)
 8000816:	f000 fcdb 	bl	80011d0 <HAL_GPIO_Init>

}
 800081a:	bf00      	nop
 800081c:	3720      	adds	r7, #32
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	58024400 	.word	0x58024400
 8000828:	58020000 	.word	0x58020000

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000836:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000838:	bf00      	nop
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <main+0xb0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d004      	beq.n	8000850 <main+0x24>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	1e5a      	subs	r2, r3, #1
 800084a:	607a      	str	r2, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	dcf4      	bgt.n	800083a <main+0xe>
  if ( timeout < 0 )
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	da01      	bge.n	800085a <main+0x2e>
  {
  Error_Handler();
 8000856:	f000 f913 	bl	8000a80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f000 fb71 	bl	8000f40 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LED_Init(myLED);
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <main+0xb4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fb28 	bl	8000eb8 <BSP_LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f83c 	bl	80008e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800086c:	f000 f8ca 	bl	8000a04 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <main+0xb0>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000876:	4a19      	ldr	r2, [pc, #100]	; (80008dc <main+0xb0>)
 8000878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800087c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <main+0xb0>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800088e:	2000      	movs	r0, #0
 8000890:	f000 fe68 	bl	8001564 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000894:	2100      	movs	r1, #0
 8000896:	2000      	movs	r0, #0
 8000898:	f000 fe7e 	bl	8001598 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800089c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a0:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008a2:	bf00      	nop
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <main+0xb0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d104      	bne.n	80008ba <main+0x8e>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	1e5a      	subs	r2, r3, #1
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	dcf4      	bgt.n	80008a4 <main+0x78>
if ( timeout < 0 )
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	da01      	bge.n	80008c4 <main+0x98>
{
Error_Handler();
 80008c0:	f000 f8de 	bl	8000a80 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c4:	f7ff ff60 	bl	8000788 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008c8:	f000 f998 	bl	8000bfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80008cc:	f004 fe7a 	bl	80055c4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80008d0:	f7ff ff1e 	bl	8000710 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008d4:	f004 fe9a 	bl	800560c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <main+0xac>
 80008da:	bf00      	nop
 80008dc:	58024400 	.word	0x58024400
 80008e0:	24000008 	.word	0x24000008

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b09c      	sub	sp, #112	; 0x70
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	224c      	movs	r2, #76	; 0x4c
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fd8e 	bl	8008414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2220      	movs	r2, #32
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f007 fd88 	bl	8008414 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000904:	2004      	movs	r0, #4
 8000906:	f000 fe7f 	bl	8001608 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <SystemClock_Config+0x114>)
 8000910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000912:	4a39      	ldr	r2, [pc, #228]	; (80009f8 <SystemClock_Config+0x114>)
 8000914:	f023 0301 	bic.w	r3, r3, #1
 8000918:	62d3      	str	r3, [r2, #44]	; 0x2c
 800091a:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <SystemClock_Config+0x114>)
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	4b35      	ldr	r3, [pc, #212]	; (80009fc <SystemClock_Config+0x118>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a34      	ldr	r2, [pc, #208]	; (80009fc <SystemClock_Config+0x118>)
 800092a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b32      	ldr	r3, [pc, #200]	; (80009fc <SystemClock_Config+0x118>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800093c:	bf00      	nop
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <SystemClock_Config+0x118>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800094a:	d1f8      	bne.n	800093e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <SystemClock_Config+0x11c>)
 800094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000950:	f023 0303 	bic.w	r3, r3, #3
 8000954:	4a2a      	ldr	r2, [pc, #168]	; (8000a00 <SystemClock_Config+0x11c>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800095c:	230b      	movs	r3, #11
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000966:	2301      	movs	r3, #1
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800096e:	2301      	movs	r3, #1
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	2302      	movs	r3, #2
 8000978:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800097a:	2305      	movs	r3, #5
 800097c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800097e:	2330      	movs	r3, #48	; 0x30
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000986:	2305      	movs	r3, #5
 8000988:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800098e:	2308      	movs	r3, #8
 8000990:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000992:	2300      	movs	r3, #0
 8000994:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fe8c 	bl	80016bc <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009aa:	f000 f869 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	233f      	movs	r3, #63	; 0x3f
 80009b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 faa0 	bl	8001f18 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80009de:	f000 f84f 	bl	8000a80 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009e6:	2100      	movs	r1, #0
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 fc4b 	bl	8002284 <HAL_RCC_MCOConfig>
}
 80009ee:	bf00      	nop
 80009f0:	3770      	adds	r7, #112	; 0x70
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58000400 	.word	0x58000400
 80009fc:	58024800 	.word	0x58024800
 8000a00:	58024400 	.word	0x58024400

08000a04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0b0      	sub	sp, #192	; 0xc0
 8000a08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	22c0      	movs	r2, #192	; 0xc0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f007 fcff 	bl	8008414 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a1a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a20:	230c      	movs	r3, #12
 8000a22:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a30:	23c0      	movs	r3, #192	; 0xc0
 8000a32:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a34:	2320      	movs	r3, #32
 8000a36:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fe9f 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8000a50:	f000 f816 	bl	8000a80 <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	37c0      	adds	r7, #192	; 0xc0
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6e:	f000 faa3 	bl	8000fb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40001400 	.word	0x40001400

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_MspInit+0x48>)
 8000a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_MspInit+0x48>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_MspInit+0x48>)
 8000aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	f06f 0001 	mvn.w	r0, #1
 8000ab8:	f000 fb62 	bl	8001180 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2105      	movs	r1, #5
 8000ac0:	207d      	movs	r0, #125	; 0x7d
 8000ac2:	f000 fb5d 	bl	8001180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000ac6:	207d      	movs	r0, #125	; 0x7d
 8000ac8:	f000 fb74 	bl	80011b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	58024400 	.word	0x58024400

08000ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b090      	sub	sp, #64	; 0x40
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	d827      	bhi.n	8000b36 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	2037      	movs	r0, #55	; 0x37
 8000aec:	f000 fb48 	bl	8001180 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000af0:	2037      	movs	r0, #55	; 0x37
 8000af2:	f000 fb5f 	bl	80011b4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000af6:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <HAL_InitTick+0xc4>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <HAL_InitTick+0xc8>)
 8000afe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b02:	4a27      	ldr	r2, [pc, #156]	; (8000ba0 <HAL_InitTick+0xc8>)
 8000b04:	f043 0320 	orr.w	r3, r3, #32
 8000b08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <HAL_InitTick+0xc8>)
 8000b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b12:	f003 0320 	and.w	r3, r3, #32
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1a:	f107 0210 	add.w	r2, r7, #16
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fded 	bl	8002704 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d106      	bne.n	8000b42 <HAL_InitTick+0x6a>
 8000b34:	e001      	b.n	8000b3a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e02b      	b.n	8000b92 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b3a:	f001 fdb7 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8000b3e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000b40:	e004      	b.n	8000b4c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b42:	f001 fdb3 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8000b46:	4603      	mov	r3, r0
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <HAL_InitTick+0xcc>)
 8000b50:	fba2 2303 	umull	r2, r3, r2, r3
 8000b54:	0c9b      	lsrs	r3, r3, #18
 8000b56:	3b01      	subs	r3, #1
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <HAL_InitTick+0xd0>)
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <HAL_InitTick+0xd4>)
 8000b5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_InitTick+0xd0>)
 8000b62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b66:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b68:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <HAL_InitTick+0xd0>)
 8000b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_InitTick+0xd0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_InitTick+0xd0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000b7a:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <HAL_InitTick+0xd0>)
 8000b7c:	f003 f994 	bl	8003ea8 <HAL_TIM_Base_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d104      	bne.n	8000b90 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <HAL_InitTick+0xd0>)
 8000b88:	f003 f9f0 	bl	8003f6c <HAL_TIM_Base_Start_IT>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	e000      	b.n	8000b92 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3740      	adds	r7, #64	; 0x40
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2400001c 	.word	0x2400001c
 8000ba0:	58024400 	.word	0x58024400
 8000ba4:	431bde83 	.word	0x431bde83
 8000ba8:	240000b4 	.word	0x240000b4
 8000bac:	40001400 	.word	0x40001400

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM7_IRQHandler+0x10>)
 8000be2:	f003 fa3b 	bl	800405c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	240000b4 	.word	0x240000b4

08000bf0 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000bf4:	f000 fce4 	bl	80015c0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <MX_USART1_UART_Init+0x94>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c46:	f003 fc09 	bl	800445c <HAL_UART_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c50:	f7ff ff16 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c58:	f004 fba6 	bl	80053a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f7ff ff0d 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c6a:	f004 fbdb 	bl	8005424 <HAL_UARTEx_SetRxFifoThreshold>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f7ff ff04 	bl	8000a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_USART1_UART_Init+0x90>)
 8000c7a:	f004 fb5c 	bl	8005336 <HAL_UARTEx_DisableFifoMode>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f7ff fefc 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	24000100 	.word	0x24000100
 8000c90:	40011000 	.word	0x40011000

08000c94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0ba      	sub	sp, #232	; 0xe8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	22c0      	movs	r2, #192	; 0xc0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f007 fbad 	bl	8008414 <memset>
  if(uartHandle->Instance==USART1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a25      	ldr	r2, [pc, #148]	; (8000d54 <HAL_UART_MspInit+0xc0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d142      	bne.n	8000d4a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fd58 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cde:	f7ff fecf 	bl	8000a80 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cf2:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_UART_MspInit+0xc4>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_UART_MspInit+0xc8>)
 8000d46:	f000 fa43 	bl	80011d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	37e8      	adds	r7, #232	; 0xe8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40011000 	.word	0x40011000
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	58020000 	.word	0x58020000

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d64:	f7ff fc3e 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	; (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f007 fb0f 	bl	80083b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fd4b 	bl	800082c <main>
  bx  lr
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000da0:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8000da4:	0800870c 	.word	0x0800870c
  ldr r2, =_sbss
 8000da8:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8000dac:	24004bb4 	.word	0x24004bb4

08000db0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC3_IRQHandler>

08000db2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d104      	bne.n	8000dca <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
 8000dc4:	f7ff fe5c 	bl	8000a80 <Error_Handler>
 8000dc8:	e7fe      	b.n	8000dc8 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7a1b      	ldrb	r3, [r3, #8]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d904      	bls.n	8000ddc <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd2:	b672      	cpsid	i
}
 8000dd4:	bf00      	nop
 8000dd6:	f7ff fe53 	bl	8000a80 <Error_Handler>
 8000dda:	e7fe      	b.n	8000dda <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7a1b      	ldrb	r3, [r3, #8]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	b2d1      	uxtb	r1, r2
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	7211      	strb	r1, [r2, #8]
 8000de8:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000dea:	f3ef 8211 	mrs	r2, BASEPRI
 8000dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df2:	f383 8811 	msr	BASEPRI, r3
 8000df6:	f3bf 8f6f 	isb	sy
 8000dfa:	f3bf 8f4f 	dsb	sy
 8000dfe:	60fa      	str	r2, [r7, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d104      	bne.n	8000e2a <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
 8000e24:	f7ff fe2c 	bl	8000a80 <Error_Handler>
 8000e28:	e7fe      	b.n	8000e28 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7a1b      	ldrb	r3, [r3, #8]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7a1b      	ldrb	r3, [r3, #8]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d904      	bls.n	8000e48 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3e:	b672      	cpsid	i
}
 8000e40:	bf00      	nop
 8000e42:	f7ff fe1d 	bl	8000a80 <Error_Handler>
 8000e46:	e7fe      	b.n	8000e46 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7a1b      	ldrb	r3, [r3, #8]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e54:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000e5c:	bf00      	nop
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d104      	bne.n	8000e7e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
 8000e78:	f7ff fe02 	bl	8000a80 <Error_Handler>
 8000e7c:	e7fe      	b.n	8000e7c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff96 	bl	8000db2 <stm32_lock_acquire>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d104      	bne.n	8000ea6 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
 8000ea0:	f7ff fdee 	bl	8000a80 <Error_Handler>
 8000ea4:	e7fe      	b.n	8000ea4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffb2 	bl	8000e12 <stm32_lock_release>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <BSP_LED_Init+0x7c>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <BSP_LED_Init+0x7c>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <BSP_LED_Init+0x7c>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <BSP_LED_Init+0x80>)
 8000ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <BSP_LED_Init+0x84>)
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	f107 0210 	add.w	r2, r7, #16
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f961 	bl	80011d0 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <BSP_LED_Init+0x84>)
 8000f12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <BSP_LED_Init+0x80>)
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	2201      	movs	r2, #1
 8000f22:	4619      	mov	r1, r3
 8000f24:	f000 fb04 	bl	8001530 <HAL_GPIO_WritePin>
 return ret;
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	58024400 	.word	0x58024400
 8000f38:	08008664 	.word	0x08008664
 8000f3c:	2400000c 	.word	0x2400000c

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f000 f90f 	bl	800116a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f4c:	f001 fa04 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_Init+0x68>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	4913      	ldr	r1, [pc, #76]	; (8000fac <HAL_Init+0x6c>)
 8000f5e:	5ccb      	ldrb	r3, [r1, r3]
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	fa22 f303 	lsr.w	r3, r2, r3
 8000f68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_Init+0x68>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_Init+0x6c>)
 8000f74:	5cd3      	ldrb	r3, [r2, r3]
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_Init+0x70>)
 8000f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_Init+0x74>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f7ff fda4 	bl	8000ad8 <HAL_InitTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e002      	b.n	8000fa0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9a:	f7ff fd77 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	58024400 	.word	0x58024400
 8000fac:	080085fc 	.word	0x080085fc
 8000fb0:	24000004 	.word	0x24000004
 8000fb4:	24000000 	.word	0x24000000

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	24000020 	.word	0x24000020
 8000fdc:	2400019c 	.word	0x2400019c

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2400019c 	.word	0x2400019c

08000ff8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetREVID+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0c1b      	lsrs	r3, r3, #16
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	5c001000 	.word	0x5c001000

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	4313      	orrs	r3, r2
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	05fa0000 	.word	0x05fa0000

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4c 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800118e:	f7ff ff63 	bl	8001058 <__NVIC_GetPriorityGrouping>
 8001192:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	6978      	ldr	r0, [r7, #20]
 800119a:	f7ff ffb3 	bl	8001104 <NVIC_EncodePriority>
 800119e:	4602      	mov	r2, r0
 80011a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff82 	bl	80010b0 <__NVIC_SetPriority>
}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff56 	bl	8001074 <__NVIC_EnableIRQ>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011de:	4b89      	ldr	r3, [pc, #548]	; (8001404 <HAL_GPIO_Init+0x234>)
 80011e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011e2:	e194      	b.n	800150e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8186 	beq.w	8001508 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d005      	beq.n	8001214 <HAL_GPIO_Init+0x44>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d130      	bne.n	8001276 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800124a:	2201      	movs	r2, #1
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	f003 0201 	and.w	r2, r3, #1
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b03      	cmp	r3, #3
 8001280:	d017      	beq.n	80012b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d123      	bne.n	8001306 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	69b9      	ldr	r1, [r7, #24]
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0203 	and.w	r2, r3, #3
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80e0 	beq.w	8001508 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x238>)
 800134a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134e:	4a2e      	ldr	r2, [pc, #184]	; (8001408 <HAL_GPIO_Init+0x238>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_GPIO_Init+0x238>)
 800135a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001366:	4a29      	ldr	r2, [pc, #164]	; (800140c <HAL_GPIO_Init+0x23c>)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a20      	ldr	r2, [pc, #128]	; (8001410 <HAL_GPIO_Init+0x240>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d052      	beq.n	8001438 <HAL_GPIO_Init+0x268>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_GPIO_Init+0x244>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d031      	beq.n	80013fe <HAL_GPIO_Init+0x22e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <HAL_GPIO_Init+0x248>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02b      	beq.n	80013fa <HAL_GPIO_Init+0x22a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_GPIO_Init+0x24c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x226>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <HAL_GPIO_Init+0x250>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x222>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_GPIO_Init+0x254>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x21e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <HAL_GPIO_Init+0x258>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x21a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_GPIO_Init+0x25c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x216>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a18      	ldr	r2, [pc, #96]	; (8001430 <HAL_GPIO_Init+0x260>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x212>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_GPIO_Init+0x264>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x20e>
 80013da:	2309      	movs	r3, #9
 80013dc:	e02d      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013de:	230a      	movs	r3, #10
 80013e0:	e02b      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013e2:	2308      	movs	r3, #8
 80013e4:	e029      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e027      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e025      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e023      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e021      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e01f      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e01d      	b.n	800143a <HAL_GPIO_Init+0x26a>
 80013fe:	2301      	movs	r3, #1
 8001400:	e01b      	b.n	800143a <HAL_GPIO_Init+0x26a>
 8001402:	bf00      	nop
 8001404:	58000080 	.word	0x58000080
 8001408:	58024400 	.word	0x58024400
 800140c:	58000400 	.word	0x58000400
 8001410:	58020000 	.word	0x58020000
 8001414:	58020400 	.word	0x58020400
 8001418:	58020800 	.word	0x58020800
 800141c:	58020c00 	.word	0x58020c00
 8001420:	58021000 	.word	0x58021000
 8001424:	58021400 	.word	0x58021400
 8001428:	58021800 	.word	0x58021800
 800142c:	58021c00 	.word	0x58021c00
 8001430:	58022000 	.word	0x58022000
 8001434:	58022400 	.word	0x58022400
 8001438:	2300      	movs	r3, #0
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	f002 0203 	and.w	r2, r2, #3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4093      	lsls	r3, r2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800144a:	4938      	ldr	r1, [pc, #224]	; (800152c <HAL_GPIO_Init+0x35c>)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800147e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	3301      	adds	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	f47f ae63 	bne.w	80011e4 <HAL_GPIO_Init+0x14>
  }
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	3724      	adds	r7, #36	; 0x24
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	58000400 	.word	0x58000400

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_HSEM_FastTake+0x2c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3320      	adds	r3, #32
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_HSEM_FastTake+0x30>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d101      	bne.n	8001580 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	e000      	b.n	8001582 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	58026400 	.word	0x58026400
 8001594:	80000300 	.word	0x80000300

08001598 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80015a2:	4906      	ldr	r1, [pc, #24]	; (80015bc <HAL_HSEM_Release+0x24>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	58026400 	.word	0x58026400

080015c0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_HSEM_IRQHandler+0x30>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_HSEM_IRQHandler+0x30>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	4906      	ldr	r1, [pc, #24]	; (80015f0 <HAL_HSEM_IRQHandler+0x30>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_HSEM_IRQHandler+0x30>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f807 	bl	80015f4 <HAL_HSEM_FreeCallback>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	58026500 	.word	0x58026500

080015f4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	2b06      	cmp	r3, #6
 800161a:	d00a      	beq.n	8001632 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d001      	beq.n	800162e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e040      	b.n	80016b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e03e      	b.n	80016b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800163a:	491f      	ldr	r1, [pc, #124]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4313      	orrs	r3, r2
 8001640:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001642:	f7ff fccd 	bl	8000fe0 <HAL_GetTick>
 8001646:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001648:	e009      	b.n	800165e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800164a:	f7ff fcc9 	bl	8000fe0 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001658:	d901      	bls.n	800165e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e028      	b.n	80016b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166a:	d1ee      	bne.n	800164a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b1e      	cmp	r3, #30
 8001670:	d008      	beq.n	8001684 <HAL_PWREx_ConfigSupply+0x7c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b2e      	cmp	r3, #46	; 0x2e
 8001676:	d005      	beq.n	8001684 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b1d      	cmp	r3, #29
 800167c:	d002      	beq.n	8001684 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b2d      	cmp	r3, #45	; 0x2d
 8001682:	d114      	bne.n	80016ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001684:	f7ff fcac 	bl	8000fe0 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800168a:	e009      	b.n	80016a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800168c:	f7ff fca8 	bl	8000fe0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169a:	d901      	bls.n	80016a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e007      	b.n	80016b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ac:	d1ee      	bne.n	800168c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	58024800 	.word	0x58024800

080016bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	; 0x30
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f000 bc1d 	b.w	8001f0a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 8087 	beq.w	80017ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016de:	4b99      	ldr	r3, [pc, #612]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016e8:	4b96      	ldr	r3, [pc, #600]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d007      	beq.n	8001704 <HAL_RCC_OscConfig+0x48>
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f6:	2b18      	cmp	r3, #24
 80016f8:	d110      	bne.n	800171c <HAL_RCC_OscConfig+0x60>
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d10b      	bne.n	800171c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	4b8f      	ldr	r3, [pc, #572]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d06c      	beq.n	80017ea <HAL_RCC_OscConfig+0x12e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d168      	bne.n	80017ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e3f6      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001724:	d106      	bne.n	8001734 <HAL_RCC_OscConfig+0x78>
 8001726:	4b87      	ldr	r3, [pc, #540]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a86      	ldr	r2, [pc, #536]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e02e      	b.n	8001792 <HAL_RCC_OscConfig+0xd6>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x9a>
 800173c:	4b81      	ldr	r3, [pc, #516]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a80      	ldr	r2, [pc, #512]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b7e      	ldr	r3, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a7d      	ldr	r2, [pc, #500]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e01d      	b.n	8001792 <HAL_RCC_OscConfig+0xd6>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800175e:	d10c      	bne.n	800177a <HAL_RCC_OscConfig+0xbe>
 8001760:	4b78      	ldr	r3, [pc, #480]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a77      	ldr	r2, [pc, #476]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b75      	ldr	r3, [pc, #468]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a74      	ldr	r2, [pc, #464]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e00b      	b.n	8001792 <HAL_RCC_OscConfig+0xd6>
 800177a:	4b72      	ldr	r3, [pc, #456]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a71      	ldr	r2, [pc, #452]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b6f      	ldr	r3, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6e      	ldr	r2, [pc, #440]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800178c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d013      	beq.n	80017c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff fc21 	bl	8000fe0 <HAL_GetTick>
 800179e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a2:	f7ff fc1d 	bl	8000fe0 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	; 0x64
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e3aa      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017b4:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0xe6>
 80017c0:	e014      	b.n	80017ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fc0d 	bl	8000fe0 <HAL_GetTick>
 80017c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ca:	f7ff fc09 	bl	8000fe0 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b64      	cmp	r3, #100	; 0x64
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e396      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017dc:	4b59      	ldr	r3, [pc, #356]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x10e>
 80017e8:	e000      	b.n	80017ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80cb 	beq.w	8001990 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fa:	4b52      	ldr	r3, [pc, #328]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001802:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001804:	4b4f      	ldr	r3, [pc, #316]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <HAL_RCC_OscConfig+0x164>
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	2b18      	cmp	r3, #24
 8001814:	d156      	bne.n	80018c4 <HAL_RCC_OscConfig+0x208>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d151      	bne.n	80018c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001820:	4b48      	ldr	r3, [pc, #288]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x17c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e368      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001838:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 0219 	bic.w	r2, r3, #25
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	493f      	ldr	r1, [pc, #252]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800184a:	f7ff fbc9 	bl	8000fe0 <HAL_GetTick>
 800184e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff fbc5 	bl	8000fe0 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e352      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001864:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	f7ff fbc2 	bl	8000ff8 <HAL_GetREVID>
 8001874:	4603      	mov	r3, r0
 8001876:	f241 0203 	movw	r2, #4099	; 0x1003
 800187a:	4293      	cmp	r3, r2
 800187c:	d817      	bhi.n	80018ae <HAL_RCC_OscConfig+0x1f2>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b40      	cmp	r3, #64	; 0x40
 8001884:	d108      	bne.n	8001898 <HAL_RCC_OscConfig+0x1dc>
 8001886:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800188e:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001896:	e07b      	b.n	8001990 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	031b      	lsls	r3, r3, #12
 80018a6:	4927      	ldr	r1, [pc, #156]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ac:	e070      	b.n	8001990 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	061b      	lsls	r3, r3, #24
 80018bc:	4921      	ldr	r1, [pc, #132]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c2:	e065      	b.n	8001990 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d048      	beq.n	800195e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 0219 	bic.w	r2, r3, #25
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	491a      	ldr	r1, [pc, #104]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff fb7f 	bl	8000fe0 <HAL_GetTick>
 80018e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fb7b 	bl	8000fe0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e308      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	f7ff fb78 	bl	8000ff8 <HAL_GetREVID>
 8001908:	4603      	mov	r3, r0
 800190a:	f241 0203 	movw	r2, #4099	; 0x1003
 800190e:	4293      	cmp	r3, r2
 8001910:	d81a      	bhi.n	8001948 <HAL_RCC_OscConfig+0x28c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2b40      	cmp	r3, #64	; 0x40
 8001918:	d108      	bne.n	800192c <HAL_RCC_OscConfig+0x270>
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	6053      	str	r3, [r2, #4]
 800192a:	e031      	b.n	8001990 <HAL_RCC_OscConfig+0x2d4>
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	031b      	lsls	r3, r3, #12
 800193a:	4902      	ldr	r1, [pc, #8]	; (8001944 <HAL_RCC_OscConfig+0x288>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
 8001940:	e026      	b.n	8001990 <HAL_RCC_OscConfig+0x2d4>
 8001942:	bf00      	nop
 8001944:	58024400 	.word	0x58024400
 8001948:	4b9a      	ldr	r3, [pc, #616]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	061b      	lsls	r3, r3, #24
 8001956:	4997      	ldr	r1, [pc, #604]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e018      	b.n	8001990 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195e:	4b95      	ldr	r3, [pc, #596]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a94      	ldr	r2, [pc, #592]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff fb39 	bl	8000fe0 <HAL_GetTick>
 800196e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001972:	f7ff fb35 	bl	8000fe0 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e2c2      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001984:	4b8b      	ldr	r3, [pc, #556]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80a9 	beq.w	8001af0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199e:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019a8:	4b82      	ldr	r3, [pc, #520]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d007      	beq.n	80019c4 <HAL_RCC_OscConfig+0x308>
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b18      	cmp	r3, #24
 80019b8:	d13a      	bne.n	8001a30 <HAL_RCC_OscConfig+0x374>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d135      	bne.n	8001a30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019c4:	4b7b      	ldr	r3, [pc, #492]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_OscConfig+0x320>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	2b80      	cmp	r3, #128	; 0x80
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e296      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019dc:	f7ff fb0c 	bl	8000ff8 <HAL_GetREVID>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d817      	bhi.n	8001a1a <HAL_RCC_OscConfig+0x35e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x348>
 80019f2:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80019fa:	4a6e      	ldr	r2, [pc, #440]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 80019fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a02:	e075      	b.n	8001af0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a04:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	069b      	lsls	r3, r3, #26
 8001a12:	4968      	ldr	r1, [pc, #416]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a18:	e06a      	b.n	8001af0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a1a:	4b66      	ldr	r3, [pc, #408]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	061b      	lsls	r3, r3, #24
 8001a28:	4962      	ldr	r1, [pc, #392]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a2e:	e05f      	b.n	8001af0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d042      	beq.n	8001abe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a38:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a5d      	ldr	r2, [pc, #372]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff facc 	bl	8000fe0 <HAL_GetTick>
 8001a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fac8 	bl	8000fe0 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e255      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a5e:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a6a:	f7ff fac5 	bl	8000ff8 <HAL_GetREVID>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d817      	bhi.n	8001aa8 <HAL_RCC_OscConfig+0x3ec>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d108      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3d6>
 8001a80:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a88:	4a4a      	ldr	r2, [pc, #296]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a8e:	6053      	str	r3, [r2, #4]
 8001a90:	e02e      	b.n	8001af0 <HAL_RCC_OscConfig+0x434>
 8001a92:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	069b      	lsls	r3, r3, #26
 8001aa0:	4944      	ldr	r1, [pc, #272]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
 8001aa6:	e023      	b.n	8001af0 <HAL_RCC_OscConfig+0x434>
 8001aa8:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	493f      	ldr	r1, [pc, #252]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
 8001abc:	e018      	b.n	8001af0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001abe:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a3c      	ldr	r2, [pc, #240]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fa89 	bl	8000fe0 <HAL_GetTick>
 8001ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fa85 	bl	8000fe0 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e212      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ae4:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d036      	beq.n	8001b6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d019      	beq.n	8001b38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b08:	4a2a      	ldr	r2, [pc, #168]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff fa66 	bl	8000fe0 <HAL_GetTick>
 8001b14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff fa62 	bl	8000fe0 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1ef      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b2a:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x45c>
 8001b36:	e018      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff fa4c 	bl	8000fe0 <HAL_GetTick>
 8001b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fa48 	bl	8000fe0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1d5      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d039      	beq.n	8001bea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fa29 	bl	8000fe0 <HAL_GetTick>
 8001b8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b92:	f7ff fa25 	bl	8000fe0 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e1b2      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_OscConfig+0x4f8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4d6>
 8001bb0:	e01b      	b.n	8001bea <HAL_RCC_OscConfig+0x52e>
 8001bb2:	bf00      	nop
 8001bb4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bb8:	4b9b      	ldr	r3, [pc, #620]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a9a      	ldr	r2, [pc, #616]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fa0c 	bl	8000fe0 <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bcc:	f7ff fa08 	bl	8000fe0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e195      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bde:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8081 	beq.w	8001cfa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bf8:	4b8c      	ldr	r3, [pc, #560]	; (8001e2c <HAL_RCC_OscConfig+0x770>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a8b      	ldr	r2, [pc, #556]	; (8001e2c <HAL_RCC_OscConfig+0x770>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c04:	f7ff f9ec 	bl	8000fe0 <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c0c:	f7ff f9e8 	bl	8000fe0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e175      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1e:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_RCC_OscConfig+0x770>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x584>
 8001c32:	4b7d      	ldr	r3, [pc, #500]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a7c      	ldr	r2, [pc, #496]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	e02d      	b.n	8001c9c <HAL_RCC_OscConfig+0x5e0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5a6>
 8001c48:	4b77      	ldr	r3, [pc, #476]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	4a76      	ldr	r2, [pc, #472]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	6713      	str	r3, [r2, #112]	; 0x70
 8001c54:	4b74      	ldr	r3, [pc, #464]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	4a73      	ldr	r2, [pc, #460]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c5a:	f023 0304 	bic.w	r3, r3, #4
 8001c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c60:	e01c      	b.n	8001c9c <HAL_RCC_OscConfig+0x5e0>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x5c8>
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a6e      	ldr	r2, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70
 8001c76:	4b6c      	ldr	r3, [pc, #432]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7a:	4a6b      	ldr	r2, [pc, #428]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6713      	str	r3, [r2, #112]	; 0x70
 8001c82:	e00b      	b.n	8001c9c <HAL_RCC_OscConfig+0x5e0>
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a64      	ldr	r2, [pc, #400]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001c96:	f023 0304 	bic.w	r3, r3, #4
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d015      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f99c 	bl	8000fe0 <HAL_GetTick>
 8001ca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7ff f998 	bl	8000fe0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e123      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cc2:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0ee      	beq.n	8001cac <HAL_RCC_OscConfig+0x5f0>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff f986 	bl	8000fe0 <HAL_GetTick>
 8001cd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f982 	bl	8000fe0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e10d      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cee:	4b4e      	ldr	r3, [pc, #312]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ee      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8102 	beq.w	8001f08 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d04:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d0c:	2b18      	cmp	r3, #24
 8001d0e:	f000 80bd 	beq.w	8001e8c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	f040 809e 	bne.w	8001e58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1c:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a41      	ldr	r2, [pc, #260]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f95a 	bl	8000fe0 <HAL_GetTick>
 8001d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f956 	bl	8000fe0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0e3      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d52:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <HAL_RCC_OscConfig+0x774>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	430a      	orrs	r2, r1
 8001d62:	4931      	ldr	r1, [pc, #196]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	628b      	str	r3, [r1, #40]	; 0x28
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	3b01      	subs	r3, #1
 8001d78:	025b      	lsls	r3, r3, #9
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	3b01      	subs	r3, #1
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	3b01      	subs	r3, #1
 8001d92:	061b      	lsls	r3, r3, #24
 8001d94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d98:	4923      	ldr	r1, [pc, #140]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001daa:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_RCC_OscConfig+0x778>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001db6:	00d2      	lsls	r2, r2, #3
 8001db8:	491b      	ldr	r1, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	f023 020c 	bic.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4917      	ldr	r1, [pc, #92]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	f023 0202 	bic.w	r2, r3, #2
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	4912      	ldr	r1, [pc, #72]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_RCC_OscConfig+0x76c>)
 8001e18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7ff f8df 	bl	8000fe0 <HAL_GetTick>
 8001e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e24:	e011      	b.n	8001e4a <HAL_RCC_OscConfig+0x78e>
 8001e26:	bf00      	nop
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	58024800 	.word	0x58024800
 8001e30:	fffffc0c 	.word	0xfffffc0c
 8001e34:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff f8d2 	bl	8000fe0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e05f      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_RCC_OscConfig+0x858>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x77c>
 8001e56:	e057      	b.n	8001f08 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_RCC_OscConfig+0x858>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <HAL_RCC_OscConfig+0x858>)
 8001e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff f8bc 	bl	8000fe0 <HAL_GetTick>
 8001e68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f8b8 	bl	8000fe0 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e045      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_RCC_OscConfig+0x858>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x7b0>
 8001e8a:	e03d      	b.n	8001f08 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_OscConfig+0x858>)
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_RCC_OscConfig+0x858>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d031      	beq.n	8001f04 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f003 0203 	and.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d12a      	bne.n	8001f04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d122      	bne.n	8001f04 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d11a      	bne.n	8001f04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0a5b      	lsrs	r3, r3, #9
 8001ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d111      	bne.n	8001f04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0c1b      	lsrs	r3, r3, #16
 8001ee4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d108      	bne.n	8001f04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	0e1b      	lsrs	r3, r3, #24
 8001ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3730      	adds	r7, #48	; 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	58024400 	.word	0x58024400

08001f18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e19c      	b.n	8002266 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b8a      	ldr	r3, [pc, #552]	; (8002158 <HAL_RCC_ClockConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b87      	ldr	r3, [pc, #540]	; (8002158 <HAL_RCC_ClockConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 020f 	bic.w	r2, r3, #15
 8001f42:	4985      	ldr	r1, [pc, #532]	; (8002158 <HAL_RCC_ClockConfig+0x240>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b83      	ldr	r3, [pc, #524]	; (8002158 <HAL_RCC_ClockConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e184      	b.n	8002266 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d010      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	4b7b      	ldr	r3, [pc, #492]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d908      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f78:	4b78      	ldr	r3, [pc, #480]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	4975      	ldr	r1, [pc, #468]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d010      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	4b70      	ldr	r3, [pc, #448]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d908      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	496a      	ldr	r1, [pc, #424]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d010      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	4b64      	ldr	r3, [pc, #400]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d908      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fd4:	4b61      	ldr	r3, [pc, #388]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	495e      	ldr	r1, [pc, #376]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d010      	beq.n	8002014 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d908      	bls.n	8002014 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002002:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4953      	ldr	r1, [pc, #332]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8002010:	4313      	orrs	r3, r2
 8002012:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	4b4d      	ldr	r3, [pc, #308]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	429a      	cmp	r2, r3
 800202e:	d908      	bls.n	8002042 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f023 020f 	bic.w	r2, r3, #15
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4947      	ldr	r1, [pc, #284]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 800203e:	4313      	orrs	r3, r2
 8002040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d055      	beq.n	80020fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800204e:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4940      	ldr	r1, [pc, #256]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 800205c:	4313      	orrs	r3, r2
 800205e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d107      	bne.n	8002078 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002068:	4b3c      	ldr	r3, [pc, #240]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d121      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0f6      	b.n	8002266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d107      	bne.n	8002090 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d115      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0ea      	b.n	8002266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0de      	b.n	8002266 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0d6      	b.n	8002266 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020b8:	4b28      	ldr	r3, [pc, #160]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f023 0207 	bic.w	r2, r3, #7
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4925      	ldr	r1, [pc, #148]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7fe ff89 	bl	8000fe0 <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f7fe ff85 	bl	8000fe0 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e0be      	b.n	8002266 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d1eb      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d010      	beq.n	8002128 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	429a      	cmp	r2, r3
 8002114:	d208      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f023 020f 	bic.w	r2, r3, #15
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	490e      	ldr	r1, [pc, #56]	; (800215c <HAL_RCC_ClockConfig+0x244>)
 8002124:	4313      	orrs	r3, r2
 8002126:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_ClockConfig+0x240>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d214      	bcs.n	8002160 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_RCC_ClockConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 020f 	bic.w	r2, r3, #15
 800213e:	4906      	ldr	r1, [pc, #24]	; (8002158 <HAL_RCC_ClockConfig+0x240>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <HAL_RCC_ClockConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e086      	b.n	8002266 <HAL_RCC_ClockConfig+0x34e>
 8002158:	52002000 	.word	0x52002000
 800215c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d010      	beq.n	800218e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002178:	429a      	cmp	r2, r3
 800217a:	d208      	bcs.n	800218e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800217c:	4b3c      	ldr	r3, [pc, #240]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	4939      	ldr	r1, [pc, #228]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 800218a:	4313      	orrs	r3, r2
 800218c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d010      	beq.n	80021bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	4b34      	ldr	r3, [pc, #208]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d208      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021aa:	4b31      	ldr	r3, [pc, #196]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	492e      	ldr	r1, [pc, #184]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d010      	beq.n	80021ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d208      	bcs.n	80021ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4922      	ldr	r1, [pc, #136]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d010      	beq.n	8002218 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002202:	429a      	cmp	r2, r3
 8002204:	d208      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4917      	ldr	r1, [pc, #92]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 8002214:	4313      	orrs	r3, r2
 8002216:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002218:	f000 f89e 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	4912      	ldr	r1, [pc, #72]	; (8002274 <HAL_RCC_ClockConfig+0x35c>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_RCC_ClockConfig+0x358>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <HAL_RCC_ClockConfig+0x35c>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_RCC_ClockConfig+0x360>)
 800224e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_RCC_ClockConfig+0x364>)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x368>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fc3c 	bl	8000ad8 <HAL_InitTick>
 8002260:	4603      	mov	r3, r0
 8002262:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	58024400 	.word	0x58024400
 8002274:	080085fc 	.word	0x080085fc
 8002278:	24000004 	.word	0x24000004
 800227c:	24000000 	.word	0x24000000
 8002280:	2400001c 	.word	0x2400001c

08002284 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d12a      	bne.n	80022ec <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_MCOConfig+0xc8>)
 8002298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229c:	4a2b      	ldr	r2, [pc, #172]	; (800234c <HAL_RCC_MCOConfig+0xc8>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_RCC_MCOConfig+0xc8>)
 80022a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80022b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80022ca:	f107 031c 	add.w	r3, r7, #28
 80022ce:	4619      	mov	r1, r3
 80022d0:	481f      	ldr	r0, [pc, #124]	; (8002350 <HAL_RCC_MCOConfig+0xcc>)
 80022d2:	f7fe ff7d 	bl	80011d0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCC_MCOConfig+0xc8>)
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	430b      	orrs	r3, r1
 80022e4:	4919      	ldr	r1, [pc, #100]	; (800234c <HAL_RCC_MCOConfig+0xc8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80022ea:	e02a      	b.n	8002342 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <HAL_RCC_MCOConfig+0xc8>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f2:	4a16      	ldr	r2, [pc, #88]	; (800234c <HAL_RCC_MCOConfig+0xc8>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_RCC_MCOConfig+0xc8>)
 80022fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800230a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002320:	f107 031c 	add.w	r3, r7, #28
 8002324:	4619      	mov	r1, r3
 8002326:	480b      	ldr	r0, [pc, #44]	; (8002354 <HAL_RCC_MCOConfig+0xd0>)
 8002328:	f7fe ff52 	bl	80011d0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_RCC_MCOConfig+0xc8>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	01d9      	lsls	r1, r3, #7
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	430b      	orrs	r3, r1
 800233c:	4903      	ldr	r1, [pc, #12]	; (800234c <HAL_RCC_MCOConfig+0xc8>)
 800233e:	4313      	orrs	r3, r2
 8002340:	610b      	str	r3, [r1, #16]
}
 8002342:	bf00      	nop
 8002344:	3730      	adds	r7, #48	; 0x30
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	58024400 	.word	0x58024400
 8002350:	58020000 	.word	0x58020000
 8002354:	58020800 	.word	0x58020800

08002358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800235e:	4bb3      	ldr	r3, [pc, #716]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002366:	2b18      	cmp	r3, #24
 8002368:	f200 8155 	bhi.w	8002616 <HAL_RCC_GetSysClockFreq+0x2be>
 800236c:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <HAL_RCC_GetSysClockFreq+0x1c>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	080023d9 	.word	0x080023d9
 8002378:	08002617 	.word	0x08002617
 800237c:	08002617 	.word	0x08002617
 8002380:	08002617 	.word	0x08002617
 8002384:	08002617 	.word	0x08002617
 8002388:	08002617 	.word	0x08002617
 800238c:	08002617 	.word	0x08002617
 8002390:	08002617 	.word	0x08002617
 8002394:	080023ff 	.word	0x080023ff
 8002398:	08002617 	.word	0x08002617
 800239c:	08002617 	.word	0x08002617
 80023a0:	08002617 	.word	0x08002617
 80023a4:	08002617 	.word	0x08002617
 80023a8:	08002617 	.word	0x08002617
 80023ac:	08002617 	.word	0x08002617
 80023b0:	08002617 	.word	0x08002617
 80023b4:	08002405 	.word	0x08002405
 80023b8:	08002617 	.word	0x08002617
 80023bc:	08002617 	.word	0x08002617
 80023c0:	08002617 	.word	0x08002617
 80023c4:	08002617 	.word	0x08002617
 80023c8:	08002617 	.word	0x08002617
 80023cc:	08002617 	.word	0x08002617
 80023d0:	08002617 	.word	0x08002617
 80023d4:	0800240b 	.word	0x0800240b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023d8:	4b94      	ldr	r3, [pc, #592]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023e4:	4b91      	ldr	r3, [pc, #580]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	08db      	lsrs	r3, r3, #3
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	4a90      	ldr	r2, [pc, #576]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
 80023f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023f6:	e111      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023f8:	4b8d      	ldr	r3, [pc, #564]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023fa:	61bb      	str	r3, [r7, #24]
    break;
 80023fc:	e10e      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023fe:	4b8d      	ldr	r3, [pc, #564]	; (8002634 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002400:	61bb      	str	r3, [r7, #24]
    break;
 8002402:	e10b      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002404:	4b8c      	ldr	r3, [pc, #560]	; (8002638 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002406:	61bb      	str	r3, [r7, #24]
    break;
 8002408:	e108      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800240a:	4b88      	ldr	r3, [pc, #544]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002414:	4b85      	ldr	r3, [pc, #532]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800241e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002420:	4b82      	ldr	r3, [pc, #520]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800242a:	4b80      	ldr	r3, [pc, #512]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	08db      	lsrs	r3, r3, #3
 8002430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002442:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80e1 	beq.w	8002610 <HAL_RCC_GetSysClockFreq+0x2b8>
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b02      	cmp	r3, #2
 8002452:	f000 8083 	beq.w	800255c <HAL_RCC_GetSysClockFreq+0x204>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b02      	cmp	r3, #2
 800245a:	f200 80a1 	bhi.w	80025a0 <HAL_RCC_GetSysClockFreq+0x248>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x114>
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d056      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x1c0>
 800246a:	e099      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800246c:	4b6f      	ldr	r3, [pc, #444]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d02d      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002478:	4b6c      	ldr	r3, [pc, #432]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	08db      	lsrs	r3, r3, #3
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	4a6b      	ldr	r2, [pc, #428]	; (8002630 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
 8002488:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a2:	4b62      	ldr	r3, [pc, #392]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800263c <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024d2:	e087      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002640 <HAL_RCC_GetSysClockFreq+0x2e8>
 80024e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e6:	4b51      	ldr	r3, [pc, #324]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800263c <HAL_RCC_GetSysClockFreq+0x2e4>
 80024fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800250a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002516:	e065      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002644 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252a:	4b40      	ldr	r3, [pc, #256]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253a:	ed97 6a02 	vldr	s12, [r7, #8]
 800253e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800263c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800254a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800254e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800255a:	e043      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002566:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002648 <HAL_RCC_GetSysClockFreq+0x2f0>
 800256a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800256e:	4b2f      	ldr	r3, [pc, #188]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002582:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800263c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800258a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800258e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800259e:	e021      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002644 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800263c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	0a5b      	lsrs	r3, r3, #9
 80025ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025ee:	3301      	adds	r3, #1
 80025f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002608:	ee17 3a90 	vmov	r3, s15
 800260c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800260e:	e005      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
    break;
 8002614:	e002      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002618:	61bb      	str	r3, [r7, #24]
    break;
 800261a:	bf00      	nop
  }

  return sysclockfreq;
 800261c:	69bb      	ldr	r3, [r7, #24]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	; 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	58024400 	.word	0x58024400
 8002630:	03d09000 	.word	0x03d09000
 8002634:	003d0900 	.word	0x003d0900
 8002638:	017d7840 	.word	0x017d7840
 800263c:	46000000 	.word	0x46000000
 8002640:	4c742400 	.word	0x4c742400
 8002644:	4a742400 	.word	0x4a742400
 8002648:	4bbebc20 	.word	0x4bbebc20

0800264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002652:	f7ff fe81 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002656:	4602      	mov	r2, r0
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_RCC_GetHCLKFreq+0x50>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	490f      	ldr	r1, [pc, #60]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002664:	5ccb      	ldrb	r3, [r1, r3]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_RCC_GetHCLKFreq+0x50>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002688:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	58024400 	.word	0x58024400
 80026a0:	080085fc 	.word	0x080085fc
 80026a4:	24000004 	.word	0x24000004
 80026a8:	24000000 	.word	0x24000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80026b0:	f7ff ffcc 	bl	800264c <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4904      	ldr	r1, [pc, #16]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	58024400 	.word	0x58024400
 80026d4:	080085fc 	.word	0x080085fc

080026d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80026dc:	f7ff ffb6 	bl	800264c <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4904      	ldr	r1, [pc, #16]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	58024400 	.word	0x58024400
 8002700:	080085fc 	.word	0x080085fc

08002704 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	223f      	movs	r2, #63	; 0x3f
 8002712:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_RCC_GetClockConfig+0x7c>)
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f003 0207 	and.w	r2, r3, #7
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002720:	4b17      	ldr	r3, [pc, #92]	; (8002780 <HAL_RCC_GetClockConfig+0x7c>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <HAL_RCC_GetClockConfig+0x7c>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 020f 	and.w	r2, r3, #15
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_RCC_GetClockConfig+0x7c>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <HAL_RCC_GetClockConfig+0x7c>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_GetClockConfig+0x7c>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_RCC_GetClockConfig+0x7c>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_GetClockConfig+0x80>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 020f 	and.w	r2, r3, #15
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	601a      	str	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	58024400 	.word	0x58024400
 8002784:	52002000 	.word	0x52002000

08002788 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002790:	2300      	movs	r3, #0
 8002792:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002794:	2300      	movs	r3, #0
 8002796:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d03f      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027ac:	d02a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027b2:	d824      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b8:	d018      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027be:	d81e      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c8:	d007      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027ca:	e018      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027cc:	4ba3      	ldr	r3, [pc, #652]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	4aa2      	ldr	r2, [pc, #648]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027d8:	e015      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3304      	adds	r3, #4
 80027de:	2102      	movs	r1, #2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 f9fd 	bl	8003be0 <RCCEx_PLL2_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027ea:	e00c      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3324      	adds	r3, #36	; 0x24
 80027f0:	2102      	movs	r1, #2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f001 faa6 	bl	8003d44 <RCCEx_PLL3_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027fc:	e003      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
      break;
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800280c:	4b93      	ldr	r3, [pc, #588]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800280e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002818:	4990      	ldr	r1, [pc, #576]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	650b      	str	r3, [r1, #80]	; 0x50
 800281e:	e001      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03d      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	2b04      	cmp	r3, #4
 8002836:	d826      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002855 	.word	0x08002855
 8002844:	08002863 	.word	0x08002863
 8002848:	08002875 	.word	0x08002875
 800284c:	0800288d 	.word	0x0800288d
 8002850:	0800288d 	.word	0x0800288d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002854:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	4a80      	ldr	r2, [pc, #512]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002860:	e015      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f001 f9b9 	bl	8003be0 <RCCEx_PLL2_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002872:	e00c      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f001 fa62 	bl	8003d44 <RCCEx_PLL3_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002884:	e003      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
      break;
 800288a:	e000      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800288c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002894:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002898:	f023 0207 	bic.w	r2, r3, #7
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	496e      	ldr	r1, [pc, #440]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	650b      	str	r3, [r1, #80]	; 0x50
 80028a6:	e001      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d042      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c0:	d02b      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80028c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c6:	d825      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028c8:	2bc0      	cmp	r3, #192	; 0xc0
 80028ca:	d028      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80028cc:	2bc0      	cmp	r3, #192	; 0xc0
 80028ce:	d821      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d016      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d81d      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d007      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80028e0:	e018      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e2:	4b5e      	ldr	r3, [pc, #376]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028ee:	e017      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 f972 	bl	8003be0 <RCCEx_PLL2_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002900:	e00e      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3324      	adds	r3, #36	; 0x24
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f001 fa1b 	bl	8003d44 <RCCEx_PLL3_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002912:	e005      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	75fb      	strb	r3, [r7, #23]
      break;
 8002918:	e002      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800291a:	bf00      	nop
 800291c:	e000      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800291e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002920:	7dfb      	ldrb	r3, [r7, #23]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002926:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002932:	494a      	ldr	r1, [pc, #296]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	650b      	str	r3, [r1, #80]	; 0x50
 8002938:	e001      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	2b00      	cmp	r3, #0
 8002948:	d049      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002950:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002954:	d030      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800295a:	d82a      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800295c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002960:	d02c      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002962:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002966:	d824      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296c:	d018      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800296e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002972:	d81e      	bhi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800297c:	d007      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800297e:	e018      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002980:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4a35      	ldr	r2, [pc, #212]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800298c:	e017      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3304      	adds	r3, #4
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f001 f923 	bl	8003be0 <RCCEx_PLL2_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800299e:	e00e      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3324      	adds	r3, #36	; 0x24
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 f9cc 	bl	8003d44 <RCCEx_PLL3_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b0:	e005      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
      break;
 80029b6:	e002      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029b8:	bf00      	nop
 80029ba:	e000      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029d2:	4922      	ldr	r1, [pc, #136]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	658b      	str	r3, [r1, #88]	; 0x58
 80029d8:	e001      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d04b      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f4:	d030      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80029f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029fa:	d82a      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a00:	d02e      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002a02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a06:	d824      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a0c:	d018      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a12:	d81e      	bhi.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d007      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a1e:	e018      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a2c:	e019      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f8d3 	bl	8003be0 <RCCEx_PLL2_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a3e:	e010      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3324      	adds	r3, #36	; 0x24
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 f97c 	bl	8003d44 <RCCEx_PLL3_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a50:	e007      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
      break;
 8002a56:	e004      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002a58:	bf00      	nop
 8002a5a:	e002      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002a5c:	58024400 	.word	0x58024400
      break;
 8002a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a68:	4b99      	ldr	r3, [pc, #612]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a76:	4996      	ldr	r1, [pc, #600]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	658b      	str	r3, [r1, #88]	; 0x58
 8002a7c:	e001      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]
 8002a80:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d032      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	2b30      	cmp	r3, #48	; 0x30
 8002a94:	d01c      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002a96:	2b30      	cmp	r3, #48	; 0x30
 8002a98:	d817      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d813      	bhi.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d10f      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aaa:	4b89      	ldr	r3, [pc, #548]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	4a88      	ldr	r2, [pc, #544]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ab6:	e00e      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	2102      	movs	r1, #2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f001 f88e 	bl	8003be0 <RCCEx_PLL2_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ac8:	e005      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002ad0:	bf00      	nop
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002adc:	4b7c      	ldr	r3, [pc, #496]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae8:	4979      	ldr	r1, [pc, #484]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002aee:	e001      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d047      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b08:	d030      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b0e:	d82a      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b14:	d02c      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b1a:	d824      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b20:	d018      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b26:	d81e      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b30:	d007      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002b32:	e018      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b34:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b40:	e017      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 f849 	bl	8003be0 <RCCEx_PLL2_Config>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b52:	e00e      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3324      	adds	r3, #36	; 0x24
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 f8f2 	bl	8003d44 <RCCEx_PLL3_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b64:	e005      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6a:	e002      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b78:	4b55      	ldr	r3, [pc, #340]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b84:	4952      	ldr	r1, [pc, #328]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	650b      	str	r3, [r1, #80]	; 0x50
 8002b8a:	e001      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d049      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba4:	d02e      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002baa:	d828      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bb0:	d02a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002bb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bb6:	d822      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bbc:	d026      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002bbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bc2:	d81c      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc8:	d010      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bce:	d816      	bhi.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01d      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd8:	d111      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fffd 	bl	8003be0 <RCCEx_PLL2_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bea:	e012      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3324      	adds	r3, #36	; 0x24
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 f8a6 	bl	8003d44 <RCCEx_PLL3_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bfc:	e009      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
      break;
 8002c02:	e006      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c04:	bf00      	nop
 8002c06:	e004      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c08:	bf00      	nop
 8002c0a:	e002      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c24:	492a      	ldr	r1, [pc, #168]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	650b      	str	r3, [r1, #80]	; 0x50
 8002c2a:	e001      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d04d      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c46:	d02e      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c4c:	d828      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d02a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d822      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c5e:	d026      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002c60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c64:	d81c      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c6a:	d010      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c70:	d816      	bhi.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01d      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c7a:	d111      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 ffac 	bl	8003be0 <RCCEx_PLL2_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c8c:	e012      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3324      	adds	r3, #36	; 0x24
 8002c92:	2101      	movs	r1, #1
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 f855 	bl	8003d44 <RCCEx_PLL3_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c9e:	e009      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca4:	e006      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002caa:	bf00      	nop
 8002cac:	e002      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cc8:	4901      	ldr	r1, [pc, #4]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	658b      	str	r3, [r1, #88]	; 0x58
 8002cce:	e003      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002cd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d022      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf0:	d108      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 ff71 	bl	8003be0 <RCCEx_PLL2_Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002d02:	e003      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	75fb      	strb	r3, [r7, #23]
      break;
 8002d08:	e000      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      break;
 8002d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002d12:	4b82      	ldr	r3, [pc, #520]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	497f      	ldr	r1, [pc, #508]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d24:	e001      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d02f      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d3e:	d00e      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8002d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d44:	d814      	bhi.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d015      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8002d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d4e:	d10f      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d50:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	4a71      	ldr	r2, [pc, #452]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d5c:	e00c      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 ff3b 	bl	8003be0 <RCCEx_PLL2_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d6e:	e003      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
      break;
 8002d74:	e000      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      break;
 8002d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d7e:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4964      	ldr	r1, [pc, #400]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	650b      	str	r3, [r1, #80]	; 0x50
 8002d90:	e001      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d031      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x67e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d81a      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8002daa:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002de7 	.word	0x08002de7
 8002db4:	08002dc1 	.word	0x08002dc1
 8002db8:	08002dcf 	.word	0x08002dcf
 8002dbc:	08002de7 	.word	0x08002de7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc0:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a55      	ldr	r2, [pc, #340]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002dcc:	e00c      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x660>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 ff03 	bl	8003be0 <RCCEx_PLL2_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002dde:	e003      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
      break;
 8002de4:	e000      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      break;
 8002de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dee:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	f023 0203 	bic.w	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	4948      	ldr	r1, [pc, #288]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e00:	e001      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 808c 	beq.w	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e14:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a41      	ldr	r2, [pc, #260]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e20:	f7fe f8de 	bl	8000fe0 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e26:	e009      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e28:	f7fe f8da 	bl	8000fe0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d902      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      {
        ret = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	75fb      	strb	r3, [r7, #23]
        break;
 8002e3a:	e005      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e3c:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ef      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      }
    }

    if(ret == HAL_OK)
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d16c      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e4e:	4b33      	ldr	r3, [pc, #204]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002e50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e58:	4053      	eors	r3, r2
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d013      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	4a2a      	ldr	r2, [pc, #168]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e78:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a27      	ldr	r2, [pc, #156]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e84:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e94:	d115      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fe f8a3 	bl	8000fe0 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e9c:	e00b      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fe f89f 	bl	8000fe0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d902      	bls.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x72e>
          {
            ret = HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	75fb      	strb	r3, [r7, #23]
            break;
 8002eb4:	e005      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ed      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x716>
          }
        }
      }

      if(ret == HAL_OK)
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d126      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ee6:	0919      	lsrs	r1, r3, #4
 8002ee8:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8002eea:	400b      	ands	r3, r1
 8002eec:	490b      	ldr	r1, [pc, #44]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	610b      	str	r3, [r1, #16]
 8002ef2:	e005      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x778>
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002efa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002efe:	6113      	str	r3, [r2, #16]
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002f02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0e:	4903      	ldr	r1, [pc, #12]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	670b      	str	r3, [r1, #112]	; 0x70
 8002f14:	e00a      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	75bb      	strb	r3, [r7, #22]
 8002f1a:	e007      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	58024800 	.word	0x58024800
 8002f24:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d07e      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3c:	2b28      	cmp	r3, #40	; 0x28
 8002f3e:	d867      	bhi.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08003017 	.word	0x08003017
 8002f4c:	08003011 	.word	0x08003011
 8002f50:	08003011 	.word	0x08003011
 8002f54:	08003011 	.word	0x08003011
 8002f58:	08003011 	.word	0x08003011
 8002f5c:	08003011 	.word	0x08003011
 8002f60:	08003011 	.word	0x08003011
 8002f64:	08003011 	.word	0x08003011
 8002f68:	08002fed 	.word	0x08002fed
 8002f6c:	08003011 	.word	0x08003011
 8002f70:	08003011 	.word	0x08003011
 8002f74:	08003011 	.word	0x08003011
 8002f78:	08003011 	.word	0x08003011
 8002f7c:	08003011 	.word	0x08003011
 8002f80:	08003011 	.word	0x08003011
 8002f84:	08003011 	.word	0x08003011
 8002f88:	08002fff 	.word	0x08002fff
 8002f8c:	08003011 	.word	0x08003011
 8002f90:	08003011 	.word	0x08003011
 8002f94:	08003011 	.word	0x08003011
 8002f98:	08003011 	.word	0x08003011
 8002f9c:	08003011 	.word	0x08003011
 8002fa0:	08003011 	.word	0x08003011
 8002fa4:	08003011 	.word	0x08003011
 8002fa8:	08003017 	.word	0x08003017
 8002fac:	08003011 	.word	0x08003011
 8002fb0:	08003011 	.word	0x08003011
 8002fb4:	08003011 	.word	0x08003011
 8002fb8:	08003011 	.word	0x08003011
 8002fbc:	08003011 	.word	0x08003011
 8002fc0:	08003011 	.word	0x08003011
 8002fc4:	08003011 	.word	0x08003011
 8002fc8:	08003017 	.word	0x08003017
 8002fcc:	08003011 	.word	0x08003011
 8002fd0:	08003011 	.word	0x08003011
 8002fd4:	08003011 	.word	0x08003011
 8002fd8:	08003011 	.word	0x08003011
 8002fdc:	08003011 	.word	0x08003011
 8002fe0:	08003011 	.word	0x08003011
 8002fe4:	08003011 	.word	0x08003011
 8002fe8:	08003017 	.word	0x08003017
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fdf4 	bl	8003be0 <RCCEx_PLL2_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002ffc:	e00c      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x890>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3324      	adds	r3, #36	; 0x24
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fe9d 	bl	8003d44 <RCCEx_PLL3_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800300e:	e003      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x890>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]
      break;
 8003014:	e000      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x890>
      break;
 8003016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800301e:	4b96      	ldr	r3, [pc, #600]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302a:	4993      	ldr	r1, [pc, #588]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800302c:	4313      	orrs	r3, r2
 800302e:	654b      	str	r3, [r1, #84]	; 0x54
 8003030:	e001      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d037      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003046:	2b05      	cmp	r3, #5
 8003048:	d820      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x904>
 800304a:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	08003093 	.word	0x08003093
 8003054:	08003069 	.word	0x08003069
 8003058:	0800307b 	.word	0x0800307b
 800305c:	08003093 	.word	0x08003093
 8003060:	08003093 	.word	0x08003093
 8003064:	08003093 	.word	0x08003093
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fdb6 	bl	8003be0 <RCCEx_PLL2_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003078:	e00c      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x90c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3324      	adds	r3, #36	; 0x24
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fe5f 	bl	8003d44 <RCCEx_PLL3_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800308a:	e003      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	75fb      	strb	r3, [r7, #23]
      break;
 8003090:	e000      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      break;
 8003092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800309a:	4b77      	ldr	r3, [pc, #476]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f023 0207 	bic.w	r2, r3, #7
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a6:	4974      	ldr	r1, [pc, #464]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	654b      	str	r3, [r1, #84]	; 0x54
 80030ac:	e001      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d03a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d821      	bhi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x984>
 80030c8:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <HAL_RCCEx_PeriphCLKConfig+0x948>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	08003113 	.word	0x08003113
 80030d4:	080030e9 	.word	0x080030e9
 80030d8:	080030fb 	.word	0x080030fb
 80030dc:	08003113 	.word	0x08003113
 80030e0:	08003113 	.word	0x08003113
 80030e4:	08003113 	.word	0x08003113
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	2101      	movs	r1, #1
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fd76 	bl	8003be0 <RCCEx_PLL2_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030f8:	e00c      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x98c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3324      	adds	r3, #36	; 0x24
 80030fe:	2101      	movs	r1, #1
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fe1f 	bl	8003d44 <RCCEx_PLL3_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800310a:	e003      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	75fb      	strb	r3, [r7, #23]
      break;
 8003110:	e000      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      break;
 8003112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003114:	7dfb      	ldrb	r3, [r7, #23]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800311a:	4b57      	ldr	r3, [pc, #348]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	f023 0207 	bic.w	r2, r3, #7
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003128:	4953      	ldr	r1, [pc, #332]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800312a:	4313      	orrs	r3, r2
 800312c:	658b      	str	r3, [r1, #88]	; 0x58
 800312e:	e001      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d04b      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314a:	d02e      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xa22>
 800314c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003150:	d828      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003156:	d02a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8003158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315c:	d822      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800315e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003162:	d026      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8003164:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003168:	d81c      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800316a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800316e:	d010      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003174:	d816      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01d      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 800317a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800317e:	d111      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fd2a 	bl	8003be0 <RCCEx_PLL2_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003190:	e012      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3324      	adds	r3, #36	; 0x24
 8003196:	2102      	movs	r1, #2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fdd3 	bl	8003d44 <RCCEx_PLL3_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80031a2:	e009      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
      break;
 80031a8:	e006      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80031aa:	bf00      	nop
 80031ac:	e004      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80031ae:	bf00      	nop
 80031b0:	e002      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80031b2:	bf00      	nop
 80031b4:	e000      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80031b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031be:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	492a      	ldr	r1, [pc, #168]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	654b      	str	r3, [r1, #84]	; 0x54
 80031d2:	e001      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d04d      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031ee:	d02e      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xac6>
 80031f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031f4:	d828      	bhi.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fa:	d02a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003200:	d822      	bhi.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003202:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003206:	d026      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003208:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800320c:	d81c      	bhi.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800320e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003212:	d010      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003218:	d816      	bhi.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d01d      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	d111      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xac0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fcd8 	bl	8003be0 <RCCEx_PLL2_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003234:	e012      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xad4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3324      	adds	r3, #36	; 0x24
 800323a:	2102      	movs	r1, #2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fd81 	bl	8003d44 <RCCEx_PLL3_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003246:	e009      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xad4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	75fb      	strb	r3, [r7, #23]
      break;
 800324c:	e006      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 800324e:	bf00      	nop
 8003250:	e004      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 800325a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10c      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003270:	4901      	ldr	r1, [pc, #4]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003272:	4313      	orrs	r3, r2
 8003274:	658b      	str	r3, [r1, #88]	; 0x58
 8003276:	e003      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8003278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d04b      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003292:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003296:	d02e      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003298:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800329c:	d828      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800329e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a2:	d02a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80032a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a8:	d822      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80032aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032ae:	d026      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xb76>
 80032b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032b4:	d81c      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80032b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ba:	d010      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xb56>
 80032bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c0:	d816      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01d      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80032c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ca:	d111      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fc84 	bl	8003be0 <RCCEx_PLL2_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032dc:	e012      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3324      	adds	r3, #36	; 0x24
 80032e2:	2102      	movs	r1, #2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fd2d 	bl	8003d44 <RCCEx_PLL3_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032ee:	e009      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	75fb      	strb	r3, [r7, #23]
      break;
 80032f4:	e006      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80032f6:	bf00      	nop
 80032f8:	e004      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80032fa:	bf00      	nop
 80032fc:	e002      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80032fe:	bf00      	nop
 8003300:	e000      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800330a:	4b9e      	ldr	r3, [pc, #632]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003318:	499a      	ldr	r1, [pc, #616]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	658b      	str	r3, [r1, #88]	; 0x58
 800331e:	e001      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xbde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333a:	d10a      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3324      	adds	r3, #36	; 0x24
 8003340:	2102      	movs	r1, #2
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fcfe 	bl	8003d44 <RCCEx_PLL3_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xbca>
        {
          status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003352:	4b8c      	ldr	r3, [pc, #560]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003360:	4988      	ldr	r1, [pc, #544]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337c:	d10a      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3324      	adds	r3, #36	; 0x24
 8003382:	2102      	movs	r1, #2
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fcdd 	bl	8003d44 <RCCEx_PLL3_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003394:	4b7b      	ldr	r3, [pc, #492]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033a2:	4978      	ldr	r1, [pc, #480]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d034      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc96>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033be:	d01d      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80033c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c4:	d817      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 80033ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ce:	d009      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80033d0:	e011      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fc01 	bl	8003be0 <RCCEx_PLL2_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033e2:	e00c      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xc76>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3324      	adds	r3, #36	; 0x24
 80033e8:	2102      	movs	r1, #2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fcaa 	bl	8003d44 <RCCEx_PLL3_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xc76>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
      break;
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xc76>
      break;
 80033fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003404:	4b5f      	ldr	r3, [pc, #380]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003412:	495c      	ldr	r1, [pc, #368]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	658b      	str	r3, [r1, #88]	; 0x58
 8003418:	e001      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d033      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003434:	d01c      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003436:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800343a:	d816      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xce2>
 800343c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003440:	d003      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003446:	d007      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8003448:	e00f      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xce2>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344a:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	4a4d      	ldr	r2, [pc, #308]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003454:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003456:	e00c      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xcea>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3324      	adds	r3, #36	; 0x24
 800345c:	2101      	movs	r1, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fc70 	bl	8003d44 <RCCEx_PLL3_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003468:	e003      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xcea>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
      break;
 800346e:	e000      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xcea>
      break;
 8003470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10a      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003478:	4b42      	ldr	r3, [pc, #264]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	493f      	ldr	r1, [pc, #252]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	654b      	str	r3, [r1, #84]	; 0x54
 800348c:	e001      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d029      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xd26>
 80034a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034aa:	d007      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd34>
 80034ac:	e00f      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ae:	4b35      	ldr	r3, [pc, #212]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	4a34      	ldr	r2, [pc, #208]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034ba:	e00b      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	2102      	movs	r1, #2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fb8c 	bl	8003be0 <RCCEx_PLL2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034cc:	e002      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    default:
      ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
      break;
 80034d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xd66>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034da:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e6:	4927      	ldr	r1, [pc, #156]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034ec:	e001      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3324      	adds	r3, #36	; 0x24
 8003502:	2102      	movs	r1, #2
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fc1d 	bl	8003d44 <RCCEx_PLL3_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    {
      status=HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d035      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xe04>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800352a:	d017      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 800352c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003530:	d811      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8003532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003536:	d013      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353c:	d80b      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003546:	d106      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xdce>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4a0d      	ldr	r2, [pc, #52]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003554:	e007      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
      break;
 800355a:	e004      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 800355c:	bf00      	nop
 800355e:	e002      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003560:	bf00      	nop
 8003562:	e000      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10d      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xe00>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357a:	4902      	ldr	r1, [pc, #8]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800357c:	4313      	orrs	r3, r2
 800357e:	654b      	str	r3, [r1, #84]	; 0x54
 8003580:	e004      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8003582:	bf00      	nop
 8003584:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xe22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003598:	4b31      	ldr	r3, [pc, #196]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800359a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a4:	492e      	ldr	r1, [pc, #184]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xe42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80035b6:	4b2a      	ldr	r3, [pc, #168]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035c4:	4926      	ldr	r1, [pc, #152]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035d6:	4b22      	ldr	r3, [pc, #136]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 80035d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e2:	491f      	ldr	r1, [pc, #124]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xe88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	4a19      	ldr	r2, [pc, #100]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 80035fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035fe:	6113      	str	r3, [r2, #16]
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800360a:	4915      	ldr	r1, [pc, #84]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800360c:	4313      	orrs	r3, r2
 800360e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	da08      	bge.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xea2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800361a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	490e      	ldr	r1, [pc, #56]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003626:	4313      	orrs	r3, r2
 8003628:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xec2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003644:	4906      	ldr	r1, [pc, #24]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800364a:	7dbb      	ldrb	r3, [r7, #22]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0xece>
  }
  return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400

08003664 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003668:	f7fe fff0 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4904      	ldr	r1, [pc, #16]	; (800368c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	58024400 	.word	0x58024400
 800368c:	080085fc 	.word	0x080085fc

08003690 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	; 0x24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003698:	4ba1      	ldr	r3, [pc, #644]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80036a2:	4b9f      	ldr	r3, [pc, #636]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	0b1b      	lsrs	r3, r3, #12
 80036a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80036ae:	4b9c      	ldr	r3, [pc, #624]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80036ba:	4b99      	ldr	r3, [pc, #612]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	08db      	lsrs	r3, r3, #3
 80036c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8111 	beq.w	8003900 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	f000 8083 	beq.w	80037ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	f200 80a1 	bhi.w	8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d056      	beq.n	80037a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80036fa:	e099      	b.n	8003830 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036fc:	4b88      	ldr	r3, [pc, #544]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d02d      	beq.n	8003764 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003708:	4b85      	ldr	r3, [pc, #532]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	4a84      	ldr	r2, [pc, #528]	; (8003924 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
 8003718:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	ee07 3a90 	vmov	s15, r3
 8003720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003732:	4b7b      	ldr	r3, [pc, #492]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003742:	ed97 6a03 	vldr	s12, [r7, #12]
 8003746:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800374a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800374e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800375a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003762:	e087      	b.n	8003874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800392c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003776:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003786:	ed97 6a03 	vldr	s12, [r7, #12]
 800378a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800378e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037a6:	e065      	b.n	8003874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80037b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ba:	4b59      	ldr	r3, [pc, #356]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037ea:	e043      	b.n	8003874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80037fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fe:	4b48      	ldr	r3, [pc, #288]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003812:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800382e:	e021      	b.n	8003874 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800383e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003842:	4b37      	ldr	r3, [pc, #220]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003852:	ed97 6a03 	vldr	s12, [r7, #12]
 8003856:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800385a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003872:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	0a5b      	lsrs	r3, r3, #9
 800387a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800388a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800388e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800389a:	ee17 2a90 	vmov	r2, s15
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80038a2:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c8:	ee17 2a90 	vmov	r2, s15
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	0e1b      	lsrs	r3, r3, #24
 80038d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f6:	ee17 2a90 	vmov	r2, s15
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80038fe:	e008      	b.n	8003912 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	609a      	str	r2, [r3, #8]
}
 8003912:	bf00      	nop
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	58024400 	.word	0x58024400
 8003924:	03d09000 	.word	0x03d09000
 8003928:	46000000 	.word	0x46000000
 800392c:	4c742400 	.word	0x4c742400
 8003930:	4a742400 	.word	0x4a742400
 8003934:	4bbebc20 	.word	0x4bbebc20

08003938 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003940:	4ba1      	ldr	r3, [pc, #644]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800394a:	4b9f      	ldr	r3, [pc, #636]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	0d1b      	lsrs	r3, r3, #20
 8003950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003954:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003956:	4b9c      	ldr	r3, [pc, #624]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003962:	4b99      	ldr	r3, [pc, #612]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	08db      	lsrs	r3, r3, #3
 8003968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8111 	beq.w	8003ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b02      	cmp	r3, #2
 800398a:	f000 8083 	beq.w	8003a94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b02      	cmp	r3, #2
 8003992:	f200 80a1 	bhi.w	8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d056      	beq.n	8003a50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80039a2:	e099      	b.n	8003ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039a4:	4b88      	ldr	r3, [pc, #544]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02d      	beq.n	8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039b0:	4b85      	ldr	r3, [pc, #532]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	08db      	lsrs	r3, r3, #3
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	4a84      	ldr	r2, [pc, #528]	; (8003bcc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039da:	4b7b      	ldr	r3, [pc, #492]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a0a:	e087      	b.n	8003b1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a4e:	e065      	b.n	8003b1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a62:	4b59      	ldr	r3, [pc, #356]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a92:	e043      	b.n	8003b1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa6:	4b48      	ldr	r3, [pc, #288]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ad6:	e021      	b.n	8003b1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aea:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003afe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003b1c:	4b2a      	ldr	r3, [pc, #168]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	0a5b      	lsrs	r3, r3, #9
 8003b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b36:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b42:	ee17 2a90 	vmov	r2, s15
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003b4a:	4b1f      	ldr	r3, [pc, #124]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	0c1b      	lsrs	r3, r3, #16
 8003b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b54:	ee07 3a90 	vmov	s15, r3
 8003b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b70:	ee17 2a90 	vmov	r2, s15
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003b78:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	0e1b      	lsrs	r3, r3, #24
 8003b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b9e:	ee17 2a90 	vmov	r2, s15
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ba6:	e008      	b.n	8003bba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
}
 8003bba:	bf00      	nop
 8003bbc:	3724      	adds	r7, #36	; 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	58024400 	.word	0x58024400
 8003bcc:	03d09000 	.word	0x03d09000
 8003bd0:	46000000 	.word	0x46000000
 8003bd4:	4c742400 	.word	0x4c742400
 8003bd8:	4a742400 	.word	0x4a742400
 8003bdc:	4bbebc20 	.word	0x4bbebc20

08003be0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bee:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d101      	bne.n	8003bfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e099      	b.n	8003d32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003bfe:	4b4f      	ldr	r3, [pc, #316]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a4e      	ldr	r2, [pc, #312]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003c04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0a:	f7fd f9e9 	bl	8000fe0 <HAL_GetTick>
 8003c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c10:	e008      	b.n	8003c24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c12:	f7fd f9e5 	bl	8000fe0 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e086      	b.n	8003d32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c24:	4b45      	ldr	r3, [pc, #276]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c30:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	031b      	lsls	r3, r3, #12
 8003c3e:	493f      	ldr	r1, [pc, #252]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	628b      	str	r3, [r1, #40]	; 0x28
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	025b      	lsls	r3, r3, #9
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	061b      	lsls	r3, r3, #24
 8003c70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c74:	4931      	ldr	r1, [pc, #196]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c7a:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	492d      	ldr	r1, [pc, #180]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c8c:	4b2b      	ldr	r3, [pc, #172]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	f023 0220 	bic.w	r2, r3, #32
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	4928      	ldr	r1, [pc, #160]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c9e:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003ca4:	f023 0310 	bic.w	r3, r3, #16
 8003ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <RCCEx_PLL2_Config+0x160>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	69d2      	ldr	r2, [r2, #28]
 8003cb6:	00d2      	lsls	r2, r2, #3
 8003cb8:	4920      	ldr	r1, [pc, #128]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003cbe:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003cc4:	f043 0310 	orr.w	r3, r3, #16
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003cd0:	4b1a      	ldr	r3, [pc, #104]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	4a19      	ldr	r2, [pc, #100]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cdc:	e00f      	b.n	8003cfe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d106      	bne.n	8003cf2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ce4:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cf0:	e005      	b.n	8003cfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003d04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0a:	f7fd f969 	bl	8000fe0 <HAL_GetTick>
 8003d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d10:	e008      	b.n	8003d24 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d12:	f7fd f965 	bl	8000fe0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e006      	b.n	8003d32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <RCCEx_PLL2_Config+0x15c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	ffff0007 	.word	0xffff0007

08003d44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d52:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d101      	bne.n	8003d62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e099      	b.n	8003e96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d62:	4b4f      	ldr	r3, [pc, #316]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a4e      	ldr	r2, [pc, #312]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d6e:	f7fd f937 	bl	8000fe0 <HAL_GetTick>
 8003d72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d74:	e008      	b.n	8003d88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d76:	f7fd f933 	bl	8000fe0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e086      	b.n	8003e96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d88:	4b45      	ldr	r3, [pc, #276]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1f0      	bne.n	8003d76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d94:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	051b      	lsls	r3, r3, #20
 8003da2:	493f      	ldr	r1, [pc, #252]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	628b      	str	r3, [r1, #40]	; 0x28
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	025b      	lsls	r3, r3, #9
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003dd8:	4931      	ldr	r1, [pc, #196]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003dde:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	492d      	ldr	r1, [pc, #180]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003df0:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4928      	ldr	r1, [pc, #160]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e02:	4b27      	ldr	r3, [pc, #156]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e0e:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e12:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <RCCEx_PLL3_Config+0x160>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	69d2      	ldr	r2, [r2, #28]
 8003e1a:	00d2      	lsls	r2, r2, #3
 8003e1c:	4920      	ldr	r1, [pc, #128]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e22:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	4a1e      	ldr	r2, [pc, #120]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e34:	4b1a      	ldr	r3, [pc, #104]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e40:	e00f      	b.n	8003e62 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d106      	bne.n	8003e56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e48:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e54:	e005      	b.n	8003e62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e56:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6e:	f7fd f8b7 	bl	8000fe0 <HAL_GetTick>
 8003e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e74:	e008      	b.n	8003e88 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e76:	f7fd f8b3 	bl	8000fe0 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e006      	b.n	8003e96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	ffff0007 	.word	0xffff0007

08003ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e049      	b.n	8003f4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f841 	bl	8003f56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f000 fa00 	bl	80042ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e054      	b.n	800402e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a26      	ldr	r2, [pc, #152]	; (800403c <HAL_TIM_Base_Start_IT+0xd0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d022      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fae:	d01d      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a22      	ldr	r2, [pc, #136]	; (8004040 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d018      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a21      	ldr	r2, [pc, #132]	; (8004044 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00e      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	; (800404c <HAL_TIM_Base_Start_IT+0xe0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <HAL_TIM_Base_Start_IT+0xe4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_TIM_Base_Start_IT+0x80>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <HAL_TIM_Base_Start_IT+0xe8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d115      	bne.n	8004018 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	4b19      	ldr	r3, [pc, #100]	; (8004058 <HAL_TIM_Base_Start_IT+0xec>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d015      	beq.n	800402a <HAL_TIM_Base_Start_IT+0xbe>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004004:	d011      	beq.n	800402a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	e008      	b.n	800402a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e000      	b.n	800402c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40010000 	.word	0x40010000
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	40010400 	.word	0x40010400
 8004050:	40001800 	.word	0x40001800
 8004054:	40014000 	.word	0x40014000
 8004058:	00010007 	.word	0x00010007

0800405c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b02      	cmp	r3, #2
 8004070:	d122      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d11b      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0202 	mvn.w	r2, #2
 8004088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f905 	bl	80042ae <HAL_TIM_IC_CaptureCallback>
 80040a4:	e005      	b.n	80040b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f8f7 	bl	800429a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f908 	bl	80042c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d122      	bne.n	800410c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d11b      	bne.n	800410c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0204 	mvn.w	r2, #4
 80040dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8db 	bl	80042ae <HAL_TIM_IC_CaptureCallback>
 80040f8:	e005      	b.n	8004106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8cd 	bl	800429a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f8de 	bl	80042c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b08      	cmp	r3, #8
 8004118:	d122      	bne.n	8004160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b08      	cmp	r3, #8
 8004126:	d11b      	bne.n	8004160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0208 	mvn.w	r2, #8
 8004130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2204      	movs	r2, #4
 8004136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f8b1 	bl	80042ae <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8a3 	bl	800429a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f8b4 	bl	80042c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b10      	cmp	r3, #16
 800416c:	d122      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b10      	cmp	r3, #16
 800417a:	d11b      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0210 	mvn.w	r2, #16
 8004184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2208      	movs	r2, #8
 800418a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f887 	bl	80042ae <HAL_TIM_IC_CaptureCallback>
 80041a0:	e005      	b.n	80041ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f879 	bl	800429a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f88a 	bl	80042c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d10e      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d107      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0201 	mvn.w	r2, #1
 80041d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fc fc3e 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b80      	cmp	r3, #128	; 0x80
 80041ec:	d10e      	bne.n	800420c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	d107      	bne.n	800420c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f914 	bl	8004434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421a:	d10e      	bne.n	800423a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d107      	bne.n	800423a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f907 	bl	8004448 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d10e      	bne.n	8004266 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d107      	bne.n	8004266 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f838 	bl	80042d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b20      	cmp	r3, #32
 8004272:	d10e      	bne.n	8004292 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b20      	cmp	r3, #32
 8004280:	d107      	bne.n	8004292 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f06f 0220 	mvn.w	r2, #32
 800428a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f8c7 	bl	8004420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a40      	ldr	r2, [pc, #256]	; (8004400 <TIM_Base_SetConfig+0x114>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430a:	d00f      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3d      	ldr	r2, [pc, #244]	; (8004404 <TIM_Base_SetConfig+0x118>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3c      	ldr	r2, [pc, #240]	; (8004408 <TIM_Base_SetConfig+0x11c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3b      	ldr	r2, [pc, #236]	; (800440c <TIM_Base_SetConfig+0x120>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a3a      	ldr	r2, [pc, #232]	; (8004410 <TIM_Base_SetConfig+0x124>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a2f      	ldr	r2, [pc, #188]	; (8004400 <TIM_Base_SetConfig+0x114>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01f      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d01b      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2c      	ldr	r2, [pc, #176]	; (8004404 <TIM_Base_SetConfig+0x118>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d017      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <TIM_Base_SetConfig+0x11c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d013      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2a      	ldr	r2, [pc, #168]	; (800440c <TIM_Base_SetConfig+0x120>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00f      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a29      	ldr	r2, [pc, #164]	; (8004410 <TIM_Base_SetConfig+0x124>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00b      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a28      	ldr	r2, [pc, #160]	; (8004414 <TIM_Base_SetConfig+0x128>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a27      	ldr	r2, [pc, #156]	; (8004418 <TIM_Base_SetConfig+0x12c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d003      	beq.n	8004386 <TIM_Base_SetConfig+0x9a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a26      	ldr	r2, [pc, #152]	; (800441c <TIM_Base_SetConfig+0x130>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a10      	ldr	r2, [pc, #64]	; (8004400 <TIM_Base_SetConfig+0x114>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00f      	beq.n	80043e4 <TIM_Base_SetConfig+0xf8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <TIM_Base_SetConfig+0x124>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00b      	beq.n	80043e4 <TIM_Base_SetConfig+0xf8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a11      	ldr	r2, [pc, #68]	; (8004414 <TIM_Base_SetConfig+0x128>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d007      	beq.n	80043e4 <TIM_Base_SetConfig+0xf8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a10      	ldr	r2, [pc, #64]	; (8004418 <TIM_Base_SetConfig+0x12c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_Base_SetConfig+0xf8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a0f      	ldr	r2, [pc, #60]	; (800441c <TIM_Base_SetConfig+0x130>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d103      	bne.n	80043ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	615a      	str	r2, [r3, #20]
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800
 800440c:	40000c00 	.word	0x40000c00
 8004410:	40010400 	.word	0x40010400
 8004414:	40014000 	.word	0x40014000
 8004418:	40014400 	.word	0x40014400
 800441c:	40014800 	.word	0x40014800

08004420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e042      	b.n	80044f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fc fc07 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2224      	movs	r2, #36	; 0x24
 800448a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f82c 	bl	80044fc <UART_SetConfig>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e022      	b.n	80044f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fd88 	bl	8004fcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fe0f 	bl	8005110 <UART_CheckIdleState>
 80044f2:	4603      	mov	r3, r0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004500:	b092      	sub	sp, #72	; 0x48
 8004502:	af00      	add	r7, sp, #0
 8004504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	431a      	orrs	r2, r3
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	431a      	orrs	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	4313      	orrs	r3, r2
 8004522:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4bbe      	ldr	r3, [pc, #760]	; (8004824 <UART_SetConfig+0x328>)
 800452c:	4013      	ands	r3, r2
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004534:	430b      	orrs	r3, r1
 8004536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4ab3      	ldr	r2, [pc, #716]	; (8004828 <UART_SetConfig+0x32c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d004      	beq.n	8004568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004564:	4313      	orrs	r3, r2
 8004566:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	4baf      	ldr	r3, [pc, #700]	; (800482c <UART_SetConfig+0x330>)
 8004570:	4013      	ands	r3, r2
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004578:	430b      	orrs	r3, r1
 800457a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	f023 010f 	bic.w	r1, r3, #15
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4aa6      	ldr	r2, [pc, #664]	; (8004830 <UART_SetConfig+0x334>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d177      	bne.n	800468c <UART_SetConfig+0x190>
 800459c:	4ba5      	ldr	r3, [pc, #660]	; (8004834 <UART_SetConfig+0x338>)
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a4:	2b28      	cmp	r3, #40	; 0x28
 80045a6:	d86d      	bhi.n	8004684 <UART_SetConfig+0x188>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0xb4>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	08004655 	.word	0x08004655
 80045b4:	08004685 	.word	0x08004685
 80045b8:	08004685 	.word	0x08004685
 80045bc:	08004685 	.word	0x08004685
 80045c0:	08004685 	.word	0x08004685
 80045c4:	08004685 	.word	0x08004685
 80045c8:	08004685 	.word	0x08004685
 80045cc:	08004685 	.word	0x08004685
 80045d0:	0800465d 	.word	0x0800465d
 80045d4:	08004685 	.word	0x08004685
 80045d8:	08004685 	.word	0x08004685
 80045dc:	08004685 	.word	0x08004685
 80045e0:	08004685 	.word	0x08004685
 80045e4:	08004685 	.word	0x08004685
 80045e8:	08004685 	.word	0x08004685
 80045ec:	08004685 	.word	0x08004685
 80045f0:	08004665 	.word	0x08004665
 80045f4:	08004685 	.word	0x08004685
 80045f8:	08004685 	.word	0x08004685
 80045fc:	08004685 	.word	0x08004685
 8004600:	08004685 	.word	0x08004685
 8004604:	08004685 	.word	0x08004685
 8004608:	08004685 	.word	0x08004685
 800460c:	08004685 	.word	0x08004685
 8004610:	0800466d 	.word	0x0800466d
 8004614:	08004685 	.word	0x08004685
 8004618:	08004685 	.word	0x08004685
 800461c:	08004685 	.word	0x08004685
 8004620:	08004685 	.word	0x08004685
 8004624:	08004685 	.word	0x08004685
 8004628:	08004685 	.word	0x08004685
 800462c:	08004685 	.word	0x08004685
 8004630:	08004675 	.word	0x08004675
 8004634:	08004685 	.word	0x08004685
 8004638:	08004685 	.word	0x08004685
 800463c:	08004685 	.word	0x08004685
 8004640:	08004685 	.word	0x08004685
 8004644:	08004685 	.word	0x08004685
 8004648:	08004685 	.word	0x08004685
 800464c:	08004685 	.word	0x08004685
 8004650:	0800467d 	.word	0x0800467d
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800465a:	e222      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004662:	e21e      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800466a:	e21a      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004672:	e216      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004674:	2320      	movs	r3, #32
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800467a:	e212      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004682:	e20e      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468a:	e20a      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a69      	ldr	r2, [pc, #420]	; (8004838 <UART_SetConfig+0x33c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d130      	bne.n	80046f8 <UART_SetConfig+0x1fc>
 8004696:	4b67      	ldr	r3, [pc, #412]	; (8004834 <UART_SetConfig+0x338>)
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d826      	bhi.n	80046f0 <UART_SetConfig+0x1f4>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0x1ac>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046c1 	.word	0x080046c1
 80046ac:	080046c9 	.word	0x080046c9
 80046b0:	080046d1 	.word	0x080046d1
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046e1 	.word	0x080046e1
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c6:	e1ec      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ce:	e1e8      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80046d0:	2308      	movs	r3, #8
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d6:	e1e4      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80046d8:	2310      	movs	r3, #16
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046de:	e1e0      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80046e0:	2320      	movs	r3, #32
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e6:	e1dc      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80046e8:	2340      	movs	r3, #64	; 0x40
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ee:	e1d8      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046f6:	e1d4      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a4f      	ldr	r2, [pc, #316]	; (800483c <UART_SetConfig+0x340>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d130      	bne.n	8004764 <UART_SetConfig+0x268>
 8004702:	4b4c      	ldr	r3, [pc, #304]	; (8004834 <UART_SetConfig+0x338>)
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b05      	cmp	r3, #5
 800470c:	d826      	bhi.n	800475c <UART_SetConfig+0x260>
 800470e:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <UART_SetConfig+0x218>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	0800472d 	.word	0x0800472d
 8004718:	08004735 	.word	0x08004735
 800471c:	0800473d 	.word	0x0800473d
 8004720:	08004745 	.word	0x08004745
 8004724:	0800474d 	.word	0x0800474d
 8004728:	08004755 	.word	0x08004755
 800472c:	2300      	movs	r3, #0
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004732:	e1b6      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800473a:	e1b2      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004742:	e1ae      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800474a:	e1aa      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 800474c:	2320      	movs	r3, #32
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004752:	e1a6      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004754:	2340      	movs	r3, #64	; 0x40
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800475a:	e1a2      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004762:	e19e      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a35      	ldr	r2, [pc, #212]	; (8004840 <UART_SetConfig+0x344>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d130      	bne.n	80047d0 <UART_SetConfig+0x2d4>
 800476e:	4b31      	ldr	r3, [pc, #196]	; (8004834 <UART_SetConfig+0x338>)
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	2b05      	cmp	r3, #5
 8004778:	d826      	bhi.n	80047c8 <UART_SetConfig+0x2cc>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <UART_SetConfig+0x284>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004799 	.word	0x08004799
 8004784:	080047a1 	.word	0x080047a1
 8004788:	080047a9 	.word	0x080047a9
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047b9 	.word	0x080047b9
 8004794:	080047c1 	.word	0x080047c1
 8004798:	2300      	movs	r3, #0
 800479a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479e:	e180      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a6:	e17c      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ae:	e178      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b6:	e174      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80047b8:	2320      	movs	r3, #32
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047be:	e170      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80047c0:	2340      	movs	r3, #64	; 0x40
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c6:	e16c      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e168      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <UART_SetConfig+0x348>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d142      	bne.n	8004860 <UART_SetConfig+0x364>
 80047da:	4b16      	ldr	r3, [pc, #88]	; (8004834 <UART_SetConfig+0x338>)
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d838      	bhi.n	8004858 <UART_SetConfig+0x35c>
 80047e6:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <UART_SetConfig+0x2f0>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	08004805 	.word	0x08004805
 80047f0:	0800480d 	.word	0x0800480d
 80047f4:	08004815 	.word	0x08004815
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004849 	.word	0x08004849
 8004800:	08004851 	.word	0x08004851
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800480a:	e14a      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 800480c:	2304      	movs	r3, #4
 800480e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004812:	e146      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004814:	2308      	movs	r3, #8
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800481a:	e142      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 800481c:	2310      	movs	r3, #16
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004822:	e13e      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004824:	cfff69f3 	.word	0xcfff69f3
 8004828:	58000c00 	.word	0x58000c00
 800482c:	11fff4ff 	.word	0x11fff4ff
 8004830:	40011000 	.word	0x40011000
 8004834:	58024400 	.word	0x58024400
 8004838:	40004400 	.word	0x40004400
 800483c:	40004800 	.word	0x40004800
 8004840:	40004c00 	.word	0x40004c00
 8004844:	40005000 	.word	0x40005000
 8004848:	2320      	movs	r3, #32
 800484a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484e:	e128      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004850:	2340      	movs	r3, #64	; 0x40
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004856:	e124      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800485e:	e120      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4acb      	ldr	r2, [pc, #812]	; (8004b94 <UART_SetConfig+0x698>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d176      	bne.n	8004958 <UART_SetConfig+0x45c>
 800486a:	4bcb      	ldr	r3, [pc, #812]	; (8004b98 <UART_SetConfig+0x69c>)
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004872:	2b28      	cmp	r3, #40	; 0x28
 8004874:	d86c      	bhi.n	8004950 <UART_SetConfig+0x454>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <UART_SetConfig+0x380>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	08004921 	.word	0x08004921
 8004880:	08004951 	.word	0x08004951
 8004884:	08004951 	.word	0x08004951
 8004888:	08004951 	.word	0x08004951
 800488c:	08004951 	.word	0x08004951
 8004890:	08004951 	.word	0x08004951
 8004894:	08004951 	.word	0x08004951
 8004898:	08004951 	.word	0x08004951
 800489c:	08004929 	.word	0x08004929
 80048a0:	08004951 	.word	0x08004951
 80048a4:	08004951 	.word	0x08004951
 80048a8:	08004951 	.word	0x08004951
 80048ac:	08004951 	.word	0x08004951
 80048b0:	08004951 	.word	0x08004951
 80048b4:	08004951 	.word	0x08004951
 80048b8:	08004951 	.word	0x08004951
 80048bc:	08004931 	.word	0x08004931
 80048c0:	08004951 	.word	0x08004951
 80048c4:	08004951 	.word	0x08004951
 80048c8:	08004951 	.word	0x08004951
 80048cc:	08004951 	.word	0x08004951
 80048d0:	08004951 	.word	0x08004951
 80048d4:	08004951 	.word	0x08004951
 80048d8:	08004951 	.word	0x08004951
 80048dc:	08004939 	.word	0x08004939
 80048e0:	08004951 	.word	0x08004951
 80048e4:	08004951 	.word	0x08004951
 80048e8:	08004951 	.word	0x08004951
 80048ec:	08004951 	.word	0x08004951
 80048f0:	08004951 	.word	0x08004951
 80048f4:	08004951 	.word	0x08004951
 80048f8:	08004951 	.word	0x08004951
 80048fc:	08004941 	.word	0x08004941
 8004900:	08004951 	.word	0x08004951
 8004904:	08004951 	.word	0x08004951
 8004908:	08004951 	.word	0x08004951
 800490c:	08004951 	.word	0x08004951
 8004910:	08004951 	.word	0x08004951
 8004914:	08004951 	.word	0x08004951
 8004918:	08004951 	.word	0x08004951
 800491c:	08004949 	.word	0x08004949
 8004920:	2301      	movs	r3, #1
 8004922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004926:	e0bc      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004928:	2304      	movs	r3, #4
 800492a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800492e:	e0b8      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004930:	2308      	movs	r3, #8
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004936:	e0b4      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004938:	2310      	movs	r3, #16
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800493e:	e0b0      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004940:	2320      	movs	r3, #32
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004946:	e0ac      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004948:	2340      	movs	r3, #64	; 0x40
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800494e:	e0a8      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004956:	e0a4      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a8f      	ldr	r2, [pc, #572]	; (8004b9c <UART_SetConfig+0x6a0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d130      	bne.n	80049c4 <UART_SetConfig+0x4c8>
 8004962:	4b8d      	ldr	r3, [pc, #564]	; (8004b98 <UART_SetConfig+0x69c>)
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	2b05      	cmp	r3, #5
 800496c:	d826      	bhi.n	80049bc <UART_SetConfig+0x4c0>
 800496e:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <UART_SetConfig+0x478>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	0800498d 	.word	0x0800498d
 8004978:	08004995 	.word	0x08004995
 800497c:	0800499d 	.word	0x0800499d
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049ad 	.word	0x080049ad
 8004988:	080049b5 	.word	0x080049b5
 800498c:	2300      	movs	r3, #0
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004992:	e086      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004994:	2304      	movs	r3, #4
 8004996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499a:	e082      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 800499c:	2308      	movs	r3, #8
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a2:	e07e      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80049a4:	2310      	movs	r3, #16
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049aa:	e07a      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80049ac:	2320      	movs	r3, #32
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b2:	e076      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80049b4:	2340      	movs	r3, #64	; 0x40
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ba:	e072      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c2:	e06e      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a75      	ldr	r2, [pc, #468]	; (8004ba0 <UART_SetConfig+0x6a4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d130      	bne.n	8004a30 <UART_SetConfig+0x534>
 80049ce:	4b72      	ldr	r3, [pc, #456]	; (8004b98 <UART_SetConfig+0x69c>)
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d826      	bhi.n	8004a28 <UART_SetConfig+0x52c>
 80049da:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <UART_SetConfig+0x4e4>)
 80049dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e0:	080049f9 	.word	0x080049f9
 80049e4:	08004a01 	.word	0x08004a01
 80049e8:	08004a09 	.word	0x08004a09
 80049ec:	08004a11 	.word	0x08004a11
 80049f0:	08004a19 	.word	0x08004a19
 80049f4:	08004a21 	.word	0x08004a21
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fe:	e050      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a00:	2304      	movs	r3, #4
 8004a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a06:	e04c      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a08:	2308      	movs	r3, #8
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0e:	e048      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a10:	2310      	movs	r3, #16
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a16:	e044      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a18:	2320      	movs	r3, #32
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1e:	e040      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a20:	2340      	movs	r3, #64	; 0x40
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a26:	e03c      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2e:	e038      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a5b      	ldr	r2, [pc, #364]	; (8004ba4 <UART_SetConfig+0x6a8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d130      	bne.n	8004a9c <UART_SetConfig+0x5a0>
 8004a3a:	4b57      	ldr	r3, [pc, #348]	; (8004b98 <UART_SetConfig+0x69c>)
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	2b05      	cmp	r3, #5
 8004a44:	d826      	bhi.n	8004a94 <UART_SetConfig+0x598>
 8004a46:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <UART_SetConfig+0x550>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004a65 	.word	0x08004a65
 8004a50:	08004a6d 	.word	0x08004a6d
 8004a54:	08004a75 	.word	0x08004a75
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a85 	.word	0x08004a85
 8004a60:	08004a8d 	.word	0x08004a8d
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6a:	e01a      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a72:	e016      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7a:	e012      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a82:	e00e      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a84:	2320      	movs	r3, #32
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8a:	e00a      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a8c:	2340      	movs	r3, #64	; 0x40
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a92:	e006      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9a:	e002      	b.n	8004aa2 <UART_SetConfig+0x5a6>
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3f      	ldr	r2, [pc, #252]	; (8004ba4 <UART_SetConfig+0x6a8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	f040 80f8 	bne.w	8004c9e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	dc46      	bgt.n	8004b44 <UART_SetConfig+0x648>
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	f2c0 8082 	blt.w	8004bc0 <UART_SetConfig+0x6c4>
 8004abc:	3b02      	subs	r3, #2
 8004abe:	2b1e      	cmp	r3, #30
 8004ac0:	d87e      	bhi.n	8004bc0 <UART_SetConfig+0x6c4>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x5cc>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004b4b 	.word	0x08004b4b
 8004acc:	08004bc1 	.word	0x08004bc1
 8004ad0:	08004b53 	.word	0x08004b53
 8004ad4:	08004bc1 	.word	0x08004bc1
 8004ad8:	08004bc1 	.word	0x08004bc1
 8004adc:	08004bc1 	.word	0x08004bc1
 8004ae0:	08004b63 	.word	0x08004b63
 8004ae4:	08004bc1 	.word	0x08004bc1
 8004ae8:	08004bc1 	.word	0x08004bc1
 8004aec:	08004bc1 	.word	0x08004bc1
 8004af0:	08004bc1 	.word	0x08004bc1
 8004af4:	08004bc1 	.word	0x08004bc1
 8004af8:	08004bc1 	.word	0x08004bc1
 8004afc:	08004bc1 	.word	0x08004bc1
 8004b00:	08004b73 	.word	0x08004b73
 8004b04:	08004bc1 	.word	0x08004bc1
 8004b08:	08004bc1 	.word	0x08004bc1
 8004b0c:	08004bc1 	.word	0x08004bc1
 8004b10:	08004bc1 	.word	0x08004bc1
 8004b14:	08004bc1 	.word	0x08004bc1
 8004b18:	08004bc1 	.word	0x08004bc1
 8004b1c:	08004bc1 	.word	0x08004bc1
 8004b20:	08004bc1 	.word	0x08004bc1
 8004b24:	08004bc1 	.word	0x08004bc1
 8004b28:	08004bc1 	.word	0x08004bc1
 8004b2c:	08004bc1 	.word	0x08004bc1
 8004b30:	08004bc1 	.word	0x08004bc1
 8004b34:	08004bc1 	.word	0x08004bc1
 8004b38:	08004bc1 	.word	0x08004bc1
 8004b3c:	08004bc1 	.word	0x08004bc1
 8004b40:	08004bb3 	.word	0x08004bb3
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d037      	beq.n	8004bb8 <UART_SetConfig+0x6bc>
 8004b48:	e03a      	b.n	8004bc0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004b4a:	f7fe fd8b 	bl	8003664 <HAL_RCCEx_GetD3PCLK1Freq>
 8004b4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b50:	e03c      	b.n	8004bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fd9a 	bl	8003690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b60:	e034      	b.n	8004bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b62:	f107 0318 	add.w	r3, r7, #24
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fee6 	bl	8003938 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b70:	e02c      	b.n	8004bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <UART_SetConfig+0x69c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <UART_SetConfig+0x69c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	08db      	lsrs	r3, r3, #3
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	4a07      	ldr	r2, [pc, #28]	; (8004ba8 <UART_SetConfig+0x6ac>)
 8004b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b90:	e01c      	b.n	8004bcc <UART_SetConfig+0x6d0>
 8004b92:	bf00      	nop
 8004b94:	40011400 	.word	0x40011400
 8004b98:	58024400 	.word	0x58024400
 8004b9c:	40007800 	.word	0x40007800
 8004ba0:	40007c00 	.word	0x40007c00
 8004ba4:	58000c00 	.word	0x58000c00
 8004ba8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004bac:	4b9d      	ldr	r3, [pc, #628]	; (8004e24 <UART_SetConfig+0x928>)
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bb0:	e00c      	b.n	8004bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bb2:	4b9d      	ldr	r3, [pc, #628]	; (8004e28 <UART_SetConfig+0x92c>)
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bb6:	e009      	b.n	8004bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bbe:	e005      	b.n	8004bcc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004bca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 81de 	beq.w	8004f90 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	4a94      	ldr	r2, [pc, #592]	; (8004e2c <UART_SetConfig+0x930>)
 8004bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	4413      	add	r3, r2
 8004bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d305      	bcc.n	8004c04 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d903      	bls.n	8004c0c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004c0a:	e1c1      	b.n	8004f90 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	2200      	movs	r2, #0
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	60fa      	str	r2, [r7, #12]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	4a84      	ldr	r2, [pc, #528]	; (8004e2c <UART_SetConfig+0x930>)
 8004c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2200      	movs	r2, #0
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c2e:	f7fb fb57 	bl	80002e0 <__aeabi_uldivmod>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	020b      	lsls	r3, r1, #8
 8004c44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c48:	0202      	lsls	r2, r0, #8
 8004c4a:	6979      	ldr	r1, [r7, #20]
 8004c4c:	6849      	ldr	r1, [r1, #4]
 8004c4e:	0849      	lsrs	r1, r1, #1
 8004c50:	2000      	movs	r0, #0
 8004c52:	460c      	mov	r4, r1
 8004c54:	4605      	mov	r5, r0
 8004c56:	eb12 0804 	adds.w	r8, r2, r4
 8004c5a:	eb43 0905 	adc.w	r9, r3, r5
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	469a      	mov	sl, r3
 8004c66:	4693      	mov	fp, r2
 8004c68:	4652      	mov	r2, sl
 8004c6a:	465b      	mov	r3, fp
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	4649      	mov	r1, r9
 8004c70:	f7fb fb36 	bl	80002e0 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c82:	d308      	bcc.n	8004c96 <UART_SetConfig+0x79a>
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8a:	d204      	bcs.n	8004c96 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c92:	60da      	str	r2, [r3, #12]
 8004c94:	e17c      	b.n	8004f90 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004c9c:	e178      	b.n	8004f90 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca6:	f040 80c5 	bne.w	8004e34 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004caa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	dc48      	bgt.n	8004d44 <UART_SetConfig+0x848>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	db7b      	blt.n	8004dae <UART_SetConfig+0x8b2>
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d879      	bhi.n	8004dae <UART_SetConfig+0x8b2>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <UART_SetConfig+0x7c4>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004d4b 	.word	0x08004d4b
 8004cc4:	08004d53 	.word	0x08004d53
 8004cc8:	08004daf 	.word	0x08004daf
 8004ccc:	08004daf 	.word	0x08004daf
 8004cd0:	08004d5b 	.word	0x08004d5b
 8004cd4:	08004daf 	.word	0x08004daf
 8004cd8:	08004daf 	.word	0x08004daf
 8004cdc:	08004daf 	.word	0x08004daf
 8004ce0:	08004d6b 	.word	0x08004d6b
 8004ce4:	08004daf 	.word	0x08004daf
 8004ce8:	08004daf 	.word	0x08004daf
 8004cec:	08004daf 	.word	0x08004daf
 8004cf0:	08004daf 	.word	0x08004daf
 8004cf4:	08004daf 	.word	0x08004daf
 8004cf8:	08004daf 	.word	0x08004daf
 8004cfc:	08004daf 	.word	0x08004daf
 8004d00:	08004d7b 	.word	0x08004d7b
 8004d04:	08004daf 	.word	0x08004daf
 8004d08:	08004daf 	.word	0x08004daf
 8004d0c:	08004daf 	.word	0x08004daf
 8004d10:	08004daf 	.word	0x08004daf
 8004d14:	08004daf 	.word	0x08004daf
 8004d18:	08004daf 	.word	0x08004daf
 8004d1c:	08004daf 	.word	0x08004daf
 8004d20:	08004daf 	.word	0x08004daf
 8004d24:	08004daf 	.word	0x08004daf
 8004d28:	08004daf 	.word	0x08004daf
 8004d2c:	08004daf 	.word	0x08004daf
 8004d30:	08004daf 	.word	0x08004daf
 8004d34:	08004daf 	.word	0x08004daf
 8004d38:	08004daf 	.word	0x08004daf
 8004d3c:	08004daf 	.word	0x08004daf
 8004d40:	08004da1 	.word	0x08004da1
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d02e      	beq.n	8004da6 <UART_SetConfig+0x8aa>
 8004d48:	e031      	b.n	8004dae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d4a:	f7fd fcaf 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8004d4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d50:	e033      	b.n	8004dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d52:	f7fd fcc1 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8004d56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d58:	e02f      	b.n	8004dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe fc96 	bl	8003690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d68:	e027      	b.n	8004dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d6a:	f107 0318 	add.w	r3, r7, #24
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe fde2 	bl	8003938 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d78:	e01f      	b.n	8004dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d7a:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <UART_SetConfig+0x934>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d86:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <UART_SetConfig+0x934>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	08db      	lsrs	r3, r3, #3
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <UART_SetConfig+0x928>)
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d98:	e00f      	b.n	8004dba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004d9a:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <UART_SetConfig+0x928>)
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d9e:	e00c      	b.n	8004dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004da0:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <UART_SetConfig+0x92c>)
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004da4:	e009      	b.n	8004dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dac:	e005      	b.n	8004dba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80e7 	beq.w	8004f90 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <UART_SetConfig+0x930>)
 8004dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dd4:	005a      	lsls	r2, r3, #1
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	441a      	add	r2, r3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2b0f      	cmp	r3, #15
 8004dec:	d916      	bls.n	8004e1c <UART_SetConfig+0x920>
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df4:	d212      	bcs.n	8004e1c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f023 030f 	bic.w	r3, r3, #15
 8004dfe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	e0b9      	b.n	8004f90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004e22:	e0b5      	b.n	8004f90 <UART_SetConfig+0xa94>
 8004e24:	03d09000 	.word	0x03d09000
 8004e28:	003d0900 	.word	0x003d0900
 8004e2c:	08008674 	.word	0x08008674
 8004e30:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	dc49      	bgt.n	8004ed0 <UART_SetConfig+0x9d4>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	db7c      	blt.n	8004f3a <UART_SetConfig+0xa3e>
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d87a      	bhi.n	8004f3a <UART_SetConfig+0xa3e>
 8004e44:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0x950>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004ed7 	.word	0x08004ed7
 8004e50:	08004edf 	.word	0x08004edf
 8004e54:	08004f3b 	.word	0x08004f3b
 8004e58:	08004f3b 	.word	0x08004f3b
 8004e5c:	08004ee7 	.word	0x08004ee7
 8004e60:	08004f3b 	.word	0x08004f3b
 8004e64:	08004f3b 	.word	0x08004f3b
 8004e68:	08004f3b 	.word	0x08004f3b
 8004e6c:	08004ef7 	.word	0x08004ef7
 8004e70:	08004f3b 	.word	0x08004f3b
 8004e74:	08004f3b 	.word	0x08004f3b
 8004e78:	08004f3b 	.word	0x08004f3b
 8004e7c:	08004f3b 	.word	0x08004f3b
 8004e80:	08004f3b 	.word	0x08004f3b
 8004e84:	08004f3b 	.word	0x08004f3b
 8004e88:	08004f3b 	.word	0x08004f3b
 8004e8c:	08004f07 	.word	0x08004f07
 8004e90:	08004f3b 	.word	0x08004f3b
 8004e94:	08004f3b 	.word	0x08004f3b
 8004e98:	08004f3b 	.word	0x08004f3b
 8004e9c:	08004f3b 	.word	0x08004f3b
 8004ea0:	08004f3b 	.word	0x08004f3b
 8004ea4:	08004f3b 	.word	0x08004f3b
 8004ea8:	08004f3b 	.word	0x08004f3b
 8004eac:	08004f3b 	.word	0x08004f3b
 8004eb0:	08004f3b 	.word	0x08004f3b
 8004eb4:	08004f3b 	.word	0x08004f3b
 8004eb8:	08004f3b 	.word	0x08004f3b
 8004ebc:	08004f3b 	.word	0x08004f3b
 8004ec0:	08004f3b 	.word	0x08004f3b
 8004ec4:	08004f3b 	.word	0x08004f3b
 8004ec8:	08004f3b 	.word	0x08004f3b
 8004ecc:	08004f2d 	.word	0x08004f2d
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d02e      	beq.n	8004f32 <UART_SetConfig+0xa36>
 8004ed4:	e031      	b.n	8004f3a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed6:	f7fd fbe9 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8004eda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004edc:	e033      	b.n	8004f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ede:	f7fd fbfb 	bl	80026d8 <HAL_RCC_GetPCLK2Freq>
 8004ee2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ee4:	e02f      	b.n	8004f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe fbd0 	bl	8003690 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ef4:	e027      	b.n	8004f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ef6:	f107 0318 	add.w	r3, r7, #24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe fd1c 	bl	8003938 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f04:	e01f      	b.n	8004f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f06:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <UART_SetConfig+0xac0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f12:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <UART_SetConfig+0xac0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	08db      	lsrs	r3, r3, #3
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	4a28      	ldr	r2, [pc, #160]	; (8004fc0 <UART_SetConfig+0xac4>)
 8004f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f24:	e00f      	b.n	8004f46 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004f26:	4b26      	ldr	r3, [pc, #152]	; (8004fc0 <UART_SetConfig+0xac4>)
 8004f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f2a:	e00c      	b.n	8004f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f2c:	4b25      	ldr	r3, [pc, #148]	; (8004fc4 <UART_SetConfig+0xac8>)
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f30:	e009      	b.n	8004f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f38:	e005      	b.n	8004f46 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004f44:	bf00      	nop
    }

    if (pclk != 0U)
 8004f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d021      	beq.n	8004f90 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <UART_SetConfig+0xacc>)
 8004f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	441a      	add	r2, r3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	2b0f      	cmp	r3, #15
 8004f74:	d909      	bls.n	8004f8a <UART_SetConfig+0xa8e>
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7c:	d205      	bcs.n	8004f8a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60da      	str	r2, [r3, #12]
 8004f88:	e002      	b.n	8004f90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004fac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3748      	adds	r7, #72	; 0x48
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	03d09000 	.word	0x03d09000
 8004fc4:	003d0900 	.word	0x003d0900
 8004fc8:	08008674 	.word	0x08008674

08004fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01a      	beq.n	80050e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ca:	d10a      	bne.n	80050e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	605a      	str	r2, [r3, #4]
  }
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af02      	add	r7, sp, #8
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005120:	f7fb ff5e 	bl	8000fe0 <HAL_GetTick>
 8005124:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b08      	cmp	r3, #8
 8005132:	d10e      	bne.n	8005152 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005134:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f82f 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e025      	b.n	800519e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b04      	cmp	r3, #4
 800515e:	d10e      	bne.n	800517e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f819 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e00f      	b.n	800519e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b09c      	sub	sp, #112	; 0x70
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	603b      	str	r3, [r7, #0]
 80051b2:	4613      	mov	r3, r2
 80051b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b6:	e0a9      	b.n	800530c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051be:	f000 80a5 	beq.w	800530c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fb ff0d 	bl	8000fe0 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80051d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d140      	bne.n	800525a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051ec:	667b      	str	r3, [r7, #100]	; 0x64
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e6      	bne.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	663b      	str	r3, [r7, #96]	; 0x60
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800522a:	64ba      	str	r2, [r7, #72]	; 0x48
 800522c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e5      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e069      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d051      	beq.n	800530c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005276:	d149      	bne.n	800530c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005280:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005296:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
 80052a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e6      	bne.n	8005282 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3308      	adds	r3, #8
 80052ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	613b      	str	r3, [r7, #16]
   return(result);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f023 0301 	bic.w	r3, r3, #1
 80052ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052d4:	623a      	str	r2, [r7, #32]
 80052d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	69f9      	ldr	r1, [r7, #28]
 80052da:	6a3a      	ldr	r2, [r7, #32]
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e010      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69da      	ldr	r2, [r3, #28]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	429a      	cmp	r2, r3
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	429a      	cmp	r2, r3
 8005328:	f43f af46 	beq.w	80051b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3770      	adds	r7, #112	; 0x70
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_UARTEx_DisableFifoMode+0x16>
 8005348:	2302      	movs	r3, #2
 800534a:	e027      	b.n	800539c <HAL_UARTEx_DisableFifoMode+0x66>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2224      	movs	r2, #36	; 0x24
 8005358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800537a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053bc:	2302      	movs	r3, #2
 80053be:	e02d      	b.n	800541c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2224      	movs	r2, #36	; 0x24
 80053cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f84f 	bl	80054a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005438:	2302      	movs	r3, #2
 800543a:	e02d      	b.n	8005498 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	; 0x24
 8005448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0201 	bic.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f811 	bl	80054a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054c0:	e031      	b.n	8005526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054c2:	2310      	movs	r3, #16
 80054c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054c6:	2310      	movs	r3, #16
 80054c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	0e5b      	lsrs	r3, r3, #25
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	0f5b      	lsrs	r3, r3, #29
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	7b3a      	ldrb	r2, [r7, #12]
 80054ee:	4911      	ldr	r1, [pc, #68]	; (8005534 <UARTEx_SetNbDataToProcess+0x94>)
 80054f0:	5c8a      	ldrb	r2, [r1, r2]
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054f6:	7b3a      	ldrb	r2, [r7, #12]
 80054f8:	490f      	ldr	r1, [pc, #60]	; (8005538 <UARTEx_SetNbDataToProcess+0x98>)
 80054fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005500:	b29a      	uxth	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	7b7a      	ldrb	r2, [r7, #13]
 800550c:	4909      	ldr	r1, [pc, #36]	; (8005534 <UARTEx_SetNbDataToProcess+0x94>)
 800550e:	5c8a      	ldrb	r2, [r1, r2]
 8005510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005514:	7b7a      	ldrb	r2, [r7, #13]
 8005516:	4908      	ldr	r1, [pc, #32]	; (8005538 <UARTEx_SetNbDataToProcess+0x98>)
 8005518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800551a:	fb93 f3f2 	sdiv	r3, r3, r2
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	0800868c 	.word	0x0800868c
 8005538:	08008694 	.word	0x08008694

0800553c <__NVIC_SetPriority>:
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	6039      	str	r1, [r7, #0]
 8005546:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800554c:	2b00      	cmp	r3, #0
 800554e:	db0a      	blt.n	8005566 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	b2da      	uxtb	r2, r3
 8005554:	490c      	ldr	r1, [pc, #48]	; (8005588 <__NVIC_SetPriority+0x4c>)
 8005556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800555a:	0112      	lsls	r2, r2, #4
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	440b      	add	r3, r1
 8005560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005564:	e00a      	b.n	800557c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	b2da      	uxtb	r2, r3
 800556a:	4908      	ldr	r1, [pc, #32]	; (800558c <__NVIC_SetPriority+0x50>)
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	3b04      	subs	r3, #4
 8005574:	0112      	lsls	r2, r2, #4
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	440b      	add	r3, r1
 800557a:	761a      	strb	r2, [r3, #24]
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	e000e100 	.word	0xe000e100
 800558c:	e000ed00 	.word	0xe000ed00

08005590 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <SysTick_Handler+0x1c>)
 8005596:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005598:	f002 fadc 	bl	8007b54 <xTaskGetSchedulerState>
 800559c:	4603      	mov	r3, r0
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d001      	beq.n	80055a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80055a2:	f000 fe21 	bl	80061e8 <xPortSysTickHandler>
  }
}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	e000e010 	.word	0xe000e010

080055b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055b4:	2100      	movs	r1, #0
 80055b6:	f06f 0004 	mvn.w	r0, #4
 80055ba:	f7ff ffbf 	bl	800553c <__NVIC_SetPriority>
#endif
}
 80055be:	bf00      	nop
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055ca:	f3ef 8305 	mrs	r3, IPSR
 80055ce:	603b      	str	r3, [r7, #0]
  return(result);
 80055d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055d6:	f06f 0305 	mvn.w	r3, #5
 80055da:	607b      	str	r3, [r7, #4]
 80055dc:	e00c      	b.n	80055f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <osKernelInitialize+0x44>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <osKernelInitialize+0x44>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	607b      	str	r3, [r7, #4]
 80055f0:	e002      	b.n	80055f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055f8:	687b      	ldr	r3, [r7, #4]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	240001a0 	.word	0x240001a0

0800560c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005612:	f3ef 8305 	mrs	r3, IPSR
 8005616:	603b      	str	r3, [r7, #0]
  return(result);
 8005618:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <osKernelStart+0x1a>
    stat = osErrorISR;
 800561e:	f06f 0305 	mvn.w	r3, #5
 8005622:	607b      	str	r3, [r7, #4]
 8005624:	e010      	b.n	8005648 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005626:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <osKernelStart+0x48>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d109      	bne.n	8005642 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800562e:	f7ff ffbf 	bl	80055b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <osKernelStart+0x48>)
 8005634:	2202      	movs	r2, #2
 8005636:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005638:	f001 fe30 	bl	800729c <vTaskStartScheduler>
      stat = osOK;
 800563c:	2300      	movs	r3, #0
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	e002      	b.n	8005648 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005646:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005648:	687b      	ldr	r3, [r7, #4]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	240001a0 	.word	0x240001a0

08005658 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b08e      	sub	sp, #56	; 0x38
 800565c:	af04      	add	r7, sp, #16
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005668:	f3ef 8305 	mrs	r3, IPSR
 800566c:	617b      	str	r3, [r7, #20]
  return(result);
 800566e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005670:	2b00      	cmp	r3, #0
 8005672:	d17e      	bne.n	8005772 <osThreadNew+0x11a>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d07b      	beq.n	8005772 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800567e:	2318      	movs	r3, #24
 8005680:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005682:	2300      	movs	r3, #0
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800568a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d045      	beq.n	800571e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <osThreadNew+0x48>
        name = attr->name;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <osThreadNew+0x6e>
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2b38      	cmp	r3, #56	; 0x38
 80056b8:	d805      	bhi.n	80056c6 <osThreadNew+0x6e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <osThreadNew+0x72>
        return (NULL);
 80056c6:	2300      	movs	r3, #0
 80056c8:	e054      	b.n	8005774 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	089b      	lsrs	r3, r3, #2
 80056d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00e      	beq.n	8005700 <osThreadNew+0xa8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2bbb      	cmp	r3, #187	; 0xbb
 80056e8:	d90a      	bls.n	8005700 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d006      	beq.n	8005700 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <osThreadNew+0xa8>
        mem = 1;
 80056fa:	2301      	movs	r3, #1
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e010      	b.n	8005722 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10c      	bne.n	8005722 <osThreadNew+0xca>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d108      	bne.n	8005722 <osThreadNew+0xca>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <osThreadNew+0xca>
          mem = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	e001      	b.n	8005722 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d110      	bne.n	800574a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005730:	9202      	str	r2, [sp, #8]
 8005732:	9301      	str	r3, [sp, #4]
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6a3a      	ldr	r2, [r7, #32]
 800573c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f001 fbc0 	bl	8006ec4 <xTaskCreateStatic>
 8005744:	4603      	mov	r3, r0
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	e013      	b.n	8005772 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d110      	bne.n	8005772 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	b29a      	uxth	r2, r3
 8005754:	f107 0310 	add.w	r3, r7, #16
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f001 fc0b 	bl	8006f7e <xTaskCreate>
 8005768:	4603      	mov	r3, r0
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <osThreadNew+0x11a>
            hTask = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005772:	693b      	ldr	r3, [r7, #16]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3728      	adds	r7, #40	; 0x28
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005784:	f3ef 8305 	mrs	r3, IPSR
 8005788:	60bb      	str	r3, [r7, #8]
  return(result);
 800578a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <osDelay+0x1c>
    stat = osErrorISR;
 8005790:	f06f 0305 	mvn.w	r3, #5
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e007      	b.n	80057a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f001 fd46 	bl	8007234 <vTaskDelay>
    }
  }

  return (stat);
 80057a8:	68fb      	ldr	r3, [r7, #12]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b08a      	sub	sp, #40	; 0x28
 80057b6:	af02      	add	r7, sp, #8
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c2:	f3ef 8305 	mrs	r3, IPSR
 80057c6:	613b      	str	r3, [r7, #16]
  return(result);
 80057c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d175      	bne.n	80058ba <osSemaphoreNew+0x108>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d072      	beq.n	80058ba <osSemaphoreNew+0x108>
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d86e      	bhi.n	80058ba <osSemaphoreNew+0x108>
    mem = -1;
 80057dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d015      	beq.n	8005814 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d006      	beq.n	80057fe <osSemaphoreNew+0x4c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b4f      	cmp	r3, #79	; 0x4f
 80057f6:	d902      	bls.n	80057fe <osSemaphoreNew+0x4c>
        mem = 1;
 80057f8:	2301      	movs	r3, #1
 80057fa:	61bb      	str	r3, [r7, #24]
 80057fc:	e00c      	b.n	8005818 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <osSemaphoreNew+0x66>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <osSemaphoreNew+0x66>
          mem = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	e001      	b.n	8005818 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800581e:	d04c      	beq.n	80058ba <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d128      	bne.n	8005878 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d10a      	bne.n	8005842 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2203      	movs	r2, #3
 8005832:	9200      	str	r2, [sp, #0]
 8005834:	2200      	movs	r2, #0
 8005836:	2100      	movs	r1, #0
 8005838:	2001      	movs	r0, #1
 800583a:	f000 fdcd 	bl	80063d8 <xQueueGenericCreateStatic>
 800583e:	61f8      	str	r0, [r7, #28]
 8005840:	e005      	b.n	800584e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005842:	2203      	movs	r2, #3
 8005844:	2100      	movs	r1, #0
 8005846:	2001      	movs	r0, #1
 8005848:	f000 fe3e 	bl	80064c8 <xQueueGenericCreate>
 800584c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d022      	beq.n	800589a <osSemaphoreNew+0xe8>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d01f      	beq.n	800589a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800585a:	2300      	movs	r3, #0
 800585c:	2200      	movs	r2, #0
 800585e:	2100      	movs	r1, #0
 8005860:	69f8      	ldr	r0, [r7, #28]
 8005862:	f000 fef9 	bl	8006658 <xQueueGenericSend>
 8005866:	4603      	mov	r3, r0
 8005868:	2b01      	cmp	r3, #1
 800586a:	d016      	beq.n	800589a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800586c:	69f8      	ldr	r0, [r7, #28]
 800586e:	f001 f96d 	bl	8006b4c <vQueueDelete>
            hSemaphore = NULL;
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	e010      	b.n	800589a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d108      	bne.n	8005890 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	461a      	mov	r2, r3
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fe7b 	bl	8006582 <xQueueCreateCountingSemaphoreStatic>
 800588c:	61f8      	str	r0, [r7, #28]
 800588e:	e004      	b.n	800589a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 feac 	bl	80065f0 <xQueueCreateCountingSemaphore>
 8005898:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00c      	beq.n	80058ba <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <osSemaphoreNew+0xfc>
          name = attr->name;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e001      	b.n	80058b2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80058b2:	6979      	ldr	r1, [r7, #20]
 80058b4:	69f8      	ldr	r0, [r7, #28]
 80058b6:	f001 fa7d 	bl	8006db4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80058ba:	69fb      	ldr	r3, [r7, #28]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3720      	adds	r7, #32
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80058d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4a06      	ldr	r2, [pc, #24]	; (80058f4 <vApplicationGetIdleTaskMemory+0x30>)
 80058da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	601a      	str	r2, [r3, #0]
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	240001a4 	.word	0x240001a4
 80058f4:	24000260 	.word	0x24000260

080058f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4a07      	ldr	r2, [pc, #28]	; (8005924 <vApplicationGetTimerTaskMemory+0x2c>)
 8005908:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4a06      	ldr	r2, [pc, #24]	; (8005928 <vApplicationGetTimerTaskMemory+0x30>)
 800590e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005916:	601a      	str	r2, [r3, #0]
}
 8005918:	bf00      	nop
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	24000460 	.word	0x24000460
 8005928:	2400051c 	.word	0x2400051c

0800592c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08a      	sub	sp, #40	; 0x28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005934:	2300      	movs	r3, #0
 8005936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005938:	f001 fd20 	bl	800737c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800593c:	4b5b      	ldr	r3, [pc, #364]	; (8005aac <pvPortMalloc+0x180>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005944:	f000 f920 	bl	8005b88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005948:	4b59      	ldr	r3, [pc, #356]	; (8005ab0 <pvPortMalloc+0x184>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	f040 8093 	bne.w	8005a7c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01d      	beq.n	8005998 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800595c:	2208      	movs	r2, #8
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	2b00      	cmp	r3, #0
 800596c:	d014      	beq.n	8005998 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f023 0307 	bic.w	r3, r3, #7
 8005974:	3308      	adds	r3, #8
 8005976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <pvPortMalloc+0x6c>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	617b      	str	r3, [r7, #20]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d06e      	beq.n	8005a7c <pvPortMalloc+0x150>
 800599e:	4b45      	ldr	r3, [pc, #276]	; (8005ab4 <pvPortMalloc+0x188>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d869      	bhi.n	8005a7c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059a8:	4b43      	ldr	r3, [pc, #268]	; (8005ab8 <pvPortMalloc+0x18c>)
 80059aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059ac:	4b42      	ldr	r3, [pc, #264]	; (8005ab8 <pvPortMalloc+0x18c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059b2:	e004      	b.n	80059be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d903      	bls.n	80059d0 <pvPortMalloc+0xa4>
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f1      	bne.n	80059b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059d0:	4b36      	ldr	r3, [pc, #216]	; (8005aac <pvPortMalloc+0x180>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d050      	beq.n	8005a7c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2208      	movs	r2, #8
 80059e0:	4413      	add	r3, r2
 80059e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	1ad2      	subs	r2, r2, r3
 80059f4:	2308      	movs	r3, #8
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d91f      	bls.n	8005a3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <pvPortMalloc+0xf8>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	613b      	str	r3, [r7, #16]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a36:	69b8      	ldr	r0, [r7, #24]
 8005a38:	f000 f908 	bl	8005c4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <pvPortMalloc+0x188>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <pvPortMalloc+0x188>)
 8005a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a4a:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <pvPortMalloc+0x188>)
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <pvPortMalloc+0x190>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d203      	bcs.n	8005a5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a56:	4b17      	ldr	r3, [pc, #92]	; (8005ab4 <pvPortMalloc+0x188>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a18      	ldr	r2, [pc, #96]	; (8005abc <pvPortMalloc+0x190>)
 8005a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <pvPortMalloc+0x184>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <pvPortMalloc+0x194>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3301      	adds	r3, #1
 8005a78:	4a11      	ldr	r2, [pc, #68]	; (8005ac0 <pvPortMalloc+0x194>)
 8005a7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a7c:	f001 fc8c 	bl	8007398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <pvPortMalloc+0x174>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	60fb      	str	r3, [r7, #12]
}
 8005a9c:	bf00      	nop
 8005a9e:	e7fe      	b.n	8005a9e <pvPortMalloc+0x172>
	return pvReturn;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3728      	adds	r7, #40	; 0x28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	24004524 	.word	0x24004524
 8005ab0:	24004538 	.word	0x24004538
 8005ab4:	24004528 	.word	0x24004528
 8005ab8:	2400451c 	.word	0x2400451c
 8005abc:	2400452c 	.word	0x2400452c
 8005ac0:	24004530 	.word	0x24004530

08005ac4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d04d      	beq.n	8005b72 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	425b      	negs	r3, r3
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4413      	add	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <vPortFree+0xb8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4013      	ands	r3, r2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <vPortFree+0x44>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	60fb      	str	r3, [r7, #12]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <vPortFree+0x62>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	60bb      	str	r3, [r7, #8]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <vPortFree+0xb8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01e      	beq.n	8005b72 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d11a      	bne.n	8005b72 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <vPortFree+0xb8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	401a      	ands	r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b4c:	f001 fc16 	bl	800737c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	4b0a      	ldr	r3, [pc, #40]	; (8005b80 <vPortFree+0xbc>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4413      	add	r3, r2
 8005b5a:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <vPortFree+0xbc>)
 8005b5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b5e:	6938      	ldr	r0, [r7, #16]
 8005b60:	f000 f874 	bl	8005c4c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b64:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <vPortFree+0xc0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	4a06      	ldr	r2, [pc, #24]	; (8005b84 <vPortFree+0xc0>)
 8005b6c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b6e:	f001 fc13 	bl	8007398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b72:	bf00      	nop
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	24004538 	.word	0x24004538
 8005b80:	24004528 	.word	0x24004528
 8005b84:	24004534 	.word	0x24004534

08005b88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b8e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b94:	4b27      	ldr	r3, [pc, #156]	; (8005c34 <prvHeapInit+0xac>)
 8005b96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00c      	beq.n	8005bbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3307      	adds	r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0307 	bic.w	r3, r3, #7
 8005bae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	4a1f      	ldr	r2, [pc, #124]	; (8005c34 <prvHeapInit+0xac>)
 8005bb8:	4413      	add	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <prvHeapInit+0xb0>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bc6:	4b1c      	ldr	r3, [pc, #112]	; (8005c38 <prvHeapInit+0xb0>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0307 	bic.w	r3, r3, #7
 8005be2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4a15      	ldr	r2, [pc, #84]	; (8005c3c <prvHeapInit+0xb4>)
 8005be8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bea:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <prvHeapInit+0xb4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bf2:	4b12      	ldr	r3, [pc, #72]	; (8005c3c <prvHeapInit+0xb4>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	1ad2      	subs	r2, r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <prvHeapInit+0xb4>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	4a0a      	ldr	r2, [pc, #40]	; (8005c40 <prvHeapInit+0xb8>)
 8005c16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4a09      	ldr	r2, [pc, #36]	; (8005c44 <prvHeapInit+0xbc>)
 8005c1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <prvHeapInit+0xc0>)
 8005c22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c26:	601a      	str	r2, [r3, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	2400091c 	.word	0x2400091c
 8005c38:	2400451c 	.word	0x2400451c
 8005c3c:	24004524 	.word	0x24004524
 8005c40:	2400452c 	.word	0x2400452c
 8005c44:	24004528 	.word	0x24004528
 8005c48:	24004538 	.word	0x24004538

08005c4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c54:	4b28      	ldr	r3, [pc, #160]	; (8005cf8 <prvInsertBlockIntoFreeList+0xac>)
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e002      	b.n	8005c60 <prvInsertBlockIntoFreeList+0x14>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d8f7      	bhi.n	8005c5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	4413      	add	r3, r2
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d108      	bne.n	8005c8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	441a      	add	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	441a      	add	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d118      	bne.n	8005cd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <prvInsertBlockIntoFreeList+0xb0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d00d      	beq.n	8005cca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	441a      	add	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	e008      	b.n	8005cdc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <prvInsertBlockIntoFreeList+0xb0>)
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	e003      	b.n	8005cdc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d002      	beq.n	8005cea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	2400451c 	.word	0x2400451c
 8005cfc:	24004524 	.word	0x24004524

08005d00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f103 0208 	add.w	r2, r3, #8
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f103 0208 	add.w	r2, r3, #8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f103 0208 	add.w	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db8:	d103      	bne.n	8005dc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e00c      	b.n	8005ddc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e002      	b.n	8005dd0 <vListInsert+0x2e>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d2f6      	bcs.n	8005dca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6892      	ldr	r2, [r2, #8]
 8005e2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6852      	ldr	r2, [r2, #4]
 8005e34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d103      	bne.n	8005e48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	1e5a      	subs	r2, r3, #1
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3b04      	subs	r3, #4
 8005e78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3b04      	subs	r3, #4
 8005e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f023 0201 	bic.w	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3b04      	subs	r3, #4
 8005e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e98:	4a0c      	ldr	r2, [pc, #48]	; (8005ecc <pxPortInitialiseStack+0x64>)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3b14      	subs	r3, #20
 8005ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3b04      	subs	r3, #4
 8005eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f06f 0202 	mvn.w	r2, #2
 8005eb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3b20      	subs	r3, #32
 8005ebc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	08005ed1 	.word	0x08005ed1

08005ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005eda:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <prvTaskExitError+0x54>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee2:	d00a      	beq.n	8005efa <prvTaskExitError+0x2a>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	60fb      	str	r3, [r7, #12]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <prvTaskExitError+0x28>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	60bb      	str	r3, [r7, #8]
}
 8005f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f0e:	bf00      	nop
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0fc      	beq.n	8005f10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	24000024 	.word	0x24000024
	...

08005f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <pxCurrentTCBConst2>)
 8005f32:	6819      	ldr	r1, [r3, #0]
 8005f34:	6808      	ldr	r0, [r1, #0]
 8005f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3a:	f380 8809 	msr	PSP, r0
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f380 8811 	msr	BASEPRI, r0
 8005f4a:	4770      	bx	lr
 8005f4c:	f3af 8000 	nop.w

08005f50 <pxCurrentTCBConst2>:
 8005f50:	24004584 	.word	0x24004584
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop

08005f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f58:	4808      	ldr	r0, [pc, #32]	; (8005f7c <prvPortStartFirstTask+0x24>)
 8005f5a:	6800      	ldr	r0, [r0, #0]
 8005f5c:	6800      	ldr	r0, [r0, #0]
 8005f5e:	f380 8808 	msr	MSP, r0
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f380 8814 	msr	CONTROL, r0
 8005f6a:	b662      	cpsie	i
 8005f6c:	b661      	cpsie	f
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	df00      	svc	0
 8005f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f7a:	bf00      	nop
 8005f7c:	e000ed08 	.word	0xe000ed08

08005f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f86:	4b46      	ldr	r3, [pc, #280]	; (80060a0 <xPortStartScheduler+0x120>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a46      	ldr	r2, [pc, #280]	; (80060a4 <xPortStartScheduler+0x124>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10a      	bne.n	8005fa6 <xPortStartScheduler+0x26>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	613b      	str	r3, [r7, #16]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fa6:	4b3e      	ldr	r3, [pc, #248]	; (80060a0 <xPortStartScheduler+0x120>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a3f      	ldr	r2, [pc, #252]	; (80060a8 <xPortStartScheduler+0x128>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10a      	bne.n	8005fc6 <xPortStartScheduler+0x46>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	60fb      	str	r3, [r7, #12]
}
 8005fc2:	bf00      	nop
 8005fc4:	e7fe      	b.n	8005fc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fc6:	4b39      	ldr	r3, [pc, #228]	; (80060ac <xPortStartScheduler+0x12c>)
 8005fc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	22ff      	movs	r2, #255	; 0xff
 8005fd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <xPortStartScheduler+0x130>)
 8005fec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fee:	4b31      	ldr	r3, [pc, #196]	; (80060b4 <xPortStartScheduler+0x134>)
 8005ff0:	2207      	movs	r2, #7
 8005ff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ff4:	e009      	b.n	800600a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ff6:	4b2f      	ldr	r3, [pc, #188]	; (80060b4 <xPortStartScheduler+0x134>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	4a2d      	ldr	r2, [pc, #180]	; (80060b4 <xPortStartScheduler+0x134>)
 8005ffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	b2db      	uxtb	r3, r3
 8006008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800600a:	78fb      	ldrb	r3, [r7, #3]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b80      	cmp	r3, #128	; 0x80
 8006014:	d0ef      	beq.n	8005ff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006016:	4b27      	ldr	r3, [pc, #156]	; (80060b4 <xPortStartScheduler+0x134>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f1c3 0307 	rsb	r3, r3, #7
 800601e:	2b04      	cmp	r3, #4
 8006020:	d00a      	beq.n	8006038 <xPortStartScheduler+0xb8>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	60bb      	str	r3, [r7, #8]
}
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006038:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <xPortStartScheduler+0x134>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	4a1d      	ldr	r2, [pc, #116]	; (80060b4 <xPortStartScheduler+0x134>)
 8006040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006042:	4b1c      	ldr	r3, [pc, #112]	; (80060b4 <xPortStartScheduler+0x134>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800604a:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <xPortStartScheduler+0x134>)
 800604c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	b2da      	uxtb	r2, r3
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006056:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <xPortStartScheduler+0x138>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a17      	ldr	r2, [pc, #92]	; (80060b8 <xPortStartScheduler+0x138>)
 800605c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <xPortStartScheduler+0x138>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a14      	ldr	r2, [pc, #80]	; (80060b8 <xPortStartScheduler+0x138>)
 8006068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800606c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800606e:	f000 f8dd 	bl	800622c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006072:	4b12      	ldr	r3, [pc, #72]	; (80060bc <xPortStartScheduler+0x13c>)
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006078:	f000 f8fc 	bl	8006274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800607c:	4b10      	ldr	r3, [pc, #64]	; (80060c0 <xPortStartScheduler+0x140>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a0f      	ldr	r2, [pc, #60]	; (80060c0 <xPortStartScheduler+0x140>)
 8006082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006088:	f7ff ff66 	bl	8005f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800608c:	f001 faec 	bl	8007668 <vTaskSwitchContext>
	prvTaskExitError();
 8006090:	f7ff ff1e 	bl	8005ed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	e000ed00 	.word	0xe000ed00
 80060a4:	410fc271 	.word	0x410fc271
 80060a8:	410fc270 	.word	0x410fc270
 80060ac:	e000e400 	.word	0xe000e400
 80060b0:	2400453c 	.word	0x2400453c
 80060b4:	24004540 	.word	0x24004540
 80060b8:	e000ed20 	.word	0xe000ed20
 80060bc:	24000024 	.word	0x24000024
 80060c0:	e000ef34 	.word	0xe000ef34

080060c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	607b      	str	r3, [r7, #4]
}
 80060dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060de:	4b0f      	ldr	r3, [pc, #60]	; (800611c <vPortEnterCritical+0x58>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3301      	adds	r3, #1
 80060e4:	4a0d      	ldr	r2, [pc, #52]	; (800611c <vPortEnterCritical+0x58>)
 80060e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060e8:	4b0c      	ldr	r3, [pc, #48]	; (800611c <vPortEnterCritical+0x58>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d10f      	bne.n	8006110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <vPortEnterCritical+0x5c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <vPortEnterCritical+0x4c>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	603b      	str	r3, [r7, #0]
}
 800610c:	bf00      	nop
 800610e:	e7fe      	b.n	800610e <vPortEnterCritical+0x4a>
	}
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	24000024 	.word	0x24000024
 8006120:	e000ed04 	.word	0xe000ed04

08006124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800612a:	4b12      	ldr	r3, [pc, #72]	; (8006174 <vPortExitCritical+0x50>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <vPortExitCritical+0x24>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	607b      	str	r3, [r7, #4]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <vPortExitCritical+0x50>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3b01      	subs	r3, #1
 800614e:	4a09      	ldr	r2, [pc, #36]	; (8006174 <vPortExitCritical+0x50>)
 8006150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006152:	4b08      	ldr	r3, [pc, #32]	; (8006174 <vPortExitCritical+0x50>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d105      	bne.n	8006166 <vPortExitCritical+0x42>
 800615a:	2300      	movs	r3, #0
 800615c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	f383 8811 	msr	BASEPRI, r3
}
 8006164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	24000024 	.word	0x24000024
	...

08006180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006180:	f3ef 8009 	mrs	r0, PSP
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <pxCurrentTCBConst>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	f01e 0f10 	tst.w	lr, #16
 8006190:	bf08      	it	eq
 8006192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619a:	6010      	str	r0, [r2, #0]
 800619c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061a4:	f380 8811 	msr	BASEPRI, r0
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f001 fa5a 	bl	8007668 <vTaskSwitchContext>
 80061b4:	f04f 0000 	mov.w	r0, #0
 80061b8:	f380 8811 	msr	BASEPRI, r0
 80061bc:	bc09      	pop	{r0, r3}
 80061be:	6819      	ldr	r1, [r3, #0]
 80061c0:	6808      	ldr	r0, [r1, #0]
 80061c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c6:	f01e 0f10 	tst.w	lr, #16
 80061ca:	bf08      	it	eq
 80061cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061d0:	f380 8809 	msr	PSP, r0
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	f3af 8000 	nop.w

080061e0 <pxCurrentTCBConst>:
 80061e0:	24004584 	.word	0x24004584
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	607b      	str	r3, [r7, #4]
}
 8006200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006202:	f001 f977 	bl	80074f4 <xTaskIncrementTick>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800620c:	4b06      	ldr	r3, [pc, #24]	; (8006228 <xPortSysTickHandler+0x40>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f383 8811 	msr	BASEPRI, r3
}
 800621e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <vPortSetupTimerInterrupt+0x34>)
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006236:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <vPortSetupTimerInterrupt+0x38>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <vPortSetupTimerInterrupt+0x3c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a0a      	ldr	r2, [pc, #40]	; (800626c <vPortSetupTimerInterrupt+0x40>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	099b      	lsrs	r3, r3, #6
 8006248:	4a09      	ldr	r2, [pc, #36]	; (8006270 <vPortSetupTimerInterrupt+0x44>)
 800624a:	3b01      	subs	r3, #1
 800624c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800624e:	4b04      	ldr	r3, [pc, #16]	; (8006260 <vPortSetupTimerInterrupt+0x34>)
 8006250:	2207      	movs	r2, #7
 8006252:	601a      	str	r2, [r3, #0]
}
 8006254:	bf00      	nop
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	e000e010 	.word	0xe000e010
 8006264:	e000e018 	.word	0xe000e018
 8006268:	24000000 	.word	0x24000000
 800626c:	10624dd3 	.word	0x10624dd3
 8006270:	e000e014 	.word	0xe000e014

08006274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006284 <vPortEnableVFP+0x10>
 8006278:	6801      	ldr	r1, [r0, #0]
 800627a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800627e:	6001      	str	r1, [r0, #0]
 8006280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006282:	bf00      	nop
 8006284:	e000ed88 	.word	0xe000ed88

08006288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800628e:	f3ef 8305 	mrs	r3, IPSR
 8006292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b0f      	cmp	r3, #15
 8006298:	d914      	bls.n	80062c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <vPortValidateInterruptPriority+0x70>)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062a4:	4b15      	ldr	r3, [pc, #84]	; (80062fc <vPortValidateInterruptPriority+0x74>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	7afa      	ldrb	r2, [r7, #11]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d20a      	bcs.n	80062c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	607b      	str	r3, [r7, #4]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062c4:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <vPortValidateInterruptPriority+0x78>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062cc:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <vPortValidateInterruptPriority+0x7c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d90a      	bls.n	80062ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	603b      	str	r3, [r7, #0]
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <vPortValidateInterruptPriority+0x60>
	}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	e000e3f0 	.word	0xe000e3f0
 80062fc:	2400453c 	.word	0x2400453c
 8006300:	e000ed0c 	.word	0xe000ed0c
 8006304:	24004540 	.word	0x24004540

08006308 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <xQueueGenericReset+0x2a>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	60bb      	str	r3, [r7, #8]
}
 800632e:	bf00      	nop
 8006330:	e7fe      	b.n	8006330 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006332:	f7ff fec7 	bl	80060c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	68f9      	ldr	r1, [r7, #12]
 8006340:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006342:	fb01 f303 	mul.w	r3, r1, r3
 8006346:	441a      	add	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006362:	3b01      	subs	r3, #1
 8006364:	68f9      	ldr	r1, [r7, #12]
 8006366:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	441a      	add	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	22ff      	movs	r2, #255	; 0xff
 8006376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	22ff      	movs	r2, #255	; 0xff
 800637e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d114      	bne.n	80063b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01a      	beq.n	80063c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3310      	adds	r3, #16
 8006394:	4618      	mov	r0, r3
 8006396:	f001 fa1b 	bl	80077d0 <xTaskRemoveFromEventList>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d012      	beq.n	80063c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063a0:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <xQueueGenericReset+0xcc>)
 80063a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	e009      	b.n	80063c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	3310      	adds	r3, #16
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff fca2 	bl	8005d00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3324      	adds	r3, #36	; 0x24
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff fc9d 	bl	8005d00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063c6:	f7ff fead 	bl	8006124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063ca:	2301      	movs	r3, #1
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	e000ed04 	.word	0xe000ed04

080063d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08e      	sub	sp, #56	; 0x38
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <xQueueGenericCreateStatic+0x52>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <xQueueGenericCreateStatic+0x56>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <xQueueGenericCreateStatic+0x58>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	623b      	str	r3, [r7, #32]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d102      	bne.n	8006456 <xQueueGenericCreateStatic+0x7e>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <xQueueGenericCreateStatic+0x82>
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <xQueueGenericCreateStatic+0x84>
 800645a:	2300      	movs	r3, #0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	61fb      	str	r3, [r7, #28]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006476:	2350      	movs	r3, #80	; 0x50
 8006478:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b50      	cmp	r3, #80	; 0x50
 800647e:	d00a      	beq.n	8006496 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	61bb      	str	r3, [r7, #24]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006496:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00d      	beq.n	80064be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	4613      	mov	r3, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f83f 	bl	800653c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3730      	adds	r7, #48	; 0x30
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	4613      	mov	r3, r2
 80064d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	613b      	str	r3, [r7, #16]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	fb02 f303 	mul.w	r3, r2, r3
 80064fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	3350      	adds	r3, #80	; 0x50
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fa13 	bl	800592c <pvPortMalloc>
 8006506:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d011      	beq.n	8006532 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	3350      	adds	r3, #80	; 0x50
 8006516:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006520:	79fa      	ldrb	r2, [r7, #7]
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	4613      	mov	r3, r2
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f805 	bl	800653c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006532:	69bb      	ldr	r3, [r7, #24]
	}
 8006534:	4618      	mov	r0, r3
 8006536:	3720      	adds	r7, #32
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e002      	b.n	800655e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800656a:	2101      	movs	r1, #1
 800656c:	69b8      	ldr	r0, [r7, #24]
 800656e:	f7ff fecb 	bl	8006308 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006582:	b580      	push	{r7, lr}
 8006584:	b08a      	sub	sp, #40	; 0x28
 8006586:	af02      	add	r7, sp, #8
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	61bb      	str	r3, [r7, #24]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d90a      	bls.n	80065c8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	617b      	str	r3, [r7, #20]
}
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80065c8:	2302      	movs	r3, #2
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	2100      	movs	r1, #0
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff ff00 	bl	80063d8 <xQueueGenericCreateStatic>
 80065d8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80065e6:	69fb      	ldr	r3, [r7, #28]
	}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	613b      	str	r3, [r7, #16]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	429a      	cmp	r2, r3
 800661c:	d90a      	bls.n	8006634 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60fb      	str	r3, [r7, #12]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006634:	2202      	movs	r2, #2
 8006636:	2100      	movs	r1, #0
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff ff45 	bl	80064c8 <xQueueGenericCreate>
 800663e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800664c:	697b      	ldr	r3, [r7, #20]
	}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08e      	sub	sp, #56	; 0x38
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006666:	2300      	movs	r3, #0
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <xQueueGenericSend+0x32>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d103      	bne.n	8006698 <xQueueGenericSend+0x40>
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <xQueueGenericSend+0x44>
 8006698:	2301      	movs	r3, #1
 800669a:	e000      	b.n	800669e <xQueueGenericSend+0x46>
 800669c:	2300      	movs	r3, #0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <xQueueGenericSend+0x60>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d103      	bne.n	80066c6 <xQueueGenericSend+0x6e>
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d101      	bne.n	80066ca <xQueueGenericSend+0x72>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <xQueueGenericSend+0x74>
 80066ca:	2300      	movs	r3, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10a      	bne.n	80066e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	623b      	str	r3, [r7, #32]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066e6:	f001 fa35 	bl	8007b54 <xTaskGetSchedulerState>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d102      	bne.n	80066f6 <xQueueGenericSend+0x9e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <xQueueGenericSend+0xa2>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <xQueueGenericSend+0xa4>
 80066fa:	2300      	movs	r3, #0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <xQueueGenericSend+0xbe>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	61fb      	str	r3, [r7, #28]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006716:	f7ff fcd5 	bl	80060c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006722:	429a      	cmp	r2, r3
 8006724:	d302      	bcc.n	800672c <xQueueGenericSend+0xd4>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d129      	bne.n	8006780 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006732:	f000 fa2e 	bl	8006b92 <prvCopyDataToQueue>
 8006736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	d010      	beq.n	8006762 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	3324      	adds	r3, #36	; 0x24
 8006744:	4618      	mov	r0, r3
 8006746:	f001 f843 	bl	80077d0 <xTaskRemoveFromEventList>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d013      	beq.n	8006778 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006750:	4b3f      	ldr	r3, [pc, #252]	; (8006850 <xQueueGenericSend+0x1f8>)
 8006752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	e00a      	b.n	8006778 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006768:	4b39      	ldr	r3, [pc, #228]	; (8006850 <xQueueGenericSend+0x1f8>)
 800676a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006778:	f7ff fcd4 	bl	8006124 <vPortExitCritical>
				return pdPASS;
 800677c:	2301      	movs	r3, #1
 800677e:	e063      	b.n	8006848 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d103      	bne.n	800678e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006786:	f7ff fccd 	bl	8006124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800678a:	2300      	movs	r3, #0
 800678c:	e05c      	b.n	8006848 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800678e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006794:	f107 0314 	add.w	r3, r7, #20
 8006798:	4618      	mov	r0, r3
 800679a:	f001 f87d 	bl	8007898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800679e:	2301      	movs	r3, #1
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067a2:	f7ff fcbf 	bl	8006124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067a6:	f000 fde9 	bl	800737c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067aa:	f7ff fc8b 	bl	80060c4 <vPortEnterCritical>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b4:	b25b      	sxtb	r3, r3
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ba:	d103      	bne.n	80067c4 <xQueueGenericSend+0x16c>
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ca:	b25b      	sxtb	r3, r3
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d0:	d103      	bne.n	80067da <xQueueGenericSend+0x182>
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067da:	f7ff fca3 	bl	8006124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067de:	1d3a      	adds	r2, r7, #4
 80067e0:	f107 0314 	add.w	r3, r7, #20
 80067e4:	4611      	mov	r1, r2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f001 f86c 	bl	80078c4 <xTaskCheckForTimeOut>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d124      	bne.n	800683c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067f4:	f000 fac5 	bl	8006d82 <prvIsQueueFull>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d018      	beq.n	8006830 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	3310      	adds	r3, #16
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4611      	mov	r1, r2
 8006806:	4618      	mov	r0, r3
 8006808:	f000 ff92 	bl	8007730 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800680c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800680e:	f000 fa50 	bl	8006cb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006812:	f000 fdc1 	bl	8007398 <xTaskResumeAll>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	f47f af7c 	bne.w	8006716 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800681e:	4b0c      	ldr	r3, [pc, #48]	; (8006850 <xQueueGenericSend+0x1f8>)
 8006820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	e772      	b.n	8006716 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006832:	f000 fa3e 	bl	8006cb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006836:	f000 fdaf 	bl	8007398 <xTaskResumeAll>
 800683a:	e76c      	b.n	8006716 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800683c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800683e:	f000 fa38 	bl	8006cb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006842:	f000 fda9 	bl	8007398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006848:	4618      	mov	r0, r3
 800684a:	3738      	adds	r7, #56	; 0x38
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	e000ed04 	.word	0xe000ed04

08006854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b090      	sub	sp, #64	; 0x40
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <xQueueGenericSendFromISR+0x3c>
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <xQueueGenericSendFromISR+0x40>
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <xQueueGenericSendFromISR+0x42>
 8006894:	2300      	movs	r3, #0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d103      	bne.n	80068be <xQueueGenericSendFromISR+0x6a>
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <xQueueGenericSendFromISR+0x6e>
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <xQueueGenericSendFromISR+0x70>
 80068c2:	2300      	movs	r3, #0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	623b      	str	r3, [r7, #32]
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068de:	f7ff fcd3 	bl	8006288 <vPortValidateInterruptPriority>
	__asm volatile
 80068e2:	f3ef 8211 	mrs	r2, BASEPRI
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	61fa      	str	r2, [r7, #28]
 80068f8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80068fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006906:	429a      	cmp	r2, r3
 8006908:	d302      	bcc.n	8006910 <xQueueGenericSendFromISR+0xbc>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d12f      	bne.n	8006970 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006926:	f000 f934 	bl	8006b92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800692a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006932:	d112      	bne.n	800695a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d016      	beq.n	800696a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	3324      	adds	r3, #36	; 0x24
 8006940:	4618      	mov	r0, r3
 8006942:	f000 ff45 	bl	80077d0 <xTaskRemoveFromEventList>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00e      	beq.n	800696a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00b      	beq.n	800696a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	e007      	b.n	800696a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800695a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800695e:	3301      	adds	r3, #1
 8006960:	b2db      	uxtb	r3, r3
 8006962:	b25a      	sxtb	r2, r3
 8006964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800696a:	2301      	movs	r3, #1
 800696c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800696e:	e001      	b.n	8006974 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006970:	2300      	movs	r3, #0
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f383 8811 	msr	BASEPRI, r3
}
 800697e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006982:	4618      	mov	r0, r3
 8006984:	3740      	adds	r7, #64	; 0x40
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	; 0x30
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <xQueueReceive+0x30>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	623b      	str	r3, [r7, #32]
}
 80069b8:	bf00      	nop
 80069ba:	e7fe      	b.n	80069ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d103      	bne.n	80069ca <xQueueReceive+0x3e>
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <xQueueReceive+0x42>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <xQueueReceive+0x44>
 80069ce:	2300      	movs	r3, #0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xQueueReceive+0x5e>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	61fb      	str	r3, [r7, #28]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069ea:	f001 f8b3 	bl	8007b54 <xTaskGetSchedulerState>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d102      	bne.n	80069fa <xQueueReceive+0x6e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <xQueueReceive+0x72>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <xQueueReceive+0x74>
 80069fe:	2300      	movs	r3, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <xQueueReceive+0x8e>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	61bb      	str	r3, [r7, #24]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a1a:	f7ff fb53 	bl	80060c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01f      	beq.n	8006a6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a2e:	f000 f91a 	bl	8006c66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	1e5a      	subs	r2, r3, #1
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00f      	beq.n	8006a62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	3310      	adds	r3, #16
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fec2 	bl	80077d0 <xTaskRemoveFromEventList>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a52:	4b3d      	ldr	r3, [pc, #244]	; (8006b48 <xQueueReceive+0x1bc>)
 8006a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a62:	f7ff fb5f 	bl	8006124 <vPortExitCritical>
				return pdPASS;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e069      	b.n	8006b3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d103      	bne.n	8006a78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a70:	f7ff fb58 	bl	8006124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a74:	2300      	movs	r3, #0
 8006a76:	e062      	b.n	8006b3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a7e:	f107 0310 	add.w	r3, r7, #16
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 ff08 	bl	8007898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a8c:	f7ff fb4a 	bl	8006124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a90:	f000 fc74 	bl	800737c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a94:	f7ff fb16 	bl	80060c4 <vPortEnterCritical>
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a9e:	b25b      	sxtb	r3, r3
 8006aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aa4:	d103      	bne.n	8006aae <xQueueReceive+0x122>
 8006aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ab4:	b25b      	sxtb	r3, r3
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aba:	d103      	bne.n	8006ac4 <xQueueReceive+0x138>
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ac4:	f7ff fb2e 	bl	8006124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ac8:	1d3a      	adds	r2, r7, #4
 8006aca:	f107 0310 	add.w	r3, r7, #16
 8006ace:	4611      	mov	r1, r2
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fef7 	bl	80078c4 <xTaskCheckForTimeOut>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d123      	bne.n	8006b24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ade:	f000 f93a 	bl	8006d56 <prvIsQueueEmpty>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d017      	beq.n	8006b18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	3324      	adds	r3, #36	; 0x24
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fe1d 	bl	8007730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af8:	f000 f8db 	bl	8006cb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006afc:	f000 fc4c 	bl	8007398 <xTaskResumeAll>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d189      	bne.n	8006a1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b06:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <xQueueReceive+0x1bc>)
 8006b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	e780      	b.n	8006a1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b1a:	f000 f8ca 	bl	8006cb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b1e:	f000 fc3b 	bl	8007398 <xTaskResumeAll>
 8006b22:	e77a      	b.n	8006a1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b26:	f000 f8c4 	bl	8006cb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b2a:	f000 fc35 	bl	8007398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b30:	f000 f911 	bl	8006d56 <prvIsQueueEmpty>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f43f af6f 	beq.w	8006a1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3730      	adds	r7, #48	; 0x30
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10a      	bne.n	8006b74 <vQueueDelete+0x28>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	60bb      	str	r3, [r7, #8]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f947 	bl	8006e08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7fe ff9d 	bl	8005ac4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b086      	sub	sp, #24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10d      	bne.n	8006bcc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d14d      	bne.n	8006c54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 ffe7 	bl	8007b90 <xTaskPriorityDisinherit>
 8006bc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	609a      	str	r2, [r3, #8]
 8006bca:	e043      	b.n	8006c54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d119      	bne.n	8006c06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6858      	ldr	r0, [r3, #4]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	461a      	mov	r2, r3
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	f001 fc0b 	bl	80083f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	441a      	add	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d32b      	bcc.n	8006c54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	605a      	str	r2, [r3, #4]
 8006c04:	e026      	b.n	8006c54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	68d8      	ldr	r0, [r3, #12]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	461a      	mov	r2, r3
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	f001 fbf1 	bl	80083f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	425b      	negs	r3, r3
 8006c20:	441a      	add	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d207      	bcs.n	8006c42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	425b      	negs	r3, r3
 8006c3c:	441a      	add	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d105      	bne.n	8006c54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c5c:	697b      	ldr	r3, [r7, #20]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d018      	beq.n	8006caa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	441a      	add	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d303      	bcc.n	8006c9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68d9      	ldr	r1, [r3, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	6838      	ldr	r0, [r7, #0]
 8006ca6:	f001 fba7 	bl	80083f8 <memcpy>
	}
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cba:	f7ff fa03 	bl	80060c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cc6:	e011      	b.n	8006cec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d012      	beq.n	8006cf6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3324      	adds	r3, #36	; 0x24
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fd7b 	bl	80077d0 <xTaskRemoveFromEventList>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ce0:	f000 fe52 	bl	8007988 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dce9      	bgt.n	8006cc8 <prvUnlockQueue+0x16>
 8006cf4:	e000      	b.n	8006cf8 <prvUnlockQueue+0x46>
					break;
 8006cf6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	22ff      	movs	r2, #255	; 0xff
 8006cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d00:	f7ff fa10 	bl	8006124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d04:	f7ff f9de 	bl	80060c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d10:	e011      	b.n	8006d36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d012      	beq.n	8006d40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3310      	adds	r3, #16
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fd56 	bl	80077d0 <xTaskRemoveFromEventList>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d2a:	f000 fe2d 	bl	8007988 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dce9      	bgt.n	8006d12 <prvUnlockQueue+0x60>
 8006d3e:	e000      	b.n	8006d42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	22ff      	movs	r2, #255	; 0xff
 8006d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d4a:	f7ff f9eb 	bl	8006124 <vPortExitCritical>
}
 8006d4e:	bf00      	nop
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d5e:	f7ff f9b1 	bl	80060c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	e001      	b.n	8006d74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d74:	f7ff f9d6 	bl	8006124 <vPortExitCritical>

	return xReturn;
 8006d78:	68fb      	ldr	r3, [r7, #12]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d8a:	f7ff f99b 	bl	80060c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d102      	bne.n	8006da0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e001      	b.n	8006da4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006da4:	f7ff f9be 	bl	8006124 <vPortExitCritical>

	return xReturn;
 8006da8:	68fb      	ldr	r3, [r7, #12]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e014      	b.n	8006dee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006dc4:	4a0f      	ldr	r2, [pc, #60]	; (8006e04 <vQueueAddToRegistry+0x50>)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10b      	bne.n	8006de8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006dd0:	490c      	ldr	r1, [pc, #48]	; (8006e04 <vQueueAddToRegistry+0x50>)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006dda:	4a0a      	ldr	r2, [pc, #40]	; (8006e04 <vQueueAddToRegistry+0x50>)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4413      	add	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006de6:	e006      	b.n	8006df6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b07      	cmp	r3, #7
 8006df2:	d9e7      	bls.n	8006dc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	24004544 	.word	0x24004544

08006e08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e016      	b.n	8006e44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006e16:	4a10      	ldr	r2, [pc, #64]	; (8006e58 <vQueueUnregisterQueue+0x50>)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d10b      	bne.n	8006e3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006e26:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <vQueueUnregisterQueue+0x50>)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006e30:	4a09      	ldr	r2, [pc, #36]	; (8006e58 <vQueueUnregisterQueue+0x50>)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	4413      	add	r3, r2
 8006e38:	2200      	movs	r2, #0
 8006e3a:	605a      	str	r2, [r3, #4]
				break;
 8006e3c:	e006      	b.n	8006e4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b07      	cmp	r3, #7
 8006e48:	d9e5      	bls.n	8006e16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	24004544 	.word	0x24004544

08006e5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e6c:	f7ff f92a 	bl	80060c4 <vPortEnterCritical>
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e7c:	d103      	bne.n	8006e86 <vQueueWaitForMessageRestricted+0x2a>
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e8c:	b25b      	sxtb	r3, r3
 8006e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e92:	d103      	bne.n	8006e9c <vQueueWaitForMessageRestricted+0x40>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e9c:	f7ff f942 	bl	8006124 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fc61 	bl	8007778 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006eb6:	6978      	ldr	r0, [r7, #20]
 8006eb8:	f7ff fefb 	bl	8006cb2 <prvUnlockQueue>
	}
 8006ebc:	bf00      	nop
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08e      	sub	sp, #56	; 0x38
 8006ec8:	af04      	add	r7, sp, #16
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10a      	bne.n	8006eee <xTaskCreateStatic+0x2a>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	623b      	str	r3, [r7, #32]
}
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <xTaskCreateStatic+0x46>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	61fb      	str	r3, [r7, #28]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f0a:	23bc      	movs	r3, #188	; 0xbc
 8006f0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2bbc      	cmp	r3, #188	; 0xbc
 8006f12:	d00a      	beq.n	8006f2a <xTaskCreateStatic+0x66>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	61bb      	str	r3, [r7, #24]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01e      	beq.n	8006f70 <xTaskCreateStatic+0xac>
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d01b      	beq.n	8006f70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	9303      	str	r3, [sp, #12]
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	9302      	str	r3, [sp, #8]
 8006f52:	f107 0314 	add.w	r3, r7, #20
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	68b9      	ldr	r1, [r7, #8]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 f850 	bl	8007008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f6a:	f000 f8f3 	bl	8007154 <prvAddNewTaskToReadyList>
 8006f6e:	e001      	b.n	8006f74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f74:	697b      	ldr	r3, [r7, #20]
	}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3728      	adds	r7, #40	; 0x28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b08c      	sub	sp, #48	; 0x30
 8006f82:	af04      	add	r7, sp, #16
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe fcca 	bl	800592c <pvPortMalloc>
 8006f98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00e      	beq.n	8006fbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fa0:	20bc      	movs	r0, #188	; 0xbc
 8006fa2:	f7fe fcc3 	bl	800592c <pvPortMalloc>
 8006fa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8006fb4:	e005      	b.n	8006fc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fb6:	6978      	ldr	r0, [r7, #20]
 8006fb8:	f7fe fd84 	bl	8005ac4 <vPortFree>
 8006fbc:	e001      	b.n	8006fc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d017      	beq.n	8006ff8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fd0:	88fa      	ldrh	r2, [r7, #6]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9303      	str	r3, [sp, #12]
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	9302      	str	r3, [sp, #8]
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 f80e 	bl	8007008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fec:	69f8      	ldr	r0, [r7, #28]
 8006fee:	f000 f8b1 	bl	8007154 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	61bb      	str	r3, [r7, #24]
 8006ff6:	e002      	b.n	8006ffe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ffc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
	}
 8007000:	4618      	mov	r0, r3
 8007002:	3720      	adds	r7, #32
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	461a      	mov	r2, r3
 8007020:	21a5      	movs	r1, #165	; 0xa5
 8007022:	f001 f9f7 	bl	8008414 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007030:	440b      	add	r3, r1
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f023 0307 	bic.w	r3, r3, #7
 800703e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <prvInitialiseNewTask+0x58>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	617b      	str	r3, [r7, #20]
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d01f      	beq.n	80070a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007066:	2300      	movs	r3, #0
 8007068:	61fb      	str	r3, [r7, #28]
 800706a:	e012      	b.n	8007092 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	7819      	ldrb	r1, [r3, #0]
 8007074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	3334      	adds	r3, #52	; 0x34
 800707c:	460a      	mov	r2, r1
 800707e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	4413      	add	r3, r2
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d006      	beq.n	800709a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	3301      	adds	r3, #1
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	2b0f      	cmp	r3, #15
 8007096:	d9e9      	bls.n	800706c <prvInitialiseNewTask+0x64>
 8007098:	e000      	b.n	800709c <prvInitialiseNewTask+0x94>
			{
				break;
 800709a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070a4:	e003      	b.n	80070ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	2b37      	cmp	r3, #55	; 0x37
 80070b2:	d901      	bls.n	80070b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070b4:	2337      	movs	r3, #55	; 0x37
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	2200      	movs	r2, #0
 80070c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	3304      	adds	r3, #4
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fe36 	bl	8005d40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	3318      	adds	r3, #24
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fe fe31 	bl	8005d40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	3354      	adds	r3, #84	; 0x54
 8007108:	2260      	movs	r2, #96	; 0x60
 800710a:	2100      	movs	r1, #0
 800710c:	4618      	mov	r0, r3
 800710e:	f001 f981 	bl	8008414 <memset>
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	4a0c      	ldr	r2, [pc, #48]	; (8007148 <prvInitialiseNewTask+0x140>)
 8007116:	659a      	str	r2, [r3, #88]	; 0x58
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	4a0c      	ldr	r2, [pc, #48]	; (800714c <prvInitialiseNewTask+0x144>)
 800711c:	65da      	str	r2, [r3, #92]	; 0x5c
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	4a0b      	ldr	r2, [pc, #44]	; (8007150 <prvInitialiseNewTask+0x148>)
 8007122:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	69b8      	ldr	r0, [r7, #24]
 800712a:	f7fe fe9d 	bl	8005e68 <pxPortInitialiseStack>
 800712e:	4602      	mov	r2, r0
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800713e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007140:	bf00      	nop
 8007142:	3720      	adds	r7, #32
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	080086bc 	.word	0x080086bc
 800714c:	080086dc 	.word	0x080086dc
 8007150:	0800869c 	.word	0x0800869c

08007154 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800715c:	f7fe ffb2 	bl	80060c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007160:	4b2d      	ldr	r3, [pc, #180]	; (8007218 <prvAddNewTaskToReadyList+0xc4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3301      	adds	r3, #1
 8007166:	4a2c      	ldr	r2, [pc, #176]	; (8007218 <prvAddNewTaskToReadyList+0xc4>)
 8007168:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800716a:	4b2c      	ldr	r3, [pc, #176]	; (800721c <prvAddNewTaskToReadyList+0xc8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007172:	4a2a      	ldr	r2, [pc, #168]	; (800721c <prvAddNewTaskToReadyList+0xc8>)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007178:	4b27      	ldr	r3, [pc, #156]	; (8007218 <prvAddNewTaskToReadyList+0xc4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d110      	bne.n	80071a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007180:	f000 fc26 	bl	80079d0 <prvInitialiseTaskLists>
 8007184:	e00d      	b.n	80071a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007186:	4b26      	ldr	r3, [pc, #152]	; (8007220 <prvAddNewTaskToReadyList+0xcc>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800718e:	4b23      	ldr	r3, [pc, #140]	; (800721c <prvAddNewTaskToReadyList+0xc8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	429a      	cmp	r2, r3
 800719a:	d802      	bhi.n	80071a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800719c:	4a1f      	ldr	r2, [pc, #124]	; (800721c <prvAddNewTaskToReadyList+0xc8>)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071a2:	4b20      	ldr	r3, [pc, #128]	; (8007224 <prvAddNewTaskToReadyList+0xd0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3301      	adds	r3, #1
 80071a8:	4a1e      	ldr	r2, [pc, #120]	; (8007224 <prvAddNewTaskToReadyList+0xd0>)
 80071aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071ac:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <prvAddNewTaskToReadyList+0xd0>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b8:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <prvAddNewTaskToReadyList+0xd4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d903      	bls.n	80071c8 <prvAddNewTaskToReadyList+0x74>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	4a18      	ldr	r2, [pc, #96]	; (8007228 <prvAddNewTaskToReadyList+0xd4>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4a15      	ldr	r2, [pc, #84]	; (800722c <prvAddNewTaskToReadyList+0xd8>)
 80071d6:	441a      	add	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3304      	adds	r3, #4
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	f7fe fdbb 	bl	8005d5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071e4:	f7fe ff9e 	bl	8006124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071e8:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <prvAddNewTaskToReadyList+0xcc>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00e      	beq.n	800720e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071f0:	4b0a      	ldr	r3, [pc, #40]	; (800721c <prvAddNewTaskToReadyList+0xc8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d207      	bcs.n	800720e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071fe:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <prvAddNewTaskToReadyList+0xdc>)
 8007200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	24004a58 	.word	0x24004a58
 800721c:	24004584 	.word	0x24004584
 8007220:	24004a64 	.word	0x24004a64
 8007224:	24004a74 	.word	0x24004a74
 8007228:	24004a60 	.word	0x24004a60
 800722c:	24004588 	.word	0x24004588
 8007230:	e000ed04 	.word	0xe000ed04

08007234 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d017      	beq.n	8007276 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <vTaskDelay+0x60>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <vTaskDelay+0x30>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	60bb      	str	r3, [r7, #8]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007264:	f000 f88a 	bl	800737c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007268:	2100      	movs	r1, #0
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fcfe 	bl	8007c6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007270:	f000 f892 	bl	8007398 <xTaskResumeAll>
 8007274:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d107      	bne.n	800728c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800727c:	4b06      	ldr	r3, [pc, #24]	; (8007298 <vTaskDelay+0x64>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800728c:	bf00      	nop
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	24004a80 	.word	0x24004a80
 8007298:	e000ed04 	.word	0xe000ed04

0800729c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	; 0x28
 80072a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072aa:	463a      	mov	r2, r7
 80072ac:	1d39      	adds	r1, r7, #4
 80072ae:	f107 0308 	add.w	r3, r7, #8
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe fb06 	bl	80058c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	9202      	str	r2, [sp, #8]
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	2300      	movs	r3, #0
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	2300      	movs	r3, #0
 80072c8:	460a      	mov	r2, r1
 80072ca:	4924      	ldr	r1, [pc, #144]	; (800735c <vTaskStartScheduler+0xc0>)
 80072cc:	4824      	ldr	r0, [pc, #144]	; (8007360 <vTaskStartScheduler+0xc4>)
 80072ce:	f7ff fdf9 	bl	8006ec4 <xTaskCreateStatic>
 80072d2:	4603      	mov	r3, r0
 80072d4:	4a23      	ldr	r2, [pc, #140]	; (8007364 <vTaskStartScheduler+0xc8>)
 80072d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072d8:	4b22      	ldr	r3, [pc, #136]	; (8007364 <vTaskStartScheduler+0xc8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072e0:	2301      	movs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e001      	b.n	80072ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d102      	bne.n	80072f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072f0:	f000 fd10 	bl	8007d14 <xTimerCreateTimerTask>
 80072f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d11b      	bne.n	8007334 <vTaskStartScheduler+0x98>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	613b      	str	r3, [r7, #16]
}
 800730e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007310:	4b15      	ldr	r3, [pc, #84]	; (8007368 <vTaskStartScheduler+0xcc>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3354      	adds	r3, #84	; 0x54
 8007316:	4a15      	ldr	r2, [pc, #84]	; (800736c <vTaskStartScheduler+0xd0>)
 8007318:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800731a:	4b15      	ldr	r3, [pc, #84]	; (8007370 <vTaskStartScheduler+0xd4>)
 800731c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007320:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007322:	4b14      	ldr	r3, [pc, #80]	; (8007374 <vTaskStartScheduler+0xd8>)
 8007324:	2201      	movs	r2, #1
 8007326:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007328:	4b13      	ldr	r3, [pc, #76]	; (8007378 <vTaskStartScheduler+0xdc>)
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800732e:	f7fe fe27 	bl	8005f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007332:	e00e      	b.n	8007352 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800733a:	d10a      	bne.n	8007352 <vTaskStartScheduler+0xb6>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	60fb      	str	r3, [r7, #12]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <vTaskStartScheduler+0xb4>
}
 8007352:	bf00      	nop
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	080085e4 	.word	0x080085e4
 8007360:	080079a1 	.word	0x080079a1
 8007364:	24004a7c 	.word	0x24004a7c
 8007368:	24004584 	.word	0x24004584
 800736c:	24000028 	.word	0x24000028
 8007370:	24004a78 	.word	0x24004a78
 8007374:	24004a64 	.word	0x24004a64
 8007378:	24004a5c 	.word	0x24004a5c

0800737c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007380:	4b04      	ldr	r3, [pc, #16]	; (8007394 <vTaskSuspendAll+0x18>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3301      	adds	r3, #1
 8007386:	4a03      	ldr	r2, [pc, #12]	; (8007394 <vTaskSuspendAll+0x18>)
 8007388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800738a:	bf00      	nop
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	24004a80 	.word	0x24004a80

08007398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073a6:	4b42      	ldr	r3, [pc, #264]	; (80074b0 <xTaskResumeAll+0x118>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	603b      	str	r3, [r7, #0]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073c4:	f7fe fe7e 	bl	80060c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073c8:	4b39      	ldr	r3, [pc, #228]	; (80074b0 <xTaskResumeAll+0x118>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	4a38      	ldr	r2, [pc, #224]	; (80074b0 <xTaskResumeAll+0x118>)
 80073d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d2:	4b37      	ldr	r3, [pc, #220]	; (80074b0 <xTaskResumeAll+0x118>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d162      	bne.n	80074a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073da:	4b36      	ldr	r3, [pc, #216]	; (80074b4 <xTaskResumeAll+0x11c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d05e      	beq.n	80074a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073e2:	e02f      	b.n	8007444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e4:	4b34      	ldr	r3, [pc, #208]	; (80074b8 <xTaskResumeAll+0x120>)
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3318      	adds	r3, #24
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe fd0f 	bl	8005e14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fd0a 	bl	8005e14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007404:	4b2d      	ldr	r3, [pc, #180]	; (80074bc <xTaskResumeAll+0x124>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d903      	bls.n	8007414 <xTaskResumeAll+0x7c>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	4a2a      	ldr	r2, [pc, #168]	; (80074bc <xTaskResumeAll+0x124>)
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4a27      	ldr	r2, [pc, #156]	; (80074c0 <xTaskResumeAll+0x128>)
 8007422:	441a      	add	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3304      	adds	r3, #4
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f7fe fc95 	bl	8005d5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	4b23      	ldr	r3, [pc, #140]	; (80074c4 <xTaskResumeAll+0x12c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743a:	429a      	cmp	r2, r3
 800743c:	d302      	bcc.n	8007444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800743e:	4b22      	ldr	r3, [pc, #136]	; (80074c8 <xTaskResumeAll+0x130>)
 8007440:	2201      	movs	r2, #1
 8007442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007444:	4b1c      	ldr	r3, [pc, #112]	; (80074b8 <xTaskResumeAll+0x120>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1cb      	bne.n	80073e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007452:	f000 fb5f 	bl	8007b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007456:	4b1d      	ldr	r3, [pc, #116]	; (80074cc <xTaskResumeAll+0x134>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d010      	beq.n	8007484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007462:	f000 f847 	bl	80074f4 <xTaskIncrementTick>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <xTaskResumeAll+0x130>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3b01      	subs	r3, #1
 8007476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1f1      	bne.n	8007462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800747e:	4b13      	ldr	r3, [pc, #76]	; (80074cc <xTaskResumeAll+0x134>)
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007484:	4b10      	ldr	r3, [pc, #64]	; (80074c8 <xTaskResumeAll+0x130>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d009      	beq.n	80074a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800748c:	2301      	movs	r3, #1
 800748e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007490:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <xTaskResumeAll+0x138>)
 8007492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074a0:	f7fe fe40 	bl	8006124 <vPortExitCritical>

	return xAlreadyYielded;
 80074a4:	68bb      	ldr	r3, [r7, #8]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	24004a80 	.word	0x24004a80
 80074b4:	24004a58 	.word	0x24004a58
 80074b8:	24004a18 	.word	0x24004a18
 80074bc:	24004a60 	.word	0x24004a60
 80074c0:	24004588 	.word	0x24004588
 80074c4:	24004584 	.word	0x24004584
 80074c8:	24004a6c 	.word	0x24004a6c
 80074cc:	24004a68 	.word	0x24004a68
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074da:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <xTaskGetTickCount+0x1c>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074e0:	687b      	ldr	r3, [r7, #4]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	24004a5c 	.word	0x24004a5c

080074f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074fe:	4b4f      	ldr	r3, [pc, #316]	; (800763c <xTaskIncrementTick+0x148>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f040 808f 	bne.w	8007626 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007508:	4b4d      	ldr	r3, [pc, #308]	; (8007640 <xTaskIncrementTick+0x14c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3301      	adds	r3, #1
 800750e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007510:	4a4b      	ldr	r2, [pc, #300]	; (8007640 <xTaskIncrementTick+0x14c>)
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d120      	bne.n	800755e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800751c:	4b49      	ldr	r3, [pc, #292]	; (8007644 <xTaskIncrementTick+0x150>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <xTaskIncrementTick+0x48>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	603b      	str	r3, [r7, #0]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <xTaskIncrementTick+0x46>
 800753c:	4b41      	ldr	r3, [pc, #260]	; (8007644 <xTaskIncrementTick+0x150>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	4b41      	ldr	r3, [pc, #260]	; (8007648 <xTaskIncrementTick+0x154>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a3f      	ldr	r2, [pc, #252]	; (8007644 <xTaskIncrementTick+0x150>)
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	4a3f      	ldr	r2, [pc, #252]	; (8007648 <xTaskIncrementTick+0x154>)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	4b3e      	ldr	r3, [pc, #248]	; (800764c <xTaskIncrementTick+0x158>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3301      	adds	r3, #1
 8007556:	4a3d      	ldr	r2, [pc, #244]	; (800764c <xTaskIncrementTick+0x158>)
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	f000 fadb 	bl	8007b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800755e:	4b3c      	ldr	r3, [pc, #240]	; (8007650 <xTaskIncrementTick+0x15c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	429a      	cmp	r2, r3
 8007566:	d349      	bcc.n	80075fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007568:	4b36      	ldr	r3, [pc, #216]	; (8007644 <xTaskIncrementTick+0x150>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d104      	bne.n	800757c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007572:	4b37      	ldr	r3, [pc, #220]	; (8007650 <xTaskIncrementTick+0x15c>)
 8007574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007578:	601a      	str	r2, [r3, #0]
					break;
 800757a:	e03f      	b.n	80075fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800757c:	4b31      	ldr	r3, [pc, #196]	; (8007644 <xTaskIncrementTick+0x150>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d203      	bcs.n	800759c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007594:	4a2e      	ldr	r2, [pc, #184]	; (8007650 <xTaskIncrementTick+0x15c>)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800759a:	e02f      	b.n	80075fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	3304      	adds	r3, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fc37 	bl	8005e14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d004      	beq.n	80075b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	3318      	adds	r3, #24
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fc2e 	bl	8005e14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075bc:	4b25      	ldr	r3, [pc, #148]	; (8007654 <xTaskIncrementTick+0x160>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d903      	bls.n	80075cc <xTaskIncrementTick+0xd8>
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	4a22      	ldr	r2, [pc, #136]	; (8007654 <xTaskIncrementTick+0x160>)
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4a1f      	ldr	r2, [pc, #124]	; (8007658 <xTaskIncrementTick+0x164>)
 80075da:	441a      	add	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fe fbb9 	bl	8005d5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	4b1b      	ldr	r3, [pc, #108]	; (800765c <xTaskIncrementTick+0x168>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d3b8      	bcc.n	8007568 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80075f6:	2301      	movs	r3, #1
 80075f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075fa:	e7b5      	b.n	8007568 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075fc:	4b17      	ldr	r3, [pc, #92]	; (800765c <xTaskIncrementTick+0x168>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007602:	4915      	ldr	r1, [pc, #84]	; (8007658 <xTaskIncrementTick+0x164>)
 8007604:	4613      	mov	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d901      	bls.n	8007618 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007614:	2301      	movs	r3, #1
 8007616:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007618:	4b11      	ldr	r3, [pc, #68]	; (8007660 <xTaskIncrementTick+0x16c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d007      	beq.n	8007630 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007620:	2301      	movs	r3, #1
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	e004      	b.n	8007630 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007626:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <xTaskIncrementTick+0x170>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3301      	adds	r3, #1
 800762c:	4a0d      	ldr	r2, [pc, #52]	; (8007664 <xTaskIncrementTick+0x170>)
 800762e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007630:	697b      	ldr	r3, [r7, #20]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	24004a80 	.word	0x24004a80
 8007640:	24004a5c 	.word	0x24004a5c
 8007644:	24004a10 	.word	0x24004a10
 8007648:	24004a14 	.word	0x24004a14
 800764c:	24004a70 	.word	0x24004a70
 8007650:	24004a78 	.word	0x24004a78
 8007654:	24004a60 	.word	0x24004a60
 8007658:	24004588 	.word	0x24004588
 800765c:	24004584 	.word	0x24004584
 8007660:	24004a6c 	.word	0x24004a6c
 8007664:	24004a68 	.word	0x24004a68

08007668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800766e:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <vTaskSwitchContext+0xb0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007676:	4b29      	ldr	r3, [pc, #164]	; (800771c <vTaskSwitchContext+0xb4>)
 8007678:	2201      	movs	r2, #1
 800767a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800767c:	e046      	b.n	800770c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800767e:	4b27      	ldr	r3, [pc, #156]	; (800771c <vTaskSwitchContext+0xb4>)
 8007680:	2200      	movs	r2, #0
 8007682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007684:	4b26      	ldr	r3, [pc, #152]	; (8007720 <vTaskSwitchContext+0xb8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	e010      	b.n	80076ae <vTaskSwitchContext+0x46>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	607b      	str	r3, [r7, #4]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <vTaskSwitchContext+0x3e>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	491d      	ldr	r1, [pc, #116]	; (8007724 <vTaskSwitchContext+0xbc>)
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	440b      	add	r3, r1
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0e4      	beq.n	800768c <vTaskSwitchContext+0x24>
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4a15      	ldr	r2, [pc, #84]	; (8007724 <vTaskSwitchContext+0xbc>)
 80076ce:	4413      	add	r3, r2
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	605a      	str	r2, [r3, #4]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	3308      	adds	r3, #8
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d104      	bne.n	80076f2 <vTaskSwitchContext+0x8a>
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	605a      	str	r2, [r3, #4]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4a0b      	ldr	r2, [pc, #44]	; (8007728 <vTaskSwitchContext+0xc0>)
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	4a08      	ldr	r2, [pc, #32]	; (8007720 <vTaskSwitchContext+0xb8>)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <vTaskSwitchContext+0xc0>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3354      	adds	r3, #84	; 0x54
 8007708:	4a08      	ldr	r2, [pc, #32]	; (800772c <vTaskSwitchContext+0xc4>)
 800770a:	6013      	str	r3, [r2, #0]
}
 800770c:	bf00      	nop
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	24004a80 	.word	0x24004a80
 800771c:	24004a6c 	.word	0x24004a6c
 8007720:	24004a60 	.word	0x24004a60
 8007724:	24004588 	.word	0x24004588
 8007728:	24004584 	.word	0x24004584
 800772c:	24000028 	.word	0x24000028

08007730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	60fb      	str	r3, [r7, #12]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007756:	4b07      	ldr	r3, [pc, #28]	; (8007774 <vTaskPlaceOnEventList+0x44>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3318      	adds	r3, #24
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fe fb1f 	bl	8005da2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007764:	2101      	movs	r1, #1
 8007766:	6838      	ldr	r0, [r7, #0]
 8007768:	f000 fa80 	bl	8007c6c <prvAddCurrentTaskToDelayedList>
}
 800776c:	bf00      	nop
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	24004584 	.word	0x24004584

08007778 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	617b      	str	r3, [r7, #20]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077a0:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <vTaskPlaceOnEventListRestricted+0x54>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3318      	adds	r3, #24
 80077a6:	4619      	mov	r1, r3
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7fe fad6 	bl	8005d5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80077b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	68b8      	ldr	r0, [r7, #8]
 80077be:	f000 fa55 	bl	8007c6c <prvAddCurrentTaskToDelayedList>
	}
 80077c2:	bf00      	nop
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	24004584 	.word	0x24004584

080077d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10a      	bne.n	80077fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60fb      	str	r3, [r7, #12]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	3318      	adds	r3, #24
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe fb07 	bl	8005e14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007806:	4b1e      	ldr	r3, [pc, #120]	; (8007880 <xTaskRemoveFromEventList+0xb0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d11d      	bne.n	800784a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fafe 	bl	8005e14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	4b19      	ldr	r3, [pc, #100]	; (8007884 <xTaskRemoveFromEventList+0xb4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d903      	bls.n	800782c <xTaskRemoveFromEventList+0x5c>
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	4a16      	ldr	r2, [pc, #88]	; (8007884 <xTaskRemoveFromEventList+0xb4>)
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4a13      	ldr	r2, [pc, #76]	; (8007888 <xTaskRemoveFromEventList+0xb8>)
 800783a:	441a      	add	r2, r3
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	3304      	adds	r3, #4
 8007840:	4619      	mov	r1, r3
 8007842:	4610      	mov	r0, r2
 8007844:	f7fe fa89 	bl	8005d5a <vListInsertEnd>
 8007848:	e005      	b.n	8007856 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	3318      	adds	r3, #24
 800784e:	4619      	mov	r1, r3
 8007850:	480e      	ldr	r0, [pc, #56]	; (800788c <xTaskRemoveFromEventList+0xbc>)
 8007852:	f7fe fa82 	bl	8005d5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785a:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <xTaskRemoveFromEventList+0xc0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	429a      	cmp	r2, r3
 8007862:	d905      	bls.n	8007870 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007864:	2301      	movs	r3, #1
 8007866:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <xTaskRemoveFromEventList+0xc4>)
 800786a:	2201      	movs	r2, #1
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	e001      	b.n	8007874 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007870:	2300      	movs	r3, #0
 8007872:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007874:	697b      	ldr	r3, [r7, #20]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	24004a80 	.word	0x24004a80
 8007884:	24004a60 	.word	0x24004a60
 8007888:	24004588 	.word	0x24004588
 800788c:	24004a18 	.word	0x24004a18
 8007890:	24004584 	.word	0x24004584
 8007894:	24004a6c 	.word	0x24004a6c

08007898 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078a0:	4b06      	ldr	r3, [pc, #24]	; (80078bc <vTaskInternalSetTimeOutState+0x24>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078a8:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <vTaskInternalSetTimeOutState+0x28>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	605a      	str	r2, [r3, #4]
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	24004a70 	.word	0x24004a70
 80078c0:	24004a5c 	.word	0x24004a5c

080078c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	613b      	str	r3, [r7, #16]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10a      	bne.n	8007906 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	60fb      	str	r3, [r7, #12]
}
 8007902:	bf00      	nop
 8007904:	e7fe      	b.n	8007904 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007906:	f7fe fbdd 	bl	80060c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800790a:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <xTaskCheckForTimeOut+0xbc>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007922:	d102      	bne.n	800792a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007924:	2300      	movs	r3, #0
 8007926:	61fb      	str	r3, [r7, #28]
 8007928:	e023      	b.n	8007972 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	4b15      	ldr	r3, [pc, #84]	; (8007984 <xTaskCheckForTimeOut+0xc0>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d007      	beq.n	8007946 <xTaskCheckForTimeOut+0x82>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	429a      	cmp	r2, r3
 800793e:	d302      	bcc.n	8007946 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007940:	2301      	movs	r3, #1
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	e015      	b.n	8007972 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	429a      	cmp	r2, r3
 800794e:	d20b      	bcs.n	8007968 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	1ad2      	subs	r2, r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff ff9b 	bl	8007898 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]
 8007966:	e004      	b.n	8007972 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800796e:	2301      	movs	r3, #1
 8007970:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007972:	f7fe fbd7 	bl	8006124 <vPortExitCritical>

	return xReturn;
 8007976:	69fb      	ldr	r3, [r7, #28]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	24004a5c 	.word	0x24004a5c
 8007984:	24004a70 	.word	0x24004a70

08007988 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800798c:	4b03      	ldr	r3, [pc, #12]	; (800799c <vTaskMissedYield+0x14>)
 800798e:	2201      	movs	r2, #1
 8007990:	601a      	str	r2, [r3, #0]
}
 8007992:	bf00      	nop
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	24004a6c 	.word	0x24004a6c

080079a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079a8:	f000 f852 	bl	8007a50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079ac:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <prvIdleTask+0x28>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d9f9      	bls.n	80079a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <prvIdleTask+0x2c>)
 80079b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079c4:	e7f0      	b.n	80079a8 <prvIdleTask+0x8>
 80079c6:	bf00      	nop
 80079c8:	24004588 	.word	0x24004588
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079d6:	2300      	movs	r3, #0
 80079d8:	607b      	str	r3, [r7, #4]
 80079da:	e00c      	b.n	80079f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4a12      	ldr	r2, [pc, #72]	; (8007a30 <prvInitialiseTaskLists+0x60>)
 80079e8:	4413      	add	r3, r2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe f988 	bl	8005d00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3301      	adds	r3, #1
 80079f4:	607b      	str	r3, [r7, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b37      	cmp	r3, #55	; 0x37
 80079fa:	d9ef      	bls.n	80079dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079fc:	480d      	ldr	r0, [pc, #52]	; (8007a34 <prvInitialiseTaskLists+0x64>)
 80079fe:	f7fe f97f 	bl	8005d00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a02:	480d      	ldr	r0, [pc, #52]	; (8007a38 <prvInitialiseTaskLists+0x68>)
 8007a04:	f7fe f97c 	bl	8005d00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a08:	480c      	ldr	r0, [pc, #48]	; (8007a3c <prvInitialiseTaskLists+0x6c>)
 8007a0a:	f7fe f979 	bl	8005d00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a0e:	480c      	ldr	r0, [pc, #48]	; (8007a40 <prvInitialiseTaskLists+0x70>)
 8007a10:	f7fe f976 	bl	8005d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a14:	480b      	ldr	r0, [pc, #44]	; (8007a44 <prvInitialiseTaskLists+0x74>)
 8007a16:	f7fe f973 	bl	8005d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a1a:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <prvInitialiseTaskLists+0x78>)
 8007a1c:	4a05      	ldr	r2, [pc, #20]	; (8007a34 <prvInitialiseTaskLists+0x64>)
 8007a1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a20:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <prvInitialiseTaskLists+0x7c>)
 8007a22:	4a05      	ldr	r2, [pc, #20]	; (8007a38 <prvInitialiseTaskLists+0x68>)
 8007a24:	601a      	str	r2, [r3, #0]
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	24004588 	.word	0x24004588
 8007a34:	240049e8 	.word	0x240049e8
 8007a38:	240049fc 	.word	0x240049fc
 8007a3c:	24004a18 	.word	0x24004a18
 8007a40:	24004a2c 	.word	0x24004a2c
 8007a44:	24004a44 	.word	0x24004a44
 8007a48:	24004a10 	.word	0x24004a10
 8007a4c:	24004a14 	.word	0x24004a14

08007a50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a56:	e019      	b.n	8007a8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a58:	f7fe fb34 	bl	80060c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5c:	4b10      	ldr	r3, [pc, #64]	; (8007aa0 <prvCheckTasksWaitingTermination+0x50>)
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3304      	adds	r3, #4
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe f9d3 	bl	8005e14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a6e:	4b0d      	ldr	r3, [pc, #52]	; (8007aa4 <prvCheckTasksWaitingTermination+0x54>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	4a0b      	ldr	r2, [pc, #44]	; (8007aa4 <prvCheckTasksWaitingTermination+0x54>)
 8007a76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a78:	4b0b      	ldr	r3, [pc, #44]	; (8007aa8 <prvCheckTasksWaitingTermination+0x58>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	4a0a      	ldr	r2, [pc, #40]	; (8007aa8 <prvCheckTasksWaitingTermination+0x58>)
 8007a80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a82:	f7fe fb4f 	bl	8006124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f810 	bl	8007aac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <prvCheckTasksWaitingTermination+0x58>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e1      	bne.n	8007a58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	24004a2c 	.word	0x24004a2c
 8007aa4:	24004a58 	.word	0x24004a58
 8007aa8:	24004a40 	.word	0x24004a40

08007aac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3354      	adds	r3, #84	; 0x54
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fd0d 	bl	80084d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d108      	bne.n	8007ada <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fd fff9 	bl	8005ac4 <vPortFree>
				vPortFree( pxTCB );
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7fd fff6 	bl	8005ac4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ad8:	e018      	b.n	8007b0c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d103      	bne.n	8007aec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7fd ffed 	bl	8005ac4 <vPortFree>
	}
 8007aea:	e00f      	b.n	8007b0c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d00a      	beq.n	8007b0c <prvDeleteTCB+0x60>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	60fb      	str	r3, [r7, #12]
}
 8007b08:	bf00      	nop
 8007b0a:	e7fe      	b.n	8007b0a <prvDeleteTCB+0x5e>
	}
 8007b0c:	bf00      	nop
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <prvResetNextTaskUnblockTime+0x38>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <prvResetNextTaskUnblockTime+0x3c>)
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b2c:	e008      	b.n	8007b40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b2e:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <prvResetNextTaskUnblockTime+0x38>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	4a04      	ldr	r2, [pc, #16]	; (8007b50 <prvResetNextTaskUnblockTime+0x3c>)
 8007b3e:	6013      	str	r3, [r2, #0]
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	24004a10 	.word	0x24004a10
 8007b50:	24004a78 	.word	0x24004a78

08007b54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b5a:	4b0b      	ldr	r3, [pc, #44]	; (8007b88 <xTaskGetSchedulerState+0x34>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d102      	bne.n	8007b68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b62:	2301      	movs	r3, #1
 8007b64:	607b      	str	r3, [r7, #4]
 8007b66:	e008      	b.n	8007b7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b68:	4b08      	ldr	r3, [pc, #32]	; (8007b8c <xTaskGetSchedulerState+0x38>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b70:	2302      	movs	r3, #2
 8007b72:	607b      	str	r3, [r7, #4]
 8007b74:	e001      	b.n	8007b7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b76:	2300      	movs	r3, #0
 8007b78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b7a:	687b      	ldr	r3, [r7, #4]
	}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	24004a64 	.word	0x24004a64
 8007b8c:	24004a80 	.word	0x24004a80

08007b90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d056      	beq.n	8007c54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ba6:	4b2e      	ldr	r3, [pc, #184]	; (8007c60 <xTaskPriorityDisinherit+0xd0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d00a      	beq.n	8007bc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	60fb      	str	r3, [r7, #12]
}
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	60bb      	str	r3, [r7, #8]
}
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be8:	1e5a      	subs	r2, r3, #1
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d02c      	beq.n	8007c54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d128      	bne.n	8007c54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3304      	adds	r3, #4
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe f904 	bl	8005e14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <xTaskPriorityDisinherit+0xd4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d903      	bls.n	8007c34 <xTaskPriorityDisinherit+0xa4>
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	4a0c      	ldr	r2, [pc, #48]	; (8007c64 <xTaskPriorityDisinherit+0xd4>)
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4a09      	ldr	r2, [pc, #36]	; (8007c68 <xTaskPriorityDisinherit+0xd8>)
 8007c42:	441a      	add	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7fe f885 	bl	8005d5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c50:	2301      	movs	r3, #1
 8007c52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c54:	697b      	ldr	r3, [r7, #20]
	}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	24004584 	.word	0x24004584
 8007c64:	24004a60 	.word	0x24004a60
 8007c68:	24004588 	.word	0x24004588

08007c6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c76:	4b21      	ldr	r3, [pc, #132]	; (8007cfc <prvAddCurrentTaskToDelayedList+0x90>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c7c:	4b20      	ldr	r3, [pc, #128]	; (8007d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fe f8c6 	bl	8005e14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c8e:	d10a      	bne.n	8007ca6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c96:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4819      	ldr	r0, [pc, #100]	; (8007d04 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ca0:	f7fe f85b 	bl	8005d5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ca4:	e026      	b.n	8007cf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4413      	add	r3, r2
 8007cac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cae:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d209      	bcs.n	8007cd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cbe:	4b12      	ldr	r3, [pc, #72]	; (8007d08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4610      	mov	r0, r2
 8007ccc:	f7fe f869 	bl	8005da2 <vListInsert>
}
 8007cd0:	e010      	b.n	8007cf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cd2:	4b0e      	ldr	r3, [pc, #56]	; (8007d0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4610      	mov	r0, r2
 8007ce0:	f7fe f85f 	bl	8005da2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ce4:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d202      	bcs.n	8007cf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007cee:	4a08      	ldr	r2, [pc, #32]	; (8007d10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	6013      	str	r3, [r2, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	24004a5c 	.word	0x24004a5c
 8007d00:	24004584 	.word	0x24004584
 8007d04:	24004a44 	.word	0x24004a44
 8007d08:	24004a14 	.word	0x24004a14
 8007d0c:	24004a10 	.word	0x24004a10
 8007d10:	24004a78 	.word	0x24004a78

08007d14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b08a      	sub	sp, #40	; 0x28
 8007d18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d1e:	f000 fb07 	bl	8008330 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <xTimerCreateTimerTask+0x80>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d021      	beq.n	8007d6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d32:	1d3a      	adds	r2, r7, #4
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	f107 030c 	add.w	r3, r7, #12
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fd fddb 	bl	80058f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	9202      	str	r2, [sp, #8]
 8007d4a:	9301      	str	r3, [sp, #4]
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	2300      	movs	r3, #0
 8007d52:	460a      	mov	r2, r1
 8007d54:	4910      	ldr	r1, [pc, #64]	; (8007d98 <xTimerCreateTimerTask+0x84>)
 8007d56:	4811      	ldr	r0, [pc, #68]	; (8007d9c <xTimerCreateTimerTask+0x88>)
 8007d58:	f7ff f8b4 	bl	8006ec4 <xTaskCreateStatic>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4a10      	ldr	r2, [pc, #64]	; (8007da0 <xTimerCreateTimerTask+0x8c>)
 8007d60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d62:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <xTimerCreateTimerTask+0x8c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	613b      	str	r3, [r7, #16]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d8a:	697b      	ldr	r3, [r7, #20]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	24004ab4 	.word	0x24004ab4
 8007d98:	080085ec 	.word	0x080085ec
 8007d9c:	08007ed9 	.word	0x08007ed9
 8007da0:	24004ab8 	.word	0x24004ab8

08007da4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	623b      	str	r3, [r7, #32]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007dd2:	4b1a      	ldr	r3, [pc, #104]	; (8007e3c <xTimerGenericCommand+0x98>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d02a      	beq.n	8007e30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b05      	cmp	r3, #5
 8007dea:	dc18      	bgt.n	8007e1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007dec:	f7ff feb2 	bl	8007b54 <xTaskGetSchedulerState>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d109      	bne.n	8007e0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007df6:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <xTimerGenericCommand+0x98>)
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	f107 0110 	add.w	r1, r7, #16
 8007dfe:	2300      	movs	r3, #0
 8007e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e02:	f7fe fc29 	bl	8006658 <xQueueGenericSend>
 8007e06:	6278      	str	r0, [r7, #36]	; 0x24
 8007e08:	e012      	b.n	8007e30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e0a:	4b0c      	ldr	r3, [pc, #48]	; (8007e3c <xTimerGenericCommand+0x98>)
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	f107 0110 	add.w	r1, r7, #16
 8007e12:	2300      	movs	r3, #0
 8007e14:	2200      	movs	r2, #0
 8007e16:	f7fe fc1f 	bl	8006658 <xQueueGenericSend>
 8007e1a:	6278      	str	r0, [r7, #36]	; 0x24
 8007e1c:	e008      	b.n	8007e30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e1e:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <xTimerGenericCommand+0x98>)
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	f107 0110 	add.w	r1, r7, #16
 8007e26:	2300      	movs	r3, #0
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	f7fe fd13 	bl	8006854 <xQueueGenericSendFromISR>
 8007e2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3728      	adds	r7, #40	; 0x28
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	24004ab4 	.word	0x24004ab4

08007e40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af02      	add	r7, sp, #8
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e4a:	4b22      	ldr	r3, [pc, #136]	; (8007ed4 <prvProcessExpiredTimer+0x94>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fd ffdb 	bl	8005e14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d022      	beq.n	8007eb2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	699a      	ldr	r2, [r3, #24]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	18d1      	adds	r1, r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	6978      	ldr	r0, [r7, #20]
 8007e7a:	f000 f8d1 	bl	8008020 <prvInsertTimerInActiveList>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d01f      	beq.n	8007ec4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e84:	2300      	movs	r3, #0
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	2300      	movs	r3, #0
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	6978      	ldr	r0, [r7, #20]
 8007e90:	f7ff ff88 	bl	8007da4 <xTimerGenericCommand>
 8007e94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d113      	bne.n	8007ec4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	60fb      	str	r3, [r7, #12]
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb8:	f023 0301 	bic.w	r3, r3, #1
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	6978      	ldr	r0, [r7, #20]
 8007eca:	4798      	blx	r3
}
 8007ecc:	bf00      	nop
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	24004aac 	.word	0x24004aac

08007ed8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ee0:	f107 0308 	add.w	r3, r7, #8
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 f857 	bl	8007f98 <prvGetNextExpireTime>
 8007eea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 f803 	bl	8007efc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ef6:	f000 f8d5 	bl	80080a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007efa:	e7f1      	b.n	8007ee0 <prvTimerTask+0x8>

08007efc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f06:	f7ff fa39 	bl	800737c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f0a:	f107 0308 	add.w	r3, r7, #8
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f866 	bl	8007fe0 <prvSampleTimeNow>
 8007f14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d130      	bne.n	8007f7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10a      	bne.n	8007f38 <prvProcessTimerOrBlockTask+0x3c>
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d806      	bhi.n	8007f38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f2a:	f7ff fa35 	bl	8007398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f2e:	68f9      	ldr	r1, [r7, #12]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff ff85 	bl	8007e40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f36:	e024      	b.n	8007f82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d008      	beq.n	8007f50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f3e:	4b13      	ldr	r3, [pc, #76]	; (8007f8c <prvProcessTimerOrBlockTask+0x90>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <prvProcessTimerOrBlockTask+0x50>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <prvProcessTimerOrBlockTask+0x52>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f50:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <prvProcessTimerOrBlockTask+0x94>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f7fe ff7d 	bl	8006e5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f62:	f7ff fa19 	bl	8007398 <xTaskResumeAll>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f6c:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <prvProcessTimerOrBlockTask+0x98>)
 8007f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	f3bf 8f6f 	isb	sy
}
 8007f7c:	e001      	b.n	8007f82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f7e:	f7ff fa0b 	bl	8007398 <xTaskResumeAll>
}
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	24004ab0 	.word	0x24004ab0
 8007f90:	24004ab4 	.word	0x24004ab4
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fa0:	4b0e      	ldr	r3, [pc, #56]	; (8007fdc <prvGetNextExpireTime+0x44>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <prvGetNextExpireTime+0x16>
 8007faa:	2201      	movs	r2, #1
 8007fac:	e000      	b.n	8007fb0 <prvGetNextExpireTime+0x18>
 8007fae:	2200      	movs	r2, #0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d105      	bne.n	8007fc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fbc:	4b07      	ldr	r3, [pc, #28]	; (8007fdc <prvGetNextExpireTime+0x44>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	e001      	b.n	8007fcc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	24004aac 	.word	0x24004aac

08007fe0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fe8:	f7ff fa74 	bl	80074d4 <xTaskGetTickCount>
 8007fec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fee:	4b0b      	ldr	r3, [pc, #44]	; (800801c <prvSampleTimeNow+0x3c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d205      	bcs.n	8008004 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ff8:	f000 f936 	bl	8008268 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	e002      	b.n	800800a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800800a:	4a04      	ldr	r2, [pc, #16]	; (800801c <prvSampleTimeNow+0x3c>)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008010:	68fb      	ldr	r3, [r7, #12]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	24004abc 	.word	0x24004abc

08008020 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	429a      	cmp	r2, r3
 8008044:	d812      	bhi.n	800806c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	1ad2      	subs	r2, r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	429a      	cmp	r2, r3
 8008052:	d302      	bcc.n	800805a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008054:	2301      	movs	r3, #1
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e01b      	b.n	8008092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800805a:	4b10      	ldr	r3, [pc, #64]	; (800809c <prvInsertTimerInActiveList+0x7c>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3304      	adds	r3, #4
 8008062:	4619      	mov	r1, r3
 8008064:	4610      	mov	r0, r2
 8008066:	f7fd fe9c 	bl	8005da2 <vListInsert>
 800806a:	e012      	b.n	8008092 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d206      	bcs.n	8008082 <prvInsertTimerInActiveList+0x62>
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	429a      	cmp	r2, r3
 800807a:	d302      	bcc.n	8008082 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	e007      	b.n	8008092 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008082:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <prvInsertTimerInActiveList+0x80>)
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3304      	adds	r3, #4
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7fd fe88 	bl	8005da2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008092:	697b      	ldr	r3, [r7, #20]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	24004ab0 	.word	0x24004ab0
 80080a0:	24004aac 	.word	0x24004aac

080080a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08e      	sub	sp, #56	; 0x38
 80080a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080aa:	e0ca      	b.n	8008242 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	da18      	bge.n	80080e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080b2:	1d3b      	adds	r3, r7, #4
 80080b4:	3304      	adds	r3, #4
 80080b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	61fb      	str	r3, [r7, #28]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080da:	6850      	ldr	r0, [r2, #4]
 80080dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080de:	6892      	ldr	r2, [r2, #8]
 80080e0:	4611      	mov	r1, r2
 80080e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f2c0 80aa 	blt.w	8008240 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	3304      	adds	r3, #4
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fd fe89 	bl	8005e14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008102:	463b      	mov	r3, r7
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff ff6b 	bl	8007fe0 <prvSampleTimeNow>
 800810a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b09      	cmp	r3, #9
 8008110:	f200 8097 	bhi.w	8008242 <prvProcessReceivedCommands+0x19e>
 8008114:	a201      	add	r2, pc, #4	; (adr r2, 800811c <prvProcessReceivedCommands+0x78>)
 8008116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811a:	bf00      	nop
 800811c:	08008145 	.word	0x08008145
 8008120:	08008145 	.word	0x08008145
 8008124:	08008145 	.word	0x08008145
 8008128:	080081b9 	.word	0x080081b9
 800812c:	080081cd 	.word	0x080081cd
 8008130:	08008217 	.word	0x08008217
 8008134:	08008145 	.word	0x08008145
 8008138:	08008145 	.word	0x08008145
 800813c:	080081b9 	.word	0x080081b9
 8008140:	080081cd 	.word	0x080081cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800814a:	f043 0301 	orr.w	r3, r3, #1
 800814e:	b2da      	uxtb	r2, r3
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	18d1      	adds	r1, r2, r3
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008164:	f7ff ff5c 	bl	8008020 <prvInsertTimerInActiveList>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d069      	beq.n	8008242 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008174:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d05e      	beq.n	8008242 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	441a      	add	r2, r3
 800818c:	2300      	movs	r3, #0
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	2300      	movs	r3, #0
 8008192:	2100      	movs	r1, #0
 8008194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008196:	f7ff fe05 	bl	8007da4 <xTimerGenericCommand>
 800819a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d14f      	bne.n	8008242 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	61bb      	str	r3, [r7, #24]
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081be:	f023 0301 	bic.w	r3, r3, #1
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80081ca:	e03a      	b.n	8008242 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081d2:	f043 0301 	orr.w	r3, r3, #1
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	617b      	str	r3, [r7, #20]
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	18d1      	adds	r1, r2, r3
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800820e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008210:	f7ff ff06 	bl	8008020 <prvInsertTimerInActiveList>
					break;
 8008214:	e015      	b.n	8008242 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d103      	bne.n	800822c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008226:	f7fd fc4d 	bl	8005ac4 <vPortFree>
 800822a:	e00a      	b.n	8008242 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008232:	f023 0301 	bic.w	r3, r3, #1
 8008236:	b2da      	uxtb	r2, r3
 8008238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800823e:	e000      	b.n	8008242 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008240:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008242:	4b08      	ldr	r3, [pc, #32]	; (8008264 <prvProcessReceivedCommands+0x1c0>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	1d39      	adds	r1, r7, #4
 8008248:	2200      	movs	r2, #0
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe fb9e 	bl	800698c <xQueueReceive>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	f47f af2a 	bne.w	80080ac <prvProcessReceivedCommands+0x8>
	}
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	3730      	adds	r7, #48	; 0x30
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	24004ab4 	.word	0x24004ab4

08008268 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800826e:	e048      	b.n	8008302 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008270:	4b2d      	ldr	r3, [pc, #180]	; (8008328 <prvSwitchTimerLists+0xc0>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800827a:	4b2b      	ldr	r3, [pc, #172]	; (8008328 <prvSwitchTimerLists+0xc0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3304      	adds	r3, #4
 8008288:	4618      	mov	r0, r3
 800828a:	f7fd fdc3 	bl	8005e14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d02e      	beq.n	8008302 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4413      	add	r3, r2
 80082ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d90e      	bls.n	80082d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082c2:	4b19      	ldr	r3, [pc, #100]	; (8008328 <prvSwitchTimerLists+0xc0>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3304      	adds	r3, #4
 80082ca:	4619      	mov	r1, r3
 80082cc:	4610      	mov	r0, r2
 80082ce:	f7fd fd68 	bl	8005da2 <vListInsert>
 80082d2:	e016      	b.n	8008302 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082d4:	2300      	movs	r3, #0
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	2300      	movs	r3, #0
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	2100      	movs	r1, #0
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff fd60 	bl	8007da4 <xTimerGenericCommand>
 80082e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	603b      	str	r3, [r7, #0]
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <prvSwitchTimerLists+0xc0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1b1      	bne.n	8008270 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800830c:	4b06      	ldr	r3, [pc, #24]	; (8008328 <prvSwitchTimerLists+0xc0>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008312:	4b06      	ldr	r3, [pc, #24]	; (800832c <prvSwitchTimerLists+0xc4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a04      	ldr	r2, [pc, #16]	; (8008328 <prvSwitchTimerLists+0xc0>)
 8008318:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800831a:	4a04      	ldr	r2, [pc, #16]	; (800832c <prvSwitchTimerLists+0xc4>)
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	6013      	str	r3, [r2, #0]
}
 8008320:	bf00      	nop
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	24004aac 	.word	0x24004aac
 800832c:	24004ab0 	.word	0x24004ab0

08008330 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008336:	f7fd fec5 	bl	80060c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800833a:	4b15      	ldr	r3, [pc, #84]	; (8008390 <prvCheckForValidListAndQueue+0x60>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d120      	bne.n	8008384 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008342:	4814      	ldr	r0, [pc, #80]	; (8008394 <prvCheckForValidListAndQueue+0x64>)
 8008344:	f7fd fcdc 	bl	8005d00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008348:	4813      	ldr	r0, [pc, #76]	; (8008398 <prvCheckForValidListAndQueue+0x68>)
 800834a:	f7fd fcd9 	bl	8005d00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800834e:	4b13      	ldr	r3, [pc, #76]	; (800839c <prvCheckForValidListAndQueue+0x6c>)
 8008350:	4a10      	ldr	r2, [pc, #64]	; (8008394 <prvCheckForValidListAndQueue+0x64>)
 8008352:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008354:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <prvCheckForValidListAndQueue+0x70>)
 8008356:	4a10      	ldr	r2, [pc, #64]	; (8008398 <prvCheckForValidListAndQueue+0x68>)
 8008358:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800835a:	2300      	movs	r3, #0
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <prvCheckForValidListAndQueue+0x74>)
 8008360:	4a11      	ldr	r2, [pc, #68]	; (80083a8 <prvCheckForValidListAndQueue+0x78>)
 8008362:	2110      	movs	r1, #16
 8008364:	200a      	movs	r0, #10
 8008366:	f7fe f837 	bl	80063d8 <xQueueGenericCreateStatic>
 800836a:	4603      	mov	r3, r0
 800836c:	4a08      	ldr	r2, [pc, #32]	; (8008390 <prvCheckForValidListAndQueue+0x60>)
 800836e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008370:	4b07      	ldr	r3, [pc, #28]	; (8008390 <prvCheckForValidListAndQueue+0x60>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008378:	4b05      	ldr	r3, [pc, #20]	; (8008390 <prvCheckForValidListAndQueue+0x60>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	490b      	ldr	r1, [pc, #44]	; (80083ac <prvCheckForValidListAndQueue+0x7c>)
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe fd18 	bl	8006db4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008384:	f7fd fece 	bl	8006124 <vPortExitCritical>
}
 8008388:	bf00      	nop
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	24004ab4 	.word	0x24004ab4
 8008394:	24004a84 	.word	0x24004a84
 8008398:	24004a98 	.word	0x24004a98
 800839c:	24004aac 	.word	0x24004aac
 80083a0:	24004ab0 	.word	0x24004ab0
 80083a4:	24004b60 	.word	0x24004b60
 80083a8:	24004ac0 	.word	0x24004ac0
 80083ac:	080085f4 	.word	0x080085f4

080083b0 <__libc_init_array>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	4d0d      	ldr	r5, [pc, #52]	; (80083e8 <__libc_init_array+0x38>)
 80083b4:	4c0d      	ldr	r4, [pc, #52]	; (80083ec <__libc_init_array+0x3c>)
 80083b6:	1b64      	subs	r4, r4, r5
 80083b8:	10a4      	asrs	r4, r4, #2
 80083ba:	2600      	movs	r6, #0
 80083bc:	42a6      	cmp	r6, r4
 80083be:	d109      	bne.n	80083d4 <__libc_init_array+0x24>
 80083c0:	4d0b      	ldr	r5, [pc, #44]	; (80083f0 <__libc_init_array+0x40>)
 80083c2:	4c0c      	ldr	r4, [pc, #48]	; (80083f4 <__libc_init_array+0x44>)
 80083c4:	f000 f8f0 	bl	80085a8 <_init>
 80083c8:	1b64      	subs	r4, r4, r5
 80083ca:	10a4      	asrs	r4, r4, #2
 80083cc:	2600      	movs	r6, #0
 80083ce:	42a6      	cmp	r6, r4
 80083d0:	d105      	bne.n	80083de <__libc_init_array+0x2e>
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d8:	4798      	blx	r3
 80083da:	3601      	adds	r6, #1
 80083dc:	e7ee      	b.n	80083bc <__libc_init_array+0xc>
 80083de:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e2:	4798      	blx	r3
 80083e4:	3601      	adds	r6, #1
 80083e6:	e7f2      	b.n	80083ce <__libc_init_array+0x1e>
 80083e8:	08008704 	.word	0x08008704
 80083ec:	08008704 	.word	0x08008704
 80083f0:	08008704 	.word	0x08008704
 80083f4:	08008708 	.word	0x08008708

080083f8 <memcpy>:
 80083f8:	440a      	add	r2, r1
 80083fa:	4291      	cmp	r1, r2
 80083fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008400:	d100      	bne.n	8008404 <memcpy+0xc>
 8008402:	4770      	bx	lr
 8008404:	b510      	push	{r4, lr}
 8008406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800840a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800840e:	4291      	cmp	r1, r2
 8008410:	d1f9      	bne.n	8008406 <memcpy+0xe>
 8008412:	bd10      	pop	{r4, pc}

08008414 <memset>:
 8008414:	4402      	add	r2, r0
 8008416:	4603      	mov	r3, r0
 8008418:	4293      	cmp	r3, r2
 800841a:	d100      	bne.n	800841e <memset+0xa>
 800841c:	4770      	bx	lr
 800841e:	f803 1b01 	strb.w	r1, [r3], #1
 8008422:	e7f9      	b.n	8008418 <memset+0x4>

08008424 <_free_r>:
 8008424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008426:	2900      	cmp	r1, #0
 8008428:	d044      	beq.n	80084b4 <_free_r+0x90>
 800842a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800842e:	9001      	str	r0, [sp, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f1a1 0404 	sub.w	r4, r1, #4
 8008436:	bfb8      	it	lt
 8008438:	18e4      	addlt	r4, r4, r3
 800843a:	f000 f8a9 	bl	8008590 <__malloc_lock>
 800843e:	4a1e      	ldr	r2, [pc, #120]	; (80084b8 <_free_r+0x94>)
 8008440:	9801      	ldr	r0, [sp, #4]
 8008442:	6813      	ldr	r3, [r2, #0]
 8008444:	b933      	cbnz	r3, 8008454 <_free_r+0x30>
 8008446:	6063      	str	r3, [r4, #4]
 8008448:	6014      	str	r4, [r2, #0]
 800844a:	b003      	add	sp, #12
 800844c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008450:	f000 b8a4 	b.w	800859c <__malloc_unlock>
 8008454:	42a3      	cmp	r3, r4
 8008456:	d908      	bls.n	800846a <_free_r+0x46>
 8008458:	6825      	ldr	r5, [r4, #0]
 800845a:	1961      	adds	r1, r4, r5
 800845c:	428b      	cmp	r3, r1
 800845e:	bf01      	itttt	eq
 8008460:	6819      	ldreq	r1, [r3, #0]
 8008462:	685b      	ldreq	r3, [r3, #4]
 8008464:	1949      	addeq	r1, r1, r5
 8008466:	6021      	streq	r1, [r4, #0]
 8008468:	e7ed      	b.n	8008446 <_free_r+0x22>
 800846a:	461a      	mov	r2, r3
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	b10b      	cbz	r3, 8008474 <_free_r+0x50>
 8008470:	42a3      	cmp	r3, r4
 8008472:	d9fa      	bls.n	800846a <_free_r+0x46>
 8008474:	6811      	ldr	r1, [r2, #0]
 8008476:	1855      	adds	r5, r2, r1
 8008478:	42a5      	cmp	r5, r4
 800847a:	d10b      	bne.n	8008494 <_free_r+0x70>
 800847c:	6824      	ldr	r4, [r4, #0]
 800847e:	4421      	add	r1, r4
 8008480:	1854      	adds	r4, r2, r1
 8008482:	42a3      	cmp	r3, r4
 8008484:	6011      	str	r1, [r2, #0]
 8008486:	d1e0      	bne.n	800844a <_free_r+0x26>
 8008488:	681c      	ldr	r4, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	6053      	str	r3, [r2, #4]
 800848e:	4421      	add	r1, r4
 8008490:	6011      	str	r1, [r2, #0]
 8008492:	e7da      	b.n	800844a <_free_r+0x26>
 8008494:	d902      	bls.n	800849c <_free_r+0x78>
 8008496:	230c      	movs	r3, #12
 8008498:	6003      	str	r3, [r0, #0]
 800849a:	e7d6      	b.n	800844a <_free_r+0x26>
 800849c:	6825      	ldr	r5, [r4, #0]
 800849e:	1961      	adds	r1, r4, r5
 80084a0:	428b      	cmp	r3, r1
 80084a2:	bf04      	itt	eq
 80084a4:	6819      	ldreq	r1, [r3, #0]
 80084a6:	685b      	ldreq	r3, [r3, #4]
 80084a8:	6063      	str	r3, [r4, #4]
 80084aa:	bf04      	itt	eq
 80084ac:	1949      	addeq	r1, r1, r5
 80084ae:	6021      	streq	r1, [r4, #0]
 80084b0:	6054      	str	r4, [r2, #4]
 80084b2:	e7ca      	b.n	800844a <_free_r+0x26>
 80084b4:	b003      	add	sp, #12
 80084b6:	bd30      	pop	{r4, r5, pc}
 80084b8:	24004bb0 	.word	0x24004bb0

080084bc <cleanup_glue>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	460c      	mov	r4, r1
 80084c0:	6809      	ldr	r1, [r1, #0]
 80084c2:	4605      	mov	r5, r0
 80084c4:	b109      	cbz	r1, 80084ca <cleanup_glue+0xe>
 80084c6:	f7ff fff9 	bl	80084bc <cleanup_glue>
 80084ca:	4621      	mov	r1, r4
 80084cc:	4628      	mov	r0, r5
 80084ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084d2:	f7ff bfa7 	b.w	8008424 <_free_r>
	...

080084d8 <_reclaim_reent>:
 80084d8:	4b2c      	ldr	r3, [pc, #176]	; (800858c <_reclaim_reent+0xb4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4283      	cmp	r3, r0
 80084de:	b570      	push	{r4, r5, r6, lr}
 80084e0:	4604      	mov	r4, r0
 80084e2:	d051      	beq.n	8008588 <_reclaim_reent+0xb0>
 80084e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80084e6:	b143      	cbz	r3, 80084fa <_reclaim_reent+0x22>
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d14a      	bne.n	8008584 <_reclaim_reent+0xac>
 80084ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	b111      	cbz	r1, 80084fa <_reclaim_reent+0x22>
 80084f4:	4620      	mov	r0, r4
 80084f6:	f7ff ff95 	bl	8008424 <_free_r>
 80084fa:	6961      	ldr	r1, [r4, #20]
 80084fc:	b111      	cbz	r1, 8008504 <_reclaim_reent+0x2c>
 80084fe:	4620      	mov	r0, r4
 8008500:	f7ff ff90 	bl	8008424 <_free_r>
 8008504:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008506:	b111      	cbz	r1, 800850e <_reclaim_reent+0x36>
 8008508:	4620      	mov	r0, r4
 800850a:	f7ff ff8b 	bl	8008424 <_free_r>
 800850e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008510:	b111      	cbz	r1, 8008518 <_reclaim_reent+0x40>
 8008512:	4620      	mov	r0, r4
 8008514:	f7ff ff86 	bl	8008424 <_free_r>
 8008518:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800851a:	b111      	cbz	r1, 8008522 <_reclaim_reent+0x4a>
 800851c:	4620      	mov	r0, r4
 800851e:	f7ff ff81 	bl	8008424 <_free_r>
 8008522:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008524:	b111      	cbz	r1, 800852c <_reclaim_reent+0x54>
 8008526:	4620      	mov	r0, r4
 8008528:	f7ff ff7c 	bl	8008424 <_free_r>
 800852c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800852e:	b111      	cbz	r1, 8008536 <_reclaim_reent+0x5e>
 8008530:	4620      	mov	r0, r4
 8008532:	f7ff ff77 	bl	8008424 <_free_r>
 8008536:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008538:	b111      	cbz	r1, 8008540 <_reclaim_reent+0x68>
 800853a:	4620      	mov	r0, r4
 800853c:	f7ff ff72 	bl	8008424 <_free_r>
 8008540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008542:	b111      	cbz	r1, 800854a <_reclaim_reent+0x72>
 8008544:	4620      	mov	r0, r4
 8008546:	f7ff ff6d 	bl	8008424 <_free_r>
 800854a:	69a3      	ldr	r3, [r4, #24]
 800854c:	b1e3      	cbz	r3, 8008588 <_reclaim_reent+0xb0>
 800854e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008550:	4620      	mov	r0, r4
 8008552:	4798      	blx	r3
 8008554:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008556:	b1b9      	cbz	r1, 8008588 <_reclaim_reent+0xb0>
 8008558:	4620      	mov	r0, r4
 800855a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800855e:	f7ff bfad 	b.w	80084bc <cleanup_glue>
 8008562:	5949      	ldr	r1, [r1, r5]
 8008564:	b941      	cbnz	r1, 8008578 <_reclaim_reent+0xa0>
 8008566:	3504      	adds	r5, #4
 8008568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800856a:	2d80      	cmp	r5, #128	; 0x80
 800856c:	68d9      	ldr	r1, [r3, #12]
 800856e:	d1f8      	bne.n	8008562 <_reclaim_reent+0x8a>
 8008570:	4620      	mov	r0, r4
 8008572:	f7ff ff57 	bl	8008424 <_free_r>
 8008576:	e7ba      	b.n	80084ee <_reclaim_reent+0x16>
 8008578:	680e      	ldr	r6, [r1, #0]
 800857a:	4620      	mov	r0, r4
 800857c:	f7ff ff52 	bl	8008424 <_free_r>
 8008580:	4631      	mov	r1, r6
 8008582:	e7ef      	b.n	8008564 <_reclaim_reent+0x8c>
 8008584:	2500      	movs	r5, #0
 8008586:	e7ef      	b.n	8008568 <_reclaim_reent+0x90>
 8008588:	bd70      	pop	{r4, r5, r6, pc}
 800858a:	bf00      	nop
 800858c:	24000028 	.word	0x24000028

08008590 <__malloc_lock>:
 8008590:	4801      	ldr	r0, [pc, #4]	; (8008598 <__malloc_lock+0x8>)
 8008592:	f7f8 bc68 	b.w	8000e66 <__retarget_lock_acquire_recursive>
 8008596:	bf00      	nop
 8008598:	24000190 	.word	0x24000190

0800859c <__malloc_unlock>:
 800859c:	4801      	ldr	r0, [pc, #4]	; (80085a4 <__malloc_unlock+0x8>)
 800859e:	f7f8 bc76 	b.w	8000e8e <__retarget_lock_release_recursive>
 80085a2:	bf00      	nop
 80085a4:	24000190 	.word	0x24000190

080085a8 <_init>:
 80085a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085aa:	bf00      	nop
 80085ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ae:	bc08      	pop	{r3}
 80085b0:	469e      	mov	lr, r3
 80085b2:	4770      	bx	lr

080085b4 <_fini>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr
